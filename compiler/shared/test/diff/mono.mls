
:NewDefs

:mono
fun f(x: Int) = if x then 42 else 1337
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, None, [], Lam(Tup(x: Var(Int)), If(IfThen(Var(x), IntLit(42), Some(IntLit(1337))))))
//│ Lifted:
//│ TypingUnit {
//│   fun f$1 = (x: Int,) => if (x) then 42 else 1337
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ fun f$1(x) =
//│   if x then #42 else #1337
//│ fun f: (x: Int) -> (1337 | 42)

:mono
fun foo() = 42
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), IntLit(42))))
//│ Lifted:
//│ TypingUnit {fun foo$1 = () => 42}
//│ Mono:
//│ 
//│ Defunc result: 
//│ fun foo$1() =
//│   #42
//│ fun foo: () -> 42

:mono
fun foo(x, #b) = if b then x else 1337
let a = foo(42, true)
let b = foo(23, false)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x), _: Var(b)), If(IfThen(Var(b), Var(x), Some(IntLit(1337))))), NuFunDef(Some(false), a, None, [], App(Var(foo), Tup(_: IntLit(42), _: Var(true)))), NuFunDef(Some(false), b, None, [], App(Var(foo), Tup(_: IntLit(23), _: Var(false)))))
//│ Lifted:
//│ TypingUnit {
//│   fun foo$3 = (x, #b,) => if (b) then x else 1337
//│   let a$1 = () => foo$3(42, true,)
//│   let b$2 = () => foo$3(23, false,)
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ fun b$2() =
//│   foo$3(#23, false)
//│ fun foo$3(x, #b) =
//│   if b then x else #1337
//│ fun a$1() =
//│   foo$3(#42, true)
//│ fun foo: forall 'a. ('a, Object) -> (1337 | 'a)
//│ let a: 1337 | 42
//│ let b: 1337 | 23
//│ a
//│   = 42
//│ b
//│   = 1337

:mono
let x = 42 + 1337
//│ Parsed:
//│ TypingUnit(NuFunDef(Some(false), x, None, [], App(Var(+), Tup(_: IntLit(42), _: IntLit(1337)))))
//│ Lifted:
//│ TypingUnit {let x$1 = () => +(42, 1337,)}
//│ Mono:
//│ 
//│ Defunc result: 
//│ fun x$1() =
//│   +(#42, #1337)
//│ let x: Int
//│ x
//│   = 1379

//:mono
//:e // FIXME: Mutable Parameters
//class Bar(#x)
//fun foo(#b) = b
//let a = foo(new Bar(1))
//let b = foo(new Bar(2))

//:mono
//:w // FIXME: Mutable Parameters
//class OneInt(#a){
//  fun inc() = a+1
//}
//(new OneInt(1)).inc()

//:mono
//:e // FIXME: Mutable Parameters
//class OneInt(#a){
//  fun add(x) = 
//    new OneInt(a+x.a)
//}
//(new OneInt(1)).add(new OneInt(2))

:mono
if true then 1 else 0
if 1+1 > 1 then 1 - 1 else 1*1
//│ Parsed:
//│ TypingUnit(If(IfThen(Var(true), IntLit(1), Some(IntLit(0))), If(IfThen(App(Var(>), Tup(_: App(Var(+), Tup(_: IntLit(1), _: IntLit(1))), _: IntLit(1))), App(Var(-), Tup(_: IntLit(1), _: IntLit(1))), Some(App(Var(*), Tup(_: IntLit(1), _: IntLit(1))))))
//│ Lifted:
//│ TypingUnit {
//│   Code(List(if (true) then 1 else 0))
//│   Code(List(if (>(+(1, 1,), 1,)) then -(1, 1,) else *(1, 1,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$0()
//│ main$$1()
//│ fun main$$0() =
//│   if true then #1 else #0
//│ fun main$$1() =
//│   if >(+(#1, #1), #1) then -(#1, #1) else *(#1, #1)
//│ Int
//│ res
//│     = 1
//│ res
//│     = 0

:mono
if(b) then 1 else 2
//│ Parsed:
//│ TypingUnit(If(IfThen(Bra(rcd = false, Var(b)), IntLit(1), Some(IntLit(2))))
//│ Lifted:
//│ TypingUnit {Code(List(if ('(' b ')') then 1 else 2))}
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$0()
//│ fun main$$0() =
//│   if b then #1 else #2
//│ 1 | 2
//│ res
//│     = 2

:mono
((f, g) => f(g))(f => f, true)
//│ Parsed:
//│ TypingUnit(App(Bra(rcd = false, Lam(Tup(_: Var(f), _: Var(g)), App(Var(f), Tup(_: Var(g))))), Tup(_: Lam(Tup(_: Var(f)), Var(f)), _: Var(true))))
//│ Lifted:
//│ TypingUnit {
//│   class Lambda2$1$1([]) {fun apply = (f, g,) => f(g,)}
//│   class Lambda1$2$2([]) {fun apply = (f,) => f}
//│   Code(List('(' {new Lambda2$1$1([]) {}} ')'({new Lambda1$2$2([]) {}}, true,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$2()
//│ fun apply$Lambda2$1$1(this, f, g) =
//│   f match {case obj: Lambda1$2$2 => apply$Lambda1$2$2(obj, g)}
//│ fun main$$2() =
//│   new Lambda2$1$1 ()  match {case obj: Lambda2$1$1 => apply$Lambda2$1$1(obj, new Lambda1$2$2 () , true)}
//│ fun apply$Lambda1$2$2(this, f) =
//│   f
//│ class Lambda2$1$1() {
//│ }
//│ class Lambda1$2$2() {
//│ }
//│ true
//│ res
//│     = true


:mono
(b => if b then true else false) (true)
//│ Parsed:
//│ TypingUnit(App(Bra(rcd = false, Lam(Tup(_: Var(b)), If(IfThen(Var(b), Var(true), Some(Var(false))))), Tup(_: Var(true))))
//│ Lifted:
//│ TypingUnit {
//│   class Lambda1$1$1([]) {fun apply = (b,) => if (b) then true else false}
//│   Code(List('(' {new Lambda1$1$1([]) {}} ')'(true,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$1()
//│ fun apply$Lambda1$1$1(this, b) =
//│   if b then true else false
//│ fun main$$1() =
//│   new Lambda1$1$1 ()  match {case obj: Lambda1$1$1 => apply$Lambda1$1$1(obj, true)}
//│ class Lambda1$1$1() {
//│ }
//│ Bool
//│ res
//│     = true

:mono
fun f(x) =
  if(x > 0) then x+1 else x - 1
f(2)+3
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(+), Tup(_: App(Var(f), Tup(_: IntLit(2))), _: IntLit(3))))
//│ Lifted:
//│ TypingUnit {
//│   fun f$1 = (x,) => {if ('(' >(x, 0,) ')') then +(x, 1,) else -(x, 1,)}
//│   Code(List(+(f$1(2,), 3,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$1()
//│ fun f$1(x) =
//│   if >(x, #0) then +(x, #1) else -(x, #1)
//│ fun main$$1() =
//│   +(f$1(#2), #3)
//│ fun f: Int -> Int
//│ Int
//│ res
//│     = 6

:mono
fun fac(n) = 
  if (n > 1) then fac(n - 1) * n else 1
fac(2)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, fac, None, [], Lam(Tup(_: Var(n)), Blk(...))), App(Var(fac), Tup(_: IntLit(2))))
//│ Lifted:
//│ TypingUnit {
//│   fun fac$1 = (n,) => {if ('(' >(n, 1,) ')') then *(fac$1(-(n, 1,),), n,) else 1}
//│   Code(List(fac$1(2,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$1()
//│ fun fac$1(n) =
//│   if >(n, #1) then *(fac$1(-(n, #1)), n) else #1
//│ fun main$$1() =
//│   fac$1(#2)
//│ fun fac: Int -> Int
//│ Int
//│ res
//│     = 2

:mono
class List(val l: List | Nil | undefined, val hasTail: Bool)  {}
class Nil(val l: List | Nil | undefined, val hasTail: Bool)  {}
fun count(lst) =
  if lst.hasTail then
    let l = lst.l
    if l is undefined then 1 else count(l)+1
  else 0
count(new List(new List(new Nil(undefined, false), true), true))
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, List, (), Tup(l: App(Var(|), Tup(_: App(Var(|), Tup(_: Var(List), _: Var(Nil))), _: UnitLit(true))), hasTail: Var(Bool)), (), None, None, TypingUnit()), NuTypeDef(class, Nil, (), Tup(l: App(Var(|), Tup(_: App(Var(|), Tup(_: Var(List), _: Var(Nil))), _: UnitLit(true))), hasTail: Var(Bool)), (), None, None, TypingUnit()), NuFunDef(None, count, None, [], Lam(Tup(_: Var(lst)), Blk(...))), App(Var(count), Tup(_: App(NuNew(Var(List)), Tup(_: App(NuNew(Var(List)), Tup(_: App(NuNew(Var(Nil)), Tup(_: UnitLit(true), _: Var(false))), _: Var(true))), _: Var(true))))))
//│ Lifted:
//│ TypingUnit {
//│   class List$1([val l: |(|(List, Nil,), undefined,), val hasTail: Bool,]) {}
//│   class Nil$2([val l: |(|(List, Nil,), undefined,), val hasTail: Bool,]) {}
//│   let l$2 = (lst,) => (lst).l
//│   fun count$1 = (lst,) => {if ((lst).hasTail) then {if (is(l, undefined,)) then 1 else +(count$1(l,), 1,)} else 0}
//│   Code(List(count$1(new List$1([new List$1([new Nil$2([undefined, false,]) {}, true,]) {}, true,]) {},)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$4()
//│ fun l$2(lst) =
//│   lst.l
//│ fun count$1(lst) =
//│   if lst.hasTail then if is(l, #()) then #1 else +(count$1(l), #1) else #0
//│ fun main$$4() =
//│   count$1(new List$1 (new List$1 (new Nil$2 (#(), false) , true) , true) )
//│ class Nil$2(l, hasTail) {
//│ }
//│ class List$1(l, hasTail) {
//│ }
//│ class List(l: List | Nil | (), hasTail: Bool)
//│ class Nil(l: List | Nil | (), hasTail: Bool)
//│ fun count: forall 'a. 'a -> Int
//│ Int
//│ where
//│   'a <: {hasTail: Object, l: Object & 'a & ~() | ()}
//│ res
//│     = 2

//:mono
//class Cons(e, tail){
//  fun gen() = new Cons(e, tail.gen())
//}
//class Nil(){
//  fun gen() = new Cons(0, this)
//}
//fun generate(x) = 
//  if x > 0 then new Cons(x, generate(x+1)) else new Nil()
//generate(10).gen()

:mono
class List(e: Int, tail: List | Nil) {
  fun map: (Int -> Int) -> List 
  fun map(f)= new List(f(e), tail.map(f))
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun map(f) = this
  fun count() = 0
}
fun add2(x) = x+2
(new List(1, new List(2, new Nil()))).map(x => x+1).map(x => add2(x))
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, List, (), Tup(e: Var(Int), tail: App(Var(|), Tup(_: Var(List), _: Var(Nil)))), (), None, None, TypingUnit(NuFunDef(None, map, None, [], PolyType(List(),Function(Tuple(List((None,Field(None,Function(Tuple(List((None,Field(None,TypeName(Int))))),TypeName(Int)))))),TypeName(List)))), NuFunDef(None, map, None, [], Lam(Tup(_: Var(f)), App(NuNew(Var(List)), Tup(_: App(Var(f), Tup(_: Var(e))), _: App(Sel(Var(tail), map), Tup(_: Var(f))))))), NuFunDef(None, count, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Int)))), NuFunDef(None, count, None, [], Lam(Tup(), App(Var(+), Tup(_: IntLit(1), _: App(Sel(Var(tail), count), Tup()))))))), NuTypeDef(class, Nil, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, map, None, [], Lam(Tup(_: Var(f)), Var(this))), NuFunDef(None, count, None, [], Lam(Tup(), IntLit(0))))), NuFunDef(None, add2, None, [], Lam(Tup(_: Var(x)), App(Var(+), Tup(_: Var(x), _: IntLit(2))))), App(Sel(App(Sel(Bra(rcd = false, App(NuNew(Var(List)), Tup(_: IntLit(1), _: App(NuNew(Var(List)), Tup(_: IntLit(2), _: App(NuNew(Var(Nil)), Tup())))))), map), Tup(_: Lam(Tup(_: Var(x)), App(Var(+), Tup(_: Var(x), _: IntLit(1)))))), map), Tup(_: Lam(Tup(_: Var(x)), App(Var(add2), Tup(_: Var(x)))))))
//│ Lifted:
//│ TypingUnit {
//│   class List$1([e: Int, tail: |(List, Nil,),]) {
//│     fun map = (Int -> Int) -> List$1
//│     fun map = (f,) => new List$1([f((this).e,), ((this).tail).map(f,),]) {}
//│     fun count = () -> Int
//│     fun count = () => +(1, ((this).tail).count(),)
//│   }
//│   class Nil$2([]) {fun map = (f,) => this; fun count = () => 0}
//│   class Lambda1$2$3([]) {fun apply = (x,) => +(x, 1,)}
//│   class Lambda1$3$4([]) {fun apply = (x,) => add2$1(x,)}
//│   fun add2$1 = (x,) => +(x, 2,)
//│   Code(List((('(' new List$1([1, new List$1([2, new Nil$2([]) {},]) {},]) {} ')').map({new Lambda1$2$3([]) {}},)).map({new Lambda1$3$4([]) {}},)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$5()
//│ fun map$List$1(this, f) =
//│   new List$1 (f match {case obj: Lambda1$2$3 => apply$Lambda1$2$3(obj, this.e); case obj: Lambda1$3$4 => apply$Lambda1$3$4(obj, this.e)}, this.tail match {case obj: List$1 => map$List$1(obj, f); case obj: Nil$2 => map$Nil$2(obj, f)}) 
//│ fun add2$1(x) =
//│   +(x, #2)
//│ fun main$$5() =
//│   new List$1 (#1, new List$1 (#2, new Nil$2 () ) )  match {case obj: List$1 => map$List$1(obj, new Lambda1$2$3 () )} match {case obj: List$1 => map$List$1(obj, new Lambda1$3$4 () )}
//│ fun apply$Lambda1$3$4(this, x) =
//│   add2$1(x)
//│ fun map$Nil$2(this, f) =
//│   this
//│ fun apply$Lambda1$2$3(this, x) =
//│   +(x, #1)
//│ class Lambda1$3$4() {
//│ }
//│ class Nil$2() {
//│ }
//│ class List$1(e, tail) {
//│ }
//│ class Lambda1$2$3() {
//│ }
//│ class List(e: Int, tail: List | Nil) {
//│   fun count: () -> Int
//│   fun map: (Int -> Int) -> List
//│ }
//│ class Nil() {
//│   fun count: () -> 0
//│   fun map: anything -> Nil
//│ }
//│ fun add2: Int -> Int
//│ List
//│ res
//│     = List {}

:mono
:AllowRuntimeErrors
class List(e: Int, tail: List | Nil) {
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
fun foo(x) = x.count()
fun generate(x) = 
  if x > 0 then new List(x, generate(x+1)) else new Nil()
foo(new List(1, new List(2, new Nil())))
foo(generate(1))
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, List, (), Tup(e: Var(Int), tail: App(Var(|), Tup(_: Var(List), _: Var(Nil)))), (), None, None, TypingUnit(NuFunDef(None, count, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Int)))), NuFunDef(None, count, None, [], Lam(Tup(), App(Var(+), Tup(_: IntLit(1), _: App(Sel(Var(tail), count), Tup()))))))), NuTypeDef(class, Nil, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, count, None, [], Lam(Tup(), IntLit(0))))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), App(Sel(Var(x), count), Tup()))), NuFunDef(None, generate, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup(_: App(NuNew(Var(List)), Tup(_: IntLit(1), _: App(NuNew(Var(List)), Tup(_: IntLit(2), _: App(NuNew(Var(Nil)), Tup()))))))), App(Var(foo), Tup(_: App(Var(generate), Tup(_: IntLit(1))))))
//│ Lifted:
//│ TypingUnit {
//│   class List$1([e: Int, tail: |(List, Nil,),]) {
//│     fun count = () -> Int
//│     fun count = () => +(1, ((this).tail).count(),)
//│   }
//│   class Nil$2([]) {fun count = () => 0}
//│   fun foo$1 = (x,) => (x).count()
//│   fun generate$2 = (x,) => {if (>(x, 0,)) then new List$1([x, generate$2(+(x, 1,),),]) {} else new Nil$2([]) {}}
//│   Code(List(foo$1(new List$1([1, new List$1([2, new Nil$2([]) {},]) {},]) {},)))
//│   Code(List(foo$1(generate$2(1,),)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$4()
//│ main$$5()
//│ fun foo$1(x) =
//│   x match {case obj: Nil$2 => count$Nil$2(obj); case obj: List$1 => count$List$1(obj)}
//│ fun count$Nil$2(this) =
//│   #0
//│ fun count$List$1(this) =
//│   +(#1, this.tail match {case obj: List$1 => count$List$1(obj); case obj: Nil$2 => count$Nil$2(obj)})
//│ fun generate$2(x) =
//│   if >(x, #0) then new List$1 (x, generate$2(+(x, #1)))  else new Nil$2 () 
//│ fun main$$5() =
//│   foo$1(generate$2(#1))
//│ fun main$$4() =
//│   foo$1(new List$1 (#1, new List$1 (#2, new Nil$2 () ) ) )
//│ class Nil$2() {
//│ }
//│ class List$1(e, tail) {
//│ }
//│ class List(e: Int, tail: List | Nil) {
//│   fun count: () -> Int
//│ }
//│ class Nil() {
//│   fun count: () -> 0
//│ }
//│ fun foo: forall 'a. {count: () -> 'a} -> 'a
//│ fun generate: Int -> (List | Nil)
//│ Int
//│ res
//│     = 2
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:mono
fun foo(x) = 
  (f => f(x))(z => z+1)
foo(2)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup(_: IntLit(2))))
//│ Lifted:
//│ TypingUnit {
//│   class Lambda1$2$1([x,]) {fun apply = (f,) => f((this).x,)}
//│   class Lambda1$3$2([]) {fun apply = (z,) => +(z, 1,)}
//│   fun foo$1 = (x,) => {'(' {new Lambda1$2$1([x,]) {}} ')'({new Lambda1$3$2([]) {}},)}
//│   Code(List(foo$1(2,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$3()
//│ fun apply$Lambda1$2$1(this, f) =
//│   f match {case obj: Lambda1$3$2 => apply$Lambda1$3$2(obj, this.x)}
//│ fun foo$1(x) =
//│   new Lambda1$2$1 (x)  match {case obj: Lambda1$2$1 => apply$Lambda1$2$1(obj, new Lambda1$3$2 () )}
//│ fun main$$3() =
//│   foo$1(#2)
//│ fun apply$Lambda1$3$2(this, z) =
//│   +(z, #1)
//│ class Lambda1$2$1(x) {
//│ }
//│ class Lambda1$3$2() {
//│ }
//│ fun foo: Int -> Int
//│ Int
//│ res
//│     = 3

:mono
fun f(x) =
  (y => f(x+y))(x+1)
f(1)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(f), Tup(_: IntLit(1))))
//│ Lifted:
//│ TypingUnit {
//│   class Lambda1$2$1([x,]) {fun apply = (y,) => f$1(+((this).x, y,),)}
//│   fun f$1 = (x,) => {'(' {new Lambda1$2$1([x,]) {}} ')'(+(x, 1,),)}
//│   Code(List(f$1(1,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$2()
//│ fun apply$Lambda1$2$1(this, y) =
//│   f$1(+(this.x, y))
//│ fun f$1(x) =
//│   new Lambda1$2$1 (x)  match {case obj: Lambda1$2$1 => apply$Lambda1$2$1(obj, +(x, #1))}
//│ fun main$$2() =
//│   f$1(#1)
//│ class Lambda1$2$1(x) {
//│ }
//│ fun f: Int -> nothing
//│ nothing
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


:mono
fun f(x) = f(x)
f(0)
f(1)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, None, [], Lam(Tup(_: Var(x)), App(Var(f), Tup(_: Var(x))))), App(Var(f), Tup(_: IntLit(0))), App(Var(f), Tup(_: IntLit(1))))
//│ Lifted:
//│ TypingUnit {
//│   fun f$1 = (x,) => f$1(x,)
//│   Code(List(f$1(0,)))
//│   Code(List(f$1(1,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$1()
//│ main$$2()
//│ fun f$1(x) =
//│   f$1(x)
//│ fun main$$2() =
//│   f$1(#1)
//│ fun main$$1() =
//│   f$1(#0)
//│ fun f: anything -> nothing
//│ nothing
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:mono
class Cons(e: 'A, tail: Cons | Nil) {
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
class Lambda(){
  fun apply(l) = 
    l.count()
}
class Lambda2(a: Int){
  fun apply(l) = 
    (new Cons(a, l)).count()
}
fun foo(x) = 
  x.apply(new Cons(1, new Nil())) + x.apply(new Nil())
foo(new Lambda())
foo(new Lambda2(2))
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Cons, (), Tup(e: Var('A), tail: App(Var(|), Tup(_: Var(Cons), _: Var(Nil)))), (), None, None, TypingUnit(NuFunDef(None, count, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Int)))), NuFunDef(None, count, None, [], Lam(Tup(), App(Var(+), Tup(_: IntLit(1), _: App(Sel(Var(tail), count), Tup()))))))), NuTypeDef(class, Nil, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, count, None, [], Lam(Tup(), IntLit(0))))), NuTypeDef(class, Lambda, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, apply, None, [], Lam(Tup(_: Var(l)), Blk(...))))), NuTypeDef(class, Lambda2, (), Tup(a: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, apply, None, [], Lam(Tup(_: Var(l)), Blk(...))))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup(_: App(NuNew(Var(Lambda)), Tup()))), App(Var(foo), Tup(_: App(NuNew(Var(Lambda2)), Tup(_: IntLit(2))))))
//│ Lifted:
//│ TypingUnit {
//│   class Cons$1([e: 'A, tail: |(Cons, Nil,),]) {
//│     fun count = () -> Int
//│     fun count = () => +(1, ((this).tail).count(),)
//│   }
//│   class Nil$2([]) {fun count = () => 0}
//│   class Lambda$3([]) {fun apply = (l,) => {(l).count()}}
//│   class Lambda2$4([a: Int,]) {
//│     fun apply = (l,) => {('(' new Cons$1([(this).a, l,]) {} ')').count()}
//│   }
//│   fun foo$1 = (x,) => {+((x).apply(new Cons$1([1, new Nil$2([]) {},]) {},), (x).apply(new Nil$2([]) {},),)}
//│   Code(List(foo$1(new Lambda$3([]) {},)))
//│   Code(List(foo$1(new Lambda2$4([2,]) {},)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$5()
//│ main$$6()
//│ fun count$Cons$1(this) =
//│   +(#1, this.tail match {case obj: Cons$1 => count$Cons$1(obj); case obj: Nil$2 => count$Nil$2(obj)})
//│ fun foo$1(x) =
//│   +(x match {case obj: Lambda2$4 => apply$Lambda2$4(obj, new Cons$1 (#1, new Nil$2 () ) ); case obj: Lambda$3 => apply$Lambda$3(obj, new Cons$1 (#1, new Nil$2 () ) )}, x match {case obj: Lambda2$4 => apply$Lambda2$4(obj, new Nil$2 () ); case obj: Lambda$3 => apply$Lambda$3(obj, new Nil$2 () )})
//│ fun apply$Lambda$3(this, l) =
//│   l match {case obj: Cons$1 => count$Cons$1(obj); case obj: Nil$2 => count$Nil$2(obj)}
//│ fun count$Nil$2(this) =
//│   #0
//│ fun apply$Lambda2$4(this, l) =
//│   new Cons$1 (this.a, l)  match {case obj: Cons$1 => count$Cons$1(obj)}
//│ fun main$$6() =
//│   foo$1(new Lambda2$4 (#2) )
//│ fun main$$5() =
//│   foo$1(new Lambda$3 () )
//│ class Nil$2() {
//│ }
//│ class Lambda2$4(a) {
//│ }
//│ class Cons$1(e, tail) {
//│ }
//│ class Lambda$3() {
//│ }
//│ class Cons(e: nothing, tail: Cons | Nil) {
//│   fun count: () -> Int
//│ }
//│ class Nil() {
//│   fun count: () -> 0
//│ }
//│ class Lambda() {
//│   fun apply: forall 'a. {count: () -> 'a} -> 'a
//│ }
//│ class Lambda2(a: Int) {
//│   fun apply: (Cons | Nil) -> Int
//│ }
//│ fun foo: {apply: (Cons | Nil) -> Int} -> Int
//│ Int
//│ res
//│     = 1
//│ res
//│     = 3

:mono
class Cons(e: Int, tail: Cons | Nil) {
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
fun foo(x) = 
  x(new Cons(1, new Nil())) + x(new Nil())
foo(l => l.count())
foo(l => (new Cons(2, l)).count())
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Cons, (), Tup(e: Var(Int), tail: App(Var(|), Tup(_: Var(Cons), _: Var(Nil)))), (), None, None, TypingUnit(NuFunDef(None, count, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Int)))), NuFunDef(None, count, None, [], Lam(Tup(), App(Var(+), Tup(_: IntLit(1), _: App(Sel(Var(tail), count), Tup()))))))), NuTypeDef(class, Nil, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, count, None, [], Lam(Tup(), IntLit(0))))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup(_: Lam(Tup(_: Var(l)), App(Sel(Var(l), count), Tup())))), App(Var(foo), Tup(_: Lam(Tup(_: Var(l)), App(Sel(Bra(rcd = false, App(NuNew(Var(Cons)), Tup(_: IntLit(2), _: Var(l)))), count), Tup())))))
//│ Lifted:
//│ TypingUnit {
//│   class Cons$1([e: Int, tail: |(Cons, Nil,),]) {
//│     fun count = () -> Int
//│     fun count = () => +(1, ((this).tail).count(),)
//│   }
//│   class Nil$2([]) {fun count = () => 0}
//│   class Lambda1$2$3([]) {fun apply = (l,) => (l).count()}
//│   class Lambda1$3$4([]) {
//│     fun apply = (l,) => ('(' new Cons$1([2, l,]) {} ')').count()
//│   }
//│   fun foo$1 = (x,) => {+(x(new Cons$1([1, new Nil$2([]) {},]) {},), x(new Nil$2([]) {},),)}
//│   Code(List(foo$1({new Lambda1$2$3([]) {}},)))
//│   Code(List(foo$1({new Lambda1$3$4([]) {}},)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$5()
//│ main$$6()
//│ fun count$Cons$1(this) =
//│   +(#1, this.tail match {case obj: Cons$1 => count$Cons$1(obj); case obj: Nil$2 => count$Nil$2(obj)})
//│ fun foo$1(x) =
//│   +(x match {case obj: Lambda1$3$4 => apply$Lambda1$3$4(obj, new Cons$1 (#1, new Nil$2 () ) ); case obj: Lambda1$2$3 => apply$Lambda1$2$3(obj, new Cons$1 (#1, new Nil$2 () ) )}, x match {case obj: Lambda1$3$4 => apply$Lambda1$3$4(obj, new Nil$2 () ); case obj: Lambda1$2$3 => apply$Lambda1$2$3(obj, new Nil$2 () )})
//│ fun count$Nil$2(this) =
//│   #0
//│ fun main$$6() =
//│   foo$1(new Lambda1$3$4 () )
//│ fun main$$5() =
//│   foo$1(new Lambda1$2$3 () )
//│ fun apply$Lambda1$3$4(this, l) =
//│   new Cons$1 (#2, l)  match {case obj: Cons$1 => count$Cons$1(obj)}
//│ fun apply$Lambda1$2$3(this, l) =
//│   l match {case obj: Cons$1 => count$Cons$1(obj); case obj: Nil$2 => count$Nil$2(obj)}
//│ class Lambda1$3$4() {
//│ }
//│ class Nil$2() {
//│ }
//│ class Cons$1(e, tail) {
//│ }
//│ class Lambda1$2$3() {
//│ }
//│ class Cons(e: Int, tail: Cons | Nil) {
//│   fun count: () -> Int
//│ }
//│ class Nil() {
//│   fun count: () -> 0
//│ }
//│ fun foo: ((Cons | Nil) -> Int) -> Int
//│ Int
//│ res
//│     = 1
//│ res
//│     = 3

:mono
class Exp() {
  virtual fun derive(x: Int): Exp
  virtual fun derive(x: Int) = Exp()
  virtual fun isEmpty(): Bool
  virtual fun isEmpty() = false
}
class E() extends Exp {
  fun derive(x) = 
    new E
  fun isEmpty() = 
    false
}
class Ep() extends Exp {
  fun derive(x) = 
    new E
  fun isEmpty() = 
    true
}
class Ch(i: Int) extends Exp {
  fun derive(x) = 
    if x == i then new Ep else new E
  fun isEmpty() = 
    false
}
class A(e1: Exp, e2: Exp) extends Exp {
  fun derive(x) = 
    new A(e1.derive(x), e2.derive(x))
  fun isEmpty() = 
    e1.isEmpty() || e2.isEmpty()
}
class C(e1: Exp, e2: Exp) extends Exp {
  fun derive(x) = 
    if e1.isEmpty() then new A(new C(e1.derive(x), e2), e2.derive(x)) else new C(e1.derive(x), e2)
  fun isEmpty() = 
    e1.isEmpty() && e2.isEmpty()
}
(new C(new Ch(1), new A(new Ch(2), new Ch(3)))).derive(0).isEmpty()
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Exp, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, derive, None, [], PolyType(List(),Function(Tuple(List((Some(x),Field(None,TypeName(Int))))),TypeName(Exp)))), NuFunDef(None, derive, None, [], Lam(Tup(x: Var(Int)), App(Var(Exp), Tup()))), NuFunDef(None, isEmpty, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Bool)))), NuFunDef(None, isEmpty, None, [], Lam(Tup(), Var(false))))), NuTypeDef(class, E, (), Tup(), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, None, [], Lam(Tup(), Blk(...))))), NuTypeDef(class, Ep, (), Tup(), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, None, [], Lam(Tup(), Blk(...))))), NuTypeDef(class, Ch, (), Tup(i: Var(Int)), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, None, [], Lam(Tup(), Blk(...))))), NuTypeDef(class, A, (), Tup(e1: Var(Exp), e2: Var(Exp)), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, None, [], Lam(Tup(), Blk(...))))), NuTypeDef(class, C, (), Tup(e1: Var(Exp), e2: Var(Exp)), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, None, [], Lam(Tup(), Blk(...))))), App(Sel(App(Sel(Bra(rcd = false, App(NuNew(Var(C)), Tup(_: App(NuNew(Var(Ch)), Tup(_: IntLit(1))), _: App(NuNew(Var(A)), Tup(_: App(NuNew(Var(Ch)), Tup(_: IntLit(2))), _: App(NuNew(Var(Ch)), Tup(_: IntLit(3)))))))), derive), Tup(_: IntLit(0))), isEmpty), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class Exp$1([]) {
//│     fun derive = (x: Int) -> Exp$1
//│     fun derive = (x: Int,) => Exp$1()
//│     fun isEmpty = () -> Bool
//│     fun isEmpty = () => false
//│   }
//│   class E$2([]): Exp$1() {
//│     fun derive = (x,) => {new E$2([]) {}}
//│     fun isEmpty = () => {false}
//│   }
//│   class Ep$3([]): Exp$1() {
//│     fun derive = (x,) => {new E$2([]) {}}
//│     fun isEmpty = () => {true}
//│   }
//│   class Ch$4([i: Int,]): Exp$1() {
//│     fun derive = (x,) => {if (==(x, (this).i,)) then new Ep$3([]) {} else new E$2([]) {}}
//│     fun isEmpty = () => {false}
//│   }
//│   class A$5([e1: Exp, e2: Exp,]): Exp$1() {
//│     fun derive = (x,) => {new A$5([((this).e1).derive(x,), ((this).e2).derive(x,),]) {}}
//│     fun isEmpty = () => {||(((this).e1).isEmpty(), ((this).e2).isEmpty(),)}
//│   }
//│   class C$6([e1: Exp, e2: Exp,]): Exp$1() {
//│     fun derive = (x,) => {if (((this).e1).isEmpty()) then new A$5([new C$6([((this).e1).derive(x,), (this).e2,]) {}, ((this).e2).derive(x,),]) {} else new C$6([((this).e1).derive(x,), (this).e2,]) {}}
//│     fun isEmpty = () => {&&(((this).e1).isEmpty(), ((this).e2).isEmpty(),)}
//│   }
//│   Code(List((('(' new C$6([new Ch$4([1,]) {}, new A$5([new Ch$4([2,]) {}, new Ch$4([3,]) {},]) {},]) {} ')').derive(0,)).isEmpty()))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$6()
//│ fun isEmpty$E$2(this) =
//│   false
//│ fun isEmpty$A$5(this) =
//│   ||(this.e1 match {case obj: Ch$4 => isEmpty$Ch$4(obj)}, this.e2 match {case obj: Ch$4 => isEmpty$Ch$4(obj)})
//│ fun isEmpty$Ch$4(this) =
//│   false
//│ fun derive$A$5(this, x) =
//│   new A$5 (this.e1 match {case obj: Ch$4 => derive$Ch$4(obj, x)}, this.e2 match {case obj: Ch$4 => derive$Ch$4(obj, x)}) 
//│ fun isEmpty$C$6(this) =
//│   &&(this.e1 match {case obj: Ep$3 => isEmpty$Ep$3(obj); case obj: E$2 => isEmpty$E$2(obj)}, this.e2 match {case obj: A$5 => isEmpty$A$5(obj)})
//│ fun derive$C$6(this, x) =
//│   if this.e1 match {case obj: Ch$4 => isEmpty$Ch$4(obj)} then new A$5 (new C$6 (this.e1 match {case obj: Ch$4 => derive$Ch$4(obj, x)}, this.e2) , this.e2 match {case obj: A$5 => derive$A$5(obj, x)})  else new C$6 (this.e1 match {case obj: Ch$4 => derive$Ch$4(obj, x)}, this.e2) 
//│ fun main$$6() =
//│   new C$6 (new Ch$4 (#1) , new A$5 (new Ch$4 (#2) , new Ch$4 (#3) ) )  match {case obj: C$6 => derive$C$6(obj, #0)} match {case obj: C$6 => isEmpty$C$6(obj)}
//│ fun derive$Ch$4(this, x) =
//│   if ==(x, this.i) then new Ep$3 ()  else new E$2 () 
//│ fun isEmpty$Ep$3(this) =
//│   true
//│ class A$5(e1, e2): Exp$1() {
//│ }
//│ class E$2(): Exp$1() {
//│ }
//│ class C$6(e1, e2): Exp$1() {
//│ }
//│ class Ch$4(i): Exp$1() {
//│ }
//│ class Ep$3(): Exp$1() {
//│ }
//│ class Exp$1() {
//│ }
//│ class Exp() {
//│   fun derive: (x: Int) -> Exp
//│   fun isEmpty: () -> Bool
//│ }
//│ class E() extends Exp {
//│   fun derive: anything -> E
//│   fun isEmpty: () -> false
//│ }
//│ class Ep() extends Exp {
//│   fun derive: anything -> E
//│   fun isEmpty: () -> true
//│ }
//│ class Ch(i: Int) extends Exp {
//│   fun derive: Num -> (E | Ep)
//│   fun isEmpty: () -> false
//│ }
//│ class A(e1: Exp, e2: Exp) extends Exp {
//│   fun derive: Int -> A
//│   fun isEmpty: () -> Bool
//│ }
//│ class C(e1: Exp, e2: Exp) extends Exp {
//│   fun derive: Int -> (A | C)
//│   fun isEmpty: () -> Bool
//│ }
//│ Bool
//│ res
//│     = false


:mono
val anyUnknown = false
class List(l: List | Nil, hasTail: Bool)  {}
class Nil(hasTail: Bool)  {}
fun gen() = 
  if anyUnknown then new List(gen(), true) else new Nil(false)
gen()
//│ Parsed:
//│ TypingUnit(NuFunDef(Some(false), anyUnknown, None, [], Var(false)), NuTypeDef(class, List, (), Tup(l: App(Var(|), Tup(_: Var(List), _: Var(Nil))), hasTail: Var(Bool)), (), None, None, TypingUnit()), NuTypeDef(class, Nil, (), Tup(hasTail: Var(Bool)), (), None, None, TypingUnit()), NuFunDef(None, gen, None, [], Lam(Tup(), Blk(...))), App(Var(gen), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class List$1([l: |(List, Nil,), hasTail: Bool,]) {}
//│   class Nil$2([hasTail: Bool,]) {}
//│   let anyUnknown$2 = () => false
//│   fun gen$1 = () => {if (anyUnknown) then new List$1([gen$1(), true,]) {} else new Nil$2([false,]) {}}
//│   Code(List(gen$1()))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$4()
//│ fun anyUnknown$2() =
//│   false
//│ fun gen$1() =
//│   if anyUnknown then new List$1 (gen$1(), true)  else new Nil$2 (false) 
//│ fun main$$4() =
//│   gen$1()
//│ class Nil$2(hasTail) {
//│ }
//│ class List$1(l, hasTail) {
//│ }
//│ val anyUnknown: false
//│ class List(l: List | Nil, hasTail: Bool)
//│ class Nil(hasTail: Bool)
//│ fun gen: () -> (List | Nil)
//│ List | Nil
//│ anyUnknown
//│            = false
//│ res
//│     = Nil {}



:mono
class Foo(x: Int){
  fun bar(y) = x+y
  fun boo(z) = bar(z)+x
}
(new Foo(1)).boo(2)
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Foo, (), Tup(x: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, bar, None, [], Lam(Tup(_: Var(y)), App(Var(+), Tup(_: Var(x), _: Var(y))))), NuFunDef(None, boo, None, [], Lam(Tup(_: Var(z)), App(Var(+), Tup(_: App(Var(bar), Tup(_: Var(z))), _: Var(x))))))), App(Sel(Bra(rcd = false, App(NuNew(Var(Foo)), Tup(_: IntLit(1)))), boo), Tup(_: IntLit(2))))
//│ Lifted:
//│ TypingUnit {
//│   class Foo$1([x: Int,]) {
//│     fun bar = (y,) => +((this).x, y,)
//│     fun boo = (z,) => +((this).bar(z,), (this).x,)
//│   }
//│   Code(List(('(' new Foo$1([1,]) {} ')').boo(2,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$1()
//│ fun boo$Foo$1(this, z) =
//│   +(this match {case obj: Foo$1 => bar$Foo$1(obj, z)}, this.x)
//│ fun bar$Foo$1(this, y) =
//│   +(this.x, y)
//│ fun main$$1() =
//│   new Foo$1 (#1)  match {case obj: Foo$1 => boo$Foo$1(obj, #2)}
//│ class Foo$1(x) {
//│ }
//│ class Foo(x: Int) {
//│   fun bar: Int -> Int
//│   fun boo: Int -> Int
//│ }
//│ Int
//│ res
//│     = 4

:mono
class OneInt(a: Int){
  fun fac: () -> Int
  fun fac = () ->
    if(a > 0) then (new OneInt(a - 1)).fac() else 1 
}
(new OneInt(10)).fac()
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, OneInt, (), Tup(a: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, fac, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Int)))), NuFunDef(None, fac, None, [], Lam(Tup(), Blk(...))))), App(Sel(Bra(rcd = false, App(NuNew(Var(OneInt)), Tup(_: IntLit(10)))), fac), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class OneInt$1([a: Int,]) {
//│     fun fac = () -> Int
//│     fun fac = () => {if ('(' >((this).a, 0,) ')') then ('(' new OneInt$1([-((this).a, 1,),]) {} ')').fac() else 1}
//│   }
//│   Code(List(('(' new OneInt$1([10,]) {} ')').fac()))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$1()
//│ fun fac$OneInt$1(this) =
//│   if >(this.a, #0) then new OneInt$1 (-(this.a, #1))  match {case obj: OneInt$1 => fac$OneInt$1(obj)} else #1
//│ fun main$$1() =
//│   new OneInt$1 (#10)  match {case obj: OneInt$1 => fac$OneInt$1(obj)}
//│ class OneInt$1(a) {
//│ }
//│ class OneInt(a: Int) {
//│   fun fac: () -> Int
//│ }
//│ Int
//│ res
//│     = 1

//:mono
//:e // FIXME: Mutable Parameters
//trait AnyFoo {
//}
//class FooPlus(#a): AnyFoo {
//  fun bar(b) = a + b
//}
//class FooMinus(#a): AnyFoo {
//  fun bar(b) = a - b
//}
//fun f(x) = x.bar(42)
//f(new FooPlus(1))
//f(new FooMinus(2))

:mono
val any = -20
fun f(x) = 
  if x > any then 0
  else g(x - 1)
fun g(x) = 
  if x > any then g(x - 1)
  else f(x - 2)
g(1)
//│ Parsed:
//│ TypingUnit(NuFunDef(Some(false), any, None, [], IntLit(-20)), NuFunDef(None, f, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, g, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(g), Tup(_: IntLit(1))))
//│ Lifted:
//│ TypingUnit {
//│   let any$3 = () => -20
//│   fun f$1 = (x,) => {if (>(x, any,)) then 0 else g$2(-(x, 1,),)}
//│   fun g$2 = (x,) => {if (>(x, any,)) then g$2(-(x, 1,),) else f$1(-(x, 2,),)}
//│   Code(List(g$2(1,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$3()
//│ fun any$3() =
//│   #-20
//│ fun f$1(x) =
//│   if >(x, any) then #0 else g$2(-(x, #1))
//│ fun g$2(x) =
//│   if >(x, any) then g$2(-(x, #1)) else f$1(-(x, #2))
//│ fun main$$3() =
//│   g$2(#1)
//│ val any: -20
//│ fun f: Int -> 0
//│ fun g: Int -> 0
//│ 0
//│ any
//│     = -20
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:mono
class OneInt(a: Int){
  fun get = () -> a
}
class OneBool(b: Bool){
  fun get = () -> b
}
(if b then new OneInt(1) else new OneBool(true)).get()
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, OneInt, (), Tup(a: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, get, None, [], Lam(Tup(), Var(a))))), NuTypeDef(class, OneBool, (), Tup(b: Var(Bool)), (), None, None, TypingUnit(NuFunDef(None, get, None, [], Lam(Tup(), Var(b))))), App(Sel(Bra(rcd = false, If(IfThen(Var(b), App(NuNew(Var(OneInt)), Tup(_: IntLit(1))), Some(App(NuNew(Var(OneBool)), Tup(_: Var(true)))))), get), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class OneInt$1([a: Int,]) {fun get = () => (this).a}
//│   class OneBool$2([b: Bool,]) {fun get = () => (this).b}
//│   Code(List(('(' if (b) then new OneInt$1([1,]) {} else new OneBool$2([true,]) {} ')').get()))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$2()
//│ fun get$OneInt$1(this) =
//│   this.a
//│ fun get$OneBool$2(this) =
//│   this.b
//│ fun main$$2() =
//│   if b then new OneInt$1 (#1)  else new OneBool$2 (true)  match {case obj: OneInt$1 => get$OneInt$1(obj); case obj: OneBool$2 => get$OneBool$2(obj)}
//│ class OneInt$1(a) {
//│ }
//│ class OneBool$2(b) {
//│ }
//│ class OneInt(a: Int) {
//│   fun get: () -> Int
//│ }
//│ class OneBool(b: Bool) {
//│   fun get: () -> Bool
//│ }
//│ Int | false | true
//│ res
//│     = true

:mono
class Bar(x: Int) {
  fun foo(x) = x
  fun FooMinus(y: Int) = x + y
  fun car = foo(2)
}
class Car {
  fun da(b: Bar) = b.foo(2)
}
fun baz(b: Bar) = b.foo(2)
let bar = Bar(42)
baz(bar)
(new Car()).da(Bar(1337))
bar.car
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Bar, (), Tup(x: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Var(x))), NuFunDef(None, FooMinus, None, [], Lam(Tup(y: Var(Int)), App(Var(+), Tup(_: Var(x), _: Var(y))))), NuFunDef(None, car, None, [], App(Var(foo), Tup(_: IntLit(2)))))), NuTypeDef(class, Car, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, da, None, [], Lam(Tup(b: Var(Bar)), App(Sel(Var(b), foo), Tup(_: IntLit(2))))))), NuFunDef(None, baz, None, [], Lam(Tup(b: Var(Bar)), App(Sel(Var(b), foo), Tup(_: IntLit(2))))), NuFunDef(Some(false), bar, None, [], App(Var(Bar), Tup(_: IntLit(42)))), App(Var(baz), Tup(_: Var(bar))), App(Sel(Bra(rcd = false, App(NuNew(Var(Car)), Tup())), da), Tup(_: App(Var(Bar), Tup(_: IntLit(1337))))), Sel(Var(bar), car))
//│ Lifted:
//│ TypingUnit {
//│   class Bar$1([x: Int,]) {
//│     fun foo = (x,) => x
//│     fun FooMinus = (y: Int,) => +((this).x, y,)
//│     fun car = () => (this).foo(2,)
//│   }
//│   class Car$2([]) {fun da = (b: Bar$1,) => (b).foo(2,)}
//│   fun baz$2 = (b: Bar$1,) => (b).foo(2,)
//│   let bar$1 = () => Bar$1(42,)
//│   Code(List(baz$2(bar,)))
//│   Code(List(('(' new Car$2([]) {} ')').da(Bar$1(1337,),)))
//│   Code(List((bar).car))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$4()
//│ main$$5()
//│ main$$6()
//│ fun bar$1() =
//│   Bar$1(#42)
//│ fun da$Car$2(this, b) =
//│   b match {}
//│ fun main$$6() =
//│   bar.car
//│ fun baz$2(b) =
//│   b match {}
//│ fun main$$5() =
//│   new Car$2 ()  match {case obj: Car$2 => da$Car$2(obj, Bar$1(#1337))}
//│ fun main$$4() =
//│   baz$2(bar)
//│ class Bar$1(x) {
//│ }
//│ class Car$2() {
//│ }
//│ class Bar(x: Int) {
//│   fun FooMinus: (y: Int) -> Int
//│   fun car: 2
//│   fun foo: forall 'a. 'a -> 'a
//│ }
//│ class Car {
//│   constructor()
//│   fun da: (b: Bar) -> 2
//│ }
//│ fun baz: (b: Bar) -> 2
//│ let bar: Bar
//│ 2
//│ bar
//│     = Bar {}
//│ res
//│     = 2
//│ res
//│     = 2
//│ res
//│     = 2

:mono
val c = 5
class Sup(a: Int){
  virtual fun foo = () -> a
}
class Sub(b: Int) extends Sup(b+b){
}
class Sub2(c: Int) extends Sub(c+c){
  fun foo = () -> a+c
}
(new Sub(10)).foo()
(new Sub2(c)).foo()
//│ Parsed:
//│ TypingUnit(NuFunDef(Some(false), c, None, [], IntLit(5)), NuTypeDef(class, Sup, (), Tup(a: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), Var(a))))), NuTypeDef(class, Sub, (), Tup(b: Var(Int)), (App(Var(Sup), Tup(_: App(Var(+), Tup(_: Var(b), _: Var(b)))))), None, None, TypingUnit()), NuTypeDef(class, Sub2, (), Tup(c: Var(Int)), (App(Var(Sub), Tup(_: App(Var(+), Tup(_: Var(c), _: Var(c)))))), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(+), Tup(_: Var(a), _: Var(c))))))), App(Sel(Bra(rcd = false, App(NuNew(Var(Sub)), Tup(_: IntLit(10)))), foo), Tup()), App(Sel(Bra(rcd = false, App(NuNew(Var(Sub2)), Tup(_: Var(c)))), foo), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class Sup$1([a: Int,]) {fun foo = () => (this).a}
//│   class Sub$2([b: Int,]): Sup$1(+((this).b, (this).b,),) {}
//│   class Sub2$3([c: Int,]): Sub$2(+((this).c, (this).c,),) {fun foo = () => +((this).a, (this).c,)}
//│   let c$1 = () => 5
//│   Code(List(('(' new Sub$2([10,]) {} ')').foo()))
//│   Code(List(('(' new Sub2$3([c,]) {} ')').foo()))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$4()
//│ main$$5()
//│ fun c$1() =
//│   #5
//│ fun main$$5() =
//│   new Sub2$3 (c)  match {case obj: Sub2$3 => foo$Sub2$3(obj)}
//│ fun main$$4() =
//│   new Sub$2 (#10)  match {case obj: Sub$2 => foo$Sup$1(obj)}
//│ fun foo$Sup$1(this) =
//│   this.a
//│ fun foo$Sub2$3(this) =
//│   +(this.a, this.c)
//│ class Sub2$3(c): Sub$2(+(this.c, this.c)) {
//│ }
//│ class Sup$1(a) {
//│ }
//│ class Sub$2(b): Sup$1(+(this.b, this.b)) {
//│ }
//│ val c: 5
//│ class Sup(a: Int) {
//│   fun foo: () -> Int
//│ }
//│ class Sub(b: Int) extends Sup {
//│   fun foo: () -> Int
//│ }
//│ class Sub2(c: Int) extends Sub, Sup {
//│   fun foo: () -> Int
//│ }
//│ Int
//│ c
//│   = 5
//│ res
//│     = 20
//│ res
//│     = 47

:mono
class Foo(f: Int -> Int){
  fun foo = () -> f(1)
}
class F1() extends Foo(x => x+1){}
class F2() extends Foo(x => x+2){}
(new F1()).foo()
(new F2()).foo()
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Foo, (), Tup(f: App(Var(->), Tup(_: Var(Int), _: Var(Int)))), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(f), Tup(_: IntLit(1))))))), NuTypeDef(class, F1, (), Tup(), (App(Var(Foo), Tup(_: Lam(Tup(_: Var(x)), App(Var(+), Tup(_: Var(x), _: IntLit(1))))))), None, None, TypingUnit()), NuTypeDef(class, F2, (), Tup(), (App(Var(Foo), Tup(_: Lam(Tup(_: Var(x)), App(Var(+), Tup(_: Var(x), _: IntLit(2))))))), None, None, TypingUnit()), App(Sel(Bra(rcd = false, App(NuNew(Var(F1)), Tup())), foo), Tup()), App(Sel(Bra(rcd = false, App(NuNew(Var(F2)), Tup())), foo), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class Foo$1([f: ->(Int, Int,),]) {fun foo = () => (this).f(1,)}
//│   class F1$2_Lambda1$1$4([par$F1$2,]) {fun apply = (x,) => +(x, 1,)}
//│   class F1$2([]): Foo$1({new F1$2_Lambda1$1$4([this,]) {}},) {}
//│   class F2$3_Lambda1$2$5([par$F2$3,]) {fun apply = (x,) => +(x, 2,)}
//│   class F2$3([]): Foo$1({new F2$3_Lambda1$2$5([this,]) {}},) {}
//│   Code(List(('(' new F1$2([]) {} ')').foo()))
//│   Code(List(('(' new F2$3([]) {} ')').foo()))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$5()
//│ main$$6()
//│ fun apply$F2$3_Lambda1$2$5(this, x) =
//│   +(x, #2)
//│ fun foo$Foo$1(this) =
//│   this match {case obj: Foo$1 => obj.f match {case obj$F2$3_Lambda1$2$5: F2$3_Lambda1$2$5 => apply$F2$3_Lambda1$2$5(obj$F2$3_Lambda1$2$5, #1); case obj$F1$2_Lambda1$1$4: F1$2_Lambda1$1$4 => apply$F1$2_Lambda1$1$4(obj$F1$2_Lambda1$1$4, #1)}}
//│ fun main$$6() =
//│   new F2$3 ()  match {case obj: F2$3 => foo$Foo$1(obj)}
//│ fun main$$5() =
//│   new F1$2 ()  match {case obj: F1$2 => foo$Foo$1(obj)}
//│ fun apply$F1$2_Lambda1$1$4(this, x) =
//│   +(x, #1)
//│ class F1$2(): Foo$1(new F1$2_Lambda1$1$4 (this) ) {
//│ }
//│ class F2$3_Lambda1$2$5(par$F2$3) {
//│ }
//│ class F2$3(): Foo$1(new F2$3_Lambda1$2$5 (this) ) {
//│ }
//│ class Foo$1(f) {
//│ }
//│ class F1$2_Lambda1$1$4(par$F1$2) {
//│ }
//│ class Foo(f: Int -> Int) {
//│   fun foo: () -> Int
//│ }
//│ class F1() extends Foo {
//│   fun foo: () -> Int
//│ }
//│ class F2() extends Foo {
//│   fun foo: () -> Int
//│ }
//│ Int
//│ res
//│     = 2
//│ res
//│     = 3
