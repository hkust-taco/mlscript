:NewParser
:ParseOnly
// :mono
fun f(x) = if x then 42 else 1337
//│ |#fun| |f|(|x|)| |#=| |#if| |x| |#then| |42| |#else| |1337|
//│ Parsed: {fun f = x, => if (x) then 42 else 1337}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, [], Lam(Tup(_: Var(x)), If((x) then 42, Some(IntLit(1337))))))
//│ Lifted:
//│ TypingUnit {fun f$1 = x, => if (x) then 42 else 1337}

// :mono
fun foo() = 42
//│ |#fun| |foo|(||)| |#=| |42|
//│ Parsed: {fun foo =  => 42}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, [], Lam(Tup(), IntLit(42))))
//│ Lifted:
//│ TypingUnit {fun foo$1 =  => 42}

// :mono
fun foo(x, #b) = if b then x else 1337
let a = foo(42, true)
let b = foo(23, false)
//│ |#fun| |foo|(|x|,| |##|b|)| |#=| |#if| |b| |#then| |x| |#else| |1337|↵|#let| |a| |#=| |foo|(|42|,| |true|)|↵|#let| |b| |#=| |foo|(|23|,| |false|)|
//│ Parsed: {fun foo = x, #b, => if (b) then x else 1337; let a = foo (42, true,); let b = foo (23, false,)}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, [], Lam(Tup(_: Var(x), _: Var(b)), If((b) then x, Some(IntLit(1337))))), NuFunDef(Some(false), a, [], App(Var(foo), Tup(_: IntLit(42), _: Var(true)))), NuFunDef(Some(false), b, [], App(Var(foo), Tup(_: IntLit(23), _: Var(false)))))
//│ Lifted:
//│ TypingUnit {
//│   fun foo$3 = x, #b, => if (b) then x else 1337
//│   let a$1 =  => foo$3 (42, true,)
//│   let b$2 =  => foo$3 (23, false,)
//│ }

// :mono
let x = 42 + 1337
//│ |#let| |x| |#=| |42| |+| |1337|
//│ Parsed: {let x = + (42,) (1337,)}
//│ Parsed:
//│ TypingUnit(NuFunDef(Some(false), x, [], App(App(Var(+), Tup(_: IntLit(42))), Tup(_: IntLit(1337)))))
//│ Lifted:
//│ TypingUnit {let x$1 =  => + (42,) (1337,)}

// :mono
class Bar(#x)
fun foo(#b) = b
let a = foo(new Bar(1))
let b = foo(new Bar(2))
//│ |#class| |Bar|(|##|x|)|↵|#fun| |foo|(|##|b|)| |#=| |b|↵|#let| |a| |#=| |foo|(|#new| |Bar|(|1|)|)|↵|#let| |b| |#=| |foo|(|#new| |Bar|(|2|)|)|
//│ Parsed: {class Bar(#x,) {}; fun foo = #b, => b; let a = foo (new Bar(1,) {},); let b = foo (new Bar(2,) {},)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Bar, (), Tup(_: Var(x)), (), TypingUnit()), NuFunDef(None, foo, [], Lam(Tup(_: Var(b)), Var(b))), NuFunDef(Some(false), a, [], App(Var(foo), Tup(_: New(Some((TypeName(Bar),1,)), TypingUnit(List()))))), NuFunDef(Some(false), b, [], App(Var(foo), Tup(_: New(Some((TypeName(Bar),2,)), TypingUnit(List()))))))
//│ Lifted:
//│ TypingUnit {
//│   class Bar$1(#x,) {}
//│   fun foo$3 = #b, => b
//│   let a$1 =  => foo$3 (new Bar$1(1,) {},)
//│   let b$2 =  => foo$3 (new Bar$1(2,) {},)
//│ }

// :mono
class OneInt(#a){
  fun inc() = a+1
}
(new OneInt(1)).inc()
//│ |#class| |OneInt|(|##|a|)|{|→|#fun| |inc|(||)| |#=| |a|+|1|←|↵|}|↵|(|#new| |OneInt|(|1|)|)|.inc|(||)|
//│ Parsed: {class OneInt(#a,) {fun inc =  => + (a,) (1,)}; ('(' new OneInt(1,) {}, ')').inc ()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, OneInt, (), Tup(_: Var(a)), (), TypingUnit(NuFunDef(None, inc, [], Lam(Tup(), App(App(Var(+), Tup(_: Var(a))), Tup(_: IntLit(1))))))), App(Sel(Bra(rcd = false, Tup(_: New(Some((TypeName(OneInt),1,)), TypingUnit(List())))), inc), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class OneInt$1(#a,) {fun inc =  => + ((this).a,) (1,)}
//│   Code(List(('(' new OneInt$1(1,) {}, ')').inc ()))
//│ }

// :mono
class OneInt(#a){
  fun add(x) = 
    new OneInt(a+x.a)
}
(new OneInt(1)).add(new OneInt(2))
//│ |#class| |OneInt|(|##|a|)|{|→|#fun| |add|(|x|)| |#=| |→|#new| |OneInt|(|a|+|x|.a|)|←|←|↵|}|↵|(|#new| |OneInt|(|1|)|)|.add|(|#new| |OneInt|(|2|)|)|
//│ Parsed: {class OneInt(#a,) {fun add = x, => {new OneInt(+ (a,) ((x).a,),) {}}}; ('(' new OneInt(1,) {}, ')').add (new OneInt(2,) {},)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, OneInt, (), Tup(_: Var(a)), (), TypingUnit(NuFunDef(None, add, [], Lam(Tup(_: Var(x)), Blk(...))))), App(Sel(Bra(rcd = false, Tup(_: New(Some((TypeName(OneInt),1,)), TypingUnit(List())))), add), Tup(_: New(Some((TypeName(OneInt),2,)), TypingUnit(List())))))
//│ Lifted:
//│ TypingUnit {
//│   class OneInt$1(#a,) {
//│     fun add = x, => {new OneInt$1(+ ((this).a,) ((x).a,),) {}}
//│   }
//│   Code(List(('(' new OneInt$1(1,) {}, ')').add (new OneInt$1(2,) {},)))
//│ }

// :mono
if true then 1 else 0
if 1+1 > 1 then 1-1 else 1*1
//│ |#if| |true| |#then| |1| |#else| |0|↵|#if| |1|+|1| |>| |1| |#then| |1|-|1| |#else| |1|*|1|
//│ Parsed: {if (true) then 1 else 0; if (> (+ (1,) (1,),) (1,)) then - (1,) (1,) else * (1,) (1,)}
//│ Parsed:
//│ TypingUnit(If((true) then 1, Some(IntLit(0))), If((> (+ (1,) (1,),) (1,)) then - (1,) (1,), Some(App(App(Var(*), Tup(_: IntLit(1))), Tup(_: IntLit(1))))))
//│ Lifted:
//│ TypingUnit {
//│   Code(List(if (true) then 1 else 0))
//│   Code(List(if (> (+ (1,) (1,),) (1,)) then - (1,) (1,) else * (1,) (1,)))
//│ }

// :mono
if(b) then 1 else 2
//│ |#if|(|b|)| |#then| |1| |#else| |2|
//│ Parsed: {if ('(' b, ')') then 1 else 2}
//│ Parsed:
//│ TypingUnit(If(('(' b, ')') then 1, Some(IntLit(2))))
//│ Lifted:
//│ TypingUnit {Code(List(if ('(' b, ')') then 1 else 2))}

// :mono
((f, g) => f(g))(f => f, true)
//│ |(|(|f|,| |g|)| |=>| |f|(|g|)|)|(|f| |=>| |f|,| |true|)|
//│ Parsed: {'(' f, g, => f (g,), ')' (f, => f, true,)}
//│ Parsed:
//│ TypingUnit(App(Bra(rcd = false, Tup(_: Lam(Tup(_: Var(f), _: Var(g)), App(Var(f), Tup(_: Var(g)))))), Tup(_: Lam(Tup(_: Var(f)), Var(f)), _: Var(true))))
//│ Lifted:
//│ TypingUnit {
//│   class Lambda2$1$1() {fun apply = f, g, => f (g,)}
//│   class Lambda1$2$2() {fun apply = f, => f}
//│   Code(List('(' {new Lambda2$1$1() {}}, ')' ({new Lambda1$2$2() {}}, true,)))
//│ }


// :mono
(b => if b then true else false) (true)
//│ |(|b| |=>| |#if| |b| |#then| |true| |#else| |false|)| |(|true|)|
//│ Parsed: {'(' b, => if (b) then true else false, ')' (true,)}
//│ Parsed:
//│ TypingUnit(App(Bra(rcd = false, Tup(_: Lam(Tup(_: Var(b)), If((b) then true, Some(Var(false)))))), Tup(_: Var(true))))
//│ Lifted:
//│ TypingUnit {
//│   class Lambda1$1$1() {fun apply = b, => if (b) then true else false}
//│   Code(List('(' {new Lambda1$1$1() {}}, ')' (true,)))
//│ }

// :mono
fun f(x) =
  if(x > 0) then x+1 else x-1
f(2)+3
//│ |#fun| |f|(|x|)| |#=|→|#if|(|x| |>| |0|)| |#then| |x|+|1| |#else| |x|-|1|←|↵|f|(|2|)|+|3|
//│ Parsed: {fun f = x, => {if ('(' > (x,) (0,), ')') then + (x,) (1,) else - (x,) (1,)}; + (f (2,),) (3,)}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, [], Lam(Tup(_: Var(x)), Blk(...))), App(App(Var(+), Tup(_: App(Var(f), Tup(_: IntLit(2))))), Tup(_: IntLit(3))))
//│ Lifted:
//│ TypingUnit {
//│   fun f$1 = x, => {if ('(' > (x,) (0,), ')') then + (x,) (1,) else - (x,) (1,)}
//│   Code(List(+ (f$1 (2,),) (3,)))
//│ }

// :mono
fun fac(n) = 
  if (n > 1) then fac(n - 1) * n else 1
fac(2)
//│ |#fun| |fac|(|n|)| |#=| |→|#if| |(|n| |>| |1|)| |#then| |fac|(|n| |-| |1|)| |*| |n| |#else| |1|←|↵|fac|(|2|)|
//│ Parsed: {fun fac = n, => {if ('(' > (n,) (1,), ')') then * (fac (- (n,) (1,),),) (n,) else 1}; fac (2,)}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, fac, [], Lam(Tup(_: Var(n)), Blk(...))), App(Var(fac), Tup(_: IntLit(2))))
//│ Lifted:
//│ TypingUnit {
//│   fun fac$1 = n, => {if ('(' > (n,) (1,), ')') then * (fac$1 (- (n,) (1,),),) (n,) else 1}
//│   Code(List(fac$1 (2,)))
//│ }

// :mono
class List(l, hasTail)  {}
class Nil(l, hasTail)  {}
fun count(lst) =
  if lst.hasTail then count(lst.l)+1 else 1
count(new List(new List(new Nil(0, false), true), true))
//│ |#class| |List|(|l|,| |hasTail|)| |{||}|↵|#class| |Nil|(|l|,| |hasTail|)| |{||}|↵|#fun| |count|(|lst|)| |#=|→|#if| |lst|.hasTail| |#then| |count|(|lst|.l|)|+|1| |#else| |1|←|↵|count|(|#new| |List|(|#new| |List|(|#new| |Nil|(|0|,| |false|)|,| |true|)|,| |true|)|)|
//│ Parsed: {class List(l, hasTail,) {}; class Nil(l, hasTail,) {}; fun count = lst, => {if ((lst).hasTail) then + (count ((lst).l,),) (1,) else 1}; count (new List(new List(new Nil(0, false,) {}, true,) {}, true,) {},)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, List, (), Tup(_: Var(l), _: Var(hasTail)), (), TypingUnit()), NuTypeDef(class, Nil, (), Tup(_: Var(l), _: Var(hasTail)), (), TypingUnit()), NuFunDef(None, count, [], Lam(Tup(_: Var(lst)), Blk(...))), App(Var(count), Tup(_: New(Some((TypeName(List),new List(new Nil(0, false,) {}, true,) {}, true,)), TypingUnit(List())))))
//│ Lifted:
//│ TypingUnit {
//│   class List$1(l, hasTail,) {}
//│   class Nil$2(l, hasTail,) {}
//│   fun count$1 = lst, => {if ((lst).hasTail) then + (count$1 ((lst).l,),) (1,) else 1}
//│   Code(List(count$1 (new List$1(new List$1(new Nil$2(0, false,) {}, true,) {}, true,) {},)))
//│ }

:mono
class Cons(e, tail){
  fun gen() = new Cons(e, tail.gen())
}
class Nil(){
  fun gen() = new Cons(0, this)
}
fun generate(x) = 
  if x > 0 then new Cons(x, generate(x+1)) else new Nil()
generate(10).gen()
//│ |#class| |Cons|(|e|,| |tail|)|{|→|#fun| |gen|(||)| |#=| |#new| |Cons|(|e|,| |tail|.gen|(||)|)|←|↵|}|↵|#class| |Nil|(||)|{|→|#fun| |gen|(||)| |#=| |#new| |Cons|(|0|,| |this|)|←|↵|}|↵|#fun| |generate|(|x|)| |#=| |→|#if| |x| |>| |0| |#then| |#new| |Cons|(|x|,| |generate|(|x|+|1|)|)| |#else| |#new| |Nil|(||)|←|↵|generate|(|10|)|.gen|(||)|
//│ Parsed: {class Cons(e, tail,) {fun gen =  => new Cons(e, (tail).gen (),) {}}; class Nil() {fun gen =  => new Cons(0, this,) {}}; fun generate = x, => {if (> (x,) (0,)) then new Cons(x, generate (+ (x,) (1,),),) {} else new Nil() {}}; (generate (10,)).gen ()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Cons, (), Tup(_: Var(e), _: Var(tail)), (), TypingUnit(NuFunDef(None, gen, [], Lam(Tup(), New(Some((TypeName(Cons),e, (tail).gen (),)), TypingUnit(List())))))), NuTypeDef(class, Nil, (), Tup(), (), TypingUnit(NuFunDef(None, gen, [], Lam(Tup(), New(Some((TypeName(Cons),0, this,)), TypingUnit(List())))))), NuFunDef(None, generate, [], Lam(Tup(_: Var(x)), Blk(...))), App(Sel(App(Var(generate), Tup(_: IntLit(10))), gen), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class Cons$1(e, tail,) {
//│     fun gen =  => new Cons$1((this).e, ((this).tail).gen (),) {}
//│   }
//│   class Nil$2() {fun gen =  => new Cons$1(0, this,) {}}
//│   fun generate$1 = x, => {if (> (x,) (0,)) then new Cons$1(x, generate$1 (+ (x,) (1,),),) {} else new Nil$2() {}}
//│   Code(List((generate$1 (10,)).gen ()))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$3()
//│ fun gen$Cons$1(this) =
//│   new Cons$1 (this.e, this.tail match {case obj: Cons$1 => gen$Cons$1(obj); case obj: Nil$2 => gen$Nil$2(obj)}) 
//│ fun generate$1(x) =
//│   if (x > #0) then new Cons$1 (x, generate$1((x + #1)))  else new Nil$2 () 
//│ fun gen$Nil$2(this) =
//│   new Cons$1 (#0, this) 
//│ fun main$$3() =
//│   generate$1(#10) match {case obj: Cons$1 => gen$Cons$1(obj); case obj: Nil$2 => gen$Nil$2(obj)}
//│ class Nil$2() {
//│ }
//│ class Cons$1(e, tail) {
//│ }

:mono
class List(e, tail) {
  fun map(f) = new List(f(e), tail.map(f))
  fun count() = 1 + tail.count()
}
class Nil() {
  fun map(f) = this
  fun count() = 0
}
fun add2(x) = x+2
(new List(1, new List(2, new Nil()))).map(x => x+1).map(x => add2(x))
//│ |#class| |List|(|e|,| |tail|)| |{|→|#fun| |map|(|f|)| |#=| |#new| |List|(|f|(|e|)|,| |tail|.map|(|f|)|)|↵|#fun| |count|(||)| |#=| |1| |+| |tail|.count|(||)|←|↵|}|↵|#class| |Nil|(||)| |{|→|#fun| |map|(|f|)| |#=| |this|↵|#fun| |count|(||)| |#=| |0|←|↵|}|↵|#fun| |add2|(|x|)| |#=| |x|+|2|↵|(|#new| |List|(|1|,| |#new| |List|(|2|,| |#new| |Nil|(||)|)|)|)|.map|(|x| |=>| |x|+|1|)|.map|(|x| |=>| |add2|(|x|)|)|
//│ Parsed: {class List(e, tail,) {fun map = f, => new List(f (e,), (tail).map (f,),) {}; fun count =  => + (1,) ((tail).count (),)}; class Nil() {fun map = f, => this; fun count =  => 0}; fun add2 = x, => + (x,) (2,); (('(' new List(1, new List(2, new Nil() {},) {},) {}, ')').map (x, => + (x,) (1,),)).map (x, => add2 (x,),)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, List, (), Tup(_: Var(e), _: Var(tail)), (), TypingUnit(NuFunDef(None, map, [], Lam(Tup(_: Var(f)), New(Some((TypeName(List),f (e,), (tail).map (f,),)), TypingUnit(List())))), NuFunDef(None, count, [], Lam(Tup(), App(App(Var(+), Tup(_: IntLit(1))), Tup(_: App(Sel(Var(tail), count), Tup()))))))), NuTypeDef(class, Nil, (), Tup(), (), TypingUnit(NuFunDef(None, map, [], Lam(Tup(_: Var(f)), Var(this))), NuFunDef(None, count, [], Lam(Tup(), IntLit(0))))), NuFunDef(None, add2, [], Lam(Tup(_: Var(x)), App(App(Var(+), Tup(_: Var(x))), Tup(_: IntLit(2))))), App(Sel(App(Sel(Bra(rcd = false, Tup(_: New(Some((TypeName(List),1, new List(2, new Nil() {},) {},)), TypingUnit(List())))), map), Tup(_: Lam(Tup(_: Var(x)), App(App(Var(+), Tup(_: Var(x))), Tup(_: IntLit(1)))))), map), Tup(_: Lam(Tup(_: Var(x)), App(Var(add2), Tup(_: Var(x)))))))
//│ Lifted:
//│ TypingUnit {
//│   class List$1(e, tail,) {
//│     fun map = f, => new List$1(f ((this).e,), ((this).tail).map (f,),) {}
//│     fun count =  => + (1,) (((this).tail).count (),)
//│   }
//│   class Nil$2() {fun map = f, => this; fun count =  => 0}
//│   class Lambda1$2$3() {fun apply = x, => + (x,) (1,)}
//│   class Lambda1$3$4() {fun apply = x, => add2$1 (x,)}
//│   fun add2$1 = x, => + (x,) (2,)
//│   Code(List((('(' new List$1(1, new List$1(2, new Nil$2() {},) {},) {}, ')').map ({new Lambda1$2$3() {}},)).map ({new Lambda1$3$4() {}},)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$5()
//│ fun map$List$1(this, f) =
//│   new List$1 (f match {case obj: Lambda1$2$3 => apply$Lambda1$2$3(obj, this.e); case obj: Lambda1$3$4 => apply$Lambda1$3$4(obj, this.e)}, this.tail match {case obj: List$1 => map$List$1(obj, f); case obj: Nil$2 => map$Nil$2(obj, f)}) 
//│ fun add2$1(x) =
//│   (x + #2)
//│ fun main$$5() =
//│   new List$1 (#1, new List$1 (#2, new Nil$2 () ) )  match {case obj: List$1 => map$List$1(obj, new Lambda1$2$3 () )} match {case obj: List$1 => map$List$1(obj, new Lambda1$3$4 () )}
//│ fun apply$Lambda1$3$4(this, x) =
//│   add2$1(x)
//│ fun map$Nil$2(this, f) =
//│   this
//│ fun apply$Lambda1$2$3(this, x) =
//│   (x + #1)
//│ class Lambda1$3$4() {
//│ }
//│ class Nil$2() {
//│ }
//│ class List$1(e, tail) {
//│ }
//│ class Lambda1$2$3() {
//│ }

// :mono
class List(e, tail) {
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
fun foo(x) = x.count()
fun generate(x) = 
  if x > 0 then new List(x, generate(x+1)) else new Nil()
foo(new List(1, new List(2, new Nil())))
foo(generate(1))
//│ |#class| |List|(|e|,| |tail|)| |{|→|#fun| |count|(||)| |#=| |1| |+| |tail|.count|(||)|←|↵|}|↵|#class| |Nil|(||)| |{|→|#fun| |count|(||)| |#=| |0|←|↵|}|↵|#fun| |foo|(|x|)| |#=| |x|.count|(||)|↵|#fun| |generate|(|x|)| |#=| |→|#if| |x| |>| |0| |#then| |#new| |List|(|x|,| |generate|(|x|+|1|)|)| |#else| |#new| |Nil|(||)|←|↵|foo|(|#new| |List|(|1|,| |#new| |List|(|2|,| |#new| |Nil|(||)|)|)|)|↵|foo|(|generate|(|1|)|)|
//│ Parsed: {class List(e, tail,) {fun count =  => + (1,) ((tail).count (),)}; class Nil() {fun count =  => 0}; fun foo = x, => (x).count (); fun generate = x, => {if (> (x,) (0,)) then new List(x, generate (+ (x,) (1,),),) {} else new Nil() {}}; foo (new List(1, new List(2, new Nil() {},) {},) {},); foo (generate (1,),)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, List, (), Tup(_: Var(e), _: Var(tail)), (), TypingUnit(NuFunDef(None, count, [], Lam(Tup(), App(App(Var(+), Tup(_: IntLit(1))), Tup(_: App(Sel(Var(tail), count), Tup()))))))), NuTypeDef(class, Nil, (), Tup(), (), TypingUnit(NuFunDef(None, count, [], Lam(Tup(), IntLit(0))))), NuFunDef(None, foo, [], Lam(Tup(_: Var(x)), App(Sel(Var(x), count), Tup()))), NuFunDef(None, generate, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup(_: New(Some((TypeName(List),1, new List(2, new Nil() {},) {},)), TypingUnit(List())))), App(Var(foo), Tup(_: App(Var(generate), Tup(_: IntLit(1))))))
//│ Lifted:
//│ TypingUnit {
//│   class List$1(e, tail,) {fun count =  => + (1,) (((this).tail).count (),)}
//│   class Nil$2() {fun count =  => 0}
//│   fun foo$1 = x, => (x).count ()
//│   fun generate$2 = x, => {if (> (x,) (0,)) then new List$1(x, generate$2 (+ (x,) (1,),),) {} else new Nil$2() {}}
//│   Code(List(foo$1 (new List$1(1, new List$1(2, new Nil$2() {},) {},) {},)))
//│   Code(List(foo$1 (generate$2 (1,),)))
//│ }

:mono
fun foo(x) = 
  (f => f(x))(z => z+1)
foo(2)
//│ |#fun| |foo|(|x|)| |#=| |→|(|f| |=>| |f|(|x|)|)|(|z| |=>| |z|+|1|)|←|↵|foo|(|2|)|
//│ Parsed: {fun foo = x, => {'(' f, => f (x,), ')' (z, => + (z,) (1,),)}; foo (2,)}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup(_: IntLit(2))))
//│ Lifted:
//│ TypingUnit {
//│   class Lambda1$2$1(x,) {fun apply = f, => f ((this).x,)}
//│   class Lambda1$3$2() {fun apply = z, => + (z,) (1,)}
//│   fun foo$1 = x, => {'(' {new Lambda1$2$1(x,) {}}, ')' ({new Lambda1$3$2() {}},)}
//│   Code(List(foo$1 (2,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$3()
//│ fun apply$Lambda1$2$1(this, f) =
//│   f match {case obj: Lambda1$3$2 => apply$Lambda1$3$2(obj, this.x)}
//│ fun foo$1(x) =
//│   new Lambda1$2$1 (x)  match {case obj: Lambda1$2$1 => apply$Lambda1$2$1(obj, new Lambda1$3$2 () )}
//│ fun main$$3() =
//│   foo$1(#2)
//│ fun apply$Lambda1$3$2(this, z) =
//│   (z + #1)
//│ class Lambda1$2$1(x) {
//│ }
//│ class Lambda1$3$2() {
//│ }

:mono
fun f(x) =
  (y => f(x+y)).apply(x+1)
f(1)
//│ |#fun| |f|(|x|)| |#=|→|(|y| |=>| |f|(|x|+|y|)|)|.apply|(|x|+|1|)|←|↵|f|(|1|)|
//│ Parsed: {fun f = x, => {('(' y, => f (+ (x,) (y,),), ')').apply (+ (x,) (1,),)}; f (1,)}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(f), Tup(_: IntLit(1))))
//│ Lifted:
//│ TypingUnit {
//│   class Lambda1$2$1(x,) {fun apply = y, => f$1 (+ ((this).x,) (y,),)}
//│   fun f$1 = x, => {('(' {new Lambda1$2$1(x,) {}}, ')').apply (+ (x,) (1,),)}
//│   Code(List(f$1 (1,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$2()
//│ fun apply$Lambda1$2$1(this, y) =
//│   f$1((this.x + y))
//│ fun f$1(x) =
//│   new Lambda1$2$1 (x)  match {case obj: Lambda1$2$1 => apply$Lambda1$2$1(obj, (x + #1))}
//│ fun main$$2() =
//│   f$1(#1)
//│ class Lambda1$2$1(x) {
//│ }


:mono
fun f(x) = f(x)
f(0)
f(1)
//│ |#fun| |f|(|x|)| |#=| |f|(|x|)|↵|f|(|0|)|↵|f|(|1|)|
//│ Parsed: {fun f = x, => f (x,); f (0,); f (1,)}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, [], Lam(Tup(_: Var(x)), App(Var(f), Tup(_: Var(x))))), App(Var(f), Tup(_: IntLit(0))), App(Var(f), Tup(_: IntLit(1))))
//│ Lifted:
//│ TypingUnit {
//│   fun f$1 = x, => f$1 (x,)
//│   Code(List(f$1 (0,)))
//│   Code(List(f$1 (1,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$1()
//│ main$$2()
//│ fun f$1(x) =
//│   f$1(x)
//│ fun main$$2() =
//│   f$1(#1)
//│ fun main$$1() =
//│   f$1(#0)

:mono
class Cons(e, tail) {
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
class Lambda(){
  fun apply(l) = 
    l.count()
}
class Lambda2(a){
  fun apply(l) = 
    (new Cons(a, l)).count()
}
fun foo(x) = 
  x.apply(new Cons(1, new Nil())) + x.apply(new Nil())
foo(new Lambda())
foo(new Lambda2(2))
//│ |#class| |Cons|(|e|,| |tail|)| |{|→|#fun| |count|(||)| |#=| |1| |+| |tail|.count|(||)|←|↵|}|↵|#class| |Nil|(||)| |{|→|#fun| |count|(||)| |#=| |0|←|↵|}|↵|#class| |Lambda|(||)|{|→|#fun| |apply|(|l|)| |#=| |→|l|.count|(||)|←|←|↵|}|↵|#class| |Lambda2|(|a|)|{|→|#fun| |apply|(|l|)| |#=| |→|(|#new| |Cons|(|a|,| |l|)|)|.count|(||)|←|←|↵|}|↵|#fun| |foo|(|x|)| |#=| |→|x|.apply|(|#new| |Cons|(|1|,| |#new| |Nil|(||)|)|)| |+| |x|.apply|(|#new| |Nil|(||)|)|←|↵|foo|(|#new| |Lambda|(||)|)|↵|foo|(|#new| |Lambda2|(|2|)|)|
//│ Parsed: {class Cons(e, tail,) {fun count =  => + (1,) ((tail).count (),)}; class Nil() {fun count =  => 0}; class Lambda() {fun apply = l, => {(l).count ()}}; class Lambda2(a,) {fun apply = l, => {('(' new Cons(a, l,) {}, ')').count ()}}; fun foo = x, => {+ ((x).apply (new Cons(1, new Nil() {},) {},),) ((x).apply (new Nil() {},),)}; foo (new Lambda() {},); foo (new Lambda2(2,) {},)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Cons, (), Tup(_: Var(e), _: Var(tail)), (), TypingUnit(NuFunDef(None, count, [], Lam(Tup(), App(App(Var(+), Tup(_: IntLit(1))), Tup(_: App(Sel(Var(tail), count), Tup()))))))), NuTypeDef(class, Nil, (), Tup(), (), TypingUnit(NuFunDef(None, count, [], Lam(Tup(), IntLit(0))))), NuTypeDef(class, Lambda, (), Tup(), (), TypingUnit(NuFunDef(None, apply, [], Lam(Tup(_: Var(l)), Blk(...))))), NuTypeDef(class, Lambda2, (), Tup(_: Var(a)), (), TypingUnit(NuFunDef(None, apply, [], Lam(Tup(_: Var(l)), Blk(...))))), NuFunDef(None, foo, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup(_: New(Some((TypeName(Lambda),)), TypingUnit(List())))), App(Var(foo), Tup(_: New(Some((TypeName(Lambda2),2,)), TypingUnit(List())))))
//│ Lifted:
//│ TypingUnit {
//│   class Cons$1(e, tail,) {fun count =  => + (1,) (((this).tail).count (),)}
//│   class Nil$2() {fun count =  => 0}
//│   class Lambda$3() {fun apply = l, => {(l).count ()}}
//│   class Lambda2$4(a,) {
//│     fun apply = l, => {('(' new Cons$1((this).a, l,) {}, ')').count ()}
//│   }
//│   fun foo$1 = x, => {+ ((x).apply (new Cons$1(1, new Nil$2() {},) {},),) ((x).apply (new Nil$2() {},),)}
//│   Code(List(foo$1 (new Lambda$3() {},)))
//│   Code(List(foo$1 (new Lambda2$4(2,) {},)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$5()
//│ main$$6()
//│ fun count$Cons$1(this) =
//│   (#1 + this.tail match {case obj: Cons$1 => count$Cons$1(obj); case obj: Nil$2 => count$Nil$2(obj)})
//│ fun foo$1(x) =
//│   (x match {case obj: Lambda2$4 => apply$Lambda2$4(obj, new Cons$1 (#1, new Nil$2 () ) ); case obj: Lambda$3 => apply$Lambda$3(obj, new Cons$1 (#1, new Nil$2 () ) )} + x match {case obj: Lambda2$4 => apply$Lambda2$4(obj, new Nil$2 () ); case obj: Lambda$3 => apply$Lambda$3(obj, new Nil$2 () )})
//│ fun apply$Lambda$3(this, l) =
//│   l match {case obj: Cons$1 => count$Cons$1(obj); case obj: Nil$2 => count$Nil$2(obj)}
//│ fun count$Nil$2(this) =
//│   #0
//│ fun apply$Lambda2$4(this, l) =
//│   new Cons$1 (this.a, l)  match {case obj: Cons$1 => count$Cons$1(obj)}
//│ fun main$$6() =
//│   foo$1(new Lambda2$4 (#2) )
//│ fun main$$5() =
//│   foo$1(new Lambda$3 () )
//│ class Nil$2() {
//│ }
//│ class Lambda2$4(a) {
//│ }
//│ class Cons$1(e, tail) {
//│ }
//│ class Lambda$3() {
//│ }

:mono
class Cons(e, tail) {
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
fun foo(x) = 
  x(new Cons(1, new Nil())) + x(new Nil())
foo(l => l.count())
foo(l => (new Cons(2, l)).count())
//│ |#class| |Cons|(|e|,| |tail|)| |{|→|#fun| |count|(||)| |#=| |1| |+| |tail|.count|(||)|←|↵|}|↵|#class| |Nil|(||)| |{|→|#fun| |count|(||)| |#=| |0|←|↵|}|↵|#fun| |foo|(|x|)| |#=| |→|x|(|#new| |Cons|(|1|,| |#new| |Nil|(||)|)|)| |+| |x|(|#new| |Nil|(||)|)|←|↵|foo|(|l| |=>| |l|.count|(||)|)|↵|foo|(|l| |=>| |(|#new| |Cons|(|2|,| |l|)|)|.count|(||)|)|
//│ Parsed: {class Cons(e, tail,) {fun count =  => + (1,) ((tail).count (),)}; class Nil() {fun count =  => 0}; fun foo = x, => {+ (x (new Cons(1, new Nil() {},) {},),) (x (new Nil() {},),)}; foo (l, => (l).count (),); foo (l, => ('(' new Cons(2, l,) {}, ')').count (),)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Cons, (), Tup(_: Var(e), _: Var(tail)), (), TypingUnit(NuFunDef(None, count, [], Lam(Tup(), App(App(Var(+), Tup(_: IntLit(1))), Tup(_: App(Sel(Var(tail), count), Tup()))))))), NuTypeDef(class, Nil, (), Tup(), (), TypingUnit(NuFunDef(None, count, [], Lam(Tup(), IntLit(0))))), NuFunDef(None, foo, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup(_: Lam(Tup(_: Var(l)), App(Sel(Var(l), count), Tup())))), App(Var(foo), Tup(_: Lam(Tup(_: Var(l)), App(Sel(Bra(rcd = false, Tup(_: New(Some((TypeName(Cons),2, l,)), TypingUnit(List())))), count), Tup())))))
//│ Lifted:
//│ TypingUnit {
//│   class Cons$1(e, tail,) {fun count =  => + (1,) (((this).tail).count (),)}
//│   class Nil$2() {fun count =  => 0}
//│   class Lambda1$2$3() {fun apply = l, => (l).count ()}
//│   class Lambda1$3$4() {
//│     fun apply = l, => ('(' new Cons$1(2, l,) {}, ')').count ()
//│   }
//│   fun foo$1 = x, => {+ (x (new Cons$1(1, new Nil$2() {},) {},),) (x (new Nil$2() {},),)}
//│   Code(List(foo$1 ({new Lambda1$2$3() {}},)))
//│   Code(List(foo$1 ({new Lambda1$3$4() {}},)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$5()
//│ main$$6()
//│ fun count$Cons$1(this) =
//│   (#1 + this.tail match {case obj: Cons$1 => count$Cons$1(obj); case obj: Nil$2 => count$Nil$2(obj)})
//│ fun foo$1(x) =
//│   (x match {case obj: Lambda1$3$4 => apply$Lambda1$3$4(obj, new Cons$1 (#1, new Nil$2 () ) ); case obj: Lambda1$2$3 => apply$Lambda1$2$3(obj, new Cons$1 (#1, new Nil$2 () ) )} + x match {case obj: Lambda1$3$4 => apply$Lambda1$3$4(obj, new Nil$2 () ); case obj: Lambda1$2$3 => apply$Lambda1$2$3(obj, new Nil$2 () )})
//│ fun count$Nil$2(this) =
//│   #0
//│ fun main$$6() =
//│   foo$1(new Lambda1$3$4 () )
//│ fun main$$5() =
//│   foo$1(new Lambda1$2$3 () )
//│ fun apply$Lambda1$3$4(this, l) =
//│   new Cons$1 (#2, l)  match {case obj: Cons$1 => count$Cons$1(obj)}
//│ fun apply$Lambda1$2$3(this, l) =
//│   l match {case obj: Cons$1 => count$Cons$1(obj); case obj: Nil$2 => count$Nil$2(obj)}
//│ class Lambda1$3$4() {
//│ }
//│ class Nil$2() {
//│ }
//│ class Cons$1(e, tail) {
//│ }
//│ class Lambda1$2$3() {
//│ }

// :mono
class E() {
  fun derive(x) = 
    new E
  fun isEmpty() = 
    false
}
class Ep(){
  fun derive(x) = 
    new E
  fun isEmpty() = 
    true
}
class Ch(i){
  fun derive(x) = 
    if x == i then new Ep else new E
  fun isEmpty() = 
    false
}
class A(e1, e2){
  fun derive(x) = 
    new A(e1.derive(x), e2.derive(x))
  fun isEmpty() = 
    e1.isEmpty() || e2.isEmpty()
}
class C(e1, e2){
  fun derive(x) = 
    if e1.isEmpty() then new A(new C(e1.derive(x), e2), e2.derive(x)) else new C(e1.derive(x), e2)
  fun isEmpty() = 
    e1.isEmpty() && e2.isEmpty()
}
(new C(new Ch(1), new A(new Ch(2), new Ch(3)))).derive(0).isEmpty()
//│ |#class| |E|(||)| |{|→|#fun| |derive|(|x|)| |#=| |→|#new| |E|←|↵|#fun| |isEmpty|(||)| |#=| |→|false|←|←|↵|}|↵|#class| |Ep|(||)|{|→|#fun| |derive|(|x|)| |#=| |→|#new| |E|←|↵|#fun| |isEmpty|(||)| |#=| |→|true|←|←|↵|}|↵|#class| |Ch|(|i|)|{|→|#fun| |derive|(|x|)| |#=| |→|#if| |x| |==| |i| |#then| |#new| |Ep| |#else| |#new| |E|←|↵|#fun| |isEmpty|(||)| |#=| |→|false|←|←|↵|}|↵|#class| |A|(|e1|,| |e2|)|{|→|#fun| |derive|(|x|)| |#=| |→|#new| |A|(|e1|.derive|(|x|)|,| |e2|.derive|(|x|)|)|←|↵|#fun| |isEmpty|(||)| |#=| |→|e1|.isEmpty|(||)| |||| |e2|.isEmpty|(||)|←|←|↵|}|↵|#class| |C|(|e1|,| |e2|)|{|→|#fun| |derive|(|x|)| |#=| |→|#if| |e1|.isEmpty|(||)| |#then| |#new| |A|(|#new| |C|(|e1|.derive|(|x|)|,| |e2|)|,| |e2|.derive|(|x|)|)| |#else| |#new| |C|(|e1|.derive|(|x|)|,| |e2|)|←|↵|#fun| |isEmpty|(||)| |#=| |→|e1|.isEmpty|(||)| |&&| |e2|.isEmpty|(||)|←|←|↵|}|↵|(|#new| |C|(|#new| |Ch|(|1|)|,| |#new| |A|(|#new| |Ch|(|2|)|,| |#new| |Ch|(|3|)|)|)|)|.derive|(|0|)|.isEmpty|(||)|
//│ Parsed: {class E() {fun derive = x, => {new E() {}}; fun isEmpty =  => {false}}; class Ep() {fun derive = x, => {new E() {}}; fun isEmpty =  => {true}}; class Ch(i,) {fun derive = x, => {if (== (x,) (i,)) then new Ep() {} else new E() {}}; fun isEmpty =  => {false}}; class A(e1, e2,) {fun derive = x, => {new A((e1).derive (x,), (e2).derive (x,),) {}}; fun isEmpty =  => {|| ((e1).isEmpty (),) ((e2).isEmpty (),)}}; class C(e1, e2,) {fun derive = x, => {if ((e1).isEmpty ()) then new A(new C((e1).derive (x,), e2,) {}, (e2).derive (x,),) {} else new C((e1).derive (x,), e2,) {}}; fun isEmpty =  => {&& ((e1).isEmpty (),) ((e2).isEmpty (),)}}; (('(' new C(new Ch(1,) {}, new A(new Ch(2,) {}, new Ch(3,) {},) {},) {}, ')').derive (0,)).isEmpty ()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, E, (), Tup(), (), TypingUnit(NuFunDef(None, derive, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, [], Lam(Tup(), Blk(...))))), NuTypeDef(class, Ep, (), Tup(), (), TypingUnit(NuFunDef(None, derive, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, [], Lam(Tup(), Blk(...))))), NuTypeDef(class, Ch, (), Tup(_: Var(i)), (), TypingUnit(NuFunDef(None, derive, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, [], Lam(Tup(), Blk(...))))), NuTypeDef(class, A, (), Tup(_: Var(e1), _: Var(e2)), (), TypingUnit(NuFunDef(None, derive, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, [], Lam(Tup(), Blk(...))))), NuTypeDef(class, C, (), Tup(_: Var(e1), _: Var(e2)), (), TypingUnit(NuFunDef(None, derive, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, [], Lam(Tup(), Blk(...))))), App(Sel(App(Sel(Bra(rcd = false, Tup(_: New(Some((TypeName(C),new Ch(1,) {}, new A(new Ch(2,) {}, new Ch(3,) {},) {},)), TypingUnit(List())))), derive), Tup(_: IntLit(0))), isEmpty), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class E$1() {
//│     fun derive = x, => {new E$1() {}}
//│     fun isEmpty =  => {false}
//│   }
//│   class Ep$2() {
//│     fun derive = x, => {new E$1() {}}
//│     fun isEmpty =  => {true}
//│   }
//│   class Ch$3(i,) {
//│     fun derive = x, => {if (== (x,) ((this).i,)) then new Ep$2() {} else new E$1() {}}
//│     fun isEmpty =  => {false}
//│   }
//│   class A$4(e1, e2,) {
//│     fun derive = x, => {new A$4(((this).e1).derive (x,), ((this).e2).derive (x,),) {}}
//│     fun isEmpty =  => {|| (((this).e1).isEmpty (),) (((this).e2).isEmpty (),)}
//│   }
//│   class C$5(e1, e2,) {
//│     fun derive = x, => {if (((this).e1).isEmpty ()) then new A$4(new C$5(((this).e1).derive (x,), (this).e2,) {}, ((this).e2).derive (x,),) {} else new C$5(((this).e1).derive (x,), (this).e2,) {}}
//│     fun isEmpty =  => {&& (((this).e1).isEmpty (),) (((this).e2).isEmpty (),)}
//│   }
//│   Code(List((('(' new C$5(new Ch$3(1,) {}, new A$4(new Ch$3(2,) {}, new Ch$3(3,) {},) {},) {}, ')').derive (0,)).isEmpty ()))
//│ }


// :mono
class List(l, hasTail)  {}
class Nil(hasTail)  {}
fun gen() = 
  if anyUnknown then new List(gen(), true) else new Nil(false)
gen()
//│ |#class| |List|(|l|,| |hasTail|)| |{||}|↵|#class| |Nil|(|hasTail|)| |{||}|↵|#fun| |gen|(||)| |#=| |→|#if| |anyUnknown| |#then| |#new| |List|(|gen|(||)|,| |true|)| |#else| |#new| |Nil|(|false|)|←|↵|gen|(||)|
//│ Parsed: {class List(l, hasTail,) {}; class Nil(hasTail,) {}; fun gen =  => {if (anyUnknown) then new List(gen (), true,) {} else new Nil(false,) {}}; gen ()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, List, (), Tup(_: Var(l), _: Var(hasTail)), (), TypingUnit()), NuTypeDef(class, Nil, (), Tup(_: Var(hasTail)), (), TypingUnit()), NuFunDef(None, gen, [], Lam(Tup(), Blk(...))), App(Var(gen), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class List$1(l, hasTail,) {}
//│   class Nil$2(hasTail,) {}
//│   fun gen$1 =  => {if (anyUnknown) then new List$1(gen$1 (), true,) {} else new Nil$2(false,) {}}
//│   Code(List(gen$1 ()))
//│ }



// :mono
class Foo(x){
  fun bar(y) = x+y
  fun boo(z) = bar(z)+x
}
(new Foo(1)).boo(2)
//│ |#class| |Foo|(|x|)|{|→|#fun| |bar|(|y|)| |#=| |x|+|y|↵|#fun| |boo|(|z|)| |#=| |bar|(|z|)|+|x|←|↵|}|↵|(|#new| |Foo|(|1|)|)|.boo|(|2|)|
//│ Parsed: {class Foo(x,) {fun bar = y, => + (x,) (y,); fun boo = z, => + (bar (z,),) (x,)}; ('(' new Foo(1,) {}, ')').boo (2,)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Foo, (), Tup(_: Var(x)), (), TypingUnit(NuFunDef(None, bar, [], Lam(Tup(_: Var(y)), App(App(Var(+), Tup(_: Var(x))), Tup(_: Var(y))))), NuFunDef(None, boo, [], Lam(Tup(_: Var(z)), App(App(Var(+), Tup(_: App(Var(bar), Tup(_: Var(z))))), Tup(_: Var(x))))))), App(Sel(Bra(rcd = false, Tup(_: New(Some((TypeName(Foo),1,)), TypingUnit(List())))), boo), Tup(_: IntLit(2))))
//│ Lifted:
//│ TypingUnit {
//│   class Foo$1(x,) {
//│     fun bar = y, => + ((this).x,) (y,)
//│     fun boo = z, => + ((this).bar (z,),) ((this).x,)
//│   }
//│   Code(List(('(' new Foo$1(1,) {}, ')').boo (2,)))
//│ }

// :mono
class OneInt(a){
  fun fac() = 
    if(a > 0) then (new OneInt(a-1)).fac() else 1 
}
(new OneInt(10)).fac()
//│ |#class| |OneInt|(|a|)|{|→|#fun| |fac|(||)| |#=| |→|#if|(|a| |>| |0|)| |#then| |(|#new| |OneInt|(|a|-|1|)|)|.fac|(||)| |#else| |1| |←|←|↵|}|↵|(|#new| |OneInt|(|10|)|)|.fac|(||)|
//│ Parsed: {class OneInt(a,) {fun fac =  => {if ('(' > (a,) (0,), ')') then ('(' new OneInt(- (a,) (1,),) {}, ')').fac () else 1}}; ('(' new OneInt(10,) {}, ')').fac ()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, OneInt, (), Tup(_: Var(a)), (), TypingUnit(NuFunDef(None, fac, [], Lam(Tup(), Blk(...))))), App(Sel(Bra(rcd = false, Tup(_: New(Some((TypeName(OneInt),10,)), TypingUnit(List())))), fac), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class OneInt$1(a,) {
//│     fun fac =  => {if ('(' > ((this).a,) (0,), ')') then ('(' new OneInt$1(- ((this).a,) (1,),) {}, ')').fac () else 1}
//│   }
//│   Code(List(('(' new OneInt$1(10,) {}, ')').fac ()))
//│ }

:mono
trait AnyFoo {
  fun bar(b): int
}
class FooPlus(#a): AnyFoo {
  fun bar(b) = a + b
}
class FooMinus(#a): AnyFoo {
  fun bar(b) = a - b
}
fun f(x) = x.bar(42)
f(new FooPlus(1))
f(new FooMinus(2))
//│ |#trait| |AnyFoo| |{|→|#fun| |bar|(|b|)|#:| |int|←|↵|}|↵|#class| |FooPlus|(|##|a|)|#:| |AnyFoo| |{|→|#fun| |bar|(|b|)| |#=| |a| |+| |b|←|↵|}|↵|#class| |FooMinus|(|##|a|)|#:| |AnyFoo| |{|→|#fun| |bar|(|b|)| |#=| |a| |-| |b|←|↵|}|↵|#fun| |f|(|x|)| |#=| |x|.bar|(|42|)|↵|f|(|#new| |FooPlus|(|1|)|)|↵|f|(|#new| |FooMinus|(|2|)|)|
//│ Parsed: {trait AnyFoo(): {fun bar: [] -> b -> int}; class FooPlus(#a,): AnyFoo {fun bar = b, => + (a,) (b,)}; class FooMinus(#a,): AnyFoo {fun bar = b, => - (a,) (b,)}; fun f = x, => (x).bar (42,); f (new FooPlus(1,) {},); f (new FooMinus(2,) {},)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(trait, AnyFoo, (), Tup(), (), TypingUnit(NuFunDef(None, bar, [], PolyType(List(),Function(Tuple(List((None,Field(None,TypeName(b))))),TypeName(int)))))), NuTypeDef(class, FooPlus, (), Tup(_: Var(a)), (Var(AnyFoo)), TypingUnit(NuFunDef(None, bar, [], Lam(Tup(_: Var(b)), App(App(Var(+), Tup(_: Var(a))), Tup(_: Var(b))))))), NuTypeDef(class, FooMinus, (), Tup(_: Var(a)), (Var(AnyFoo)), TypingUnit(NuFunDef(None, bar, [], Lam(Tup(_: Var(b)), App(App(Var(-), Tup(_: Var(a))), Tup(_: Var(b))))))), NuFunDef(None, f, [], Lam(Tup(_: Var(x)), App(Sel(Var(x), bar), Tup(_: IntLit(42))))), App(Var(f), Tup(_: New(Some((TypeName(FooPlus),1,)), TypingUnit(List())))), App(Var(f), Tup(_: New(Some((TypeName(FooMinus),2,)), TypingUnit(List())))))
//│ Lifted:
//│ TypingUnit {
//│   trait AnyFoo$1() {fun bar = b -> int}
//│   class FooPlus$2(#a,): AnyFoo$1 () {fun bar = b, => + ((this).a,) (b,)}
//│   class FooMinus$3(#a,): AnyFoo$1 () {fun bar = b, => - ((this).a,) (b,)}
//│   fun f$1 = x, => (x).bar (42,)
//│   Code(List(f$1 (new FooPlus$2(1,) {},)))
//│   Code(List(f$1 (new FooMinus$3(2,) {},)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$4()
//│ main$$5()
//│ fun bar$FooPlus$2(this, b) =
//│   (this.a + b)
//│ fun f$1(x) =
//│   x match {case obj: FooMinus$3 => bar$FooMinus$3(obj, #42); case obj: FooPlus$2 => bar$FooPlus$2(obj, #42)}
//│ fun main$$5() =
//│   f$1(new FooMinus$3 (#2) )
//│ fun bar$FooMinus$3(this, b) =
//│   (this.a - b)
//│ fun main$$4() =
//│   f$1(new FooPlus$2 (#1) )
//│ trait AnyFoo$1() {
//│ }
//│ class FooPlus$2(#a): AnyFoo$1() {
//│ }
//│ class FooMinus$3(#a): AnyFoo$1() {
//│ }

:mono
fun f(x) = 
  if x > any then 0
  else g(x-1)
fun g(x) = 
  if x > any then g(x-1)
  else f(x-2)
g(1)
//│ |#fun| |f|(|x|)| |#=| |→|#if| |x| |>| |any| |#then| |0|↵|#else| |g|(|x|-|1|)|←|↵|#fun| |g|(|x|)| |#=| |→|#if| |x| |>| |any| |#then| |g|(|x|-|1|)|↵|#else| |f|(|x|-|2|)|←|↵|g|(|1|)|
//│ Parsed: {fun f = x, => {if (> (x,) (any,)) then 0 else g (- (x,) (1,),)}; fun g = x, => {if (> (x,) (any,)) then g (- (x,) (1,),) else f (- (x,) (2,),)}; g (1,)}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, g, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(g), Tup(_: IntLit(1))))
//│ Lifted:
//│ TypingUnit {
//│   fun f$1 = x, => {if (> (x,) (any,)) then 0 else g$2 (- (x,) (1,),)}
//│   fun g$2 = x, => {if (> (x,) (any,)) then g$2 (- (x,) (1,),) else f$1 (- (x,) (2,),)}
//│   Code(List(g$2 (1,)))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$2()
//│ fun f$1(x) =
//│   if (x > any) then #0 else g$2((x - #1))
//│ fun g$2(x) =
//│   if (x > any) then g$2((x - #1)) else f$1((x - #2))
//│ fun main$$2() =
//│   g$2(#1)

:mono
class OneInt(a){
  fun get = a
}
class OneBool(b){
  fun get = b
}
(if b then new OneInt(1) else new OneBool(true)).get()
//│ |#class| |OneInt|(|a|)|{|→|#fun| |get| |#=| |a|←|↵|}|↵|#class| |OneBool|(|b|)|{|→|#fun| |get| |#=| |b|←|↵|}|↵|(|#if| |b| |#then| |#new| |OneInt|(|1|)| |#else| |#new| |OneBool|(|true|)|)|.get|(||)|
//│ Parsed: {class OneInt(a,) {fun get = a}; class OneBool(b,) {fun get = b}; ('(' if (b) then new OneInt(1,) {} else new OneBool(true,) {}, ')').get ()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, OneInt, (), Tup(_: Var(a)), (), TypingUnit(NuFunDef(None, get, [], Var(a)))), NuTypeDef(class, OneBool, (), Tup(_: Var(b)), (), TypingUnit(NuFunDef(None, get, [], Var(b)))), App(Sel(Bra(rcd = false, Tup(_: If((b) then new OneInt(1,) {}, Some(New(Some((TypeName(OneBool),true,)), TypingUnit(List())))))), get), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class OneInt$1(a,) {fun get =  => (this).a}
//│   class OneBool$2(b,) {fun get =  => (this).b}
//│   Code(List(('(' if (b) then new OneInt$1(1,) {} else new OneBool$2(true,) {}, ')').get ()))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$2()
//│ fun get$OneInt$1(this) =
//│   this.a
//│ fun get$OneBool$2(this) =
//│   this.b
//│ fun main$$2() =
//│   if b then new OneInt$1 (#1)  else new OneBool$2 (true)  match {case obj: OneInt$1 => get$OneInt$1(obj); case obj: OneBool$2 => get$OneBool$2(obj)}
//│ class OneInt$1(a) {
//│ }
//│ class OneBool$2(b) {
//│ }

// :mono
class Bar(x: int) {
  fun FooMinus(y: int) = x + y
  fun car = foo(2)
}
class Car {
  fun da(b: Bar) = b.foo(2)
}
fun baz(b: Bar) = b.foo(2)
let bar = Bar(42)
baz(bar)
Car().da(Bar(1337))
bar.car
//│ |#class| |Bar|(|x|#:| |int|)| |{|→|#fun| |FooMinus|(|y|#:| |int|)| |#=| |x| |+| |y|↵|#fun| |car| |#=| |foo|(|2|)|←|↵|}|↵|#class| |Car| |{|→|#fun| |da|(|b|#:| |Bar|)| |#=| |b|.foo|(|2|)|←|↵|}|↵|#fun| |baz|(|b|#:| |Bar|)| |#=| |b|.foo|(|2|)|↵|#let| |bar| |#=| |Bar|(|42|)|↵|baz|(|bar|)|↵|Car|(||)|.da|(|Bar|(|1337|)|)|↵|bar|.car|
//│ Parsed: {class Bar(x: int,) {fun FooMinus = y: int, => + (x,) (y,); fun car = foo (2,)}; class Car() {fun da = b: Bar, => (b).foo (2,)}; fun baz = b: Bar, => (b).foo (2,); let bar = Bar (42,); baz (bar,); (Car ()).da (Bar (1337,),); (bar).car}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Bar, (), Tup(x: Var(int)), (), TypingUnit(NuFunDef(None, FooMinus, [], Lam(Tup(y: Var(int)), App(App(Var(+), Tup(_: Var(x))), Tup(_: Var(y))))), NuFunDef(None, car, [], App(Var(foo), Tup(_: IntLit(2)))))), NuTypeDef(class, Car, (), Tup(), (), TypingUnit(NuFunDef(None, da, [], Lam(Tup(b: Var(Bar)), App(Sel(Var(b), foo), Tup(_: IntLit(2))))))), NuFunDef(None, baz, [], Lam(Tup(b: Var(Bar)), App(Sel(Var(b), foo), Tup(_: IntLit(2))))), NuFunDef(Some(false), bar, [], App(Var(Bar), Tup(_: IntLit(42)))), App(Var(baz), Tup(_: Var(bar))), App(Sel(App(Var(Car), Tup()), da), Tup(_: App(Var(Bar), Tup(_: IntLit(1337))))), Sel(Var(bar), car))
//│ Lifted:
//│ TypingUnit {
//│   class Bar$1(x: int,) {
//│     fun FooMinus = y: int, => + ((this).x,) (y,)
//│     fun car =  => foo (2,)
//│   }
//│   class Car$2() {fun da = b: Bar$1, => (b).foo (2,)}
//│   fun baz$2 = b: Bar$1, => (b).foo (2,)
//│   let bar$1 =  => Bar$1 (42,)
//│   Code(List(baz$2 (bar,)))
//│   Code(List((Car$2 ()).da (Bar$1 (1337,),)))
//│   Code(List((bar).car))
//│ }

:mono
class Sup(a){
  fun foo = a
}
class Sub(b): Sup(b+b){
}
class Sub2(c): Sub(c+c){
  fun foo = a+c
}
(new Sub(10)).foo()
(new Sub2(c)).foo()
//│ |#class| |Sup|(|a|)|{|→|#fun| |foo| |#=| |a|←|↵|}|↵|#class| |Sub|(|b|)|#:| |Sup|(|b|+|b|)|{|↵|}|↵|#class| |Sub2|(|c|)|#:| |Sub|(|c|+|c|)|{|→|#fun| |foo| |#=| |a|+|c|←|↵|}|↵|(|#new| |Sub|(|10|)|)|.foo|(||)|↵|(|#new| |Sub2|(|c|)|)|.foo|(||)|
//│ Parsed: {class Sup(a,) {fun foo = a}; class Sub(b,): Sup (+ (b,) (b,),) {}; class Sub2(c,): Sub (+ (c,) (c,),) {fun foo = + (a,) (c,)}; ('(' new Sub(10,) {}, ')').foo (); ('(' new Sub2(c,) {}, ')').foo ()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Sup, (), Tup(_: Var(a)), (), TypingUnit(NuFunDef(None, foo, [], Var(a)))), NuTypeDef(class, Sub, (), Tup(_: Var(b)), (App(Var(Sup), Tup(_: App(App(Var(+), Tup(_: Var(b))), Tup(_: Var(b)))))), TypingUnit()), NuTypeDef(class, Sub2, (), Tup(_: Var(c)), (App(Var(Sub), Tup(_: App(App(Var(+), Tup(_: Var(c))), Tup(_: Var(c)))))), TypingUnit(NuFunDef(None, foo, [], App(App(Var(+), Tup(_: Var(a))), Tup(_: Var(c)))))), App(Sel(Bra(rcd = false, Tup(_: New(Some((TypeName(Sub),10,)), TypingUnit(List())))), foo), Tup()), App(Sel(Bra(rcd = false, Tup(_: New(Some((TypeName(Sub2),c,)), TypingUnit(List())))), foo), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class Sup$1(a,) {fun foo =  => (this).a}
//│   class Sub$2(b,): Sup$1 (+ ((this).b,) ((this).b,),) {}
//│   class Sub2$3(c,): Sub$2 (+ ((this).c,) ((this).c,),) {fun foo =  => + ((this).a,) ((this).c,)}
//│   Code(List(('(' new Sub$2(10,) {}, ')').foo ()))
//│   Code(List(('(' new Sub2$3(c,) {}, ')').foo ()))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$3()
//│ main$$4()
//│ fun main$$4() =
//│   new Sub2$3 (c)  match {case obj: Sub2$3 => foo$Sub2$3(obj)}
//│ fun foo$Sup$1(this) =
//│   this.a
//│ fun foo$Sub2$3(this) =
//│   (this.a + this.c)
//│ fun main$$3() =
//│   new Sub$2 (#10)  match {case obj: Sub$2 => foo$Sup$1(obj)}
//│ class Sub2$3(c): Sub$2((this.c + this.c)) {
//│ }
//│ class Sup$1(a) {
//│ }
//│ class Sub$2(b): Sup$1((this.b + this.b)) {
//│ }

:mono
class Foo(f){
  fun foo = f(1)
}
class F1(): Foo(x => x+1){}
class F2(): Foo(x => x+2){}
(new F1()).foo()
(new F2()).foo()
//│ |#class| |Foo|(|f|)|{|→|#fun| |foo| |#=| |f|(|1|)|←|↵|}|↵|#class| |F1|(||)|#:| |Foo|(|x| |=>| |x|+|1|)|{||}|↵|#class| |F2|(||)|#:| |Foo|(|x| |=>| |x|+|2|)|{||}|↵|(|#new| |F1|(||)|)|.foo|(||)|↵|(|#new| |F2|(||)|)|.foo|(||)|
//│ Parsed: {class Foo(f,) {fun foo = f (1,)}; class F1(): Foo (x, => + (x,) (1,),) {}; class F2(): Foo (x, => + (x,) (2,),) {}; ('(' new F1() {}, ')').foo (); ('(' new F2() {}, ')').foo ()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Foo, (), Tup(_: Var(f)), (), TypingUnit(NuFunDef(None, foo, [], App(Var(f), Tup(_: IntLit(1)))))), NuTypeDef(class, F1, (), Tup(), (App(Var(Foo), Tup(_: Lam(Tup(_: Var(x)), App(App(Var(+), Tup(_: Var(x))), Tup(_: IntLit(1))))))), TypingUnit()), NuTypeDef(class, F2, (), Tup(), (App(Var(Foo), Tup(_: Lam(Tup(_: Var(x)), App(App(Var(+), Tup(_: Var(x))), Tup(_: IntLit(2))))))), TypingUnit()), App(Sel(Bra(rcd = false, Tup(_: New(Some((TypeName(F1),)), TypingUnit(List())))), foo), Tup()), App(Sel(Bra(rcd = false, Tup(_: New(Some((TypeName(F2),)), TypingUnit(List())))), foo), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class Foo$1(f,) {fun foo =  => (this).f (1,)}
//│   class F1$2_Lambda1$1$4(par$F1$2,) {fun apply = x, => + (x,) (1,)}
//│   class F1$2(): Foo$1 ({new F1$2_Lambda1$1$4(this,) {}},) {}
//│   class F2$3_Lambda1$2$5(par$F2$3,) {fun apply = x, => + (x,) (2,)}
//│   class F2$3(): Foo$1 ({new F2$3_Lambda1$2$5(this,) {}},) {}
//│   Code(List(('(' new F1$2() {}, ')').foo ()))
//│   Code(List(('(' new F2$3() {}, ')').foo ()))
//│ }
//│ Mono:
//│ 
//│ Defunc result: 
//│ main$$5()
//│ main$$6()
//│ fun apply$F2$3_Lambda1$2$5(this, x) =
//│   (x + #2)
//│ fun foo$Foo$1(this) =
//│   this match {case obj: Foo$1 => obj.f match {case obj$F2$3_Lambda1$2$5: F2$3_Lambda1$2$5 => apply$F2$3_Lambda1$2$5(obj$F2$3_Lambda1$2$5, #1); case obj$F1$2_Lambda1$1$4: F1$2_Lambda1$1$4 => apply$F1$2_Lambda1$1$4(obj$F1$2_Lambda1$1$4, #1)}}
//│ fun main$$6() =
//│   new F2$3 ()  match {case obj: F2$3 => foo$Foo$1(obj)}
//│ fun main$$5() =
//│   new F1$2 ()  match {case obj: F1$2 => foo$Foo$1(obj)}
//│ fun apply$F1$2_Lambda1$1$4(this, x) =
//│   (x + #1)
//│ class F1$2(): Foo$1(new F1$2_Lambda1$1$4 (this) ) {
//│ }
//│ class F2$3_Lambda1$2$5(par$F2$3) {
//│ }
//│ class F2$3(): Foo$1(new F2$3_Lambda1$2$5 (this) ) {
//│ }
//│ class Foo$1(f) {
//│ }
//│ class F1$2_Lambda1$1$4(par$F1$2) {
//│ }
