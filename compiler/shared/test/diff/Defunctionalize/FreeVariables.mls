:NewDefs

:mono
class X() {
    val num = 5
    fun get() = num
}
X().get()
//│ Lifted:
//│ TypingUnit {
//│   class X$1([]) {let num = 5; fun get = () => (this).num}
//│   Code(List((X$1()).get()))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class X$1([]) {}
//│   let num$X$1 = (this,) => 5
//│   fun get$X$1 = (this,) => let obj = this in if obj is ‹(X$1) then num$X$1(obj,); else error›
//│   fun main$$1 = () => let obj = X$1() in if obj is ‹(X$1) then get$X$1(obj,); else error›
//│   Code(List(main$$1()))
//│ }
//│ class X$1()
//│ let num$X$1: anything -> 5
//│ fun get$X$1: Object -> 5
//│ fun main$$1: () -> 5
//│ 5
//│ num$X$1
//│         = [Function: num$X$1]
//│ res
//│     = 5
