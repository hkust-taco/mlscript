:NewDefs

// FIXME: Preserve local state in classes
:mono
class X() {
    val a = 
        log("ok")
        6
}
val object = X()
(new X()).a
(new X()).a
object.a
object.a
//│ Lifted:
//│ TypingUnit {
//│   class X$1([]) {let a = {log("ok",); 6}}
//│   let object$1 = X$1()
//│   Code(List(('(' (new X$1)() ')').a))
//│   Code(List(('(' (new X$1)() ')').a))
//│   Code(List((object$1).a))
//│   Code(List((object$1).a))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class X$1([]) {}
//│   let object$1 = X$1()
//│   let a$X$1 = (this,) => {log("ok",); 6}
//│   fun main$$5 = () => let obj = object$1 in if obj is ‹(X$1) then a$X$1(obj,); else error›
//│   fun main$$4 = () => let obj = object$1 in if obj is ‹(X$1) then a$X$1(obj,); else error›
//│   fun main$$3 = () => let obj = '(' (new X$1)() ')' in if obj is ‹(X$1) then a$X$1(obj,); else error›
//│   fun main$$2 = () => let obj = '(' (new X$1)() ')' in if obj is ‹(X$1) then a$X$1(obj,); else error›
//│   Code(List(main$$2()))
//│   Code(List(main$$3()))
//│   Code(List(main$$4()))
//│   Code(List(main$$5()))
//│ }
//│ class X$1()
//│ let object$1: X$1
//│ let a$X$1: anything -> 6
//│ fun main$$5: () -> 6
//│ fun main$$4: () -> 6
//│ fun main$$3: () -> 6
//│ fun main$$2: () -> 6
//│ 6
//│ object$1
//│          = X$1 {}
//│ a$X$1
//│       = [Function: a$X$1]
//│ res
//│     = 6
//│ // Output
//│ ok
//│ res
//│     = 6
//│ // Output
//│ ok
//│ res
//│     = 6
//│ // Output
//│ ok
//│ res
//│     = 6
//│ // Output
//│ ok
