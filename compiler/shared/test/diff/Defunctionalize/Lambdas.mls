:NewDefs

:mono
((f, g) => f(g))(f => f, true)
//│ Lifted:
//│ TypingUnit {
//│   class Lambda2$1$1([]) {fun apply = (f, g,) => f(g,)}
//│   class Lambda1$2$2([]) {fun apply = (f,) => f}
//│   Code(List('(' {Lambda2$1$1()} ')'({Lambda1$2$2()}, true,)))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class Lambda2$1$1([]) {}
//│   class Lambda1$2$2([]) {}
//│   fun apply$Lambda2$1$1 = (this, f, g,) => let obj = f in if obj is ‹(Lambda1$2$2) then apply$Lambda1$2$2(obj, g,); else error›
//│   fun main$$2 = () => let obj = '(' {Lambda2$1$1()} ')' in if obj is ‹(Lambda2$1$1) then apply$Lambda2$1$1(obj, {Lambda1$2$2()}, true,); else error›
//│   fun apply$Lambda1$2$2 = (this, f,) => f
//│   Code(List(main$$2()))
//│ }
//│ class Lambda2$1$1()
//│ class Lambda1$2$2()
//│ fun apply$Lambda2$1$1: forall 'a. (anything, Object, 'a) -> 'a
//│ fun main$$2: () -> true
//│ fun apply$Lambda1$2$2: forall 'a. (anything, 'a) -> 'a
//│ true
//│ res
//│     = true

:mono
(b => if b then true else false) (true)
//│ Lifted:
//│ TypingUnit {
//│   class Lambda1$1$1([]) {fun apply = (b,) => if (b) then true else false}
//│   Code(List('(' {Lambda1$1$1()} ')'(true,)))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class Lambda1$1$1([]) {}
//│   fun apply$Lambda1$1$1 = (this, b,) => if (b) then true else false
//│   fun main$$1 = () => let obj = '(' {Lambda1$1$1()} ')' in if obj is ‹(Lambda1$1$1) then apply$Lambda1$1$1(obj, true,); else error›
//│   Code(List(main$$1()))
//│ }
//│ class Lambda1$1$1()
//│ fun apply$Lambda1$1$1: (anything, Object) -> Bool
//│ fun main$$1: () -> Bool
//│ Bool
//│ res
//│     = true

