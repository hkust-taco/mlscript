:NewDefs

// FIXME: Preserve local state in classes
:mono
class G(val num: Int) {
    val x = 
        log("once on construction")
        num+2
    val y() =
        log("once every call")
        num+2
}
val g = new G(6)
g.y()
g.x
g.y()
g.x
//│ Lifted:
//│ TypingUnit {
//│   class G$1([val num: Int,]) {
//│     let x = {log("once on construction",); +((this).num, 2,)}
//│     let y = () => {log("once every call",); +((this).num, 2,)}
//│   }
//│   let g$1 = (new G$1)(6,)
//│   Code(List((g$1).y()))
//│   Code(List((g$1).x))
//│   Code(List((g$1).y()))
//│   Code(List((g$1).x))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class G$1([val num: Int,]) {}
//│   let y$G$1 = (this,) => {log("once every call",); +(let obj = this in if obj is ‹(G$1) then 6; else error›, 2,)}
//│   let x$G$1 = (this,) => {log("once on construction",); +(let obj = this in if obj is ‹(G$1) then 6; else error›, 2,)}
//│   let g$1 = (new G$1)(6,)
//│   fun main$$5 = () => let obj = g$1 in if obj is ‹(G$1) then x$G$1(obj,); else error›
//│   fun main$$4 = () => let obj = g$1 in if obj is ‹(G$1) then y$G$1(obj,); else error›
//│   fun main$$3 = () => let obj = g$1 in if obj is ‹(G$1) then x$G$1(obj,); else error›
//│   fun main$$2 = () => let obj = g$1 in if obj is ‹(G$1) then y$G$1(obj,); else error›
//│   Code(List(main$$2()))
//│   Code(List(main$$3()))
//│   Code(List(main$$4()))
//│   Code(List(main$$5()))
//│ }
//│ class G$1(num: Int)
//│ let y$G$1: Object -> Int
//│ let x$G$1: Object -> Int
//│ let g$1: G$1
//│ fun main$$5: () -> Int
//│ fun main$$4: () -> Int
//│ fun main$$3: () -> Int
//│ fun main$$2: () -> Int
//│ Int
//│ y$G$1
//│       = [Function: y$G$1]
//│ x$G$1
//│       = [Function: x$G$1]
//│ g$1
//│     = G$1 {}
//│ res
//│     = 8
//│ // Output
//│ once every call
//│ res
//│     = 8
//│ // Output
//│ once on construction
//│ res
//│     = 8
//│ // Output
//│ once every call
//│ res
//│     = 8
//│ // Output
//│ once on construction
