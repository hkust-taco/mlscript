:NewDefs

// old "new" syntax
//:mono
//class A() {
//    val num() = 0
//}
//class B() {
//    val num() = 1
//}
//fun foo(num: Int) = if false then new A() else new B()
//foo(10).num()


:mono
class A() {
    val num() = 0
}
class B() {
    val num() = 1
}
fun foo(num: Int) = if num > 5 then A() else B()
foo(10).num()
//│ Lifted:
//│ TypingUnit {
//│   class A$1([]) {let num = () => 0}
//│   class B$2([]) {let num = () => 1}
//│   fun foo$1 = (num: Int,) => if (>(num, 5,)) then A$1() else B$2()
//│   Code(List((foo$1(10,)).num()))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class B$2([]) {}
//│   class A$1([]) {}
//│   fun foo$1 = (num: Int,) => if (>(num, 5,)) then A$1() else B$2()
//│   let num$A$1 = (this,) => 0
//│   let num$B$2 = (this,) => 1
//│   fun main$$3 = () => let obj = foo$1(10,) in if obj is ‹(B$2) then num$B$2(obj,); (A$1) then num$A$1(obj,); else error›
//│   Code(List(main$$3()))
//│ }
//│ class B$2()
//│ class A$1()
//│ fun foo$1: (num: Int) -> (A$1 | B$2)
//│ let num$A$1: anything -> 0
//│ let num$B$2: anything -> 1
//│ fun main$$3: () -> (0 | 1)
//│ 0 | 1
//│ num$A$1
//│         = [Function: num$A$1]
//│ num$B$2
//│         = [Function: num$B$2]
//│ res
//│     = 0


:mono
class A(val num1: Int, val num2: Int) {
    fun foo() = num1-num2
}
class B(val num1: Int, val num2: Int) {
    fun foo() = num1+num2
}
fun foo(num: Int) = if num > 5 then A(10,6) else B(8,7)
foo(10).foo()
foo(0).foo()
//│ Lifted:
//│ TypingUnit {
//│   class A$1([val num1: Int, val num2: Int,]) {fun foo = () => -((this).num1, (this).num2,)}
//│   class B$2([val num1: Int, val num2: Int,]) {fun foo = () => +((this).num1, (this).num2,)}
//│   fun foo$1 = (num: Int,) => if (>(num, 5,)) then A$1(10, 6,) else B$2(8, 7,)
//│   Code(List((foo$1(10,)).foo()))
//│   Code(List((foo$1(0,)).foo()))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class B$2([val num1: Int, val num2: Int,]) {}
//│   class A$1([val num1: Int, val num2: Int,]) {}
//│   fun foo$B$2 = (this,) => +(let obj = this in if obj is ‹(B$2) then 8; else error›, let obj = this in if obj is ‹(B$2) then 7; else error›,)
//│   fun foo$1 = (num: Int,) => if (>(num, 5,)) then A$1(10, 6,) else B$2(8, 7,)
//│   fun foo$A$1 = (this,) => -(let obj = this in if obj is ‹(A$1) then 10; else error›, let obj = this in if obj is ‹(A$1) then 6; else error›,)
//│   fun main$$4 = () => let obj = foo$1(0,) in if obj is ‹(B$2) then foo$B$2(obj,); (A$1) then foo$A$1(obj,); else error›
//│   fun main$$3 = () => let obj = foo$1(10,) in if obj is ‹(B$2) then foo$B$2(obj,); (A$1) then foo$A$1(obj,); else error›
//│   Code(List(main$$3()))
//│   Code(List(main$$4()))
//│ }
//│ class B$2(num1: Int, num2: Int)
//│ class A$1(num1: Int, num2: Int)
//│ fun foo$B$2: Object -> Int
//│ fun foo$1: (num: Int) -> (A$1 | B$2)
//│ fun foo$A$1: Object -> Int
//│ fun main$$4: () -> Int
//│ fun main$$3: () -> Int
//│ Int
//│ res
//│     = 4
//│ res
//│     = 15
