:NewDefs

:mono
class Sup {
    fun add(num1, num2) = num1+num2
}
class Sub1() extends Sup {}
class Sub2() extends Sub1() {}
Sub1().add(3,4)
Sub2().add(5,6)
//│ Lifted:
//│ TypingUnit {
//│   class Sup$1([]) {fun add = (num1, num2,) => +(num1, num2,)}
//│   class Sub1$2([]): Sup$1 {}
//│   class Sub2$3([]): Sub1$2() {}
//│   Code(List((Sub1$2()).add(3, 4,)))
//│   Code(List((Sub2$3()).add(5, 6,)))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class Sub2$3([]): Sub1$2() {}
//│   class Sup$1([]) {}
//│   class Sub1$2([]): Sup$1 {}
//│   fun add$Sup$1 = (this, num1, num2,) => +(num1, num2,)
//│   fun main$$4 = () => let obj = Sub2$3() in if obj is ‹(Sub2$3) then add$Sup$1(obj, 5, 6,); else error›
//│   fun main$$3 = () => let obj = Sub1$2() in if obj is ‹(Sub1$2) then add$Sup$1(obj, 3, 4,); else error›
//│   Code(List(main$$3()))
//│   Code(List(main$$4()))
//│ }
//│ class Sub2$3() extends Sub1$2, Sup$1
//│ class Sup$1()
//│ class Sub1$2() extends Sup$1
//│ fun add$Sup$1: (anything, Int, Int) -> Int
//│ fun main$$4: () -> Int
//│ fun main$$3: () -> Int
//│ Int
//│ res
//│     = 7
//│ res
//│     = 11
