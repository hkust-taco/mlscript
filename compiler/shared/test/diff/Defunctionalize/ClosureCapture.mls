:NewDefs
:AllowRuntimeErrors

// FIXME: Class parameters not annotated
:mono
fun foo(x) = 
  (f => f(x))(z => z+1)
foo(2)
//│ Lifted:
//│ TypingUnit {
//│   class Lambda1$2$1([x,]) {fun apply = (f,) => f((this).x,)}
//│   class Lambda1$3$2([]) {fun apply = (z,) => +(z, 1,)}
//│   fun foo$1 = (x,) => {'(' {Lambda1$2$1(x,)} ')'({Lambda1$3$2()},)}
//│   Code(List(foo$1(2,)))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class Lambda1$2$1([x,]) {}
//│   class Lambda1$3$2([]) {}
//│   fun apply$Lambda1$2$1 = (this, f,) => let obj = f in if obj is ‹(Lambda1$3$2) then apply$Lambda1$3$2(obj, let obj = this in if obj is ‹(Lambda1$2$1) then 2; else error›,); else error›
//│   fun foo$1 = (x,) => {let obj = '(' {Lambda1$2$1(x,)} ')' in if obj is ‹(Lambda1$2$1) then apply$Lambda1$2$1(obj, {Lambda1$3$2()},); else error›}
//│   fun main$$3 = () => foo$1(2,)
//│   fun apply$Lambda1$3$2 = (this, z,) => +(z, 1,)
//│   Code(List(main$$3()))
//│ }
//│ ╔══[ERROR] Class parameters currently need type annotations
//│ ║  l.7: 	  (f => f(x))(z => z+1)
//│ ╙──     	          ^
//│ class Lambda1$2$1(x: error)
//│ class Lambda1$3$2()
//│ fun apply$Lambda1$2$1: (Object, Object) -> Int
//│ fun foo$1: error -> Int
//│ fun main$$3: () -> Int
//│ fun apply$Lambda1$3$2: (anything, Int) -> Int
//│ Int
//│ res
//│     = 3

// FIXME: Class parameters not annotated
:mono
fun f(x) =
  (y => f(x+y))(x+1)
f(1)
//│ Lifted:
//│ TypingUnit {
//│   class Lambda1$2$1([x,]) {fun apply = (y,) => f$1(+((this).x, y,),)}
//│   fun f$1 = (x,) => {'(' {Lambda1$2$1(x,)} ')'(+(x, 1,),)}
//│   Code(List(f$1(1,)))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class Lambda1$2$1([x,]) {}
//│   fun apply$Lambda1$2$1 = (this, y,) => f$1(+(let obj = this in if obj is ‹(Lambda1$2$1) then 1; else error›, y,),)
//│   fun f$1 = (x,) => {let obj = '(' {Lambda1$2$1(x,)} ')' in if obj is ‹(Lambda1$2$1) then apply$Lambda1$2$1(obj, +(x, 1,),); else error›}
//│   fun main$$2 = () => f$1(1,)
//│   Code(List(main$$2()))
//│ }
//│ ╔══[ERROR] Class parameters currently need type annotations
//│ ║  l.42: 	  (y => f(x+y))(x+1)
//│ ╙──      	          ^
//│ class Lambda1$2$1(x: error)
//│ fun apply$Lambda1$2$1: (Object, Int) -> nothing
//│ fun f$1: nothing -> nothing
//│ fun main$$2: () -> nothing
//│ nothing
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded
