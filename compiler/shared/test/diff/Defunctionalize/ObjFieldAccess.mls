:NewDefs

:ge // TODO: Wrap resulting statements in module
:mono
class A(i: Int) {
    fun get1() = i
    fun get2 = i
}
val a = A(6)
a.get1()
a.get2
//│ Lifted:
//│ TypingUnit {
//│   class A$1([i: Int,]) {fun get1 = () => (this).i; fun get2 = (this).i}
//│   let a$1 = A$1(6,)
//│   Code(List((a$1).get1()))
//│   Code(List((a$1).get2))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class A$1([i: Int,]) {}
//│   fun get1$A$1 = (this,) => let obj = this in if obj is ‹(A$1) then 6; else error›
//│   fun get2$A$1 = (this,) => let obj = this in if obj is ‹(A$1) then 6; else error›
//│   fun main$$3 = () => let obj = a$1 in if obj is ‹(A$1) then get2$A$1(obj,); else error›
//│   fun main$$2 = () => let obj = a$1 in if obj is ‹(A$1) then get1$A$1(obj,); else error›
//│   let a$1 = A$1(6,)
//│   Code(List(main$$2()))
//│   Code(List(main$$3()))
//│ }
//│ class A$1(i: Int)
//│ fun get1$A$1: Object -> 6
//│ fun get2$A$1: Object -> 6
//│ fun main$$3: () -> 6
//│ fun main$$2: () -> 6
//│ let a$1: A$1
//│ 6
//│ Code generation encountered an error:
//│   unguarded recursive use of by-value binding a$1

:ge // TODO: Wrap resulting statements in module
:mono
class A(i: Str) {
    fun get1() = i
    fun get2 = i
}
val a = A("6")
a.get1()
a.get2
//│ Lifted:
//│ TypingUnit {
//│   class A$1([i: Str,]) {fun get1 = () => (this).i; fun get2 = (this).i}
//│   let a$1 = A$1("6",)
//│   Code(List((a$1).get1()))
//│   Code(List((a$1).get2))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class A$1([i: Str,]) {}
//│   fun get1$A$1 = (this,) => let obj = this in if obj is ‹(A$1) then "6"; else error›
//│   fun get2$A$1 = (this,) => let obj = this in if obj is ‹(A$1) then "6"; else error›
//│   fun main$$3 = () => let obj = a$1 in if obj is ‹(A$1) then get2$A$1(obj,); else error›
//│   fun main$$2 = () => let obj = a$1 in if obj is ‹(A$1) then get1$A$1(obj,); else error›
//│   let a$1 = A$1("6",)
//│   Code(List(main$$2()))
//│   Code(List(main$$3()))
//│ }
//│ class A$1(i: Str)
//│ fun get1$A$1: Object -> "6"
//│ fun get2$A$1: Object -> "6"
//│ fun main$$3: () -> "6"
//│ fun main$$2: () -> "6"
//│ let a$1: A$1
//│ "6"
//│ Code generation encountered an error:
//│   unguarded recursive use of by-value binding a$1

:ge //TODO: Wrap resulting statements in module
:mono
class X()
class Y(foo: X) {
    fun get1() = foo
    fun get2 = foo
}
val a = Y(X())
a.get1()
a.get2
//│ Lifted:
//│ TypingUnit {
//│   class X$1([]) {}
//│   class Y$2([foo: X$1,]) {fun get1 = () => (this).foo; fun get2 = (this).foo}
//│   let a$1 = Y$2(X$1(),)
//│   Code(List((a$1).get1()))
//│   Code(List((a$1).get2))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class X$1([]) {}
//│   class Y$2([foo: X$1,]) {}
//│   fun get1$Y$2 = (this,) => let obj = this in if obj is ‹(Y$2(foo,)) then foo; else error›
//│   fun main$$4 = () => let obj = a$1 in if obj is ‹(Y$2) then get2$Y$2(obj,); else error›
//│   fun main$$3 = () => let obj = a$1 in if obj is ‹(Y$2) then get1$Y$2(obj,); else error›
//│   fun get2$Y$2 = (this,) => let obj = this in if obj is ‹(Y$2(foo,)) then foo; else error›
//│   let a$1 = Y$2(X$1(),)
//│   Code(List(main$$3()))
//│   Code(List(main$$4()))
//│ }
//│ class X$1()
//│ class Y$2(foo: X$1)
//│ fun get1$Y$2: Object -> X$1
//│ fun main$$4: () -> X$1
//│ fun main$$3: () -> X$1
//│ fun get2$Y$2: Object -> X$1
//│ let a$1: Y$2
//│ X$1
//│ Code generation encountered an error:
//│   unguarded recursive use of by-value binding a$1

:mono
class I() {}
class J() {}
class K(foo: I, bar: J) {
    fun getFoo = foo
    fun getBar = bar
}
val k = K(I(), J())
k.getFoo
k.getBar
//│ Lifted:
//│ TypingUnit {
//│   class I$1([]) {}
//│   class J$2([]) {}
//│   class K$3([foo: I$1, bar: J$2,]) {fun getFoo = (this).foo; fun getBar = (this).bar}
//│   let k$1 = K$3(I$1(), J$2(),)
//│   Code(List((k$1).getFoo))
//│   Code(List((k$1).getBar))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class I$1([]) {}
//│   class J$2([]) {}
//│   class K$3([foo: I$1, bar: J$2,]) {}
//│   fun getFoo$K$3 = (this,) => let obj = this in if obj is ‹(K$3(foo, bar,)) then foo; else error›
//│   let k$1 = K$3(I$1(), J$2(),)
//│   fun main$$5 = () => let obj = k$1 in if obj is ‹(K$3) then getBar$K$3(obj,); else error›
//│   fun main$$4 = () => let obj = k$1 in if obj is ‹(K$3) then getFoo$K$3(obj,); else error›
//│   fun getBar$K$3 = (this,) => let obj = this in if obj is ‹(K$3(foo, bar,)) then bar; else error›
//│   Code(List(main$$4()))
//│   Code(List(main$$5()))
//│ }
//│ class I$1()
//│ class J$2()
//│ class K$3(foo: I$1, bar: J$2)
//│ fun getFoo$K$3: Object -> I$1
//│ let k$1: K$3
//│ fun main$$5: () -> J$2
//│ fun main$$4: () -> I$1
//│ fun getBar$K$3: Object -> J$2
//│ J$2
//│ k$1
//│     = K$3 {}
//│ res
//│     = I$1 {}
//│ res
//│     = J$2 {}
