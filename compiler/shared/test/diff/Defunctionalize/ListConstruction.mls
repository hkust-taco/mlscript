:NewDefs


abstract class List() {
    fun getRes: Str
    fun map: error
}
class Cons(val x: Int, val xs: List) extends List {
    fun getRes = concat(concat(toString(x))(" :: "))(xs.getRes)
    fun map(f) = Cons(f(x), xs.map(f))
}
class Nil() extends List {
    fun getRes = "Nil"
    fun map(f) = Nil()
}
fun mkList(len) =
    if len == 0 then Nil()
    else Cons(len, mkList(len-1))
mkList(5).map(x => x*2).getRes
//│ abstract class List() {
//│   fun getRes: Str
//│   fun map: error
//│ }
//│ class Cons(x: Int, xs: List) extends List {
//│   fun getRes: Str
//│   fun map: (Int -> Int) -> Cons
//│ }
//│ class Nil() extends List {
//│   fun getRes: "Nil"
//│   fun map: anything -> Nil
//│ }
//│ fun mkList: Int -> (Cons | Nil)
//│ Str
//│ 
//│ Simpledef:
//│ {class List() {fun getRes: Str
//│  fun map: error}
//│  class Cons(val x: Int, val xs: List,): List {fun getRes = concat(concat(toString(x,),)(" :: ",),)(let selRes$30 = xs in case selRes$30 of { Nil => (selRes$30).getRes
//│  Cons => (selRes$30).getRes },)
//│  fun map = (f::0,) => Cons(f(x,), let selRes$50 = xs in case selRes$50 of { Nil => (selRes$50).map(f,)
//│  Cons => (selRes$50).map(f,) },)}
//│  class Nil(): List {fun getRes = "Nil"
//│  fun map = (f::1,) => Nil()}
//│  fun mkList = (len::2,) => {if (==(len, 0,)) then Nil() else Cons(len, mkList(-(len, 1,),),)}
//│  let selRes$126 = let selRes$128 = mkList(5,) in case selRes$128 of { Cons => (selRes$128).map((x::3,) => *(x, 2,),)
//│  Nil => (selRes$128).map((x::3,) => *(x, 2,),) } in case selRes$126 of { Cons => (selRes$126).getRes
//│  Nil => (selRes$126).getRes }}
//│ End simpledef
//│ 
//│ res
//│     = '10 :: 8 :: 6 :: 4 :: 2 :: Nil'
