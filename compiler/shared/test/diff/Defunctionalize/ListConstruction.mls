:NewDefs

:mono
class List {
    fun getRes: Str
    fun getRes = ""
    fun map(f) = error
}
class Cons(x: Int, xs: List) extends List {
    fun getRes = concat(concat(toString(x))(" :: "))(xs.getRes)
    fun map(f) = Cons(f(x), xs.map(f))
}
class Nil() extends List {
    fun getRes = "Nil"
    fun map(f) = Nil()
}
fun mkList(len: Int) =
    if len == 0 then Nil()
    else Cons(len, mkList(len-1))
mkList(5).map((x) => x*2).getRes
//│ Lifted:
//│ TypingUnit {
//│   class List$1([]) {
//│     fun getRes = Str
//│     fun getRes = ""
//│     fun map = (f,) => error
//│   }
//│   class Cons$2([x: Int, xs: List$1,]): List$1 {
//│     fun getRes = concat(concat(toString((this).x,),)(" :: ",),)(((this).xs).getRes,)
//│     fun map = (f,) => Cons$2(f((this).x,), ((this).xs).map(f,),)
//│   }
//│   class Nil$3([]): List$1 {fun getRes = "Nil"; fun map = (f,) => Nil$3()}
//│   class Lambda1$2$4([]) {fun apply = ('(' x ')',) => *(x, 2,)}
//│   fun mkList$1 = (len: Int,) => {if (==(len, 0,)) then Nil$3() else Cons$2(len, mkList$1(-(len, 1,),),)}
//│   Code(List(((mkList$1(5,)).map({Lambda1$2$4()},)).getRes))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class Lambda1$2$4([]) {}
//│   class List$1([]) {}
//│   class Cons$2([x: Int, xs: List$1,]): List$1 {}
//│   class Nil$3([]): List$1 {}
//│   fun mkList$1 = (len: Int,) => {if (==(len, 0,)) then Nil$3() else Cons$2(len, mkList$1(-(len, 1,),),)}
//│   fun map$Nil$3 = (this, f,) => Nil$3()
//│   fun getRes$Nil$3 = (this,) => "Nil"
//│   fun getRes$Cons$2 = (this,) => concat(concat(toString(let obj = this in if obj is ‹(Cons$2(x, xs,)) then x; else error›,),)(" :: ",),)(let obj = let obj = this in if obj is ‹(Cons$2(x, xs,)) then xs; else error› in if obj is ‹(Cons$2) then getRes$Cons$2(obj,); (Nil$3) then getRes$Nil$3(obj,); else error›,)
//│   fun main$$5 = () => let obj = let obj = mkList$1(5,) in if obj is ‹(Cons$2) then map$Cons$2(obj, {Lambda1$2$4()},); (Nil$3) then map$Nil$3(obj, {Lambda1$2$4()},); else error› in if obj is ‹(Cons$2) then getRes$Cons$2(obj,); (Nil$3) then getRes$Nil$3(obj,); else error›
//│   fun map$Cons$2 = (this, f,) => Cons$2(let obj = f in if obj is ‹(Lambda1$2$4) then apply$Lambda1$2$4(obj, let obj = this in if obj is ‹(Cons$2(x, xs,)) then x; else error›,); else error›, let obj = let obj = this in if obj is ‹(Cons$2(x, xs,)) then xs; else error› in if obj is ‹(Cons$2) then map$Cons$2(obj, f,); (Nil$3) then map$Nil$3(obj, f,); else error›,)
//│   fun apply$Lambda1$2$4 = (this, '(' x ')',) => *(x, 2,)
//│   Code(List(main$$5()))
//│ }
//│ class Lambda1$2$4()
//│ class List$1()
//│ class Cons$2(x: Int, xs: List$1) extends List$1
//│ class Nil$3() extends List$1
//│ fun mkList$1: (len: Int) -> (Cons$2 | Nil$3)
//│ fun map$Nil$3: (anything, anything) -> Nil$3
//│ fun getRes$Nil$3: anything -> "Nil"
//│ fun getRes$Cons$2: Object -> Str
//│ fun main$$5: () -> Str
//│ fun map$Cons$2: (Object, Object) -> Cons$2
//│ fun apply$Lambda1$2$4: (anything, Int) -> Int
//│ Str
//│ res
//│     = '10 :: 8 :: 6 :: 4 :: 2 :: Nil'
