:NewDefs

:w
:mono
class Foo() {fun f = 0}
module x { val y = Foo() }
x.y.f
//│ Lifted:
//│ TypingUnit {
//│   class Foo$1([]) {fun f = 0}
//│   module x$2 {let y = Foo$1()}
//│   Code(List(((x$2).y).f))
//│ }
//│ Mono:
//│ TypingUnit {
//│   module x$2 {}
//│   class Foo$1([]) {}
//│   let y$x$2 = (this,) => Foo$1()
//│   fun f$Foo$1 = (this,) => 0
//│   fun main$$2 = () => let obj = let obj = x$2 in if obj is ‹(x$2) then y$x$2(obj,); else error› in if obj is ‹(Foo$1) then f$Foo$1(obj,); else error›
//│   Code(List(main$$2()))
//│ }
//│ ╔══[WARNING] Found a redundant else branch
//│ ╙──
//│ module x$2
//│ class Foo$1()
//│ let y$x$2: anything -> Foo$1
//│ fun f$Foo$1: anything -> 0
//│ fun main$$2: () -> 0
//│ 0
//│ y$x$2
//│       = [Function: y$x$2]
//│ res
//│     = 0
