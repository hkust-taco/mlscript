:NewDefs
:AllowRuntimeErrors

:mono
class List(e: Int, tail: List | Nil) {
  fun map: (Int -> Int) -> List 
  fun map(f)= new List(f(e), tail.map(f))
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun map(f) = this
  fun count() = 0
}
fun add2(x) = x+2
(new List(1, new List(2, new Nil()))).map(x => x+1).map(x => add2(x))
//│ Lifted:
//│ TypingUnit {
//│   class List$1([e: Int, tail: |(List$1, Nil$2,),]) {
//│     fun map = (Int -> Int) -> List$1
//│     fun map = (f,) => (new List$1)(f((this).e,), ((this).tail).map(f,),)
//│     fun count = () -> Int
//│     fun count = () => +(1, ((this).tail).count(),)
//│   }
//│   class Nil$2([]) {fun map = (f,) => this; fun count = () => 0}
//│   class Lambda1$2$3([]) {fun apply = (x,) => +(x, 1,)}
//│   class Lambda1$3$4([]) {fun apply = (x,) => add2$1(x,)}
//│   fun add2$1 = (x,) => +(x, 2,)
//│   Code(List((('(' (new List$1)(1, (new List$1)(2, (new Nil$2)(),),) ')').map({Lambda1$2$3()},)).map({Lambda1$3$4()},)))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class Lambda1$3$4([]) {}
//│   class Nil$2([]) {}
//│   class List$1([e: Int, tail: |(List$1, Nil$2,),]) {}
//│   class Lambda1$2$3([]) {}
//│   fun map$List$1 = (this, f,) => (new List$1)(let obj = f in if obj is ‹(Lambda1$3$4) then apply$Lambda1$3$4(obj, let obj = this in if obj is ‹(List$1(e, tail,)) then e; else error›,); (Lambda1$2$3) then apply$Lambda1$2$3(obj, let obj = this in if obj is ‹(List$1(e, tail,)) then e; else error›,); else error›, let obj = let obj = this in if obj is ‹(List$1(e, tail,)) then tail; else error› in if obj is ‹(List$1) then map$List$1(obj, f,); (Nil$2) then map$Nil$2(obj, f,); else error›,)
//│   fun add2$1 = (x,) => +(x, 2,)
//│   fun main$$5 = () => let obj = let obj = '(' (new List$1)(1, (new List$1)(2, (new Nil$2)(),),) ')' in if obj is ‹(List$1) then map$List$1(obj, {Lambda1$2$3()},); else error› in if obj is ‹(List$1) then map$List$1(obj, {Lambda1$3$4()},); else error›
//│   fun apply$Lambda1$3$4 = (this, x,) => add2$1(x,)
//│   fun map$Nil$2 = (this, f,) => this
//│   fun apply$Lambda1$2$3 = (this, x,) => +(x, 1,)
//│   Code(List(main$$5()))
//│ }
//│ class Lambda1$3$4()
//│ class Nil$2()
//│ class List$1(e: Int, tail: List$1 | Nil$2)
//│ class Lambda1$2$3()
//│ fun map$List$1: (Object, Object) -> List$1
//│ fun add2$1: Int -> Int
//│ fun main$$5: () -> List$1
//│ fun apply$Lambda1$3$4: (anything, Int) -> Int
//│ fun map$Nil$2: forall 'a. ('a & (List$1 | Nil$2), anything) -> (Nil$2 | 'a)
//│ fun apply$Lambda1$2$3: (anything, Int) -> Int
//│ List$1
//│ res
//│     = List$1 {}

:mono
class List(e: Int, tail: List | Nil) {
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
fun foo(x) = x.count()
fun generate(x) = 
  if x > 0 then new List(x, generate(x+1)) else new Nil()
foo(List(1, List(2, Nil())))
foo(generate(1))
//│ Lifted:
//│ TypingUnit {
//│   class List$1([e: Int, tail: |(List$1, Nil$2,),]) {
//│     fun count = () -> Int
//│     fun count = () => +(1, ((this).tail).count(),)
//│   }
//│   class Nil$2([]) {fun count = () => 0}
//│   fun foo$1 = (x,) => (x).count()
//│   fun generate$2 = (x,) => {if (>(x, 0,)) then (new List$1)(x, generate$2(+(x, 1,),),) else (new Nil$2)()}
//│   Code(List(foo$1(List$1(1, List$1(2, Nil$2(),),),)))
//│   Code(List(foo$1(generate$2(1,),)))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class Nil$2([]) {}
//│   class List$1([e: Int, tail: |(List$1, Nil$2,),]) {}
//│   fun foo$1 = (x,) => let obj = x in if obj is ‹(Nil$2) then count$Nil$2(obj,); (List$1) then count$List$1(obj,); else error›
//│   fun count$Nil$2 = (this,) => 0
//│   fun count$List$1 = (this,) => +(1, let obj = let obj = this in if obj is ‹(List$1(e, tail,)) then tail; else error› in if obj is ‹(Nil$2) then count$Nil$2(obj,); (List$1) then count$List$1(obj,); else error›,)
//│   fun generate$2 = (x,) => {if (>(x, 0,)) then (new List$1)(x, generate$2(+(x, 1,),),) else (new Nil$2)()}
//│   fun main$$5 = () => foo$1(generate$2(1,),)
//│   fun main$$4 = () => foo$1(List$1(1, List$1(2, Nil$2(),),),)
//│   Code(List(main$$4()))
//│   Code(List(main$$5()))
//│ }
//│ class Nil$2()
//│ class List$1(e: Int, tail: List$1 | Nil$2)
//│ fun foo$1: Object -> Int
//│ fun count$Nil$2: anything -> 0
//│ fun count$List$1: Object -> Int
//│ fun generate$2: Int -> (List$1 | Nil$2)
//│ fun main$$5: () -> Int
//│ fun main$$4: () -> Int
//│ Int
//│ res
//│     = 2
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:mono
class Cons(e: 'A, tail: Cons | Nil) {
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
class Lambda(){
  fun apply(l) = 
    l.count()
}
class Lambda2(a: Int){
  fun apply(l) = 
    ( Cons(a, l)).count()
}
fun foo(x) = 
  x.apply(Cons(1, Nil())) + x.apply(Nil())
foo(Lambda())
foo(Lambda2(2))
//│ Lifted:
//│ TypingUnit {
//│   class Cons$1([e: 'A, tail: |(Cons$1, Nil$2,),]) {
//│     fun count = () -> Int
//│     fun count = () => +(1, ((this).tail).count(),)
//│   }
//│   class Nil$2([]) {fun count = () => 0}
//│   class Lambda$3([]) {fun apply = (l,) => {(l).count()}}
//│   class Lambda2$4([a: Int,]) {
//│     fun apply = (l,) => {('(' Cons$1((this).a, l,) ')').count()}
//│   }
//│   fun foo$1 = (x,) => {+((x).apply(Cons$1(1, Nil$2(),),), (x).apply(Nil$2(),),)}
//│   Code(List(foo$1(Lambda$3(),)))
//│   Code(List(foo$1(Lambda2$4(2,),)))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class Nil$2([]) {}
//│   class Lambda2$4([a: Int,]) {}
//│   class Cons$1([e: 'A, tail: |(Cons$1, Nil$2,),]) {}
//│   class Lambda$3([]) {}
//│   fun count$Cons$1 = (this,) => +(1, let obj = let obj = this in if obj is ‹(Cons$1(e, tail,)) then tail; else error› in if obj is ‹(Nil$2) then count$Nil$2(obj,); (Cons$1) then count$Cons$1(obj,); else error›,)
//│   fun foo$1 = (x,) => {+(let obj = x in if obj is ‹(Lambda$3) then apply$Lambda$3(obj, Cons$1(1, Nil$2(),),); (Lambda2$4) then apply$Lambda2$4(obj, Cons$1(1, Nil$2(),),); else error›, let obj = x in if obj is ‹(Lambda$3) then apply$Lambda$3(obj, Nil$2(),); (Lambda2$4) then apply$Lambda2$4(obj, Nil$2(),); else error›,)}
//│   fun apply$Lambda$3 = (this, l,) => {let obj = l in if obj is ‹(Nil$2) then count$Nil$2(obj,); (Cons$1) then count$Cons$1(obj,); else error›}
//│   fun count$Nil$2 = (this,) => 0
//│   fun apply$Lambda2$4 = (this, l,) => {let obj = '(' Cons$1(let obj = this in if obj is ‹(Lambda2$4) then 2; else error›, l,) ')' in if obj is ‹(Cons$1) then count$Cons$1(obj,); else error›}
//│   fun main$$6 = () => foo$1(Lambda2$4(2,),)
//│   fun main$$5 = () => foo$1(Lambda$3(),)
//│   Code(List(main$$5()))
//│   Code(List(main$$6()))
//│ }
//│ class Nil$2()
//│ class Lambda2$4(a: Int)
//│ class Cons$1(e: nothing, tail: Cons$1 | Nil$2)
//│ class Lambda$3()
//│ fun count$Cons$1: Object -> Int
//│ fun foo$1: Object -> Int
//│ fun apply$Lambda$3: (anything, Object) -> Int
//│ fun count$Nil$2: anything -> 0
//│ fun apply$Lambda2$4: (Object, Cons$1 | Nil$2) -> Int
//│ fun main$$6: () -> Int
//│ fun main$$5: () -> Int
//│ Int
//│ res
//│     = 1
//│ res
//│     = 3

:mono
class Cons(e: Int, tail: Cons | Nil) {
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
fun foo(x) = 
  x(Cons(1, Nil())) + x(Nil())
foo(l => l.count())
foo(l => (Cons(2, l)).count())
//│ Lifted:
//│ TypingUnit {
//│   class Cons$1([e: Int, tail: |(Cons$1, Nil$2,),]) {
//│     fun count = () -> Int
//│     fun count = () => +(1, ((this).tail).count(),)
//│   }
//│   class Nil$2([]) {fun count = () => 0}
//│   class Lambda1$2$3([]) {fun apply = (l,) => (l).count()}
//│   class Lambda1$3$4([]) {fun apply = (l,) => ('(' Cons$1(2, l,) ')').count()}
//│   fun foo$1 = (x,) => {+(x(Cons$1(1, Nil$2(),),), x(Nil$2(),),)}
//│   Code(List(foo$1({Lambda1$2$3()},)))
//│   Code(List(foo$1({Lambda1$3$4()},)))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class Lambda1$3$4([]) {}
//│   class Nil$2([]) {}
//│   class Cons$1([e: Int, tail: |(Cons$1, Nil$2,),]) {}
//│   class Lambda1$2$3([]) {}
//│   fun count$Cons$1 = (this,) => +(1, let obj = let obj = this in if obj is ‹(Cons$1(e, tail,)) then tail; else error› in if obj is ‹(Nil$2) then count$Nil$2(obj,); (Cons$1) then count$Cons$1(obj,); else error›,)
//│   fun foo$1 = (x,) => {+(let obj = x in if obj is ‹(Lambda1$2$3) then apply$Lambda1$2$3(obj, Cons$1(1, Nil$2(),),); (Lambda1$3$4) then apply$Lambda1$3$4(obj, Cons$1(1, Nil$2(),),); else error›, let obj = x in if obj is ‹(Lambda1$2$3) then apply$Lambda1$2$3(obj, Nil$2(),); (Lambda1$3$4) then apply$Lambda1$3$4(obj, Nil$2(),); else error›,)}
//│   fun count$Nil$2 = (this,) => 0
//│   fun main$$6 = () => foo$1({Lambda1$3$4()},)
//│   fun main$$5 = () => foo$1({Lambda1$2$3()},)
//│   fun apply$Lambda1$3$4 = (this, l,) => let obj = '(' Cons$1(2, l,) ')' in if obj is ‹(Cons$1) then count$Cons$1(obj,); else error›
//│   fun apply$Lambda1$2$3 = (this, l,) => let obj = l in if obj is ‹(Nil$2) then count$Nil$2(obj,); (Cons$1) then count$Cons$1(obj,); else error›
//│   Code(List(main$$5()))
//│   Code(List(main$$6()))
//│ }
//│ class Lambda1$3$4()
//│ class Nil$2()
//│ class Cons$1(e: Int, tail: Cons$1 | Nil$2)
//│ class Lambda1$2$3()
//│ fun count$Cons$1: Object -> Int
//│ fun foo$1: Object -> Int
//│ fun count$Nil$2: anything -> 0
//│ fun main$$6: () -> Int
//│ fun main$$5: () -> Int
//│ fun apply$Lambda1$3$4: (anything, Cons$1 | Nil$2) -> Int
//│ fun apply$Lambda1$2$3: (anything, Object) -> Int
//│ Int
//│ res
//│     = 1
//│ res
//│     = 3
