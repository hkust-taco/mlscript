:NewDefs

class List(val e: Int, val tail: List | Nil) {
  fun map: (Int -> Int) -> List 
  fun map(f)= List(f(e), tail.map(f))
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun map(f) = Nil()
  fun count() = 0
}
fun add2(x) = x+2
(List(1, List(2, Nil()))).map(x => x+1).map(x => add2(x))
//│ class List(e: Int, tail: List | Nil) {
//│   fun count: () -> Int
//│   fun map: (Int -> Int) -> List
//│ }
//│ class Nil() {
//│   fun count: () -> 0
//│   fun map: anything -> Nil
//│ }
//│ fun add2: Int -> Int
//│ List
//│ 
//│ Simpledef:
//│ {class List(val e: Int, val tail: |(List, Nil,),) {fun map: (Int -> Int) -> List
//│  fun map = (f::0,) => List(f(e,), let selRes$16 = tail in case selRes$16 of { List => (selRes$16).map(f,)
//│  Nil => (selRes$16).map(f,) },)
//│  fun count: () -> Int
//│  fun count = () => +(1, let selRes$38 = tail in case selRes$38 of { List => (selRes$38).count()
//│  Nil => (selRes$38).count() },)}
//│  class Nil() {fun map = (f::1,) => Nil()
//│  fun count = () => 0}
//│  fun add2 = (x::2,) => +(x, 2,)
//│  let selRes$82 = let selRes$84 = '(' List(1, List(2, Nil(),),) ')' in case selRes$84 of { List => (selRes$84).map((x::3,) => +(x, 1,),) } in case selRes$82 of { List => (selRes$82).map((x::4,) => add2(x,),) }}
//│ End simpledef
//│ 
//│ res
//│     = List {}

class List(val e: Int, val tail: List | Nil) {
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
fun foo(x) = x.count()
fun generate(x) = 
  if x > 0 then List(x, generate(x-1)) else Nil()
foo(List(1, List(2, Nil())))
foo(generate(50))
//│ class List(e: Int, tail: List | Nil) {
//│   fun count: () -> Int
//│ }
//│ class Nil() {
//│   fun count: () -> 0
//│ }
//│ fun foo: forall 'a. {count: () -> 'a} -> 'a
//│ fun generate: Int -> (List | Nil)
//│ Int
//│ 
//│ Simpledef:
//│ {class List(val e: Int, val tail: |(List, Nil,),) {fun count: () -> Int
//│  fun count = () => +(1, let selRes$10 = tail in case selRes$10 of { List => (selRes$10).count()
//│  Nil => (selRes$10).count() },)}
//│  class Nil() {fun count = () => 0}
//│  fun foo = (x::5,) => let selRes$32 = x in case selRes$32 of { Nil => (selRes$32).count()
//│  List => (selRes$32).count() }
//│  fun generate = (x::6,) => {if (>(x, 0,)) then List(x, generate(-(x, 1,),),) else Nil()}
//│  foo(List(1, List(2, Nil(),),),)
//│  foo(generate(50,),)}
//│ End simpledef
//│ 
//│ res
//│     = 2
//│ res
//│     = 50

class Cons(val e: 'A, val tail: Cons | Nil) {
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
class Lambda(){
  fun apply(l) = 
    l.count()
}
class Lambda2(val a: Int){
  fun apply(l) = 
    ( Cons(a, l)).count()
}
fun foo(x) = 
  x.apply(Cons(1, Nil())) + x.apply(Nil())
foo(Lambda())
foo(Lambda2(2))
//│ class Cons(e: nothing, tail: Cons | Nil) {
//│   fun count: () -> Int
//│ }
//│ class Nil() {
//│   fun count: () -> 0
//│ }
//│ class Lambda() {
//│   fun apply: forall 'a. {count: () -> 'a} -> 'a
//│ }
//│ class Lambda2(a: Int) {
//│   fun apply: (Cons | Nil) -> Int
//│ }
//│ fun foo: {apply: (Cons | Nil) -> Int} -> Int
//│ Int
//│ 
//│ Simpledef:
//│ {class Cons(val e: 'A, val tail: |(Cons, Nil,),) {fun count: () -> Int
//│  fun count = () => +(1, let selRes$10 = tail in case selRes$10 of { Cons => (selRes$10).count()
//│  Nil => (selRes$10).count() },)}
//│  class Nil() {fun count = () => 0}
//│  class Lambda() {fun apply = (l::7,) => {let selRes$32 = l in case selRes$32 of { Cons => (selRes$32).count()
//│  Nil => (selRes$32).count() }}}
//│  class Lambda2(val a: Int,) {fun apply = (l::8,) => {let selRes$48 = '(' Cons(a, l,) ')' in case selRes$48 of { Cons => (selRes$48).count() }}}
//│  fun foo = (x::9,) => {+(let selRes$74 = x in case selRes$74 of { Lambda2 => (selRes$74).apply(Cons(1, Nil(),),)
//│  Lambda => (selRes$74).apply(Cons(1, Nil(),),) }, let selRes$96 = x in case selRes$96 of { Lambda2 => (selRes$96).apply(Nil(),)
//│  Lambda => (selRes$96).apply(Nil(),) },)}
//│  foo(Lambda(),)
//│  foo(Lambda2(2,),)}
//│ End simpledef
//│ 
//│ res
//│     = 1
//│ res
//│     = 3

class Cons(val e: Int, val tail: Cons | Nil) {
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
fun foo(x) = 
  x(Cons(1, Nil())) + x(Nil())
foo(l => l.count())
foo(l => (Cons(2, l)).count())
//│ class Cons(e: Int, tail: Cons | Nil) {
//│   fun count: () -> Int
//│ }
//│ class Nil() {
//│   fun count: () -> 0
//│ }
//│ fun foo: ((Cons | Nil) -> Int) -> Int
//│ Int
//│ 
//│ Simpledef:
//│ {class Cons(val e: Int, val tail: |(Cons, Nil,),) {fun count: () -> Int
//│  fun count = () => +(1, let selRes$10 = tail in case selRes$10 of { Cons => (selRes$10).count()
//│  Nil => (selRes$10).count() },)}
//│  class Nil() {fun count = () => 0}
//│  fun foo = (x::10,) => {+(x(Cons(1, Nil(),),), x(Nil(),),)}
//│  foo((l::11,) => let selRes$78 = l in case selRes$78 of { Cons => (selRes$78).count()
//│  Nil => (selRes$78).count() },)
//│  foo((l::12,) => let selRes$96 = '(' Cons(2, l,) ')' in case selRes$96 of { Cons => (selRes$96).count() },)}
//│ End simpledef
//│ 
//│ res
//│     = 1
//│ res
//│     = 3
