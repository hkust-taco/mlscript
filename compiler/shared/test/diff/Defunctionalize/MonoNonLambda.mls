:NewDefs

:ge // TODO: Wrap resulting statements in module
:mono
class A() {
    val x = 2
    val y() = 3
    fun z = 4
    fun w() = 5
}
val a = A()
a.x
a.y()
a.z
a.w()
//│ Lifted:
//│ TypingUnit {
//│   class A$1([]) {let x = 2; let y = () => 3; fun z = 4; fun w = () => 5}
//│   let a$1 = A$1()
//│   Code(List((a$1).x))
//│   Code(List((a$1).y()))
//│   Code(List((a$1).z))
//│   Code(List((a$1).w()))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class A$1([]) {}
//│   let y$A$1 = (this,) => 3
//│   fun main$$5 = () => let obj = a$1 in if obj is ‹(A$1) then w$A$1(obj,); else error›
//│   fun z$A$1 = (this,) => 4
//│   fun main$$4 = () => let obj = a$1 in if obj is ‹(A$1) then z$A$1(obj,); else error›
//│   fun main$$3 = () => let obj = a$1 in if obj is ‹(A$1) then y$A$1(obj,); else error›
//│   let x$A$1 = (this,) => 2
//│   fun main$$2 = () => let obj = a$1 in if obj is ‹(A$1) then x$A$1(obj,); else error›
//│   let a$1 = A$1()
//│   fun w$A$1 = (this,) => 5
//│   Code(List(main$$2()))
//│   Code(List(main$$3()))
//│   Code(List(main$$4()))
//│   Code(List(main$$5()))
//│ }
//│ class A$1()
//│ let y$A$1: anything -> 3
//│ fun main$$5: () -> 5
//│ fun z$A$1: anything -> 4
//│ fun main$$4: () -> 4
//│ fun main$$3: () -> 3
//│ let x$A$1: anything -> 2
//│ fun main$$2: () -> 2
//│ let a$1: A$1
//│ fun w$A$1: anything -> 5
//│ 5
//│ Code generation encountered an error:
//│   unguarded recursive use of by-value binding a$1
