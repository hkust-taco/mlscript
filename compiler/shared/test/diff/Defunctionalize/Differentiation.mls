// A usecase test for defunctionalization

:NewDefs

:mono
abstract class Exp() {
    virtual fun derive(): Exp
    virtual fun derive() = Exp()
    virtual fun getVal: Str
    virtual fun getVal = ""
}
class Numeric(i: Int) extends Exp {
    fun derive() = Numeric(0)
    fun getNum = i
    fun getVal = toString(i)
}
class Variable(nm: Str) extends Exp {
    fun derive() = Numeric(1)
    fun getVal = nm
}
class Sum(lhs: Exp, rhs: Exp) extends Exp {
    fun derive() = Sum(lhs.derive(), rhs.derive())
    fun getVal = concat("(")(concat(concat(concat(lhs.getVal)(" + "))(rhs.getVal))(")"))
}
class Mul(lhs: Exp, rhs: Exp) extends Exp {
    fun derive() = Sum(Mul(lhs.derive(), rhs), Mul(lhs, rhs.derive()))
    fun getVal = concat("(")(concat(concat(concat(lhs.getVal)(" * "))(rhs.getVal))(")"))
}
class Pow(lhs: Variable, rhs: Numeric) extends Exp {
    fun derive() = Mul(rhs, Pow(lhs, Numeric(rhs.getNum - 1)))
    fun getVal = concat("(")(concat(concat(concat(lhs.getVal)(" ^ "))(rhs.getVal))(")"))
}
Sum(Variable("x"), Numeric(3)).derive().getVal
Mul(Variable("x"), Numeric(3)).derive().getVal
Pow(Variable("x"), Numeric(3)).derive().getVal
Mul(Pow(Variable("x"), Numeric(2)), Pow(Variable("y"), Numeric(2))).derive().getVal
//│ Lifted:
//│ TypingUnit {
//│   class Exp$1([]) {
//│     fun derive = () -> Exp$1
//│     fun derive = () => Exp$1()
//│     fun getVal = Str
//│     fun getVal = ""
//│   }
//│   class Numeric$2([i: Int,]): Exp$1 {
//│     fun derive = () => Numeric$2(0,)
//│     fun getNum = (this).i
//│     fun getVal = toString((this).i,)
//│   }
//│   class Variable$3([nm: Str,]): Exp$1 {fun derive = () => Numeric$2(1,); fun getVal = (this).nm}
//│   class Sum$4([lhs: Exp$1, rhs: Exp$1,]): Exp$1 {
//│     fun derive = () => Sum$4(((this).lhs).derive(), ((this).rhs).derive(),)
//│     fun getVal = concat("(",)(concat(concat(concat(((this).lhs).getVal,)(" + ",),)(((this).rhs).getVal,),)(")",),)
//│   }
//│   class Mul$5([lhs: Exp$1, rhs: Exp$1,]): Exp$1 {
//│     fun derive = () => Sum$4(Mul$5(((this).lhs).derive(), (this).rhs,), Mul$5((this).lhs, ((this).rhs).derive(),),)
//│     fun getVal = concat("(",)(concat(concat(concat(((this).lhs).getVal,)(" * ",),)(((this).rhs).getVal,),)(")",),)
//│   }
//│   class Pow$6([lhs: Variable$3, rhs: Numeric$2,]): Exp$1 {
//│     fun derive = () => Mul$5((this).rhs, Pow$6((this).lhs, Numeric$2(-(((this).rhs).getNum, 1,),),),)
//│     fun getVal = concat("(",)(concat(concat(concat(((this).lhs).getVal,)(" ^ ",),)(((this).rhs).getVal,),)(")",),)
//│   }
//│   Code(List(((Sum$4(Variable$3("x",), Numeric$2(3,),)).derive()).getVal))
//│   Code(List(((Mul$5(Variable$3("x",), Numeric$2(3,),)).derive()).getVal))
//│   Code(List(((Pow$6(Variable$3("x",), Numeric$2(3,),)).derive()).getVal))
//│   Code(List(((Mul$5(Pow$6(Variable$3("x",), Numeric$2(2,),), Pow$6(Variable$3("y",), Numeric$2(2,),),)).derive()).getVal))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class Numeric$2([i: Int,]): Exp$1 {}
//│   class Pow$6([lhs: Variable$3, rhs: Numeric$2,]): Exp$1 {}
//│   class Sum$4([lhs: Exp$1, rhs: Exp$1,]): Exp$1 {}
//│   class Mul$5([lhs: Exp$1, rhs: Exp$1,]): Exp$1 {}
//│   class Variable$3([nm: Str,]): Exp$1 {}
//│   class Exp$1([]) {}
//│   fun getVal$Sum$4 = (this,) => concat("(",)(concat(concat(concat(let obj = let obj = this in if obj is ‹(Sum$4(lhs, rhs,)) then lhs; else error› in if obj is ‹(Mul$5) then getVal$Mul$5(obj,); (Numeric$2) then getVal$Numeric$2(obj,); else error›,)(" + ",),)(let obj = let obj = this in if obj is ‹(Sum$4(lhs, rhs,)) then rhs; else error› in if obj is ‹(Mul$5) then getVal$Mul$5(obj,); (Numeric$2) then getVal$Numeric$2(obj,); else error›,),)(")",),)
//│   fun derive$Pow$6 = (this,) => Mul$5(let obj = this in if obj is ‹(Pow$6(lhs, rhs,)) then rhs; else error›, Pow$6(let obj = this in if obj is ‹(Pow$6(lhs, rhs,)) then lhs; else error›, Numeric$2(-(let obj = let obj = this in if obj is ‹(Pow$6(lhs, rhs,)) then rhs; else error› in if obj is ‹(Numeric$2) then getNum$Numeric$2(obj,); else error›, 1,),),),)
//│   fun getVal$Pow$6 = (this,) => concat("(",)(concat(concat(concat(let obj = let obj = this in if obj is ‹(Pow$6(lhs, rhs,)) then lhs; else error› in if obj is ‹(Variable$3) then getVal$Variable$3(obj,); else error›,)(" ^ ",),)(let obj = let obj = this in if obj is ‹(Pow$6(lhs, rhs,)) then rhs; else error› in if obj is ‹(Numeric$2) then getVal$Numeric$2(obj,); else error›,),)(")",),)
//│   fun derive$Sum$4 = (this,) => Sum$4(let obj = let obj = this in if obj is ‹(Sum$4(lhs, rhs,)) then lhs; else error› in if obj is ‹(Variable$3) then derive$Variable$3(obj,); else error›, let obj = let obj = this in if obj is ‹(Sum$4(lhs, rhs,)) then rhs; else error› in if obj is ‹(Numeric$2) then derive$Numeric$2(obj,); else error›,)
//│   fun main$$9 = () => let obj = let obj = Mul$5(Pow$6(Variable$3("x",), Numeric$2(2,),), Pow$6(Variable$3("y",), Numeric$2(2,),),) in if obj is ‹(Mul$5) then derive$Mul$5(obj,); else error› in if obj is ‹(Sum$4) then getVal$Sum$4(obj,); else error›
//│   fun derive$Numeric$2 = (this,) => Numeric$2(0,)
//│   fun getNum$Numeric$2 = (this,) => let obj = this in if obj is ‹(Numeric$2(i,)) then i; else error›
//│   fun derive$Variable$3 = (this,) => Numeric$2(1,)
//│   fun getVal$Mul$5 = (this,) => concat("(",)(concat(concat(concat(let obj = let obj = this in if obj is ‹(Mul$5(lhs, rhs,)) then lhs; else error› in if obj is ‹(Mul$5) then getVal$Mul$5(obj,); (Numeric$2) then getVal$Numeric$2(obj,); (Pow$6) then getVal$Pow$6(obj,); (Variable$3) then getVal$Variable$3(obj,); else error›,)(" * ",),)(let obj = let obj = this in if obj is ‹(Mul$5(lhs, rhs,)) then rhs; else error› in if obj is ‹(Mul$5) then getVal$Mul$5(obj,); (Numeric$2) then getVal$Numeric$2(obj,); (Pow$6) then getVal$Pow$6(obj,); else error›,),)(")",),)
//│   fun main$$8 = () => let obj = let obj = Pow$6(Variable$3("x",), Numeric$2(3,),) in if obj is ‹(Pow$6) then derive$Pow$6(obj,); else error› in if obj is ‹(Mul$5) then getVal$Mul$5(obj,); else error›
//│   fun main$$7 = () => let obj = let obj = Mul$5(Variable$3("x",), Numeric$2(3,),) in if obj is ‹(Mul$5) then derive$Mul$5(obj,); else error› in if obj is ‹(Sum$4) then getVal$Sum$4(obj,); else error›
//│   fun main$$6 = () => let obj = let obj = Sum$4(Variable$3("x",), Numeric$2(3,),) in if obj is ‹(Sum$4) then derive$Sum$4(obj,); else error› in if obj is ‹(Sum$4) then getVal$Sum$4(obj,); else error›
//│   fun getVal$Variable$3 = (this,) => let obj = this in if obj is ‹(Variable$3(nm,)) then nm; else error›
//│   fun getVal$Numeric$2 = (this,) => toString(let obj = this in if obj is ‹(Numeric$2(i,)) then i; else error›,)
//│   fun derive$Mul$5 = (this,) => Sum$4(Mul$5(let obj = let obj = this in if obj is ‹(Mul$5(lhs, rhs,)) then lhs; else error› in if obj is ‹(Variable$3) then derive$Variable$3(obj,); (Pow$6) then derive$Pow$6(obj,); else error›, let obj = this in if obj is ‹(Mul$5(lhs, rhs,)) then rhs; else error›,), Mul$5(let obj = this in if obj is ‹(Mul$5(lhs, rhs,)) then lhs; else error›, let obj = let obj = this in if obj is ‹(Mul$5(lhs, rhs,)) then rhs; else error› in if obj is ‹(Numeric$2) then derive$Numeric$2(obj,); (Pow$6) then derive$Pow$6(obj,); else error›,),)
//│   Code(List(main$$6()))
//│   Code(List(main$$7()))
//│   Code(List(main$$8()))
//│   Code(List(main$$9()))
//│ }
//│ class Numeric$2(i: Int) extends Exp$1
//│ class Pow$6(lhs: Variable$3, rhs: Numeric$2) extends Exp$1
//│ class Sum$4(lhs: Exp$1, rhs: Exp$1) extends Exp$1
//│ class Mul$5(lhs: Exp$1, rhs: Exp$1) extends Exp$1
//│ class Variable$3(nm: Str) extends Exp$1
//│ class Exp$1()
//│ fun getVal$Sum$4: Object -> Str
//│ fun derive$Pow$6: Object -> Mul$5
//│ fun getVal$Pow$6: Object -> Str
//│ fun derive$Sum$4: Object -> Sum$4
//│ fun main$$9: () -> Str
//│ fun derive$Numeric$2: anything -> Numeric$2
//│ fun getNum$Numeric$2: Object -> Int
//│ fun derive$Variable$3: anything -> Numeric$2
//│ fun getVal$Mul$5: Object -> Str
//│ fun main$$8: () -> Str
//│ fun main$$7: () -> Str
//│ fun main$$6: () -> Str
//│ fun getVal$Variable$3: Object -> Str
//│ fun getVal$Numeric$2: Object -> Str
//│ fun derive$Mul$5: Object -> Sum$4
//│ Str
//│ res
//│     = '(1 + 0)'
//│ res
//│     = '((1 * 3) + (x * 0))'
//│ res
//│     = '(3 * (x ^ 2))'
//│ res
//│     = '(((2 * (x ^ 1)) * (y ^ 2)) + ((x ^ 2) * (2 * (y ^ 1))))'
