:NewDefs

:mono
class Bar(x: Int) {
  fun foo(x) = x
  fun FooMinus(y: Int) = x + y
  fun car = foo(2)
}
class Car {
  fun da(b: Bar) = b.foo(2)
}
fun baz(b: Bar) = b.foo(2)
let bar = Bar(42)
baz(bar)
(Car()).da(Bar(1337))
bar.car
//│ Lifted:
//│ TypingUnit {
//│   class Bar$1([x: Int,]) {
//│     fun foo = (x,) => x
//│     fun FooMinus = (y: Int,) => +((this).x, y,)
//│     fun car = (this).foo(2,)
//│   }
//│   class Car$2([]) {fun da = (b: Bar$1,) => (b).foo(2,)}
//│   fun baz$2 = (b: Bar$1,) => (b).foo(2,)
//│   let bar$1 = Bar$1(42,)
//│   Code(List(baz$2(bar$1,)))
//│   Code(List(('(' Car$2() ')').da(Bar$1(1337,),)))
//│   Code(List((bar$1).car))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class Bar$1([x: Int,]) {}
//│   class Car$2([]) {}
//│   let bar$1 = Bar$1(42,)
//│   fun da$Car$2 = (this, b: Bar$1,) => let obj = b in if obj is ‹(Bar$1) then foo$Bar$1(obj, 2,); else error›
//│   fun main$$6 = () => let obj = bar$1 in if obj is ‹(Bar$1) then car$Bar$1(obj,); else error›
//│   fun foo$Bar$1 = (this, x,) => x
//│   fun baz$2 = (b: Bar$1,) => let obj = b in if obj is ‹(Bar$1) then foo$Bar$1(obj, 2,); else error›
//│   fun main$$5 = () => let obj = '(' Car$2() ')' in if obj is ‹(Car$2) then da$Car$2(obj, Bar$1(1337,),); else error›
//│   fun main$$4 = () => baz$2(bar$1,)
//│   fun car$Bar$1 = (this,) => let obj = this in if obj is ‹(Bar$1) then foo$Bar$1(obj, 2,); else error›
//│   Code(List(main$$4()))
//│   Code(List(main$$5()))
//│   Code(List(main$$6()))
//│ }
//│ class Bar$1(x: Int)
//│ class Car$2()
//│ let bar$1: Bar$1
//│ fun da$Car$2: forall 'a. (anything, b: Bar$1) -> (2 | 'a)
//│ fun main$$6: forall 'a. () -> (2 | 'a)
//│ fun foo$Bar$1: forall 'a. (anything, 'a) -> (2 | 'a)
//│ fun baz$2: (b: Bar$1) -> 2
//│ fun main$$5: () -> 2
//│ fun main$$4: () -> 2
//│ fun car$Bar$1: forall 'a. Object -> (2 | 'a)
//│ forall 'a. 2 | 'a
//│ bar$1
//│       = Bar$1 {}
//│ res
//│     = 2
//│ res
//│     = 2
//│ res
//│     = 2
