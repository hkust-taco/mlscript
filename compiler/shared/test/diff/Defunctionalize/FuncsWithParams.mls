:NewDefs


:mono
class Arithmetic() {
    fun use(num1, num2) = 0
}
class Add() extends Arithmetic {
    fun use(num1, num2) = num1+num2
}
class Sub() extends Arithmetic {
    fun use(num1, num2) = num1-num2
}
fun getArith(choice) = if choice == 1 then Add() else Sub()
getArith(1).use(4,6)
getArith(2).use(4,6)
//│ Lifted:
//│ TypingUnit {
//│   class Arithmetic$1([]) {fun use = (num1, num2,) => 0}
//│   class Add$2([]): Arithmetic$1 {fun use = (num1, num2,) => +(num1, num2,)}
//│   class Sub$3([]): Arithmetic$1 {fun use = (num1, num2,) => -(num1, num2,)}
//│   fun getArith$1 = (choice,) => if (==(choice, 1,)) then Add$2() else Sub$3()
//│   Code(List((getArith$1(1,)).use(4, 6,)))
//│   Code(List((getArith$1(2,)).use(4, 6,)))
//│ }
//│ Mono:
//│ TypingUnit {
//│   class Arithmetic$1([]) {}
//│   class Sub$3([]): Arithmetic$1 {}
//│   class Add$2([]): Arithmetic$1 {}
//│   fun getArith$1 = (choice,) => if (==(choice, 1,)) then Add$2() else Sub$3()
//│   fun use$Add$2 = (this, num1, num2,) => +(num1, num2,)
//│   fun use$Sub$3 = (this, num1, num2,) => -(num1, num2,)
//│   fun main$$5 = () => let obj = getArith$1(2,) in if obj is ‹(Sub$3) then use$Sub$3(obj, 4, 6,); (Add$2) then use$Add$2(obj, 4, 6,); else error›
//│   fun main$$4 = () => let obj = getArith$1(1,) in if obj is ‹(Sub$3) then use$Sub$3(obj, 4, 6,); (Add$2) then use$Add$2(obj, 4, 6,); else error›
//│   Code(List(main$$4()))
//│   Code(List(main$$5()))
//│ }
//│ class Arithmetic$1()
//│ class Sub$3() extends Arithmetic$1
//│ class Add$2() extends Arithmetic$1
//│ fun getArith$1: Num -> (Add$2 | Sub$3)
//│ fun use$Add$2: (anything, Int, Int) -> Int
//│ fun use$Sub$3: (anything, Int, Int) -> Int
//│ fun main$$5: () -> Int
//│ fun main$$4: () -> Int
//│ Int
//│ res
//│     = 10
//│ res
//│     = -2
