:NewParser
:ParseOnly

fun foo =
  print("ok")
  print("ko")
//│ |#fun| |foo| |#=|→|print|(|"ok"|)|↵|print|(|"ko"|)|←|
//│ Parsed: {fun foo = {print ("ok",); print ("ko",)}}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, [], Blk(...)))
//│ Lifted:
//│ TypingUnit {fun foo$1 =  => {print ("ok",); print ("ko",)}}

class A{
  class B {}
  fun foo(x: B) = (x:B)
}
//│ |#class| |A|{|→|#class| |B| |{||}|↵|#fun| |foo|(|x|#:| |B|)| |#=| |(|x|#:|B|)|←|↵|}|
//│ Parsed: {class A() {class B() {}; fun foo = x: B, => '(' x: B, ')'}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(), (), TypingUnit(NuTypeDef(class, B, (), Tup(), (), TypingUnit()), NuFunDef(None, foo, [], Lam(Tup(x: Var(B)), Bra(rcd = false, Tup(x: Var(B))))))))
//│ Lifted:
//│ TypingUnit {
//│   class A$1_B$2(par$A$1,) {}
//│   class A$1() {fun foo = x: A$1_B$2, => '(' x: A$1_B$2, ')'}
//│ }

fun foo =
  fun local(x) =
    class Foo {
      fun bar = x + 1
    }
    Foo().bar
  print of local(0) + local(1)
  print of (local of 0) + local of 1
  fun tmp = 1
  print of local of 0 + local of 1
  fun tmp = 2
//│ |#fun| |foo| |#=|→|#fun| |local|(|x|)| |#=|→|#class| |Foo| |{|→|#fun| |bar| |#=| |x| |+| |1|←|↵|}|↵|Foo|(||)|.bar|←|↵|print| |#of| |local|(|0|)| |+| |local|(|1|)|↵|print| |#of| |(|local| |#of| |0|)| |+| |local| |#of| |1|↵|#fun| |tmp| |#=| |1|↵|print| |#of| |local| |#of| |0| |+| |local| |#of| |1|↵|#fun| |tmp| |#=| |2|←|
//│ Parsed: {fun foo = {fun local = x, => {class Foo() {fun bar = + (x,) (1,)}; (Foo ()).bar}; print (+ (local (0,),) (local (1,),),); print (+ (local (0,),) (local (1,),),); fun tmp = 1; print (local (+ (0,) (local (1,),),),); fun tmp = 2}}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, [], Blk(...)))
//│ Lifted:
//│ TypingUnit {
//│   class Foo$1(x,) {fun bar =  => + ((this).x,) (1,)}
//│   fun local$3 = x, => {(Foo$1 (x,)).bar}
//│   fun tmp$2 =  => 1
//│   fun foo$1 =  => {print (+ (local$3 (0,),) (local$3 (1,),),); print (+ (local$3 (0,),) (local$3 (1,),),); print (local$3 (+ (0,) (local$3 (1,),),),)}
//│ }

class A(y){}
let f = x => new A(0){fun bar = x+y}
f(0)
//│ |#class| |A|(|y|)|{||}|↵|#let| |f| |#=| |x| |=>| |#new| |A|(|0|)|{|#fun| |bar| |#=| |x|+|y|}|↵|f|(|0|)|
//│ Parsed: {class A(y,) {}; let f = x, => new A(0,) {fun bar = + (x,) (y,)}; f (0,)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(y)), (), TypingUnit()), NuFunDef(Some(false), f, [], Lam(Tup(_: Var(x)), New(Some((TypeName(A),0,)), TypingUnit(List(fun bar = + (x,) (y,)))))), App(Var(f), Tup(_: IntLit(0))))
//│ Lifted:
//│ TypingUnit {
//│   class A$1(y,) {}
//│   class A$2$2(y, x,): A$1 ((this).y,) {fun bar =  => + ((this).x,) ((this).y,)}
//│   let f$1 = x, => {new A$2$2(0, x,) {}}
//│   Code(List(f$1 (0,)))
//│ }

class A(x){
  fun w = x
  fun foo(y) = 
    class B(z){
      fun bar = x+y+z
    }
    new B(0){
      fun bar = w+y+z
    }
}
//│ |#class| |A|(|x|)|{|→|#fun| |w| |#=| |x|↵|#fun| |foo|(|y|)| |#=| |→|#class| |B|(|z|)|{|→|#fun| |bar| |#=| |x|+|y|+|z|←|↵|}|↵|#new| |B|(|0|)|{|→|#fun| |bar| |#=| |w|+|y|+|z|←|↵|}|←|←|↵|}|
//│ Parsed: {class A(x,) {fun w = x; fun foo = y, => {class B(z,) {fun bar = + (+ (x,) (y,),) (z,)}; new B(0,) {fun bar = + (+ (w,) (y,),) (z,)}}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(x)), (), TypingUnit(NuFunDef(None, w, [], Var(x)), NuFunDef(None, foo, [], Lam(Tup(_: Var(y)), Blk(...))))))
//│ Lifted:
//│ TypingUnit {
//│   class A$1_B$2(par$A$1, z, y,) {
//│     fun bar =  => + (+ (((this).par$A$1).x,) ((this).y,),) ((this).z,)
//│   }
//│   class A$1_B$1$3(par$A$1, z, y,): A$1_B$2 ((this).par$A$1, (this).z, (this).y,) {
//│     fun bar =  => + (+ (((this).par$A$1).w,) ((this).y,),) ((this).z,)
//│   }
//│   class A$1(x,) {
//│     fun w =  => (this).x
//│     fun foo = y, => {{new A$1_B$1$3(this, 0, y,) {}}}
//│   }
//│ }

fun f(x,y,z) = 
  class A{
    fun foo = new B
    fun bar1 = x
  }
  class B{
    fun foo = new A
    fun bar2 = y
  }
  class C: A,B{
    fun bar = bar1 + bar2
  }
//│ |#fun| |f|(|x|,|y|,|z|)| |#=| |→|#class| |A|{|→|#fun| |foo| |#=| |#new| |B|↵|#fun| |bar1| |#=| |x|←|↵|}|↵|#class| |B|{|→|#fun| |foo| |#=| |#new| |A|↵|#fun| |bar2| |#=| |y|←|↵|}|↵|#class| |C|#:| |A|,|B|{|→|#fun| |bar| |#=| |bar1| |+| |bar2|←|↵|}|←|
//│ Parsed: {fun f = x, y, z, => {class A() {fun foo = new B() {}; fun bar1 = x}; class B() {fun foo = new A() {}; fun bar2 = y}; class C(): A, B {fun bar = + (bar1,) (bar2,)}}}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, [], Lam(Tup(_: Var(x), _: Var(y), _: Var(z)), Blk(...))))
//│ Lifted:
//│ TypingUnit {
//│   class A$1(x, y,) {
//│     fun foo =  => new B$2((this).y, (this).x,) {}
//│     fun bar1 =  => (this).x
//│   }
//│   class B$2(y, x,) {
//│     fun foo =  => new A$1((this).x, (this).y,) {}
//│     fun bar2 =  => (this).y
//│   }
//│   class C$3(x, y,): A$1 ((this).x, (this).y,), B$2 ((this).y, (this).x,) {fun bar =  => + ((this).bar1,) ((this).bar2,)}
//│   fun f$1 = x, y, z, => {}
//│ }

fun f(x,y,z) = 
  class C{
    class A{
      fun foo = new B
      fun bar1 = x
    }
    class B{
      fun foo = new A
      fun bar2 = y
    }
    fun boo = (new A).bar1 + B().bar2 + z
  }
//│ |#fun| |f|(|x|,|y|,|z|)| |#=| |→|#class| |C|{|→|#class| |A|{|→|#fun| |foo| |#=| |#new| |B|↵|#fun| |bar1| |#=| |x|←|↵|}|↵|#class| |B|{|→|#fun| |foo| |#=| |#new| |A|↵|#fun| |bar2| |#=| |y|←|↵|}|↵|#fun| |boo| |#=| |(|#new| |A|)|.bar1| |+| |B|(||)|.bar2| |+| |z|←|↵|}|←|
//│ Parsed: {fun f = x, y, z, => {class C() {class A() {fun foo = new B() {}; fun bar1 = x}; class B() {fun foo = new A() {}; fun bar2 = y}; fun boo = + (+ (('(' new A() {}, ')').bar1,) ((B ()).bar2,),) (z,)}}}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, [], Lam(Tup(_: Var(x), _: Var(y), _: Var(z)), Blk(...))))
//│ Lifted:
//│ TypingUnit {
//│   class C$1_A$2(par$C$1,) {
//│     fun foo =  => new C$1_B$3((this).par$C$1,) {}
//│     fun bar1 =  => ((this).par$C$1).x
//│   }
//│   class C$1_B$3(par$C$1,) {
//│     fun foo =  => new C$1_A$2((this).par$C$1,) {}
//│     fun bar2 =  => ((this).par$C$1).y
//│   }
//│   class C$1(x, y, z,) {
//│     fun boo =  => + (('(' new C$1_A$2(this,) {}, ')').bar1,) (+ ((C$1_B$3 (this,)).bar2,) ((this).z,),)
//│   }
//│   fun f$1 = x, y, z, => {}
//│ }

fun f(y) =
  let g(x) = x + y + 1
  class Foo(x) {
    fun h = g(x)
  }
  Foo(1).h
//│ |#fun| |f|(|y|)| |#=|→|#let| |g|(|x|)| |#=| |x| |+| |y| |+| |1|↵|#class| |Foo|(|x|)| |{|→|#fun| |h| |#=| |g|(|x|)|←|↵|}|↵|Foo|(|1|)|.h|←|
//│ Parsed: {fun f = y, => {let g = x, => + (+ (x,) (y,),) (1,); class Foo(x,) {fun h = g (x,)}; (Foo (1,)).h}}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, [], Lam(Tup(_: Var(y)), Blk(...))))
//│ Lifted:
//│ TypingUnit {
//│   class Foo$1(x, y,) {fun h =  => g$2 ((this).x, y,)}
//│   let g$2 = x, y, => + (+ (x,) (y,),) (1,)
//│   fun f$1 = y, => {(Foo$1 (1, y,)).h}
//│ }

fun f(x) =
  let g(x) = 
    let h(x) = x + 2
    Foo(h(x), x).bar
  class Foo(x, y) {
    fun bar = g(x)+y
  }
  Foo(x, x).bar
//│ |#fun| |f|(|x|)| |#=|→|#let| |g|(|x|)| |#=| |→|#let| |h|(|x|)| |#=| |x| |+| |2|↵|Foo|(|h|(|x|)|,| |x|)|.bar|←|↵|#class| |Foo|(|x|,| |y|)| |{|→|#fun| |bar| |#=| |g|(|x|)|+|y|←|↵|}|↵|Foo|(|x|,| |x|)|.bar|←|
//│ Parsed: {fun f = x, => {let g = x, => {let h = x, => + (x,) (2,); (Foo (h (x,), x,)).bar}; class Foo(x, y,) {fun bar = + (g (x,),) (y,)}; (Foo (x, x,)).bar}}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, [], Lam(Tup(_: Var(x)), Blk(...))))
//│ Lifted:
//│ TypingUnit {
//│   class Foo$1(x, y,) {fun bar =  => + (g$2 ((this).x,),) ((this).y,)}
//│   let h$3 = x, => + (x,) (2,)
//│   let g$2 = x, => {(Foo$1 (h$3 (x,), x,)).bar}
//│   fun f$1 = x, => {(Foo$1 (x, x,)).bar}
//│ }

class Foo(x, y): Bar(y, x), Baz(x + y)
//│ |#class| |Foo|(|x|,| |y|)|#:| |Bar|(|y|,| |x|)|,| |Baz|(|x| |+| |y|)|
//│ Parsed: {class Foo(x, y,): Bar (y, x,), Baz (+ (x,) (y,),) {}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Foo, (), Tup(_: Var(x), _: Var(y)), (App(Var(Bar), Tup(_: Var(y), _: Var(x))), App(Var(Baz), Tup(_: App(App(Var(+), Tup(_: Var(x))), Tup(_: Var(y)))))), TypingUnit()))
//│ Lifted:
//│ TypingUnit {
//│   class Foo$1(x, y,): Bar ((this).y, (this).x,), Baz (+ ((this).x,) ((this).y,),) {}
//│ }

fun foo<T, U>(x: T): string = 
  class A(y): B<T>, C(y: U) {
    fun bar = this
  }
  "rua"
//│ |#fun| |foo|‹|T|,| |U|›|(|x|#:| |T|)|#:| |string| |#=| |→|#class| |A|(|y|)|#:| |B|‹|T|›|,| |C|(|y|#:| |U|)| |{|→|#fun| |bar| |#=| |this|←|↵|}|↵|"rua"|←|
//│ Parsed: {fun foo = x: T, => {class A(y,): B‹T›, C (y: U,) {fun bar = this}; "rua"} : TypeName(string)}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, [TypeName(T), TypeName(U)], Lam(Tup(x: Var(T)), Asc(Blk(...), TypeName(string)))))
//│ Lifted:
//│ TypingUnit {
//│   class A$1(y,): B‹T›, C (y: U,) {fun bar =  => this}
//│   fun foo$1[T, U] = x: T, => {"rua"} : TypeName(string)
//│ }

class A<T>{
  class B{
    fun f = x => y => x
    fun g: T => B => T
  }
}
//│ |#class| |A|‹|T|›|{|→|#class| |B|{|→|#fun| |f|#:| |T| |=>| |B| |=>| |T| |#=| |x| |=>| |y| |=>| |x|↵|#fun| |g|#:| |T| |=>| |B| |=>| |T|←|↵|}|←|↵|}|
//│ Parsed: {class A‹T›() {class B() {fun f = x, => y, => x : Function(Tuple(List((None,Field(None,TypeName(T))))),Function(Tuple(List((None,Field(None,TypeName(B))))),TypeName(T))); fun g: [] -> T -> B -> T}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (TypeName(T)), Tup(), (), TypingUnit(NuTypeDef(class, B, (), Tup(), (), TypingUnit(NuFunDef(None, f, [], Lam(Tup(_: Var(x)), Lam(Tup(_: Var(y)), Var(x)))), NuFunDef(None, g, [], PolyType(List(),Function(Tuple(List((None,Field(None,TypeName(T))))),Function(Tuple(List((None,Field(None,TypeName(B))))),TypeName(T))))))))))
//│ Lifted:
//│ TypingUnit {
//│   class A$1_B$2_Lambda1$1$3(par$A$1_B$2, x,) {fun apply = y, => (this).x}
//│   class A$1_B$2[T](par$A$1,) {
//│     fun f = x, => {new A$1_B$2_Lambda1$1$3(this, x,) {}}
//│     fun g = T -> A$1_B$2 -> T
//│   }
//│   class A$1[T]() {}
//│ }

class Foo<T>{
  class RectangleBox: Box<T> & { breadth: T }
  class StackedRectangleBoxes<N> : RectangleBox<T> & { size: N }
  class Bar: {any: RectangleBox => StackedRectangleBoxes}
}
//│ |#class| |Foo|‹|T|›|{|→|#class| |RectangleBox|#:| |Box|‹|T|›| |&| |{| |breadth|#:| |T| |}|↵|#class| |StackedRectangleBoxes|‹|N|›| |#:| |RectangleBox|‹|T|›| |&| |{| |size|#:| |N| |}|↵|#class| |Bar|#:| |{|any|#:| |RectangleBox| |=>| |StackedRectangleBoxes|}|←|↵|}|
//│ Parsed: {class Foo‹T›() {class RectangleBox(): & (Box‹T›,) ('{' {breadth: T} '}',) {}; class StackedRectangleBoxes‹N›(): & (RectangleBox‹T›,) ('{' {size: N} '}',) {}; class Bar(): '{' {any: RectangleBox, => StackedRectangleBoxes} '}' {}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Foo, (TypeName(T)), Tup(), (), TypingUnit(NuTypeDef(class, RectangleBox, (), Tup(), (App(App(Var(&), Tup(_: TyApp(Var(Box), List(TypeName(T))))), Tup(_: Bra(rcd = true, Rcd(Var(breadth) = Var(T)))))), TypingUnit()), NuTypeDef(class, StackedRectangleBoxes, (TypeName(N)), Tup(), (App(App(Var(&), Tup(_: TyApp(Var(RectangleBox), List(TypeName(T))))), Tup(_: Bra(rcd = true, Rcd(Var(size) = Var(N)))))), TypingUnit()), NuTypeDef(class, Bar, (), Tup(), (Bra(rcd = true, Rcd(Var(any) = Lam(Tup(_: Var(RectangleBox)), Var(StackedRectangleBoxes))))), TypingUnit()))))
//│ Lifted:
//│ TypingUnit {
//│   class Foo$1_RectangleBox$2[T](par$Foo$1,): & (Box‹T›,) ('{' {breadth: T} '}',) {}
//│   class Foo$1_StackedRectangleBoxes$3[N,T](par$Foo$1,): & (Foo$1_RectangleBox$2 ((this).par$Foo$1,)‹T›,) ('{' {size: N} '}',) {}
//│   class Foo$1_Bar$4(par$Foo$1,): '{' {any: Foo$1_RectangleBox$2, => Foo$1_StackedRectangleBoxes$3} '}' {}
//│   class Foo$1[T]() {}
//│ }

class Func<T, U> {
  fun apply: T => U
}
class Lambda<T, U> : Func<T, U> {}
fun ctx(a,b) =
  fun foo(f: Func, x) = 
    f.apply(x)
  foo(new Lambda{
    fun apply(x) = a+x
  }, b)
//│ |#class| |Func|‹|T|,| |U|›| |{|→|#fun| |apply|#:| |T| |=>| |U|←|↵|}|↵|#class| |Lambda|‹|T|,| |U|›| |#:| |Func|‹|T|,| |U|›| |{||}|↵|#fun| |ctx|(|a|,|b|)| |#=|→|#fun| |foo|(|f|#:| |Func|,| |x|)| |#=| |→|f|.apply|(|x|)|←|↵|foo|(|#new| |Lambda|{|→|#fun| |apply|(|x|)| |#=| |a|+|x|←|↵|}|,| |b|)|←|
//│ Parsed: {class Func‹T, U›() {fun apply: [] -> T -> U}; class Lambda‹T, U›(): Func‹T, U› {}; fun ctx = a, b, => {fun foo = f: Func, x, => {(f).apply (x,)}; foo (new Lambda() {fun apply = x, => + (a,) (x,)}, b,)}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Func, (TypeName(T), TypeName(U)), Tup(), (), TypingUnit(NuFunDef(None, apply, [], PolyType(List(),Function(Tuple(List((None,Field(None,TypeName(T))))),TypeName(U)))))), NuTypeDef(class, Lambda, (TypeName(T), TypeName(U)), Tup(), (TyApp(Var(Func), List(TypeName(T), TypeName(U)))), TypingUnit()), NuFunDef(None, ctx, [], Lam(Tup(_: Var(a), _: Var(b)), Blk(...))))
//│ Lifted:
//│ TypingUnit {
//│   class Func$1[T,U]() {fun apply = T -> U}
//│   class Lambda$2[T,U](): Func$1 ()‹T, U› {}
//│   class Lambda$3$3(a,): Lambda$2 () {fun apply = x, => + ((this).a,) (x,)}
//│   fun foo$2 = f: Func$1, x, => {(f).apply (x,)}
//│   fun ctx$1 = a, b, => {foo$2 ({new Lambda$3$3(a,) {}}, b,)}
//│ }

fun f(T) = 
  new T()
f(MyClass)
//│ |#fun| |f|(|T|)| |#=| |→|#new| |T|(||)|←|↵|f|(|MyClass|)|
//│ Parsed: {fun f = T, => {new T() {}}; f (MyClass,)}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, [], Lam(Tup(_: Var(T)), Blk(...))), App(Var(f), Tup(_: Var(MyClass))))
//│ Lifted:
//│ Lifting failed: mlscript.codegen.CodeGenError: Cannot find type T. Class values are not supported in lifter. 

class A {
  fun foo = 
    fun bar = foo()
    bar()
}
//│ |#class| |A| |{|→|#fun| |foo| |#=| |→|#fun| |bar| |#=| |foo|(||)|↵|bar|(||)|←|←|↵|}|
//│ Parsed: {class A() {fun foo = {fun bar = foo (); bar ()}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(), (), TypingUnit(NuFunDef(None, foo, [], Blk(...)))))
//│ Lifted:
//│ TypingUnit {
//│   class A$1() {fun foo =  => {bar$1 (this,)}}
//│   fun bar$1 = this, => (this).foo ()
//│ }
