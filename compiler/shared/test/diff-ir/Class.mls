:NewParser
:ParseOnly
:UseIR

:genCpp
:runCpp
module Fn extends Callable {
  fun apply1(x) = builtin("println", x)
}
class Fn2(a) extends Callable {
  fun apply1(x) =
    builtin("println", a)
    builtin("println", x)
}
class Demo(n) {
  fun x() = n
}
fun f(fn) = fn(1)
fun main() =
  let d1 = Demo(2)
  Demo.x(d1)
  let print = Fn()
  Fn.apply1(print, 3)
  f(print)
  let print2 = Fn2(4)
  Fn2.apply1(print2, 5)
  print2(6)
  f(print2)
main()
//│ |#module| |Fn| |#extends| |Callable| |{|→|#fun| |apply1|(|x|)| |#=| |builtin|(|"println"|,| |x|)|←|↵|}|↵|#class| |Fn2|(|a|)| |#extends| |Callable| |{|→|#fun| |apply1|(|x|)| |#=|→|builtin|(|"println"|,| |a|)|↵|builtin|(|"println"|,| |x|)|←|←|↵|}|↵|#class| |Demo|(|n|)| |{|→|#fun| |x|(||)| |#=| |n|←|↵|}|↵|#fun| |f|(|fn|)| |#=| |fn|(|1|)|↵|#fun| |main|(||)| |#=|→|#let| |d1| |#=| |Demo|(|2|)|↵|Demo|.x|(|d1|)|↵|#let| |print| |#=| |Fn|(||)|↵|Fn|.apply1|(|print|,| |3|)|↵|f|(|print|)|↵|#let| |print2| |#=| |Fn2|(|4|)|↵|Fn2|.apply1|(|print2|,| |5|)|↵|print2|(|6|)|↵|f|(|print2|)|←|↵|main|(||)|
//│ Parsed: {module Fn: Callable {fun apply1 = (x,) => builtin("println", x,)}; class Fn2(a,): Callable {fun apply1 = (x,) => {builtin("println", a,); builtin("println", x,)}}; class Demo(n,) {fun x = () => n}; fun f = (fn,) => fn(1,); fun main = () => {let d1 = Demo(2,); (Demo).x(d1,); let print = Fn(); (Fn).apply1(print, 3,); f(print,); let print2 = Fn2(4,); (Fn2).apply1(print2, 5,); print2(6,); f(print2,)}; main()}
//│ 
//│ 
//│ IR:
//│ Program:
//│   class True()
//│   class False()
//│   class Callable() {
//│     def apply5(x0$4,x1$3,x2$2,x3$1,x4$0) =
//│       0 -- #62
//│     def apply1(x0$0) =
//│       0 -- #58
//│     def apply0() =
//│       0 -- #57
//│     def apply4(x0$3,x1$2,x2$1,x3$0) =
//│       0 -- #61
//│     def apply3(x0$2,x1$1,x2$0) =
//│       0 -- #60
//│     def apply2(x0$1,x1$0) =
//│       0 -- #59
//│   }
//│   class List()
//│   class Cons(h,t) extends List
//│   class Nil() extends List
//│   class Option()
//│   class Some(x) extends Option
//│   class None() extends Option
//│   class Fn() extends Callable {
//│     def apply1(x$11) =
//│       let x$12 = Callable.apply2(builtin,println,x$11) in -- #70
//│       x$12 -- #69
//│   }
//│   class Fn2(a) extends Callable {
//│     def apply1(x$13) =
//│       let x$14 = Callable.apply2(builtin,println,a) in -- #86
//│       let x$15 = Callable.apply2(builtin,println,x$13) in -- #85
//│       x$15 -- #84
//│   }
//│   class Demo(n) {
//│     def x() =
//│       n -- #87
//│   }
//│   def f(fn$0) =
//│     let x$1 = Callable.apply1(fn$0,1) in -- #8
//│     x$1 -- #7
//│   def main() =
//│     let x$2 = Demo(2) in -- #56
//│     let x$3 = Demo.x(x$2) in -- #55
//│     let x$4 = Fn() in -- #54
//│     let x$5 = Fn.apply1(x$4,3) in -- #53
//│     let* (x$6) = f(x$4) in -- #52
//│     let x$7 = Fn2(4) in -- #51
//│     let x$8 = Fn2.apply1(x$7,5) in -- #50
//│     let x$9 = Callable.apply1(x$7,6) in -- #49
//│     let* (x$10) = f(x$7) in -- #48
//│     x$10 -- #47
//│   let* (x$0) = main() in -- #2
//│   x$0 -- #1
//│ 
//│ Promoted:
//│ Program:
//│   class True()
//│   class False()
//│   class Callable() {
//│     def apply5(x0$4,x1$3,x2$2,x3$1,x4$0) =
//│       0 -- #62
//│     def apply1(x0$0) =
//│       0 -- #58
//│     def apply0() =
//│       0 -- #57
//│     def apply4(x0$3,x1$2,x2$1,x3$0) =
//│       0 -- #61
//│     def apply3(x0$2,x1$1,x2$0) =
//│       0 -- #60
//│     def apply2(x0$1,x1$0) =
//│       0 -- #59
//│   }
//│   class List()
//│   class Cons(h,t) extends List
//│   class Nil() extends List
//│   class Option()
//│   class Some(x) extends Option
//│   class None() extends Option
//│   class Fn() extends Callable {
//│     def apply1(x$11) =
//│       let x$12 = Callable.apply2(builtin,println,x$11) in -- #70
//│       x$12 -- #69
//│   }
//│   class Fn2(a) extends Callable {
//│     def apply1(x$13) =
//│       let x$14 = Callable.apply2(builtin,println,a) in -- #86
//│       let x$15 = Callable.apply2(builtin,println,x$13) in -- #85
//│       x$15 -- #84
//│   }
//│   class Demo(n) {
//│     def x() =
//│       n -- #87
//│   }
//│   def f(fn$0) =
//│     let x$1 = Callable.apply1(fn$0,1) in -- #8
//│     x$1 -- #7
//│   def main() =
//│     let x$2 = Demo(2) in -- #56
//│     let x$3 = Demo.x(x$2) in -- #55
//│     let x$4 = Fn() in -- #54
//│     let x$5 = Fn.apply1(x$4,3) in -- #53
//│     let* (x$6) = f(x$4) in -- #52
//│     let x$7 = Fn2(4) in -- #51
//│     let x$8 = Fn2.apply1(x$7,5) in -- #50
//│     let x$9 = Callable.apply1(x$7,6) in -- #49
//│     let* (x$10) = f(x$7) in -- #48
//│     x$10 -- #47
//│   let* (x$0) = main() in -- #2
//│   x$0 -- #1
//│ 
//│ 
//│ Execution succeeded: 
//│ 3
//│ 1
//│ 4
//│ 5
//│ 4
//│ 6
//│ 4
//│ 1
//│ Unit
