:NewDefs

:js
:showRepl
declare val console: nothing
abstract class Nat: S | Z
class S(x: Nat) extends Nat
module Z extends Nat
fun pred(n) =
  if n is
    S(p) then p
    Z then Z
fun plus(n1, n2) =
  if n1 is
    Z then n2
    S(p) then S(plus(p, n2))
fun fib(n) =
  if n is
    Z then S(Z)
    S(p) then
      if p is
        Z then S(Z)
        S(q) then plus(fib(p), fib(q))
fun to_int(n) =
  if n is
    Z then 0
    S(p) then 1 + to_int(p)
fun to_nat(n) =
  if n == 0 then Z
  else S(to_nat(n - 1))
fun main() =
  to_int(fib(to_nat(15)))
main()
main()
main()
main()
console.time("dbsave"), main(), console.timeEnd("dbsave")
//│ abstract class Nat: S | Z
//│ class S(x: Nat) extends Nat
//│ module Z extends Nat
//│ fun pred: (S | Z) -> (Nat | Z)
//│ fun plus: forall 'a. (S | Z, Nat & 'a) -> (S | 'a)
//│ fun fib: (S | Z) -> S
//│ fun to_int: (S | Z) -> Int
//│ fun to_nat: Int -> (S | Z)
//│ fun main: () -> Int
//│ val console: nothing
//│ nothing
//│ // Prelude
//│ let res;
//│ class TypingUnit {
//│   #Nat;
//│   #S;
//│   #Z;
//│   constructor() {
//│   }
//│   get Z() {
//│     const qualifier = this;
//│     if (this.#Z === undefined) {
//│       class Z extends qualifier.Nat {
//│         constructor() {
//│           super();
//│         }
//│       }
//│       this.#Z = new Z();
//│       this.#Z.class = Z;
//│     }
//│     return this.#Z;
//│   }
//│   get Nat() {
//│     const qualifier = this;
//│     if (this.#Nat === undefined) {
//│       class Nat {};
//│       this.#Nat = Nat;
//│     }
//│     return this.#Nat;
//│   }
//│   get S() {
//│     const qualifier = this;
//│     if (this.#S === undefined) {
//│       class S extends qualifier.Nat {
//│         #x;
//│         constructor(x) {
//│           super();
//│           this.#x = x;
//│         }
//│       static
//│         unapply(x) {
//│           return [x.#x];
//│         }
//│       };
//│       this.#S = ((x) => Object.freeze(new S(x)));
//│       this.#S.class = S;
//│       this.#S.unapply = S.unapply;
//│     }
//│     return this.#S;
//│   }
//│ }
//│ const typing_unit = new TypingUnit;
//│ globalThis.Nat = typing_unit.Nat;
//│ globalThis.S = typing_unit.S;
//│ globalThis.Z = typing_unit.Z;
//│ // Query 1 is empty
//│ // Query 2
//│ globalThis.pred = function pred(n) {
//│   return ((() => {
//│     let a;
//│     return (a = n, a instanceof S.class ? (([p]) => p)(S.unapply(n)) : a instanceof Z.class ? Z : (() => {
//│       throw new Error("non-exhaustive case expression");
//│     })());
//│   })());
//│ };
//│ // Query 3
//│ globalThis.plus = function plus(n1, n2) {
//│   return ((() => {
//│     let a;
//│     return (a = n1, a instanceof Z.class ? n2 : a instanceof S.class ? (([p]) => S(plus(p, n2)))(S.unapply(n1)) : (() => {
//│       throw new Error("non-exhaustive case expression");
//│     })());
//│   })());
//│ };
//│ // Query 4
//│ globalThis.fib = function fib(n) {
//│   return ((() => {
//│     let a;
//│     return (a = n, a instanceof Z.class ? S(Z) : a instanceof S.class ? (([p]) => (() => {
//│       let b;
//│       return (b = p, b instanceof Z.class ? S(Z) : b instanceof S.class ? (([q]) => plus(fib(p), fib(q)))(S.unapply(p)) : (() => {
//│         throw new Error("non-exhaustive case expression");
//│       })());
//│     })())(S.unapply(n)) : (() => {
//│       throw new Error("non-exhaustive case expression");
//│     })());
//│   })());
//│ };
//│ // Query 5
//│ globalThis["to_int"] = function to_int(n) {
//│   return ((() => {
//│     let a;
//│     return (a = n, a instanceof Z.class ? 0 : a instanceof S.class ? (([p]) => 1 + to_int(p))(S.unapply(n)) : (() => {
//│       throw new Error("non-exhaustive case expression");
//│     })());
//│   })());
//│ };
//│ // Query 6
//│ globalThis["to_nat"] = function to_nat(n) {
//│   return ((() => {
//│     return n == 0 === true ? Z : S(to_nat(n - 1));
//│   })());
//│ };
//│ // Query 7
//│ globalThis.main = function main() {
//│   return ((() => {
//│     return to_int(fib(to_nat(15)));
//│   })());
//│ };
//│ // Query 8
//│ res = main();
//│ // Query 9
//│ res = main();
//│ // Query 10
//│ res = main();
//│ // Query 11
//│ res = main();
//│ // Query 12
//│ res = (console.time("dbsave") , main() , console.timeEnd("dbsave"));
//│ // End of generated code
//│ ┌ Block at Fib.mls:5
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let res;
//│ │ │   class TypingUnit {
//│ │ │     #Nat;
//│ │ │     #S;
//│ │ │     #Z;
//│ │ │     constructor() {
//│ │ │     }
//│ │ │     get Z() {
//│ │ │       const qualifier = this;
//│ │ │       if (this.#Z === undefined) {
//│ │ │         class Z extends qualifier.Nat {
//│ │ │           constructor() {
//│ │ │             super();
//│ │ │           }
//│ │ │         }
//│ │ │         this.#Z = new Z();
//│ │ │         this.#Z.class = Z;
//│ │ │       }
//│ │ │       return this.#Z;
//│ │ │     }
//│ │ │     get Nat() {
//│ │ │       const qualifier = this;
//│ │ │       if (this.#Nat === undefined) {
//│ │ │         class Nat {};
//│ │ │         this.#Nat = Nat;
//│ │ │       }
//│ │ │       return this.#Nat;
//│ │ │     }
//│ │ │     get S() {
//│ │ │       const qualifier = this;
//│ │ │       if (this.#S === undefined) {
//│ │ │         class S extends qualifier.Nat {
//│ │ │           #x;
//│ │ │           constructor(x) {
//│ │ │             super();
//│ │ │             this.#x = x;
//│ │ │           }
//│ │ │         static
//│ │ │           unapply(x) {
//│ │ │             return [x.#x];
//│ │ │           }
//│ │ │         };
//│ │ │         this.#S = ((x) => Object.freeze(new S(x)));
//│ │ │         this.#S.class = S;
//│ │ │         this.#S.unapply = S.unapply;
//│ │ │       }
//│ │ │       return this.#S;
//│ │ │     }
//│ │ │   }
//│ │ │   const typing_unit = new TypingUnit;
//│ │ │   globalThis.Nat = typing_unit.Nat;
//│ │ │   globalThis.S = typing_unit.S;
//│ │ │   globalThis.Z = typing_unit.Z;
//│ │ └── Reply
//│ │     Z { class: [class Z extends Nat] }
//│ ├── Query 1/12: <empty>
//│ ├─┬ Query 2/12
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   globalThis.pred = function pred(n) {
//│ │ ├──     return ((() => {
//│ │ ├──       let a;
//│ │ ├──       return (a = n, a instanceof S.class ? (([p]) => p)(S.unapply(n)) : a instanceof Z.class ? Z : (() => {
//│ │ ├──         throw new Error("non-exhaustive case expression");
//│ │ ├──       })());
//│ │ ├──     })());
//│ │ ├──   };
//│ │ ├── Intermediate: [Function: pred]
//│ │ └── Reply: [success] [Function: pred]
//│ ├─┬ Query 3/12
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   globalThis.plus = function plus(n1, n2) {
//│ │ ├──     return ((() => {
//│ │ ├──       let a;
//│ │ ├──       return (a = n1, a instanceof Z.class ? n2 : a instanceof S.class ? (([p]) => S(plus(p, n2)))(S.unapply(n1)) : (() => {
//│ │ ├──         throw new Error("non-exhaustive case expression");
//│ │ ├──       })());
//│ │ ├──     })());
//│ │ ├──   };
//│ │ ├── Intermediate: [Function: plus]
//│ │ └── Reply: [success] [Function: plus]
//│ ├─┬ Query 4/12
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   globalThis.fib = function fib(n) {
//│ │ ├──     return ((() => {
//│ │ ├──       let a;
//│ │ ├──       return (a = n, a instanceof Z.class ? S(Z) : a instanceof S.class ? (([p]) => (() => {
//│ │ ├──         let b;
//│ │ ├──         return (b = p, b instanceof Z.class ? S(Z) : b instanceof S.class ? (([q]) => plus(fib(p), fib(q)))(S.unapply(p)) : (() => {
//│ │ ├──           throw new Error("non-exhaustive case expression");
//│ │ ├──         })());
//│ │ ├──       })())(S.unapply(n)) : (() => {
//│ │ ├──         throw new Error("non-exhaustive case expression");
//│ │ ├──       })());
//│ │ ├──     })());
//│ │ ├──   };
//│ │ ├── Intermediate: [Function: fib]
//│ │ └── Reply: [success] [Function: fib]
//│ ├─┬ Query 5/12
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   globalThis["to_int"] = function to_int(n) {
//│ │ ├──     return ((() => {
//│ │ ├──       let a;
//│ │ ├──       return (a = n, a instanceof Z.class ? 0 : a instanceof S.class ? (([p]) => 1 + to_int(p))(S.unapply(n)) : (() => {
//│ │ ├──         throw new Error("non-exhaustive case expression");
//│ │ ├──       })());
//│ │ ├──     })());
//│ │ ├──   };
//│ │ ├── Intermediate: [Function: to_int]
//│ │ └── Reply: [success] [Function: to_int]
//│ ├─┬ Query 6/12
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   globalThis["to_nat"] = function to_nat(n) {
//│ │ ├──     return ((() => {
//│ │ ├──       return n == 0 === true ? Z : S(to_nat(n - 1));
//│ │ ├──     })());
//│ │ ├──   };
//│ │ ├── Intermediate: [Function: to_nat]
//│ │ └── Reply: [success] [Function: to_nat]
//│ ├─┬ Query 7/12
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   globalThis.main = function main() {
//│ │ ├──     return ((() => {
//│ │ ├──       return to_int(fib(to_nat(15)));
//│ │ ├──     })());
//│ │ ├──   };
//│ │ ├── Intermediate: [Function: main]
//│ │ └── Reply: [success] [Function: main]
//│ ├─┬ Query 8/12
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   res = main();
//│ │ ├── Intermediate: 987
//│ │ └── Reply: [success] 987
//│ ├─┬ Query 9/12
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   res = main();
//│ │ ├── Intermediate: 987
//│ │ └── Reply: [success] 987
//│ ├─┬ Query 10/12
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   res = main();
//│ │ ├── Intermediate: 987
//│ │ └── Reply: [success] 987
//│ ├─┬ Query 11/12
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   res = main();
//│ │ ├── Intermediate: 987
//│ │ └── Reply: [success] 987
//│ └─┬ Query 12/12
//│   ├── Prelude: <empty>
//│   ├── Code:
//│   ├──   res = (console.time("dbsave") , main() , console.timeEnd("dbsave"));
//│   ├── Intermediate: dbsave: 1.057ms
//│ undefined
//│   └── Reply: [success] undefined
//│ console
//│         = <missing implementation>
//│ res
//│     = 987
//│ res
//│     = 987
//│ res
//│     = 987
//│ res
//│     = 987
//│ res
//│     = undefined
