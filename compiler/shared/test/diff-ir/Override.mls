:NewParser
:ParseOnly
:UseIR

:genCpp
:runCpp
:interpIR
module Base {
  fun f() = 1
}
module Child extends Base {
  fun f() = 2
}
fun main() =
  let c = Child()
  Base.f(c)
  Child.f(c)
main()
//│ |#module| |Base| |{|→|#fun| |f|(||)| |#=| |1|←|↵|}|↵|#module| |Child| |#extends| |Base| |{|→|#fun| |f|(||)| |#=| |2|←|↵|}|↵|#fun| |main|(||)| |#=|→|#let| |c| |#=| |Child|(||)|↵|Base|.f|(|c|)|↵|Child|.f|(|c|)|←|↵|main|(||)|
//│ Parsed: {module Base {fun f = () => 1}; module Child: Base {fun f = () => 2}; fun main = () => {let c = Child(); (Base).f(c,); (Child).f(c,)}; main()}
//│ 
//│ 
//│ IR:
//│ Program:
//│   class True()
//│   class False()
//│   class Callable() {
//│     def apply5(x0$4,x1$3,x2$2,x3$1,x4$0) =
//│       0 -- #21
//│     def apply1(x0$0) =
//│       0 -- #17
//│     def apply0() =
//│       0 -- #16
//│     def apply4(x0$3,x1$2,x2$1,x3$0) =
//│       0 -- #20
//│     def apply3(x0$2,x1$1,x2$0) =
//│       0 -- #19
//│     def apply2(x0$1,x1$0) =
//│       0 -- #18
//│   }
//│   class List()
//│   class Cons(h,t) extends List
//│   class Nil() extends List
//│   class Option()
//│   class Some(x) extends Option
//│   class None() extends Option
//│   class Base() {
//│     def f() =
//│       1 -- #22
//│   }
//│   class Child() extends Base {
//│     def f() =
//│       2 -- #23
//│   }
//│   def main() =
//│     let x$1 = Child() in -- #15
//│     let x$2 = Base.f(x$1) in -- #14
//│     let x$3 = Child.f(x$1) in -- #13
//│     x$3 -- #12
//│   let* (x$0) = main() in -- #2
//│   x$0 -- #1
//│ 
//│ Promoted:
//│ Program:
//│   class True()
//│   class False()
//│   class Callable() {
//│     def apply5(x0$4,x1$3,x2$2,x3$1,x4$0) =
//│       0 -- #21
//│     def apply1(x0$0) =
//│       0 -- #17
//│     def apply0() =
//│       0 -- #16
//│     def apply4(x0$3,x1$2,x2$1,x3$0) =
//│       0 -- #20
//│     def apply3(x0$2,x1$1,x2$0) =
//│       0 -- #19
//│     def apply2(x0$1,x1$0) =
//│       0 -- #18
//│   }
//│   class List()
//│   class Cons(h,t) extends List
//│   class Nil() extends List
//│   class Option()
//│   class Some(x) extends Option
//│   class None() extends Option
//│   class Base() {
//│     def f() =
//│       1 -- #22
//│   }
//│   class Child() extends Base {
//│     def f() =
//│       2 -- #23
//│   }
//│   def main() =
//│     let x$1 = Child() in -- #15
//│     let x$2 = Base.f(x$1) in -- #14
//│     let x$3 = Child.f(x$1) in -- #13
//│     x$3 -- #12
//│   let* (x$0) = main() in -- #2
//│   x$0 -- #1
//│ 
//│ Interpreted:
//│ 2
//│ 
//│ 
//│ Execution succeeded: 
//│ 2
