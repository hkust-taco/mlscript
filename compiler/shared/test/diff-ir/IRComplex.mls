:NewParser
:ParseOnly
:UseIR
:NoTailRec

:interpIR
class A(x, y, z)
class B(m, n)
fun complex_foo(t) =
  let r = if t is
    A(x, y, z) then x + y * z
    B(m, n) then m - n
  let s = B(1, 2)
  let u = if s is
    A(x, y, z) then 3
    B(m, n) then 4
  r + u
fun bar() =
  complex_foo(A(6, 7, 8))
  complex_foo(B(9, 10))
bar()
//│ |#class| |A|(|x|,| |y|,| |z|)|↵|#class| |B|(|m|,| |n|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |r| |#=| |#if| |t| |is|→|A|(|x|,| |y|,| |z|)| |#then| |x| |+| |y| |*| |z|↵|B|(|m|,| |n|)| |#then| |m| |-| |n|←|↵|#let| |s| |#=| |B|(|1|,| |2|)|↵|#let| |u| |#=| |#if| |s| |is|→|A|(|x|,| |y|,| |z|)| |#then| |3|↵|B|(|m|,| |n|)| |#then| |4|←|↵|r| |+| |u|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|6|,| |7|,| |8|)|)|↵|complex_foo|(|B|(|9|,| |10|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(x, y, z,) {}; class B(m, n,) {}; fun complex_foo = (t,) => {let r = if t is ‹(A(x, y, z,)) then +(x,)(*(y,)(z,),); (B(m, n,)) then -(m,)(n,)›; let s = B(1, 2,); let u = if s is ‹(A(x, y, z,)) then 3; (B(m, n,)) then 4›; +(r,)(u,)}; fun bar = () => {complex_foo(A(6, 7, 8,),); complex_foo(B(9, 10,),)}; bar()}
//│ 
//│ Promoted:
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, [x,y,z]),ClassInfo(3, B, [m,n])}, {
//│ Def(0, complex_foo, [t$0],
//│ 1, 
//│ case t$0 of -- #63
//│   A =>
//│     let x$9 = t$0.z in -- #51
//│     let x$10 = t$0.y in -- #50
//│     let x$11 = t$0.x in -- #49
//│     let x$12 = *(x$10,x$9) in -- #48
//│     let x$13 = +(x$11,x$12) in -- #47
//│     jump j$0(x$13) -- #46
//│   B =>
//│     let x$14 = t$0.n in -- #62
//│     let x$15 = t$0.m in -- #61
//│     let x$16 = -(x$15,x$14) in -- #60
//│     jump j$0(x$16) -- #59
//│ )
//│ Def(1, j$1, [x$2,x$0],
//│ 1, 
//│ let x$3 = +(x$0,x$2) in -- #13
//│ x$3 -- #12
//│ )
//│ Def(2, j$0, [x$0],
//│ 1, 
//│ let x$1 = B(1,2) in -- #34
//│ case x$1 of -- #33
//│   A =>
//│     let x$4 = x$1.z in -- #24
//│     let x$5 = x$1.y in -- #23
//│     let x$6 = x$1.x in -- #22
//│     jump j$1(3,x$0) -- #21
//│   B =>
//│     let x$7 = x$1.n in -- #32
//│     let x$8 = x$1.m in -- #31
//│     jump j$1(4,x$0) -- #30
//│ )
//│ Def(3, bar, [],
//│ 1, 
//│ let x$17 = A(6,7,8) in -- #89
//│ let* (x$18) = complex_foo(x$17) in -- #88
//│ let x$19 = B(9,10) in -- #87
//│ let* (x$20) = complex_foo(x$19) in -- #86
//│ x$20 -- #85
//│ )
//│ },
//│ let* (x$21) = bar() in -- #93
//│ x$21 -- #92)
//│ 
//│ Interpreted:
//│ 3

:interpIR
class A(w, x)
class B(y)
class C(z)
fun complex_foo(t) =
  let a = 1 + 2
  let b = 1 * 2
  let x = if t is
    A(x, y) then y
    B(x) then B(x + b)
    C(x) then C(0)
  let z = A(5, x)
  let v = B(6)
  let y = if x is
    A(x, y) then
      let m = x + a + b
      if y is
        A(x, y) then x
        B(x) then m
        C(x) then 0
    B(x) then 2
    C(x) then 3
  if z is
    A(x, y) then x
    B(x) then 4
    C(x) then
      if v is
        A(x, y) then x
        B(x) then 7
        C(x) then 8
fun bar() =
  complex_foo(A(10, A(9, B(10))))
bar()
//│ |#class| |A|(|w|,| |x|)|↵|#class| |B|(|y|)|↵|#class| |C|(|z|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |a| |#=| |1| |+| |2|↵|#let| |b| |#=| |1| |*| |2|↵|#let| |x| |#=| |#if| |t| |is|→|A|(|x|,| |y|)| |#then| |y|↵|B|(|x|)| |#then| |B|(|x| |+| |b|)|↵|C|(|x|)| |#then| |C|(|0|)|←|↵|#let| |z| |#=| |A|(|5|,| |x|)|↵|#let| |v| |#=| |B|(|6|)|↵|#let| |y| |#=| |#if| |x| |is|→|A|(|x|,| |y|)| |#then|→|#let| |m| |#=| |x| |+| |a| |+| |b|↵|#if| |y| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |m|↵|C|(|x|)| |#then| |0|←|←|↵|B|(|x|)| |#then| |2|↵|C|(|x|)| |#then| |3|←|↵|#if| |z| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |4|↵|C|(|x|)| |#then|→|#if| |v| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |7|↵|C|(|x|)| |#then| |8|←|←|←|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|10|,| |A|(|9|,| |B|(|10|)|)|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(w, x,) {}; class B(y,) {}; class C(z,) {}; fun complex_foo = (t,) => {let a = +(1,)(2,); let b = *(1,)(2,); let x = if t is ‹(A(x, y,)) then y; (B(x,)) then B(+(x,)(b,),); (C(x,)) then C(0,)›; let z = A(5, x,); let v = B(6,); let y = if x is ‹(A(x, y,)) then {let m = +(+(x,)(a,),)(b,); if y is ‹(A(x, y,)) then x; (B(x,)) then m; (C(x,)) then 0›}; (B(x,)) then 2; (C(x,)) then 3›; if z is ‹(A(x, y,)) then x; (B(x,)) then 4; (C(x,)) then {if v is ‹(A(x, y,)) then x; (B(x,)) then 7; (C(x,)) then 8›}›}; fun bar = () => {complex_foo(A(10, A(9, B(10,),),),)}; bar()}
//│ 
//│ Promoted:
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, [w,x]),ClassInfo(3, B, [y]),ClassInfo(4, C, [z])}, {
//│ Def(0, complex_foo, [t$0],
//│ 1, 
//│ let x$0 = +(1,2) in -- #140
//│ let x$1 = *(1,2) in -- #139
//│ case t$0 of -- #138
//│   A =>
//│     let x$27 = t$0.x in -- #116
//│     let x$28 = t$0.w in -- #115
//│     jump j$0(x$27,x$0,x$1) -- #114
//│   B =>
//│     let x$29 = t$0.y in -- #128
//│     let x$30 = +(x$29,x$1) in -- #127
//│     let x$31 = B(x$30) in -- #126
//│     jump j$0(x$31,x$0,x$1) -- #125
//│   C =>
//│     let x$32 = t$0.z in -- #137
//│     let x$33 = C(0) in -- #136
//│     jump j$0(x$33,x$0,x$1) -- #135
//│ )
//│ Def(1, j$2, [x$6],
//│ 1, 
//│ x$6 -- #21
//│ )
//│ Def(2, j$3, [x$11],
//│ 1, 
//│ jump j$2(x$11) -- #39
//│ )
//│ Def(3, j$1, [x$5,x$3,x$4],
//│ 1, 
//│ case x$3 of -- #60
//│   A =>
//│     let x$7 = x$3.x in -- #29
//│     let x$8 = x$3.w in -- #28
//│     jump j$2(x$8) -- #27
//│   B =>
//│     let x$9 = x$3.y in -- #34
//│     jump j$2(4) -- #33
//│   C =>
//│     let x$10 = x$3.z in -- #59
//│     case x$4 of -- #58
//│       A =>
//│         let x$12 = x$4.x in -- #47
//│         let x$13 = x$4.w in -- #46
//│         jump j$3(x$13) -- #45
//│       B =>
//│         let x$14 = x$4.y in -- #52
//│         jump j$3(7) -- #51
//│       C =>
//│         let x$15 = x$4.z in -- #57
//│         jump j$3(8) -- #56
//│ )
//│ Def(4, j$4, [x$20,x$3,x$4],
//│ 1, 
//│ jump j$1(x$20,x$3,x$4) -- #72
//│ )
//│ Def(5, j$0, [x$2,x$0,x$1],
//│ 1, 
//│ let x$3 = A(5,x$2) in -- #108
//│ let x$4 = B(6) in -- #107
//│ case x$2 of -- #106
//│   A =>
//│     let x$16 = x$2.x in -- #95
//│     let x$17 = x$2.w in -- #94
//│     let x$18 = +(x$17,x$0) in -- #93
//│     let x$19 = +(x$18,x$1) in -- #92
//│     case x$16 of -- #91
//│       A =>
//│         let x$21 = x$16.x in -- #80
//│         let x$22 = x$16.w in -- #79
//│         jump j$4(x$22,x$3,x$4) -- #78
//│       B =>
//│         let x$23 = x$16.y in -- #85
//│         jump j$4(x$19,x$3,x$4) -- #84
//│       C =>
//│         let x$24 = x$16.z in -- #90
//│         jump j$4(0,x$3,x$4) -- #89
//│   B =>
//│     let x$25 = x$2.y in -- #100
//│     jump j$1(2,x$3,x$4) -- #99
//│   C =>
//│     let x$26 = x$2.z in -- #105
//│     jump j$1(3,x$3,x$4) -- #104
//│ )
//│ Def(6, bar, [],
//│ 1, 
//│ let x$34 = B(10) in -- #162
//│ let x$35 = A(9,x$34) in -- #161
//│ let x$36 = A(10,x$35) in -- #160
//│ let* (x$37) = complex_foo(x$36) in -- #159
//│ x$37 -- #158
//│ )
//│ },
//│ let* (x$38) = bar() in -- #166
//│ x$38 -- #165)
//│ 
//│ Interpreted:
//│ 5

:interpIR
class A(w, x)
class B(y)
class C(z)
fun complex_foo(t) =
  let a = 1 + 2
  let b = 1 * 2
  let x = if t is
    A(x, y) then A(x, C(0))
    B(x) then B(x + b)
    C(x) then C(0)
  let z = A(5, x)
  let v = B(6)
  let y = if x is
    A(x, y) then
      let m = x + a + b
      if y is
        A(x, y) then x
        B(x) then m
        C(x) then 0
    B(x) then 2
    C(x) then 3
  if z is
    A(x, y) then x
    B(x) then 4
    C(x) then
      if v is
        A(x, y) then x
        B(x) then 7
        C(x) then 8
fun bar() =
  complex_foo(A(10, A(9, B(10))))
bar()
//│ |#class| |A|(|w|,| |x|)|↵|#class| |B|(|y|)|↵|#class| |C|(|z|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |a| |#=| |1| |+| |2|↵|#let| |b| |#=| |1| |*| |2|↵|#let| |x| |#=| |#if| |t| |is|→|A|(|x|,| |y|)| |#then| |A|(|x|,| |C|(|0|)|)|↵|B|(|x|)| |#then| |B|(|x| |+| |b|)|↵|C|(|x|)| |#then| |C|(|0|)|←|↵|#let| |z| |#=| |A|(|5|,| |x|)|↵|#let| |v| |#=| |B|(|6|)|↵|#let| |y| |#=| |#if| |x| |is|→|A|(|x|,| |y|)| |#then|→|#let| |m| |#=| |x| |+| |a| |+| |b|↵|#if| |y| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |m|↵|C|(|x|)| |#then| |0|←|←|↵|B|(|x|)| |#then| |2|↵|C|(|x|)| |#then| |3|←|↵|#if| |z| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |4|↵|C|(|x|)| |#then|→|#if| |v| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |7|↵|C|(|x|)| |#then| |8|←|←|←|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|10|,| |A|(|9|,| |B|(|10|)|)|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(w, x,) {}; class B(y,) {}; class C(z,) {}; fun complex_foo = (t,) => {let a = +(1,)(2,); let b = *(1,)(2,); let x = if t is ‹(A(x, y,)) then A(x, C(0,),); (B(x,)) then B(+(x,)(b,),); (C(x,)) then C(0,)›; let z = A(5, x,); let v = B(6,); let y = if x is ‹(A(x, y,)) then {let m = +(+(x,)(a,),)(b,); if y is ‹(A(x, y,)) then x; (B(x,)) then m; (C(x,)) then 0›}; (B(x,)) then 2; (C(x,)) then 3›; if z is ‹(A(x, y,)) then x; (B(x,)) then 4; (C(x,)) then {if v is ‹(A(x, y,)) then x; (B(x,)) then 7; (C(x,)) then 8›}›}; fun bar = () => {complex_foo(A(10, A(9, B(10,),),),)}; bar()}
//│ 
//│ Promoted:
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, [w,x]),ClassInfo(3, B, [y]),ClassInfo(4, C, [z])}, {
//│ Def(0, complex_foo, [t$0],
//│ 1, 
//│ let x$0 = +(1,2) in -- #150
//│ let x$1 = *(1,2) in -- #149
//│ case t$0 of -- #148
//│   A =>
//│     let x$27 = t$0.x in -- #126
//│     let x$28 = t$0.w in -- #125
//│     let x$29 = C(0) in -- #124
//│     let x$30 = A(x$28,x$29) in -- #123
//│     jump j$0(x$30,x$0,x$1) -- #122
//│   B =>
//│     let x$31 = t$0.y in -- #138
//│     let x$32 = +(x$31,x$1) in -- #137
//│     let x$33 = B(x$32) in -- #136
//│     jump j$0(x$33,x$0,x$1) -- #135
//│   C =>
//│     let x$34 = t$0.z in -- #147
//│     let x$35 = C(0) in -- #146
//│     jump j$0(x$35,x$0,x$1) -- #145
//│ )
//│ Def(1, j$2, [x$6],
//│ 1, 
//│ x$6 -- #21
//│ )
//│ Def(2, j$3, [x$11],
//│ 1, 
//│ jump j$2(x$11) -- #39
//│ )
//│ Def(3, j$1, [x$5,x$3,x$4],
//│ 1, 
//│ case x$3 of -- #60
//│   A =>
//│     let x$7 = x$3.x in -- #29
//│     let x$8 = x$3.w in -- #28
//│     jump j$2(x$8) -- #27
//│   B =>
//│     let x$9 = x$3.y in -- #34
//│     jump j$2(4) -- #33
//│   C =>
//│     let x$10 = x$3.z in -- #59
//│     case x$4 of -- #58
//│       A =>
//│         let x$12 = x$4.x in -- #47
//│         let x$13 = x$4.w in -- #46
//│         jump j$3(x$13) -- #45
//│       B =>
//│         let x$14 = x$4.y in -- #52
//│         jump j$3(7) -- #51
//│       C =>
//│         let x$15 = x$4.z in -- #57
//│         jump j$3(8) -- #56
//│ )
//│ Def(4, j$4, [x$20,x$3,x$4],
//│ 1, 
//│ jump j$1(x$20,x$3,x$4) -- #72
//│ )
//│ Def(5, j$0, [x$2,x$0,x$1],
//│ 1, 
//│ let x$3 = A(5,x$2) in -- #108
//│ let x$4 = B(6) in -- #107
//│ case x$2 of -- #106
//│   A =>
//│     let x$16 = x$2.x in -- #95
//│     let x$17 = x$2.w in -- #94
//│     let x$18 = +(x$17,x$0) in -- #93
//│     let x$19 = +(x$18,x$1) in -- #92
//│     case x$16 of -- #91
//│       A =>
//│         let x$21 = x$16.x in -- #80
//│         let x$22 = x$16.w in -- #79
//│         jump j$4(x$22,x$3,x$4) -- #78
//│       B =>
//│         let x$23 = x$16.y in -- #85
//│         jump j$4(x$19,x$3,x$4) -- #84
//│       C =>
//│         let x$24 = x$16.z in -- #90
//│         jump j$4(0,x$3,x$4) -- #89
//│   B =>
//│     let x$25 = x$2.y in -- #100
//│     jump j$1(2,x$3,x$4) -- #99
//│   C =>
//│     let x$26 = x$2.z in -- #105
//│     jump j$1(3,x$3,x$4) -- #104
//│ )
//│ Def(6, bar, [],
//│ 1, 
//│ let x$36 = B(10) in -- #172
//│ let x$37 = A(9,x$36) in -- #171
//│ let x$38 = A(10,x$37) in -- #170
//│ let* (x$39) = complex_foo(x$38) in -- #169
//│ x$39 -- #168
//│ )
//│ },
//│ let* (x$40) = bar() in -- #176
//│ x$40 -- #175)
//│ 
//│ Interpreted:
//│ 5
