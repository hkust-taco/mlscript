:NewParser
:ParseOnly

fun main(x) =
  let
    lit0 = 0
    val lit1 = 1
    fun odd(x) = if x is 0 then false else even(x - 1)
    fun even(x) = if x is 0 then true else odd(x - 1)
  0
//│ |#fun| |main|(|x|)| |#=|→|#let|→|lit0| |#=| |0|↵|#val| |lit1| |#=| |1|↵|#fun| |odd|(|x|)| |#=| |#if| |x| |is| |0| |#then| |false| |#else| |even|(|x| |-| |1|)|↵|#fun| |even|(|x|)| |#=| |#if| |x| |is| |0| |#then| |true| |#else| |odd|(|x| |-| |1|)|←|↵|0|←|
//│ Parsed: {fun main = (x,) => {let { let lit0 = 0; let lit1 = 1; fun odd = (x,) => if (is(x,)(0,)) then false else even(-(x,)(1,),); fun even = (x,) => if (is(x,)(0,)) then true else odd(-(x,)(1,),) }; 0}}

fun main(x) =
  let x = 1
  fun f(a) = x + a
  let y = f(2)
  n = 0
  0
//│ |#fun| |main|(|x|)| |#=|→|#let| |x| |#=| |1|↵|#fun| |f|(|a|)| |#=| |x| |+| |a|↵|#let| |y| |#=| |f|(|2|)|↵|n| |#=| |0|↵|0|←|
//│ Parsed: {fun main = (x,) => {let x = 1; fun f = (a,) => +(x,)(a,); let y = f(2,); n = 0; 0}}
