:NewDefs
:ParseOnly
:UseIR

:genCpp
:runCpp
:interpIR
fun main(x) =
  class InnerClass(y) extends Callable {
    fun apply1(z) = x + y + z
  }
  let ic = InnerClass(1)
  ic(2) + ic(3)
main(4)
//│ |#fun| |main|(|x|)| |#=|→|#class| |InnerClass|(|y|)| |#extends| |Callable| |{|→|#fun| |apply1|(|z|)| |#=| |x| |+| |y| |+| |z|←|↵|}|↵|#let| |ic| |#=| |InnerClass|(|1|)|↵|ic|(|2|)| |+| |ic|(|3|)|←|↵|main|(|4|)|
//│ Parsed: {fun main = (x,) => {class InnerClass(y,): Callable {fun apply1 = (z,) => +(+(x, y,), z,)}; let ic = InnerClass(1,); +(ic(2,), ic(3,),)}; main(4,)}
//│ 
//│ 
//│ IR:
//│ Program:
//│   class True()
//│   class False()
//│   class Callable() {
//│     def apply5(x0$4,x1$3,x2$2,x3$1,x4$0) =
//│       0 -- #32
//│     def apply1(x0$0) =
//│       0 -- #28
//│     def apply0() =
//│       0 -- #27
//│     def apply4(x0$3,x1$2,x2$1,x3$0) =
//│       0 -- #31
//│     def apply3(x0$2,x1$1,x2$0) =
//│       0 -- #30
//│     def apply2(x0$1,x1$0) =
//│       0 -- #29
//│   }
//│   class List()
//│   class Cons(h,t) extends List
//│   class Nil() extends List
//│   class Option()
//│   class Some(x) extends Option
//│   class None() extends Option
//│   class InnerClass(y,x) extends Callable {
//│     def apply1(z$0) =
//│       let x$6 = +(x,y) in -- #45
//│       let x$7 = +(x$6,z$0) in -- #44
//│       x$7 -- #43
//│   }
//│   def main(x$1) =
//│     let x$2 = InnerClass(1,x$1) in -- #26
//│     let x$3 = Callable.apply1(x$2,2) in -- #25
//│     let x$4 = Callable.apply1(x$2,3) in -- #24
//│     let x$5 = +(x$3,x$4) in -- #23
//│     x$5 -- #22
//│   let* (x$0) = main(4) in -- #4
//│   x$0 -- #3
//│ 
//│ Promoted:
//│ Program:
//│   class True()
//│   class False()
//│   class Callable() {
//│     def apply5(x0$4,x1$3,x2$2,x3$1,x4$0) =
//│       0 -- #32
//│     def apply1(x0$0) =
//│       0 -- #28
//│     def apply0() =
//│       0 -- #27
//│     def apply4(x0$3,x1$2,x2$1,x3$0) =
//│       0 -- #31
//│     def apply3(x0$2,x1$1,x2$0) =
//│       0 -- #30
//│     def apply2(x0$1,x1$0) =
//│       0 -- #29
//│   }
//│   class List()
//│   class Cons(h,t) extends List
//│   class Nil() extends List
//│   class Option()
//│   class Some(x) extends Option
//│   class None() extends Option
//│   class InnerClass(y,x) extends Callable {
//│     def apply1(z$0) =
//│       let x$6 = +(x,y) in -- #45
//│       let x$7 = +(x$6,z$0) in -- #44
//│       x$7 -- #43
//│   }
//│   def main(x$1) =
//│     let x$2 = InnerClass(1,x$1) in -- #26
//│     let x$3 = Callable.apply1(x$2,2) in -- #25
//│     let x$4 = Callable.apply1(x$2,3) in -- #24
//│     let x$5 = +(x$3,x$4) in -- #23
//│     x$5 -- #22
//│   let* (x$0) = main(4) in -- #4
//│   x$0 -- #3
//│ 
//│ Interpreted:
//│ 15
//│ 
//│ 
//│ Execution succeeded: 
//│ 15
//│ 

:genCpp
:runCpp
:interpIR
fun main(x) =
  class InnerClass(y) extends Callable {
    fun apply1(z) =
      module InnerClass2 extends Callable {
        fun apply1(w) = w + z
      }
      InnerClass2
  }
  let ic = InnerClass(1)
  ic(2)(2) + ic(3)(1)
main(4)
//│ |#fun| |main|(|x|)| |#=|→|#class| |InnerClass|(|y|)| |#extends| |Callable| |{|→|#fun| |apply1|(|z|)| |#=|→|#module| |InnerClass2| |#extends| |Callable| |{|→|#fun| |apply1|(|w|)| |#=| |w| |+| |z|←|↵|}|↵|InnerClass2|←|←|↵|}|↵|#let| |ic| |#=| |InnerClass|(|1|)|↵|ic|(|2|)|(|2|)| |+| |ic|(|3|)|(|1|)|←|↵|main|(|4|)|
//│ Parsed: {fun main = (x,) => {class InnerClass(y,): Callable {fun apply1 = (z,) => {module InnerClass2: Callable {fun apply1 = (w,) => +(w, z,)}; InnerClass2}}; let ic = InnerClass(1,); +(ic(2,)(2,), ic(3,)(1,),)}; main(4,)}
//│ 
//│ 
//│ IR:
//│ Program:
//│   class True()
//│   class False()
//│   class Callable() {
//│     def apply5(x0$4,x1$3,x2$2,x3$1,x4$0) =
//│       0 -- #42
//│     def apply1(x0$0) =
//│       0 -- #38
//│     def apply0() =
//│       0 -- #37
//│     def apply4(x0$3,x1$2,x2$1,x3$0) =
//│       0 -- #41
//│     def apply3(x0$2,x1$1,x2$0) =
//│       0 -- #40
//│     def apply2(x0$1,x1$0) =
//│       0 -- #39
//│   }
//│   class List()
//│   class Cons(h,t) extends List
//│   class Nil() extends List
//│   class Option()
//│   class Some(x) extends Option
//│   class None() extends Option
//│   class InnerClass(y) extends Callable {
//│     def apply1(z$0) =
//│       let x$8 = InnerClass2(z$0) in -- #44
//│       x$8 -- #43
//│   }
//│   class InnerClass2(z) extends Callable {
//│     def apply1(w$0) =
//│       let x$9 = +(w$0,z) in -- #51
//│       x$9 -- #50
//│   }
//│   def main(x$1) =
//│     let x$2 = InnerClass(1) in -- #36
//│     let x$3 = Callable.apply1(x$2,2) in -- #35
//│     let x$4 = Callable.apply1(x$3,2) in -- #34
//│     let x$5 = Callable.apply1(x$2,3) in -- #33
//│     let x$6 = Callable.apply1(x$5,1) in -- #32
//│     let x$7 = +(x$4,x$6) in -- #31
//│     x$7 -- #30
//│   let* (x$0) = main(4) in -- #4
//│   x$0 -- #3
//│ 
//│ Promoted:
//│ Program:
//│   class True()
//│   class False()
//│   class Callable() {
//│     def apply5(x0$4,x1$3,x2$2,x3$1,x4$0) =
//│       0 -- #42
//│     def apply1(x0$0) =
//│       0 -- #38
//│     def apply0() =
//│       0 -- #37
//│     def apply4(x0$3,x1$2,x2$1,x3$0) =
//│       0 -- #41
//│     def apply3(x0$2,x1$1,x2$0) =
//│       0 -- #40
//│     def apply2(x0$1,x1$0) =
//│       0 -- #39
//│   }
//│   class List()
//│   class Cons(h,t) extends List
//│   class Nil() extends List
//│   class Option()
//│   class Some(x) extends Option
//│   class None() extends Option
//│   class InnerClass(y) extends Callable {
//│     def apply1(z$0) =
//│       let x$8 = InnerClass2(z$0) in -- #44
//│       x$8 -- #43
//│   }
//│   class InnerClass2(z) extends Callable {
//│     def apply1(w$0) =
//│       let x$9 = +(w$0,z) in -- #51
//│       x$9 -- #50
//│   }
//│   def main(x$1) =
//│     let x$2 = InnerClass(1) in -- #36
//│     let x$3 = Callable.apply1(x$2,2) in -- #35
//│     let x$4 = Callable.apply1(x$3,2) in -- #34
//│     let x$5 = Callable.apply1(x$2,3) in -- #33
//│     let x$6 = Callable.apply1(x$5,1) in -- #32
//│     let x$7 = +(x$4,x$6) in -- #31
//│     x$7 -- #30
//│   let* (x$0) = main(4) in -- #4
//│   x$0 -- #3
//│ 
//│ Interpreted:
//│ 8
//│ 
//│ 
//│ Execution succeeded: 
//│ 8
//│ 

:genCpp
:runCpp
:interpIR
fun main(x) =
  class InnerClass(y) extends Callable {
    fun f(x) = y
  }
  let ic = InnerClass(1)
  InnerClass.f(ic, Nil)
main(2)
//│ |#fun| |main|(|x|)| |#=|→|#class| |InnerClass|(|y|)| |#extends| |Callable| |{|→|#fun| |f|(|x|)| |#=| |y|←|↵|}|↵|#let| |ic| |#=| |InnerClass|(|1|)|↵|InnerClass|.f|(|ic|,| |Nil|)|←|↵|main|(|2|)|
//│ Parsed: {fun main = (x,) => {class InnerClass(y,): Callable {fun f = (x,) => y}; let ic = InnerClass(1,); (InnerClass).f(ic, Nil,)}; main(2,)}
//│ 
//│ 
//│ IR:
//│ Program:
//│   class True()
//│   class False()
//│   class Callable() {
//│     def apply5(x0$4,x1$3,x2$2,x3$1,x4$0) =
//│       0 -- #23
//│     def apply1(x0$0) =
//│       0 -- #19
//│     def apply0() =
//│       0 -- #18
//│     def apply4(x0$3,x1$2,x2$1,x3$0) =
//│       0 -- #22
//│     def apply3(x0$2,x1$1,x2$0) =
//│       0 -- #21
//│     def apply2(x0$1,x1$0) =
//│       0 -- #20
//│   }
//│   class List()
//│   class Cons(h,t) extends List
//│   class Nil() extends List
//│   class Option()
//│   class Some(x) extends Option
//│   class None() extends Option
//│   class InnerClass(y) extends Callable {
//│     def f(x$5) =
//│       y -- #24
//│   }
//│   def main(x$1) =
//│     let x$2 = InnerClass(1) in -- #17
//│     let x$3 = Nil() in -- #16
//│     let x$4 = InnerClass.f(x$2,x$3) in -- #15
//│     x$4 -- #14
//│   let* (x$0) = main(2) in -- #4
//│   x$0 -- #3
//│ 
//│ Promoted:
//│ Program:
//│   class True()
//│   class False()
//│   class Callable() {
//│     def apply5(x0$4,x1$3,x2$2,x3$1,x4$0) =
//│       0 -- #23
//│     def apply1(x0$0) =
//│       0 -- #19
//│     def apply0() =
//│       0 -- #18
//│     def apply4(x0$3,x1$2,x2$1,x3$0) =
//│       0 -- #22
//│     def apply3(x0$2,x1$1,x2$0) =
//│       0 -- #21
//│     def apply2(x0$1,x1$0) =
//│       0 -- #20
//│   }
//│   class List()
//│   class Cons(h,t) extends List
//│   class Nil() extends List
//│   class Option()
//│   class Some(x) extends Option
//│   class None() extends Option
//│   class InnerClass(y) extends Callable {
//│     def f(x$5) =
//│       y -- #24
//│   }
//│   def main(x$1) =
//│     let x$2 = InnerClass(1) in -- #17
//│     let x$3 = Nil() in -- #16
//│     let x$4 = InnerClass.f(x$2,x$3) in -- #15
//│     x$4 -- #14
//│   let* (x$0) = main(2) in -- #4
//│   x$0 -- #3
//│ 
//│ Interpreted:
//│ 1
//│ 
//│ 
//│ Execution succeeded: 
//│ 1
//│ 
