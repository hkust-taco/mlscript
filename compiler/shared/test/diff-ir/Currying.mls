:NewParser
:ParseOnly
:UseIR

:interpIR
:genCpp
:runCpp
fun add2c(a)(b) = a + b
fun add2(a, b) = a + b
fun add3c(a)(b)(c) = a + b + c
fun main() =
  add2c(1)(2)
  add2(1, 2)
  add3c(1)(2)(3)
main()
//│ |#fun| |add2c|(|a|)|(|b|)| |#=| |a| |+| |b|↵|#fun| |add2|(|a|,| |b|)| |#=| |a| |+| |b|↵|#fun| |add3c|(|a|)|(|b|)|(|c|)| |#=| |a| |+| |b| |+| |c|↵|#fun| |main|(||)| |#=|→|add2c|(|1|)|(|2|)|↵|add2|(|1|,| |2|)|↵|add3c|(|1|)|(|2|)|(|3|)|←|↵|main|(||)|
//│ Parsed: {fun add2c = (a,) => (b,) => +(a,)(b,); fun add2 = (a, b,) => +(a,)(b,); fun add3c = (a,) => (b,) => (c,) => +(+(a,)(b,),)(c,); fun main = () => {add2c(1,)(2,); add2(1, 2,); add3c(1,)(2,)(3,)}; main()}
//│ 
//│ 
//│ IR:
//│ Program:
//│   class True()
//│   class False()
//│   class Callable() {
//│     def apply5(x0$4,x1$3,x2$2,x3$1,x4$0) =
//│       0 -- #48
//│     def apply1(x0$0) =
//│       0 -- #44
//│     def apply0() =
//│       0 -- #43
//│     def apply4(x0$3,x1$2,x2$1,x3$0) =
//│       0 -- #47
//│     def apply3(x0$2,x1$1,x2$0) =
//│       0 -- #46
//│     def apply2(x0$1,x1$0) =
//│       0 -- #45
//│   }
//│   class List()
//│   class Cons(h,t) extends List
//│   class Nil() extends List
//│   class Option()
//│   class Some(x) extends Option
//│   class None() extends Option
//│   class Lambda$0(a) extends Callable {
//│     def apply1(b$1) =
//│       let x$12 = +(a,b$1) in -- #52
//│       x$12 -- #51
//│   }
//│   class Lambda$1(a) extends Callable {
//│     def apply1(b$2) =
//│       let x$14 = Lambda$2(a,b$2) in -- #54
//│       x$14 -- #53
//│   }
//│   class Lambda$2(a,b) extends Callable {
//│     def apply1(c$0) =
//│       let x$15 = +(a,b) in -- #61
//│       let x$16 = +(x$15,c$0) in -- #60
//│       x$16 -- #59
//│   }
//│   def add2c(a$0) =
//│     let x$2 = Lambda$0(a$0) in -- #4
//│     x$2 -- #3
//│   def add2(a$1,b$0) =
//│     let x$3 = +(a$1,b$0) in -- #8
//│     x$3 -- #7
//│   def add3c(a$2) =
//│     let x$5 = Lambda$1(a$2) in -- #10
//│     x$5 -- #9
//│   def main() =
//│     let* (x$6) = add2c(1) in -- #42
//│     let x$7 = Callable.apply1(x$6,2) in -- #41
//│     let* (x$8) = add2(1,2) in -- #40
//│     let* (x$9) = add3c(1) in -- #39
//│     let x$10 = Callable.apply1(x$9,2) in -- #38
//│     let x$11 = Callable.apply1(x$10,3) in -- #37
//│     x$11 -- #36
//│   let* (x$0) = main() in -- #2
//│   x$0 -- #1
//│ 
//│ Promoted:
//│ Program:
//│   class True()
//│   class False()
//│   class Callable() {
//│     def apply5(x0$4,x1$3,x2$2,x3$1,x4$0) =
//│       0 -- #48
//│     def apply1(x0$0) =
//│       0 -- #44
//│     def apply0() =
//│       0 -- #43
//│     def apply4(x0$3,x1$2,x2$1,x3$0) =
//│       0 -- #47
//│     def apply3(x0$2,x1$1,x2$0) =
//│       0 -- #46
//│     def apply2(x0$1,x1$0) =
//│       0 -- #45
//│   }
//│   class List()
//│   class Cons(h,t) extends List
//│   class Nil() extends List
//│   class Option()
//│   class Some(x) extends Option
//│   class None() extends Option
//│   class Lambda$0(a) extends Callable {
//│     def apply1(b$1) =
//│       let x$12 = +(a,b$1) in -- #52
//│       x$12 -- #51
//│   }
//│   class Lambda$1(a) extends Callable {
//│     def apply1(b$2) =
//│       let x$14 = Lambda$2(a,b$2) in -- #54
//│       x$14 -- #53
//│   }
//│   class Lambda$2(a,b) extends Callable {
//│     def apply1(c$0) =
//│       let x$15 = +(a,b) in -- #61
//│       let x$16 = +(x$15,c$0) in -- #60
//│       x$16 -- #59
//│   }
//│   def add2c(a$0) =
//│     let x$2 = Lambda$0(a$0) in -- #4
//│     x$2 -- #3
//│   def add2(a$1,b$0) =
//│     let x$3 = +(a$1,b$0) in -- #8
//│     x$3 -- #7
//│   def add3c(a$2) =
//│     let x$5 = Lambda$1(a$2) in -- #10
//│     x$5 -- #9
//│   def main() =
//│     let* (x$6) = add2c(1) in -- #42
//│     let x$7 = Callable.apply1(x$6,2) in -- #41
//│     let* (x$8) = add2(1,2) in -- #40
//│     let* (x$9) = add3c(1) in -- #39
//│     let x$10 = Callable.apply1(x$9,2) in -- #38
//│     let x$11 = Callable.apply1(x$10,3) in -- #37
//│     x$11 -- #36
//│   let* (x$0) = main() in -- #2
//│   x$0 -- #1
//│ 
//│ Interpreted:
//│ 6
//│ 
//│ 
//│ Execution succeeded: 
//│ 6
