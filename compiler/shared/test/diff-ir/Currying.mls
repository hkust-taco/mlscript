:NewParser
:ParseOnly
:UseIR

:interpIR
:genCpp
:runCpp
fun add2c(a)(b) = a + b
fun add2(a, b) = a + b
fun add3c(a)(b)(c) = a + b + c
fun main() =
  add2c(1)(2)
  add2(1, 2)
  add3c(1)(2)(3)
main()
//│ |#fun| |add2c|(|a|)|(|b|)| |#=| |a| |+| |b|↵|#fun| |add2|(|a|,| |b|)| |#=| |a| |+| |b|↵|#fun| |add3c|(|a|)|(|b|)|(|c|)| |#=| |a| |+| |b| |+| |c|↵|#fun| |main|(||)| |#=|→|add2c|(|1|)|(|2|)|↵|add2|(|1|,| |2|)|↵|add3c|(|1|)|(|2|)|(|3|)|←|↵|main|(||)|
//│ Parsed: {fun add2c = (a,) => (b,) => +(a,)(b,); fun add2 = (a, b,) => +(a,)(b,); fun add3c = (a,) => (b,) => (c,) => +(+(a,)(b,),)(c,); fun main = () => {add2c(1,)(2,); add2(1, 2,); add3c(1,)(2,)(3,)}; main()}
//│ 
//│ 
//│ IR:
//│ Program({ClassInfo(0, True, [], parents: , methods:
//│ ),
//│ ClassInfo(1, False, [], parents: , methods:
//│ ),
//│ ClassInfo(2, Callable, [], parents: , methods:
//│ ),
//│ ClassInfo(3, List, [], parents: , methods:
//│ ),
//│ ClassInfo(4, Cons, [h,t], parents: List, methods:
//│ ),
//│ ClassInfo(5, Nil, [], parents: List, methods:
//│ ),
//│ ClassInfo(6, Option, [], parents: , methods:
//│ ),
//│ ClassInfo(7, Some, [x], parents: Option, methods:
//│ ),
//│ ClassInfo(8, None, [], parents: Option, methods:
//│ ),
//│ ClassInfo(9, Lambda$0, [a], parents: Callable, methods:
//│ apply1 -> Def(1, apply1, [b$0], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$2 = +(a,b$0) in -- #3
//│ x$2 -- #2
//│ )),
//│ ClassInfo(10, Lambda$1, [a], parents: Callable, methods:
//│ apply1 -> Def(4, apply1, [b$2], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$11 = Lambda$2(a,b$2) in -- #28
//│ x$11 -- #27
//│ )),
//│ ClassInfo(11, Lambda$2, [a,b], parents: Callable, methods:
//│ apply1 -> Def(5, apply1, [c$0], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$9 = +(a,b) in -- #20
//│ let x$10 = +(x$9,c$0) in -- #19
//│ x$10 -- #18
//│ ))}, {
//│ Def(0, add2c, [a$0], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$3 = Lambda$0(a$0) in -- #9
//│ x$3 -- #8
//│ )
//│ Def(2, add2, [a$1,b$1], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$4 = +(a$1,b$1) in -- #13
//│ x$4 -- #12
//│ )
//│ Def(3, add3c, [a$2], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$12 = Lambda$1(a$2) in -- #34
//│ x$12 -- #33
//│ )
//│ Def(6, main, [], [],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let* (x$13) = add2c(1) in -- #66
//│ let** (x$14) = x$13(2) in -- #65
//│ let* (x$15) = add2(1,2) in -- #64
//│ let* (x$16) = add3c(1) in -- #63
//│ let** (x$17) = x$16(2) in -- #62
//│ let** (x$18) = x$17(3) in -- #61
//│ x$18 -- #60
//│ )
//│ },
//│ let* (x$19) = main() in -- #69
//│ x$19 -- #68)
//│ 
//│ Promoted:
//│ Program({ClassInfo(0, True, [], parents: , methods:
//│ ),
//│ ClassInfo(1, False, [], parents: , methods:
//│ ),
//│ ClassInfo(2, Callable, [], parents: , methods:
//│ ),
//│ ClassInfo(3, List, [], parents: , methods:
//│ ),
//│ ClassInfo(4, Cons, [h,t], parents: List, methods:
//│ ),
//│ ClassInfo(5, Nil, [], parents: List, methods:
//│ ),
//│ ClassInfo(6, Option, [], parents: , methods:
//│ ),
//│ ClassInfo(7, Some, [x], parents: Option, methods:
//│ ),
//│ ClassInfo(8, None, [], parents: Option, methods:
//│ ),
//│ ClassInfo(9, Lambda$0, [a], parents: Callable, methods:
//│ apply1 -> Def(1, apply1, [b$0], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$2 = +(a,b$0) in -- #3
//│ x$2 -- #2
//│ )),
//│ ClassInfo(10, Lambda$1, [a], parents: Callable, methods:
//│ apply1 -> Def(4, apply1, [b$2], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$11 = Lambda$2(a,b$2) in -- #28
//│ x$11 -- #27
//│ )),
//│ ClassInfo(11, Lambda$2, [a,b], parents: Callable, methods:
//│ apply1 -> Def(5, apply1, [c$0], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$9 = +(a,b) in -- #20
//│ let x$10 = +(x$9,c$0) in -- #19
//│ x$10 -- #18
//│ ))}, {
//│ Def(0, add2c, [a$0], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$3 = Lambda$0(a$0) in -- #9
//│ x$3 -- #8
//│ )
//│ Def(2, add2, [a$1,b$1], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$4 = +(a$1,b$1) in -- #13
//│ x$4 -- #12
//│ )
//│ Def(3, add3c, [a$2], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$12 = Lambda$1(a$2) in -- #34
//│ x$12 -- #33
//│ )
//│ Def(6, main, [], [],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let* (x$13) = add2c(1) in -- #66
//│ let** (x$14) = x$13(2) in -- #65
//│ let* (x$15) = add2(1,2) in -- #64
//│ let* (x$16) = add3c(1) in -- #63
//│ let** (x$17) = x$16(2) in -- #62
//│ let** (x$18) = x$17(3) in -- #61
//│ x$18 -- #60
//│ )
//│ },
//│ let* (x$19) = main() in -- #69
//│ x$19 -- #68)
//│ 
//│ Interpreted:
//│ 6
//│ 
//│ 
//│ Execution succeeded: 
//│ 6
