:NewDefs
:ParseOnly
:UseIR

:genCpp
:runCpp
fun main(init, key) =
  fun r(x) = if x <= 0 then key else r(x - 1)
  r(init)
main(1, 42)
//│ |#fun| |main|(|init|,| |key|)| |#=|→|#fun| |r|(|x|)| |#=| |#if| |x| |<=| |0| |#then| |key| |#else| |r|(|x| |-| |1|)|↵|r|(|init|)|←|↵|main|(|1|,| |42|)|
//│ Parsed: {fun main = (init, key,) => {fun r = (x,) => if (<=(x, 0,)) then key else r(-(x, 1,),); r(init,)}; main(1, 42,)}
//│ 
//│ 
//│ IR:
//│ Program({ClassInfo(0, True, [], parents: , methods:
//│ ),
//│ ClassInfo(1, False, [], parents: , methods:
//│ ),
//│ ClassInfo(2, Callable, [], parents: , methods:
//│ ),
//│ ClassInfo(3, List, [], parents: , methods:
//│ ),
//│ ClassInfo(4, Cons, [h,t], parents: List, methods:
//│ ),
//│ ClassInfo(5, Nil, [], parents: List, methods:
//│ ),
//│ ClassInfo(6, Option, [], parents: , methods:
//│ ),
//│ ClassInfo(7, Some, [x], parents: Option, methods:
//│ ),
//│ ClassInfo(8, None, [], parents: Option, methods:
//│ )}, {
//│ Def(0, main, [init$0,key$0], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let* (x$1) = r(init$0,key$0) in -- #11
//│ x$1 -- #10
//│ )
//│ Def(1, r, [x$2,key$1], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$3 = <=(x$2,0) in -- #34
//│ if x$3 -- #33
//│   true =>
//│     jump j$0(key$1) -- #20
//│   false =>
//│     let x$5 = -(x$2,1) in -- #32
//│     let* (x$6) = r(x$5,key$1) in -- #31
//│     jump j$0(x$6) -- #30
//│ )
//│ Def(2, j$0, [x$4], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x$4 -- #18
//│ )
//│ },
//│ let* (x$0) = main(1,42) in -- #6
//│ x$0 -- #5)
//│ 
//│ Promoted:
//│ Program({ClassInfo(0, True, [], parents: , methods:
//│ ),
//│ ClassInfo(1, False, [], parents: , methods:
//│ ),
//│ ClassInfo(2, Callable, [], parents: , methods:
//│ ),
//│ ClassInfo(3, List, [], parents: , methods:
//│ ),
//│ ClassInfo(4, Cons, [h,t], parents: List, methods:
//│ ),
//│ ClassInfo(5, Nil, [], parents: List, methods:
//│ ),
//│ ClassInfo(6, Option, [], parents: , methods:
//│ ),
//│ ClassInfo(7, Some, [x], parents: Option, methods:
//│ ),
//│ ClassInfo(8, None, [], parents: Option, methods:
//│ )}, {
//│ Def(0, main, [init$0,key$0], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let* (x$1) = r(init$0,key$0) in -- #11
//│ x$1 -- #10
//│ )
//│ Def(1, r, [x$2,key$1], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$3 = <=(x$2,0) in -- #34
//│ if x$3 -- #33
//│   true =>
//│     jump j$0(key$1) -- #20
//│   false =>
//│     let x$5 = -(x$2,1) in -- #32
//│     let* (x$6) = r(x$5,key$1) in -- #31
//│     jump j$0(x$6) -- #30
//│ )
//│ Def(2, j$0, [x$4], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x$4 -- #18
//│ )
//│ },
//│ let* (x$0) = main(1,42) in -- #6
//│ x$0 -- #5)
//│ 
//│ 
//│ Execution succeeded: 
//│ 42
//│ 

:genCpp
:runCpp
fun main(init, key) =
  fun pong(x) = if x <= 0 then key + 2 else ping(x - 1)
  fun ping(x) = if x <= 0 then key + 1 else pong(x - 1)
  ping(init)
main(1, 42)
//│ |#fun| |main|(|init|,| |key|)| |#=|→|#fun| |pong|(|x|)| |#=| |#if| |x| |<=| |0| |#then| |key| |+| |2| |#else| |ping|(|x| |-| |1|)|↵|#fun| |ping|(|x|)| |#=| |#if| |x| |<=| |0| |#then| |key| |+| |1| |#else| |pong|(|x| |-| |1|)|↵|ping|(|init|)|←|↵|main|(|1|,| |42|)|
//│ Parsed: {fun main = (init, key,) => {fun pong = (x,) => if (<=(x, 0,)) then +(key, 2,) else ping(-(x, 1,),); fun ping = (x,) => if (<=(x, 0,)) then +(key, 1,) else pong(-(x, 1,),); ping(init,)}; main(1, 42,)}
//│ 
//│ 
//│ IR:
//│ Program({ClassInfo(0, True, [], parents: , methods:
//│ ),
//│ ClassInfo(1, False, [], parents: , methods:
//│ ),
//│ ClassInfo(2, Callable, [], parents: , methods:
//│ ),
//│ ClassInfo(3, List, [], parents: , methods:
//│ ),
//│ ClassInfo(4, Cons, [h,t], parents: List, methods:
//│ ),
//│ ClassInfo(5, Nil, [], parents: List, methods:
//│ ),
//│ ClassInfo(6, Option, [], parents: , methods:
//│ ),
//│ ClassInfo(7, Some, [x], parents: Option, methods:
//│ ),
//│ ClassInfo(8, None, [], parents: Option, methods:
//│ )}, {
//│ Def(0, main, [init$0,key$0], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let* (x$1) = ping(init$0,key$0) in -- #11
//│ x$1 -- #10
//│ )
//│ Def(1, pong, [x$2,key$1], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$3 = <=(x$2,0) in -- #40
//│ if x$3 -- #39
//│   true =>
//│     let x$5 = +(key$1,2) in -- #26
//│     jump j$0(x$5) -- #25
//│   false =>
//│     let x$6 = -(x$2,1) in -- #38
//│     let* (x$7) = ping(x$6,key$1) in -- #37
//│     jump j$0(x$7) -- #36
//│ )
//│ Def(2, j$0, [x$4], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x$4 -- #18
//│ )
//│ Def(3, ping, [x$8,key$2], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$9 = <=(x$8,0) in -- #69
//│ if x$9 -- #68
//│   true =>
//│     let x$11 = +(key$2,1) in -- #55
//│     jump j$1(x$11) -- #54
//│   false =>
//│     let x$12 = -(x$8,1) in -- #67
//│     let* (x$13) = pong(x$12,key$2) in -- #66
//│     jump j$1(x$13) -- #65
//│ )
//│ Def(4, j$1, [x$10], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x$10 -- #47
//│ )
//│ },
//│ let* (x$0) = main(1,42) in -- #6
//│ x$0 -- #5)
//│ 
//│ Promoted:
//│ Program({ClassInfo(0, True, [], parents: , methods:
//│ ),
//│ ClassInfo(1, False, [], parents: , methods:
//│ ),
//│ ClassInfo(2, Callable, [], parents: , methods:
//│ ),
//│ ClassInfo(3, List, [], parents: , methods:
//│ ),
//│ ClassInfo(4, Cons, [h,t], parents: List, methods:
//│ ),
//│ ClassInfo(5, Nil, [], parents: List, methods:
//│ ),
//│ ClassInfo(6, Option, [], parents: , methods:
//│ ),
//│ ClassInfo(7, Some, [x], parents: Option, methods:
//│ ),
//│ ClassInfo(8, None, [], parents: Option, methods:
//│ )}, {
//│ Def(0, main, [init$0,key$0], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let* (x$1) = ping(init$0,key$0) in -- #11
//│ x$1 -- #10
//│ )
//│ Def(1, pong, [x$2,key$1], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$3 = <=(x$2,0) in -- #40
//│ if x$3 -- #39
//│   true =>
//│     let x$5 = +(key$1,2) in -- #26
//│     jump j$0(x$5) -- #25
//│   false =>
//│     let x$6 = -(x$2,1) in -- #38
//│     let* (x$7) = ping(x$6,key$1) in -- #37
//│     jump j$0(x$7) -- #36
//│ )
//│ Def(2, j$0, [x$4], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x$4 -- #18
//│ )
//│ Def(3, ping, [x$8,key$2], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$9 = <=(x$8,0) in -- #69
//│ if x$9 -- #68
//│   true =>
//│     let x$11 = +(key$2,1) in -- #55
//│     jump j$1(x$11) -- #54
//│   false =>
//│     let x$12 = -(x$8,1) in -- #67
//│     let* (x$13) = pong(x$12,key$2) in -- #66
//│     jump j$1(x$13) -- #65
//│ )
//│ Def(4, j$1, [x$10], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x$10 -- #47
//│ )
//│ },
//│ let* (x$0) = main(1,42) in -- #6
//│ x$0 -- #5)
//│ 
//│ 
//│ Execution succeeded: 
//│ 44
//│ 

:genCpp
:runCpp
:irVerbose
fun main(init, key) =
  let ping =
    fun ping(x) = if x <= 0 then key + 1 else pong(x - 1)
    fun pong(x) = if x <= 0 then key + 2 else ping(x - 1)
    ping
  ping(init)
main(1, 42)
//│ |#fun| |main|(|init|,| |key|)| |#=|→|#let| |ping| |#=|→|#fun| |ping|(|x|)| |#=| |#if| |x| |<=| |0| |#then| |key| |+| |1| |#else| |pong|(|x| |-| |1|)|↵|#fun| |pong|(|x|)| |#=| |#if| |x| |<=| |0| |#then| |key| |+| |2| |#else| |ping|(|x| |-| |1|)|↵|ping|←|↵|ping|(|init|)|←|↵|main|(|1|,| |42|)|
//│ Parsed: {fun main = (init, key,) => {let ping = {fun ping = (x,) => if (<=(x, 0,)) then +(key, 1,) else pong(-(x, 1,),); fun pong = (x,) => if (<=(x, 0,)) then +(key, 2,) else ping(-(x, 1,),); ping}; ping(init,)}; main(1, 42,)}
//│ 
//│ 
//│ IR:
//│ Program({ClassInfo(0, True, [], parents: , methods:
//│ ),
//│ ClassInfo(1, False, [], parents: , methods:
//│ ),
//│ ClassInfo(2, Callable, [], parents: , methods:
//│ ),
//│ ClassInfo(3, List, [], parents: , methods:
//│ ),
//│ ClassInfo(4, Cons, [h,t], parents: List, methods:
//│ ),
//│ ClassInfo(5, Nil, [], parents: List, methods:
//│ ),
//│ ClassInfo(6, Option, [], parents: , methods:
//│ ),
//│ ClassInfo(7, Some, [x], parents: Option, methods:
//│ ),
//│ ClassInfo(8, None, [], parents: Option, methods:
//│ ),
//│ ClassInfo(9, Lambda$0, [key], parents: Callable, methods:
//│ apply1 -> Def(5, apply1, [x$17], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let* (x$18) = ping(x$17,key) in -- #79
//│ x$18 -- #78
//│ ))}, {
//│ Def(0, main, [init$0,key$0], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$3 = Lambda$0(key$0) in -- #14
//│ let** (x$4) = x$3(init$0) in -- #13
//│ x$4 -- #12
//│ )
//│ Def(1, ping, [x$5,key$1], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$6 = <=(x$5,0) in -- #43
//│ if x$6 -- #42
//│   true =>
//│     let x$8 = +(key$1,1) in -- #29
//│     jump j$0(x$8) -- #28
//│   false =>
//│     let x$9 = -(x$5,1) in -- #41
//│     let* (x$10) = pong(x$9,key$1) in -- #40
//│     jump j$0(x$10) -- #39
//│ )
//│ Def(2, j$0, [x$7], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x$7 -- #21
//│ )
//│ Def(3, pong, [x$11,key$2], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$12 = <=(x$11,0) in -- #72
//│ if x$12 -- #71
//│   true =>
//│     let x$14 = +(key$2,2) in -- #58
//│     jump j$1(x$14) -- #57
//│   false =>
//│     let x$15 = -(x$11,1) in -- #70
//│     let* (x$16) = ping(x$15,key$2) in -- #69
//│     jump j$1(x$16) -- #68
//│ )
//│ Def(4, j$1, [x$13], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x$13 -- #50
//│ )
//│ },
//│ let* (x$0) = main(1,42) in -- #6
//│ x$0 -- #5)
//│ 
//│ Promoted:
//│ Program({ClassInfo(0, True, [], parents: , methods:
//│ ),
//│ ClassInfo(1, False, [], parents: , methods:
//│ ),
//│ ClassInfo(2, Callable, [], parents: , methods:
//│ ),
//│ ClassInfo(3, List, [], parents: , methods:
//│ ),
//│ ClassInfo(4, Cons, [h,t], parents: List, methods:
//│ ),
//│ ClassInfo(5, Nil, [], parents: List, methods:
//│ ),
//│ ClassInfo(6, Option, [], parents: , methods:
//│ ),
//│ ClassInfo(7, Some, [x], parents: Option, methods:
//│ ),
//│ ClassInfo(8, None, [], parents: Option, methods:
//│ ),
//│ ClassInfo(9, Lambda$0, [key], parents: Callable, methods:
//│ apply1 -> Def(5, apply1, [x$17], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let* (x$18) = ping(x$17,key) in -- #79
//│ x$18 -- #78
//│ ))}, {
//│ Def(0, main, [init$0,key$0], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$3 = Lambda$0(key$0) in -- #14
//│ let** (x$4) = x$3(init$0) in -- #13
//│ x$4 -- #12
//│ )
//│ Def(1, ping, [x$5,key$1], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$6 = <=(x$5,0) in -- #43
//│ if x$6 -- #42
//│   true =>
//│     let x$8 = +(key$1,1) in -- #29
//│     jump j$0(x$8) -- #28
//│   false =>
//│     let x$9 = -(x$5,1) in -- #41
//│     let* (x$10) = pong(x$9,key$1) in -- #40
//│     jump j$0(x$10) -- #39
//│ )
//│ Def(2, j$0, [x$7], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x$7 -- #21
//│ )
//│ Def(3, pong, [x$11,key$2], [{},{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x$12 = <=(x$11,0) in -- #72
//│ if x$12 -- #71
//│   true =>
//│     let x$14 = +(key$2,2) in -- #58
//│     jump j$1(x$14) -- #57
//│   false =>
//│     let x$15 = -(x$11,1) in -- #70
//│     let* (x$16) = ping(x$15,key$2) in -- #69
//│     jump j$1(x$16) -- #68
//│ )
//│ Def(4, j$1, [x$13], [{}],
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x$13 -- #50
//│ )
//│ },
//│ let* (x$0) = main(1,42) in -- #6
//│ x$0 -- #5)
//│ 
//│ 
//│ Execution succeeded: 
//│ 44
//│ 
