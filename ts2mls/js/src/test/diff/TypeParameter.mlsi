export declare module TypeParameter {
  declare fun inc['T](x: 'T): Num
  declare class CC['T] {
    declare fun print(args0: 'T): unit
  }
  declare fun con['U, 'T](t: 'T): 'U
  declare class Printer['T] {
    declare fun print(args0: 'T): unit
  }
  declare fun setStringPrinter(p: Printer[Str]): unit
  declare fun getStringPrinter(): Printer[Str]
  declare fun foo['T](p: Printer['T], x: 'T): 'T
  declare fun foo2['T](p: Printer['T], x: 'T): 'T
  declare class F['T] {
    val x: 'T
    declare fun GG['U](args0: 'U): 'T
  }
  declare trait I['T] {
    val x: 'T
    declare fun GG['U](args0: 'U): 'T
  }
  declare class FFF['T] {
    declare fun fff(args0: 'T): unit
  }
  declare fun fff(p: FFF[Str], s: Str): unit
  declare fun getFFF(): FFF[Num]
  type PolyToString = forall 'T: (x: 'T) => Str
  type PolyID = forall 'T: (x: 'T) => 'T
}
//| ╔══[ERROR] type identifier not found: Printer
//| ║  l.10: 	  declare fun setStringPrinter(p: Printer[Str]): unit
//| ╙──      	                                  ^^^^^^^^^^^^
//| ╔══[ERROR] type identifier not found: Printer
//| ║  l.11: 	  declare fun getStringPrinter(): Printer[Str]
//| ╙──      	                                  ^^^^^^^^^^^^
//| ╔══[ERROR] type identifier not found: Printer
//| ║  l.12: 	  declare fun foo['T](p: Printer['T], x: 'T): 'T
//| ╙──      	                         ^^^^^^^^^^^
//| ╔══[ERROR] type identifier not found: Printer
//| ║  l.13: 	  declare fun foo2['T](p: Printer['T], x: 'T): 'T
//| ╙──      	                          ^^^^^^^^^^^
//| ╔══[ERROR] type identifier not found: FFF
//| ║  l.25: 	  declare fun fff(p: FFF[Str], s: Str): unit
//| ╙──      	                     ^^^^^^^^
//| ╔══[ERROR] type identifier not found: FFF
//| ║  l.26: 	  declare fun getFFF(): FFF[Num]
//| ╙──      	                        ^^^^^^^^
