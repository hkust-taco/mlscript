
class Base1[A]
  method M1: A -> Base1[A]
//│ Defined class Base1[-A]
//│ Declared Base1.M1: Base1['A] -> 'A -> Base1['A]


:DistributeForalls

// * Note: C used to be inferred as invariant here with :DistributeForalls;
// *  It happened when `subst` did not hygienically substitute under polymorphic types
:w
class Derived2[C]: Base1[anything]
  method M1 r = Derived2{}
//│ Defined class Derived2[±C]
//│ Defined Derived2.M1: Derived2[?] -> anything -> Derived2[?]
//│ ╔══[WARNING] Type definition Derived2 has bivariant type parameters:
//│ ║  l.13: 	class Derived2[C]: Base1[anything]
//│ ║        	      ^^^^^^^^
//│ ╟── C is irrelevant and may be removed
//│ ║  l.13: 	class Derived2[C]: Base1[anything]
//│ ╙──      	               ^

Derived2.M1
//│ res: Derived2[?] -> anything -> Derived2[?]
//│    = undefined


:DontDistributeForalls

:w
class Derived3[C]: Base1[anything]
  method M1 r = Derived3{}
//│ Defined class Derived3[±C]
//│ Defined Derived3.M1: Derived3[?] -> anything -> Derived3[?]
//│ ╔══[WARNING] Type definition Derived3 has bivariant type parameters:
//│ ║  l.32: 	class Derived3[C]: Base1[anything]
//│ ║        	      ^^^^^^^^
//│ ╟── C is irrelevant and may be removed
//│ ║  l.32: 	class Derived3[C]: Base1[anything]
//│ ╙──      	               ^

Derived3.M1
//│ res: Derived3[?] -> anything -> Derived3[?]
//│    = undefined

