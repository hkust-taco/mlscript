:NoJS
:AllowTypeErrors

:ex
// add 1

:ex
:d
:simplifyError
// def succ x = add x 1
// x1 = false
// x2 = x1
// succ x2
// succ 1
// succ 2
// succ false


:d
:ex
:simplifyError
// def succ x = add x 1
// h1 f x = f x
// h1 succ false

:d
:ex
:simplifyError
// x1 = false
// f1 y1 = succ y1
// def succ x = add x 1
// h1 f x = f x
// h1 succ false

:ex
:d
:simplifyError
class Tuple: { left: bool; right: int }
def succ x = add x 1
x1 = false
x2 = x1
x3 = Tuple { left = x2; right = 1 }
succ x3.left
//│ 0. Typing type Record(List((left,Field(None,TypeName(bool))), (right,Field(None,TypeName(int)))))
//│ | vars=Map() newDefsInfo=Map(Tuple -> (Cls,0))
//│ => {left: Bool, right: Int} | 
//│ Defined class Tuple
//│ 1. Typing term x, => add (x,) (1,)
//│ | 1. Typing pattern x,
//│ | | 1. Typing pattern x
//│ | | 1. : α24'
//│ | 1. : (α24',)
//│ | 1. Typing term add (x,) (1,)
//│ | | 1. Typing term add (x,)
//│ | | | 1. Typing term add
//│ | | | 1. : [(int<number> -> (int<number> -> int<number>))]
//│ | | | 1. Typing term x,
//│ | | | | 1. Typing term x
//│ | | | | 1. : [α24']
//│ | | | 1. : ([α24'],)
//│ | | | CONSTRAIN [(int<number> -> (int<number> -> int<number>))] <! ([([α24'],)] -> α25')
//│ | | |   where 
//│ | | | C [(int<number> -> (int<number> -> int<number>))] <! ([([α24'],)] -> α25')    (0) where ProvType <: FunctionType}
//│ | | | | C (int<number> -> (int<number> -> int<number>)) <! ([([α24'],)] -> α25')    (0) where FunctionType <: FunctionType}
//│ ╔══[WARNING] ========= Chain locations at current level =========
//│ ╟── (total, wrong): (1,0) with reference
//│ ║  l.39: 	def succ x = add x 1
//│ ╙──      	             ^^^
//│ ╔══[WARNING] ========= All chain locations and count =========
//│ ╟── (total, wrong): (1,0) with reference at nesting: 0, rev: false
//│ ║  l.39: 	def succ x = add x 1
//│ ╙──      	             ^^^
//│ | | | | | C [([α24'],)] <! (int<number>,)    (1) where ProvType <: TupleType}
//│ | | | | | | C ([α24'],) <! (int<number>,)    (1) where TupleType <: TupleType}
//│ | | | | | | | C [α24'] <! int<number>    (2) where ProvType <: ClassTag}
//│ | | | | | | | | C α24' <! int<number>    (2) where TypeVariable <: ClassTag}
//│ | | | | | C (int<number> -> int<number>) <! α25'    (3) where FunctionType <: TypeVariable}
//│ | | 1. : α25'
//│ | | 1. Typing term 1,
//│ | | | 1. Typing term 1
//│ | | | 1. : 1<int,number>
//│ | | 1. : (1<int,number>,)
//│ | | CONSTRAIN α25' <! ([(1<int,number>,)] -> α26')
//│ | |   where 
//│ 		α25' :> [[(int<number> -> int<number>)]]
//│ | | C α25' <! ([(1<int,number>,)] -> α26')    (0) where TypeVariable <: FunctionType}
//│ | | | C [[(int<number> -> int<number>)]] <! ([(1<int,number>,)] -> α26')    (1) where ProvType <: FunctionType}
//│ | | | | C [(int<number> -> int<number>)] <! ([(1<int,number>,)] -> α26')    (1) where ProvType <: FunctionType}
//│ | | | | | C (int<number> -> int<number>) <! ([(1<int,number>,)] -> α26')    (1) where FunctionType <: FunctionType}
//│ ╔══[WARNING] ========= Chain locations at current level =========
//│ ╟── (total, wrong): (1,0) with application
//│ ║  l.39: 	def succ x = add x 1
//│ ╙──      	             ^^^^^
//│ ╔══[WARNING] ========= All chain locations and count =========
//│ ╟── (total, wrong): (1,0) with reference at nesting: 1, rev: false
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	             ^^^
//│ ╟── (total, wrong): (1,0) with application at nesting: 0, rev: false
//│ ║  l.39: 	def succ x = add x 1
//│ ╙──      	             ^^^^^
//│ | | | | | | C [(1<int,number>,)] <! (int<number>,)    (2) where ProvType <: TupleType}
//│ | | | | | | | C (1<int,number>,) <! (int<number>,)    (2) where TupleType <: TupleType}
//│ | | | | | | | | C 1<int,number> <! int<number>    (3) where ClassTag <: ClassTag}
//│ ╔══[WARNING] ========= Chain locations at current level =========
//│ ╟── (total, wrong): (1,0) with integer literal
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	                   ^
//│ ╟── (total, wrong): (1,0) with argument
//│ ║  l.39: 	def succ x = add x 1
//│ ╙──      	                   ^
//│ ╔══[WARNING] ========= All chain locations and count =========
//│ ╟── (total, wrong): (1,0) with integer literal at nesting: 0, rev: false
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	                   ^
//│ ╟── (total, wrong): (1,0) with argument at nesting: 0, rev: false
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	                   ^
//│ ╟── (total, wrong): (1,0) with application at nesting: 1, rev: true
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	             ^^^^^
//│ ╟── (total, wrong): (1,0) with reference at nesting: 2, rev: true
//│ ║  l.39: 	def succ x = add x 1
//│ ╙──      	             ^^^
//│ | | | | | | C int<number> <! α26'    (4) where ClassTag <: TypeVariable}
//│ | 1. : α26'
//│ 1. : (α24' -> α26')
//│ ⬤ Typed as: (α24' -> α26')
//│  where: 
//│ 		α24' <: [[[[[[int<number>]]]]]]
//│ 		α26' :> [[[int<number>]]]
//│ succ: int -> int
//│ 1. Typing term false
//│ 1. : [false<bool>]
//│ ⬤ Typed as: [false<bool>]
//│  where: 
//│ x1: false
//│ 1. Typing term x1
//│ 1. : [[false<bool>]]
//│ ⬤ Typed as: [[false<bool>]]
//│  where: 
//│ x2: false
//│ 1. Typing term Tuple ({left: x2, right: 1},)
//│ | 1. Typing term Tuple
//│ | 1. : [({left: left29', right: right30'} -> (tuple<> & {left: left29', right: right30'}))]
//│ | 1. Typing term {left: x2, right: 1},
//│ | | 1. Typing term {left: x2, right: 1}
//│ | | | 1. Typing term x2
//│ | | | 1. : [[[false<bool>]]]
//│ | | | 1. Typing term 1
//│ | | | 1. : 1<int,number>
//│ | | 1. : {left: [[[false<bool>]]], right: 1<int,number>}
//│ | 1. : ({left: [[[false<bool>]]], right: 1<int,number>},)
//│ | CONSTRAIN [({left: left29', right: right30'} -> (tuple<> & {left: left29', right: right30'}))] <! ([({left: [[[false<bool>]]], right: 1<int,number>},)] -> α31')
//│ |   where 
//│ 		left29' <: Bool
//│ 		right30' <: Int
//│ | C [({left: left29', right: right30'} -> (tuple<> & {left: left29', right: right30'}))] <! ([({left: [[[false<bool>]]], right: 1<int,number>},)] -> α31')    (0) where ProvType <: FunctionType}
//│ | | C ({left: left29', right: right30'} -> (tuple<> & {left: left29', right: right30'})) <! ([({left: [[[false<bool>]]], right: 1<int,number>},)] -> α31')    (0) where FunctionType <: FunctionType}
//│ ╔══[WARNING] ========= Chain locations at current level =========
//│ ╟── (total, wrong): (1,0) with class constructor
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ║        	      ^^^^^
//│ ╟── (total, wrong): (1,0) with reference
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ╙──      	     ^^^^^
//│ ╔══[WARNING] ========= All chain locations and count =========
//│ ╟── (total, wrong): (1,0) with class constructor at nesting: 0, rev: false
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ║        	      ^^^^^
//│ ╟── (total, wrong): (1,0) with reference at nesting: 0, rev: false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ╙──      	     ^^^^^
//│ | | | C [({left: [[[false<bool>]]], right: 1<int,number>},)] <! ({left: left29', right: right30'},)    (1) where ProvType <: TupleType}
//│ | | | | C ({left: [[[false<bool>]]], right: 1<int,number>},) <! ({left: left29', right: right30'},)    (1) where TupleType <: TupleType}
//│ | | | | | C {left: [[[false<bool>]]], right: 1<int,number>} <! {left: left29', right: right30'}    (2) where RecordType <: RecordType}
//│ | | | | | | C [[[false<bool>]]] <! left29'    (3) where ProvType <: TypeVariable}
//│ | | | | | | | C [[false<bool>]] <! left29'    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | C [false<bool>] <! left29'    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | C false<bool> <! left29'    (3) where ClassTag <: TypeVariable}
//│ | | | | | | | | | | C false<bool> <! Bool    (4) where ClassTag <: TypeRef}
//│ | | | | | | | | | | | C false<bool> <! bool<>    (5) where ClassTag <: ClassTag}
//│ ╔══[WARNING] ========= Chain locations at current level =========
//│ ╟── (total, wrong): (1,0) with reference
//│ ║  l.40: 	x1 = false
//│ ║        	     ^^^^^
//│ ╟── (total, wrong): (1,0) with reference
//│ ║  l.41: 	x2 = x1
//│ ║        	     ^^
//│ ╟── (total, wrong): (1,0) with reference
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	                    ^^
//│ ╟── (total, wrong): (1,0) with type reference
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ║        	                     ^^^^
//│ ╟── (total, wrong): (1,0) with type reference
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ╙──      	                     ^^^^
//│ ╔══[WARNING] ========= All chain locations and count =========
//│ ╟── (total, wrong): (1,0) with reference at nesting: 0, rev: false
//│ ║  l.40: 	x1 = false
//│ ║        	     ^^^^^
//│ ╟── (total, wrong): (1,0) with reference at nesting: 0, rev: false
//│ ║  l.41: 	x2 = x1
//│ ║        	     ^^
//│ ╟── (total, wrong): (1,0) with reference at nesting: 0, rev: false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	                    ^^
//│ ╟── (total, wrong): (-1,-1) with record literal at nesting: 1, rev: false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── (total, wrong): (-1,-1) with argument at nesting: 1, rev: false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── (total, wrong): (1,0) with reference at nesting: 2, rev: true
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	     ^^^^^
//│ ╟── (total, wrong): (1,0) with class constructor at nesting: 2, rev: true
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ║        	      ^^^^^
//│ ╟── (total, wrong): (1,0) with type reference at nesting: 0, rev: false
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ║        	                     ^^^^
//│ ╟── (total, wrong): (1,0) with type reference at nesting: 0, rev: false
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ╙──      	                     ^^^^
//│ | | | | | | C 1<int,number> <! right30'    (6) where ClassTag <: TypeVariable}
//│ | | | | | | | C 1<int,number> <! Int    (7) where ClassTag <: TypeRef}
//│ | | | | | | | | C 1<int,number> <! int<number>    (8) where ClassTag <: ClassTag}
//│ ╔══[WARNING] ========= Chain locations at current level =========
//│ ╟── (total, wrong): (1,0) with integer literal
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	                                ^
//│ ╟── (total, wrong): (1,0) with type reference
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ║        	                                  ^^^
//│ ╟── (total, wrong): (1,0) with type reference
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ╙──      	                                  ^^^
//│ ╔══[WARNING] ========= All chain locations and count =========
//│ ╟── (total, wrong): (1,0) with integer literal at nesting: 0, rev: false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	                                ^
//│ ╟── (total, wrong): (-1,-1) with record literal at nesting: 1, rev: false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── (total, wrong): (-1,-1) with argument at nesting: 1, rev: false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── (total, wrong): (1,0) with reference at nesting: 2, rev: true
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	     ^^^^^
//│ ╟── (total, wrong): (1,0) with class constructor at nesting: 2, rev: true
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ║        	      ^^^^^
//│ ╟── (total, wrong): (1,0) with type reference at nesting: 0, rev: false
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ║        	                                  ^^^
//│ ╟── (total, wrong): (1,0) with type reference at nesting: 0, rev: false
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ╙──      	                                  ^^^
//│ | | | C (tuple<> & {left: left29', right: right30'}) <! α31'    (9) where ComposedType <: TypeVariable}
//│ 1. : α31'
//│ ⬤ Typed as: α31'
//│  where: 
//│ 		left29' :> [[[[[false<bool>]]]]] <: Bool
//│ 		right30' :> [[1<int,number>]] <: Int
//│ 		α31' :> [[(tuple<> & {left: left29', right: right30'})]]
//│ x3: Tuple & {left: false, right: 1}
//│ 0. Typing term succ ((x3).left,)
//│ | 0. Typing term succ
//│ | 0. : [(α35 -> α36)]
//│ | 0. Typing term (x3).left,
//│ | | 0. Typing term (x3).left
//│ | | | 0. Typing term x3
//│ | | | 0. : [α37]
//│ | | | CONSTRAIN [[α37]] <! {left: left40}
//│ | | |   where 
//│ 		α37 :> [[(tuple<> & {left: left38, right: right39})]]
//│ 		left38 :> [[[[[false<bool>]]]]] <: Bool
//│ 		right39 :> [[1<int,number>]] <: Int
//│ | | | C [[α37]] <! {left: left40}    (0) where ProvType <: RecordType}
//│ | | | | C [α37] <! {left: left40}    (0) where ProvType <: RecordType}
//│ | | | | | C α37 <! {left: left40}    (0) where TypeVariable <: RecordType}
//│ | | | | | | C [[(tuple<> & {left: left38, right: right39})]] <! {left: left40}    (1) where ProvType <: RecordType}
//│ | | | | | | | C [(tuple<> & {left: left38, right: right39})] <! {left: left40}    (1) where ProvType <: RecordType}
//│ | | | | | | | | C (tuple<> & {left: left38, right: right39}) <! {left: left40}    (1) where ComposedType <: RecordType}
//│ | | | | | | | | | ARGH  DNF(tuple<>{right: right39, left: left38})  <!  DNF({left: left40})
//│ | | | | | | | | | | Consider tuple<>{right: right39, left: left38} <: DNF({left: left40})
//│ | | | | | | | | | | Possible: List({left: left40})
//│ | | | | | | | | | | A  tuple<>{right: right39, left: left38}  %  List()  <!  List({left: left40})  %  ⊥
//│ | | | | | | | | | | | A  tuple<>{right: right39, left: left38}  %  List()  <!  List()  %  {left:left40}
//│ | | | | | | | | | | | | A  tuple<>{right: right39, left: left38}  %  List()  <!  List()  %  |{left:left40}
//│ | | | | | | | | | | | | | A  {right: right39, left: left38}  %  List()  <!  List()  %  |{left:left40}
//│ | | | | | | | | | | | | | | C left38 <! left40    (2) where TypeVariable <: TypeVariable}
//│ | | | | | | | | | | | | | | | C [[[[[false<bool>]]]]] <! left40    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | | C [[[[false<bool>]]]] <! left40    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | | | C [[[false<bool>]]] <! left40    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | | | | C [[false<bool>]] <! left40    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | | | | | C [false<bool>] <! left40    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | | | | | | C false<bool> <! left40    (3) where ClassTag <: TypeVariable}
//│ | | 0. : left40
//│ | 0. : (left40,)
//│ | CONSTRAIN [(α35 -> α36)] <! ([(left40,)] -> α41)
//│ |   where 
//│ 		α35 <: [[[[[[int<number>]]]]]]
//│ 		α36 :> [[[int<number>]]]
//│ 		left40 :> [[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]
//│ | C [(α35 -> α36)] <! ([(left40,)] -> α41)    (0) where ProvType <: FunctionType}
//│ | | C (α35 -> α36) <! ([(left40,)] -> α41)    (0) where FunctionType <: FunctionType}
//│ ╔══[WARNING] ========= Chain locations at current level =========
//│ ╟── (total, wrong): (1,0) with function
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	         ^^^^^^^^^^^
//│ ╟── (total, wrong): (1,0) with reference
//│ ║  l.43: 	succ x3.left
//│ ╙──      	^^^^
//│ ╔══[WARNING] ========= All chain locations and count =========
//│ ╟── (total, wrong): (1,0) with function at nesting: 0, rev: false
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	         ^^^^^^^^^^^
//│ ╟── (total, wrong): (1,0) with reference at nesting: 0, rev: false
//│ ║  l.43: 	succ x3.left
//│ ╙──      	^^^^
//│ | | | C [(left40,)] <! (α35,)    (1) where ProvType <: TupleType}
//│ | | | | C (left40,) <! (α35,)    (1) where TupleType <: TupleType}
//│ | | | | | C left40 <! α35    (2) where TypeVariable <: TypeVariable}
//│ | | | | | | C [[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | C [[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | C [[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | C [[[[[[[[[[[[[false<bool>]]]]]]]]]]]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | C [[[[[[[[[[[[false<bool>]]]]]]]]]]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | C [[[[[[[[[[[false<bool>]]]]]]]]]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | C [[[[[[[[[[false<bool>]]]]]]]]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | C [[[[[[[[[false<bool>]]]]]]]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | C [[[[[[[[false<bool>]]]]]]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | C [[[[[[[false<bool>]]]]]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | | C [[[[[[false<bool>]]]]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | | | C [[[[[false<bool>]]]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | | | | C [[[[false<bool>]]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | | | | | C [[[false<bool>]]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | | | | | | C [[false<bool>]] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | | | | | | | C [false<bool>] <! α35    (3) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | | | | | | | | C false<bool> <! α35    (3) where ClassTag <: TypeVariable}
//│ | | | | | | | | | | | | | | | | | | | | | | | C false<bool> <! [[[[[[int<number>]]]]]]    (4) where ClassTag <: ProvType}
//│ | | | | | | | | | | | | | | | | | | | | | | | | C false<bool> <! [[[[[int<number>]]]]]    (4) where ClassTag <: ProvType}
//│ | | | | | | | | | | | | | | | | | | | | | | | | | C false<bool> <! [[[[int<number>]]]]    (4) where ClassTag <: ProvType}
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | C false<bool> <! [[[int<number>]]]    (4) where ClassTag <: ProvType}
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | C false<bool> <! [[int<number>]]    (4) where ClassTag <: ProvType}
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | C false<bool> <! [int<number>]    (4) where ClassTag <: ProvType}
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | C false<bool> <! int<number>    (4) where ClassTag <: ClassTag}
//│ ╔══[WARNING] ========= Chain locations at current level =========
//│ ╟── (total, wrong): (2,1) with reference
//│ ║  l.40: 	x1 = false
//│ ║        	     ^^^^^
//│ ╟── (total, wrong): (2,1) with reference
//│ ║  l.41: 	x2 = x1
//│ ║        	     ^^
//│ ╟── (total, wrong): (2,1) with reference
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	                    ^^
//│ ╟── (total, wrong): (1,1) with application
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── (total, wrong): (1,1) with reference
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^
//│ ╟── (total, wrong): (1,1) with receiver
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^
//│ ╟── (total, wrong): (1,1) with field selection
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^^^^^^
//│ ╟── (total, wrong): (1,1) with argument
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^^^^^^
//│ ╟── (total, wrong): (1,1) with reference
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	                 ^
//│ ╟── (total, wrong): (1,1) with argument
//│ ║  l.39: 	def succ x = add x 1
//│ ╙──      	                 ^
//│ ╔══[WARNING] ========= All chain locations and count =========
//│ ╟── (total, wrong): (2,1) with reference at nesting: 0, rev: false
//│ ║  l.40: 	x1 = false
//│ ║        	     ^^^^^
//│ ╟── (total, wrong): (2,1) with reference at nesting: 0, rev: false
//│ ║  l.41: 	x2 = x1
//│ ║        	     ^^
//│ ╟── (total, wrong): (2,1) with reference at nesting: 0, rev: false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	                    ^^
//│ ╟── (total, wrong): (0,1) with record literal at nesting: 1, rev: false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── (total, wrong): (0,1) with argument at nesting: 1, rev: false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── (total, wrong): (1,2) with reference at nesting: 2, rev: true
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	     ^^^^^
//│ ╟── (total, wrong): (1,2) with class constructor at nesting: 2, rev: true
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ║        	      ^^^^^
//│ ╟── (total, wrong): (1,2) with class constructor at nesting: 1, rev: false
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ║        	      ^^^^^
//│ ╟── (total, wrong): (1,2) with reference at nesting: 1, rev: false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	     ^^^^^
//│ ╟── (total, wrong): (1,1) with application at nesting: 0, rev: false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── (total, wrong): (1,1) with reference at nesting: 0, rev: false
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^
//│ ╟── (total, wrong): (1,1) with receiver at nesting: 0, rev: false
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^
//│ ╟── (total, wrong): (1,1) with field selection at nesting: 0, rev: false
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^^^^^^
//│ ╟── (total, wrong): (1,1) with argument at nesting: 0, rev: false
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^^^^^^
//│ ╟── (total, wrong): (1,1) with reference at nesting: 1, rev: true
//│ ║  l.43: 	succ x3.left
//│ ║        	^^^^
//│ ╟── (total, wrong): (1,1) with function at nesting: 1, rev: true
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	         ^^^^^^^^^^^
//│ ╟── (total, wrong): (1,1) with reference at nesting: 0, rev: false
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	                 ^
//│ ╟── (total, wrong): (1,1) with argument at nesting: 0, rev: false
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	                 ^
//│ ╟── (total, wrong): (1,1) with reference at nesting: 1, rev: true
//│ ║  l.39: 	def succ x = add x 1
//│ ╙──      	             ^^^
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [false<bool>]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α42
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] (α42,)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF((α42,){})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α42
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α42)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α42
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> (α42,)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [false<bool>]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[false<bool>]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[false<bool>]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[false<bool>]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[false<bool>]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[false<bool>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[false<bool>]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[false<bool>]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[false<bool>]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: +left43
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] left43
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(left43)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[α44]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α44)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α44
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> left43
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: +left45
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [(left45,)]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF((left45,){})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] left45
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(left45)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[α46]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α46)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α46
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> left45
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> (left45,)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: +left47
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[(left47,)]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF((left47,){})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] left47
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(left47)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[α48]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α48)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α48
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> left47
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> (left47,)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [int<number>]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[int<number>]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[int<number>]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[int<number>]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[int<number>]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α49
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α49
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α49)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α49
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α50
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α50
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α50)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α50
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α51
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α51
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α51)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α51
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α52
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α52
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α52)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α52
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α53
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α53
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α53)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α53
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α54
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α54
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α54)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α54
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α55
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α55
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α55)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α55
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α56
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α56
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α56)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α56
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α57
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α57
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α57)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α57
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α58
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α58
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α58)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α58
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α59
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α59
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α59)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α59
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α60
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α60
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α60)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α60
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α61
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α61
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α61)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α61
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α62
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α62
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α62)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α62
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α63
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α63
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α63)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α63
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α64
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α64
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α64)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α64
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α65
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α65
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α65)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α65
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α66
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α66
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α66)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α66
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: -α67
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] (α67,)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF((α67,){})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] α67
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(α67)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[false<bool>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(false<bool>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> false<bool>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] [[[[[[int<number>]]]]]]
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> α67
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> (α67,)
//│ ╔══[WARNING] ========= All locations and counts =========
//│ ╟── (total, wrong): (1,2)
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ║        	      ^^^^^
//│ ╟── (total, wrong): (1,0)
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ║        	                     ^^^^
//│ ╟── (total, wrong): (1,0)
//│ ║  l.38: 	class Tuple: { left: bool; right: int }
//│ ║        	                                  ^^^
//│ ╟── (total, wrong): (1,1)
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	         ^^^^^^^^^^^
//│ ╟── (total, wrong): (1,1)
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	             ^^^
//│ ╟── (total, wrong): (1,0)
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	             ^^^^^
//│ ╟── (total, wrong): (1,1)
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	                 ^
//│ ╟── (total, wrong): (1,0)
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	                   ^
//│ ╟── (total, wrong): (2,1)
//│ ║  l.40: 	x1 = false
//│ ║        	     ^^^^^
//│ ╟── (total, wrong): (2,1)
//│ ║  l.41: 	x2 = x1
//│ ║        	     ^^
//│ ╟── (total, wrong): (1,2)
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	     ^^^^^
//│ ╟── (total, wrong): (1,1)
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── (total, wrong): (0,1)
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── (total, wrong): (2,1)
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	                    ^^
//│ ╟── (total, wrong): (1,0)
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	                                ^
//│ ╟── (total, wrong): (1,1)
//│ ║  l.43: 	succ x3.left
//│ ║        	^^^^
//│ ╟── (total, wrong): (1,1)
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^
//│ ╟── (total, wrong): (1,1)
//│ ║  l.43: 	succ x3.left
//│ ╙──      	     ^^^^^^^
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | CONSTRAIN error<> <! α41
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | C error<> <! α41    (0) where ClassTag <: TypeVariable}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.43: 	succ x3.left
//│ ║        	^^^^^^^^^^^^
//│ ╟── reference of type `false` is not a 1-element tuple
//│ ║  l.40: 	x1 = false
//│ ║        	     ^^^^^
//│ ╟── but it flows into reference with expected type `(?a,)`
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	                 ^
//│ ╟── ========= Additional explanations below =========
//│ ╟── [info] LHS >> ‹type›[Typer.scala:100] : false
//│ ╟── [info] LHS >> ‹reference:Loc(66,71,analysis/test:+38)›[Typer.scala:528] : false
//│ ║  l.40: 	x1 = false
//│ ║        	     ^^^^^
//│ ╟── [info] LHS >> ‹reference:Loc(77,79,analysis/test:+38)›[Typer.scala:528] : false
//│ ║  l.41: 	x2 = x1
//│ ║        	     ^^
//│ ╟── [info] LHS >> ‹reference:Loc(100,102,analysis/test:+38)›[Typer.scala:528] : false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	                    ^^
//│ ╟── [info] LHS >> <nested> {left: [[[false<bool>]]], right: 1<int,number>} -> [({left: [[[false<bool>]]], right: 1<int,number>},)] -> [[({left: [[[false<bool>]]], right: 1<int,number>},)]] -> ({left: left29', right: right30'},) <nested> : false
//│ ╟── [info] LHS >> <nested> ({left: left29', right: right30'} -> (tuple<> & {left: left29', right: right30'})) -> [({left: left29', right: right30'} -> (tuple<> & {left: left29', right: right30'}))] -> ([({left: [[[false<bool>]]], right: 1<int,number>},)] -> α31') <nested> : false
//│ ╟── [info] LHS >> ‹application:Loc(85,115,analysis/test:+38)›[Typer.scala:661] : false
//│ ║  l.42: 	x3 = Tuple { left = x2; right = 1 }
//│ ║        	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── [info] LHS >> ‹reference:Loc(121,123,analysis/test:+38)›[Typer.scala:528] : false
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^
//│ ╟── [info] LHS >> ‹receiver:Loc(121,123,analysis/test:+38)›[Typer.scala:683] : false
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^
//│ ╟── [info] LHS >> ‹field selection:Loc(121,128,analysis/test:+38)›[Typer.scala:682] : ?left
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^^^^^^
//│ ╟── [info] LHS >> ‹argument:Loc(121,128,analysis/test:+38)›[Typer.scala:662] : (?left0,)
//│ ║  l.43: 	succ x3.left
//│ ║        	     ^^^^^^^
//│ ╟── [info] LHS >> <nested> (α35 -> α36) -> [(α35 -> α36)] -> ([(left40,)] -> α41) <nested> : (?left1,)
//│ ╟── [info] RHS << ‹type›[Typer.scala:100] : int
//│ ╟── [info] RHS << ‹type›[Typer.scala:100] : int
//│ ╟── [info] RHS << ‹type›[Typer.scala:100] : int
//│ ╟── [info] RHS << <nested> (int<number> -> (int<number> -> int<number>)) -> [(int<number> -> (int<number> -> int<number>))] -> ([([α24'],)] -> α25') <nested> : int
//│ ╟── [info] RHS << ‹argument:Loc(57,58,analysis/test:+38)›[Typer.scala:662] : int
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	                 ^
//│ ╟── [info] RHS << ‹reference:Loc(57,58,analysis/test:+38)›[Typer.scala:528] : int
//│ ║  l.39: 	def succ x = add x 1
//│ ║        	                 ^
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : int
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?b
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?c
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?d
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?e
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?f
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?g
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?h
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?i
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?j
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?k
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?l
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?m
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?n
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?o
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?p
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?q
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?r
//│ ╟── [info] RHS << ‹variable›[Typer.scala:508] : ?s
//│ ╙── [info] RHS << [NO PROV] : (?t,)
//│ | | | C α36 <! α41    (5) where TypeVariable <: TypeVariable}
//│ | | | | C [[[int<number>]]] <! α41    (6) where ProvType <: TypeVariable}
//│ | | | | | C [[int<number>]] <! α41    (6) where ProvType <: TypeVariable}
//│ | | | | | | C [int<number>] <! α41    (6) where ProvType <: TypeVariable}
//│ | | | | | | | C int<number> <! α41    (6) where ClassTag <: TypeVariable}
//│ 0. : α41
//│ ⬤ Typed as: α41
//│  where: 
//│ 		α41 :> [[[[[int<number>]]]]] | [error<>]
//│ res: error | int
