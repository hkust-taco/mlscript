// * A testbed to reproduce potential QQ problems with simpler types

:NewDefs
:NoJS


class Cod[out A, out C]
//│ class Cod[A, C] {
//│   constructor()
//│ }

// * Plain code with C context requirements
class Plain[out A, out C]
//│ class Plain[A, C] {
//│   constructor()
//│ }

fun run: Cod['a, nothing] -> 'a
//│ fun run: forall 'a. Cod['a, nothing] -> 'a

val const: Cod[Int, nothing]
fun quote: Array[Plain['a, 'c]] -> Cod['a, 'c]
fun unquote: Cod['a, 'c] -> Plain['a, 'c]
fun lam: (forall 'c: Cod['a, 'c] -> Cod['b, 'c | 'g]) -> Cod['a -> 'b, 'g]
//│ fun quote: forall 'a 'c. Array[Plain['a, 'c]] -> Cod['a, 'c]
//│ val const: Cod[Int, nothing]
//│ fun lam: forall 'a0 'b 'g. (forall 'c0. Cod['a0, 'c0] -> Cod['b, 'c0 | 'g]) -> Cod['a0 -> 'b, 'g]
//│ fun unquote: forall 'a1 'c1. Cod['a1, 'c1] -> Plain['a1, 'c1]

fun (%>) bind: (Cod['a, 'g], k: forall 'c: Cod['a, 'c] -> Cod['b, 'c | 'g]) -> Cod['b, 'g]
//│ fun (%>) bind: forall 'a 'g 'b. (Cod['a, 'g], k: forall 'c. Cod['a, 'c] -> Cod['b, 'c | 'g]) -> Cod['b, 'g]

let f = k => bind of const, k
//│ let f: forall 'b 'g. (forall 'c. Cod[Int, 'c] -> Cod['b, 'c | 'g]) -> Cod['b, 'g]

f(id)
//│ Cod[Int, nothing]


// * Note: expected extrusion (needs polymorphic recursion)
fun body(x, y) = case
  0 then x
  1 then y
  n then quote([unquote(x), unquote(y)]) %> z => body(x, z)(n - 1)
//│ fun body: forall 'b 'a. (Cod['b, anything] & 'a, Cod['b, anything] & 'a) -> (0 | 1 | Int & ~0 & ~1) -> (Cod['b, anything] | 'a)

// code"(x, y) => ${body(code"x", code"y")(0)}"

let l = lam(x => lam(y => body(x, y)(0)))
//│ let l: Cod['a -> 'a -> 'a, ??c & ~??c0]

// * Expected error: `body` needed polymorphic recursion
// * TODO improve error locations!
:e
run(l)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.55: 	run(l)
//│ ║        	^^^^^^
//│ ╟── type `??c & ~??c0` does not match type `nothing`
//│ ║  l.24: 	fun lam: (forall 'c: Cod['a, 'c] -> Cod['b, 'c | 'g]) -> Cod['a -> 'b, 'g]
//│ ║        	                                                                       ^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.18: 	fun run: Cod['a, nothing] -> 'a
//│ ╙──      	                 ^^^^^^^
//│ error | 'a -> 'a -> 'a


fun body: forall 'g: (Cod[Int, 'g], Cod[Int, 'g]) -> Int -> Cod[Int, 'g]
fun body(x, y) = case
  0 then x
  1 then y
  n then quote([unquote(x), unquote(y)]) %> z => body(x, z)(n - 1)
//│ fun body: forall 'g. (Cod[Int, 'g], Cod[Int, 'g]) -> (0 | 1 | Int & ~0 & ~1) -> Cod[Int, 'g]
//│ fun body: forall 'g0. (Cod[Int, 'g0], Cod[Int, 'g0]) -> Int -> Cod[Int, 'g0]

let l = lam(x => lam(y => body(x, y)(0)))
run(l)
//│ let l: Cod[Int -> Int -> Int, nothing]
//│ Int -> Int -> Int


// * An unnecessary complication, just for testing purposes:

fun body: forall 'g: (Cod[Int, 'g], Cod[Int, 'g]) -> Int -> Cod[Int, 'g]
fun body(x, y) = case
  0 then x
  1 then y
  n then quote([unquote(x), unquote(y)]) %> z => quote([unquote(body(x, z)(n - 1))])
//│ fun body: forall 'g. (Cod[Int, 'g], Cod[Int, 'g]) -> (0 | 1 | Int & ~0 & ~1) -> Cod[Int, 'g]
//│ fun body: forall 'g0. (Cod[Int, 'g0], Cod[Int, 'g0]) -> Int -> Cod[Int, 'g0]

let l = lam(x => lam(y => body(x, y)(0)))
run(l)
//│ let l: Cod[Int -> Int -> Int, nothing]
//│ Int -> Int -> Int


