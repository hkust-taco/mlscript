:NewDefs
:NoJS


:d
fun (%>) bind: (Code['a, 'g], k: forall 'c: Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]
fun bind[g](rhs, k: forall 'c: Code['a, 'c] -> Code['b, 'c | g]) = code"let x = ${rhs} in ${k(code"x")}"
//│ 0. Typing TypingUnit(List(NuFunDef(None,Var(bind),Some(Var(%>)),List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'g)))), (Some(Var(k)),Field(None,PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g))))))))),AppliedType(TypeName(Code),List('b, 'g)))))), NuFunDef(None,Var(bind),None,List(TypeName(g)),Left(Lam(Tup(List((None,Fld(_,Var(rhs))), (Some(Var(k)),Fld(_,Forall(List('c),App(Var(->),Tup(List((None,Fld(_,TyApp(Var(Code),List('a, 'c)))), (None,Fld(_,TyApp(Var(Code),List('b, Union('c,TypeName(g)))))))))))))),Quoted(Let(false,Var(x),Unquoted(Var(rhs)),Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x)))))))))))))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(bind),Some(Var(%>)),List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'g)))), (Some(Var(k)),Field(None,PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g))))))))),AppliedType(TypeName(Code),List('b, 'g))))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(bind),None,List(TypeName(g)),Left(Lam(Tup(List((None,Fld(_,Var(rhs))), (Some(Var(k)),Fld(_,Forall(List('c),App(Var(->),Tup(List((None,Fld(_,TyApp(Var(Code),List('a, 'c)))), (None,Fld(_,TyApp(Var(Code),List('b, Union('c,TypeName(g)))))))))))))),Quoted(Let(false,Var(x),Unquoted(Var(rhs)),Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x)))))))))))))
//│ | Completing fun (%>) bind: (Code['a, 'g], k: forall 'c. Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]
//│ | | Type params 
//│ | | Params 
//│ | | Typing type Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'g)))), (Some(Var(k)),Field(None,PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g))))))))),AppliedType(TypeName(Code),List('b, 'g)))
//│ | | | vars=Map() newDefsInfo=Map()
//│ | | | 1. type Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'g)))), (Some(Var(k)),Field(None,PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g))))))))),AppliedType(TypeName(Code),List('b, 'g)))
//│ | | | | 1. type Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'g)))), (Some(Var(k)),Field(None,PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g)))))))))
//│ | | | | | 1. type AppliedType(TypeName(Code),List('a, 'g))
//│ | | | | | | 1. type 'a
//│ | | | | | | => 'a48'
//│ | | | | | | 1. type 'g
//│ | | | | | | => 'g49'
//│ | | | | | => Code['a48','g49']
//│ | | | | | 1. type PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g)))))
//│ | | | | | | 2. type Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g))))
//│ | | | | | | | 2. type Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c))))))
//│ | | | | | | | | 2. type AppliedType(TypeName(Code),List('a, 'c))
//│ | | | | | | | | | 2. type 'a
//│ | | | | | | | | | => 'a48'
//│ | | | | | | | | | 2. type 'c
//│ | | | | | | | | | => 'c50''
//│ | | | | | | | | => Code['a48','c50'']
//│ | | | | | | | => (Code['a48','c50''],)
//│ | | | | | | | 2. type AppliedType(TypeName(Code),List('b, Union('c,'g)))
//│ | | | | | | | | 2. type 'b
//│ | | | | | | | | => 'b51'
//│ | | | | | | | | 2. type Union('c,'g)
//│ | | | | | | | | | 2. type 'c
//│ | | | | | | | | | => 'c50''
//│ | | | | | | | | | 2. type 'g
//│ | | | | | | | | | => 'g49'
//│ | | | | | | | | => ('c50'' | 'g49')
//│ | | | | | | | => Code['b51',('c50'' | 'g49')]
//│ | | | | | | => (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])
//│ | | | | | | >>>>>>>> TreeMap()
//│ | | | | | | Inferred poly constr: (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])  —— where 
//│ | | | | | => ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›
//│ | | | | => (Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,)
//│ | | | | 1. type AppliedType(TypeName(Code),List('b, 'g))
//│ | | | | | 1. type 'b
//│ | | | | | => 'b51'
//│ | | | | | 1. type 'g
//│ | | | | | => 'g49'
//│ | | | | => Code['b51','g49']
//│ | | | => ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])
//│ | | => ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49']) ——— 'b51', 'a48', 'g49'
//│ | | >>>>>>>> TreeMap()
//│ | | Inferred poly constr: ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])  —— where 
//│ | | Type bind polymorphically? true && (0 === 0 || false || false
//│ | | CONSTRAIN ‹∀ 0. ‹∀ 0. ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])›› <! bind52'
//│ | |   where 
//│ | | 1. C ‹∀ 0. ‹∀ 0. ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])›› <! bind52'    (0)
//│ | | | NEW bind52' LB (0)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(bind),Some(Var(%>)),List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'g)))), (Some(Var(k)),Field(None,PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g))))))))),AppliedType(TypeName(Code),List('b, 'g)))))),‹∀ 0. ‹∀ 0. ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])››) where 
//│ | Completing fun bind = (rhs, k: forall 'c. ->(Code‹'a, 'c›, Code‹'b, 'c | g›,),) => code"let x = ${rhs} in ${k(code"x",)}"
//│ | | Type params (TypeName(g),g53',None)
//│ | | Params 
//│ | | Type bind polymorphically? true && (0 === 0 || true || false
//│ | | 1. Typing term Lam(Tup(List((None,Fld(_,Var(rhs))), (Some(Var(k)),Fld(_,Forall(List('c),App(Var(->),Tup(List((None,Fld(_,TyApp(Var(Code),List('a, 'c)))), (None,Fld(_,TyApp(Var(Code),List('b, Union('c,TypeName(g)))))))))))))),Quoted(Let(false,Var(x),Unquoted(Var(rhs)),Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x)))))))))))
//│ | | | 1. Typing pattern Tup(List((None,Fld(_,Var(rhs))), (Some(Var(k)),Fld(_,Forall(List('c),App(Var(->),Tup(List((None,Fld(_,TyApp(Var(Code),List('a, 'c)))), (None,Fld(_,TyApp(Var(Code),List('b, Union('c,TypeName(g))))))))))))))
//│ | | | | 1. Typing pattern Var(rhs)
//│ | | | | 1. : rhs54'
//│ | | | | 1. Typing pattern Asc(Var(k),PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,TypeName(g)))))))
//│ | | | | | Typing type PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,TypeName(g))))))
//│ | | | | | | vars=Map(g -> ‘g53') newDefsInfo=Map()
//│ | | | | | | 1. type PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,TypeName(g))))))
//│ | | | | | | | 2. type Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,TypeName(g)))))
//│ | | | | | | | | 2. type Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c))))))
//│ | | | | | | | | | 2. type AppliedType(TypeName(Code),List('a, 'c))
//│ | | | | | | | | | | 2. type 'a
//│ | | | | | | | | | | => 'a56'
//│ | | | | | | | | | | 2. type 'c
//│ | | | | | | | | | | => 'c55''
//│ | | | | | | | | | => Code['a56','c55'']
//│ | | | | | | | | => (Code['a56','c55''],)
//│ | | | | | | | | 2. type AppliedType(TypeName(Code),List('b, Union('c,TypeName(g))))
//│ | | | | | | | | | 2. type 'b
//│ | | | | | | | | | => 'b57'
//│ | | | | | | | | | 2. type Union('c,TypeName(g))
//│ | | | | | | | | | | 2. type 'c
//│ | | | | | | | | | | => 'c55''
//│ | | | | | | | | | | 2. type TypeName(g)
//│ | | | | | | | | | | => ‘g53'
//│ | | | | | | | | | => ('c55'' | ‘g53')
//│ | | | | | | | | => Code['b57',('c55'' | ‘g53')]
//│ | | | | | | | => (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])
//│ | | | | | | | >>>>>>>> TreeMap()
//│ | | | | | | | Inferred poly constr: (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])  —— where 
//│ | | | | | | => ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›
//│ | | | | | => ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])› ——— 'b57', 'a56'
//│ | | | | 1. : ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›
//│ | | | 1. : (rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,)
//│ | | | 1. Typing term Quoted(Let(false,Var(x),Unquoted(Var(rhs)),Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x))))))))))
//│ | | | | 2. Typing term Let(false,Var(x),Unquoted(Var(rhs)),Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x)))))))))
//│ | | | | | 2. Typing term Unquoted(Var(rhs))
//│ | | | | | | 2. Typing term Var(rhs)
//│ | | | | | | 2. : rhs54'
//│ | | | | | | CONSTRAIN rhs54' <! Code[α58'',α59'']
//│ | | | | | |   where 
//│ | | | | | | 2. C rhs54' <! Code[α58'',α59'']    (0)
//│ | | | | | | | wrong level: 2
//│ | | | | | | | EXTR[-] Code[α58'',α59''] || 1 .. 1024  2 false
//│ | | | | | | | | EXTR[-] α58'' || 1 .. 1024  2 false
//│ | | | | | | | | => α58_60'
//│ | | | | | | | | EXTR[+] α58'' || 1 .. 1024  2 false
//│ | | | | | | | | | EXTR[+] α58_60' || 1 .. 1024  1 true
//│ | | | | | | | | | => α58_60'
//│ | | | | | | | | => α58_61'
//│ | | | | | | | | EXTR[-] α59'' || 1 .. 1024  2 false
//│ | | | | | | | | => α59_62'
//│ | | | | | | | | EXTR[+] α59'' || 1 .. 1024  2 false
//│ | | | | | | | | | EXTR[+] α59_62' || 1 .. 1024  1 true
//│ | | | | | | | | | => α59_62'
//│ | | | | | | | | => α59_63'
//│ | | | | | | | => Code[α58_60'..α58_61',α59_62'..α59_63']
//│ | | | | | | | RECONSTRAINING TVs
//│ | | | | | | | | Reconstraining α58_60'
//│ | | | | | | | | Reconstraining α58_61'
//│ | | | | | | | | Reconstraining α59_62'
//│ | | | | | | | | Reconstraining α59_63'
//│ | | | | | | | EXTR RHS  ~>  Code[α58_60'..α58_61',α59_62'..α59_63']  to 1
//│ | | | | | | |  where 
//│ 		α58_61' :> α58_60'
//│ 		α59_63' :> α59_62'
//│ | | | | | | | 2. C rhs54' <! Code[α58_60'..α58_61',α59_62'..α59_63']    (2)
//│ | | | | | | | | NEW rhs54' UB (1)
//│ | | | | | | Capture free variable type α59''
//│ | | | | | 2. : α58''
//│ | | | | | Create skolem tag ‘x64''' for VarSymbol(α58'',Var(x)) in quasiquote.
//│ | | | | | 3. Typing term Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x))))))))
//│ | | | | | | 3. Typing term App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x)))))))
//│ | | | | | | | 3. Typing term Var(k)
//│ | | | | | | | 3. : ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›
//│ | | | | | | | 3. Typing term Quoted(Var(x))
//│ | | | | | | | | 4. Typing term Var(x)
//│ | | | | | | | | | Capture free variable type ‘x64'''
//│ | | | | | | | | 4. : α58''
//│ | | | | | | | 3. : Code[α58'',‘x64''']
//│ | | | | | | | CONSTRAIN ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])› <! (Code[α58'',‘x64'''] -> α65''')
//│ | | | | | | |   where 
//│ 		α58'' :> α58_60' <: α58_61'
//│ 		α58_61' :> α58_60'
//│ | | | | | | | 3. C ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])› <! (Code[α58'',‘x64'''] -> α65''')    (0)
//│ | | | | | | | | could be distribbed: Set('c55'')
//│ | | | | | | | | cannot be distribbed: Set('c55'')
//│ | | | | | | | | INST [1]   ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›
//│ | | | | | | | |   where  
//│ | | | | | | | | TO [3] ~>  (Code['a56','c55_66'''] -> Code['b57',('c55_66''' | ‘g53')])
//│ | | | | | | | |   where  
//│ | | | | | | | | 3. C (Code['a56','c55_66'''] -> Code['b57',('c55_66''' | ‘g53')]) <! (Code[α58'',‘x64'''] -> α65''')    (2)
//│ | | | | | | | | | 3. C (Code[α58'',‘x64'''],) <! (Code['a56','c55_66'''],)    (2)
//│ | | | | | | | | | | 3. C Code[α58'',‘x64'''] <! Code['a56','c55_66''']    (3)
//│ | | | | | | | | | | | 3. C α58'' <! 'a56'    (4)
//│ | | | | | | | | | | | | NEW α58'' UB (1)
//│ | | | | | | | | | | | | 3. C α58_60' <! 'a56'    (6)
//│ | | | | | | | | | | | | | NEW α58_60' UB (1)
//│ | | | | | | | | | | | 3. C ‘x64''' <! 'c55_66'''    (4)
//│ | | | | | | | | | | | | NEW 'c55_66''' LB (3)
//│ | | | | | | | | | 3. C Code['b57',('c55_66''' | ‘g53')] <! α65'''    (2)
//│ | | | | | | | | | | NEW α65''' LB (3)
//│ | | | | | | 3. : α65'''
//│ | | | | | | CONSTRAIN α65''' <! Code[α67''',α68''']
//│ | | | | | |   where 
//│ 		α65''' :> Code['b57',('c55_66''' | ‘g53')]
//│ 		'c55_66''' :> ‘x64'''
//│ | | | | | | 3. C α65''' <! Code[α67''',α68''']    (0)
//│ | | | | | | | NEW α65''' UB (3)
//│ | | | | | | | 3. C Code['b57',('c55_66''' | ‘g53')] <! Code[α67''',α68''']    (2)
//│ | | | | | | | | 3. C 'b57' <! α67'''    (2)
//│ | | | | | | | | | NEW α67''' LB (1)
//│ | | | | | | | | 3. C ('c55_66''' | ‘g53') <! α68'''    (2)
//│ | | | | | | | | | NEW α68''' LB (3)
//│ | | | | | | Capture free variable type α68'''
//│ | | | | | 3. : α67'''
//│ | | | | | CONSTRAIN α68''' <! (‘x64''' | α69'')
//│ | | | | |   where 
//│ 		'c55_66''' :> ‘x64'''
//│ 		α68''' :> ('c55_66''' | ‘g53')
//│ | | | | | 2. C α68''' <! (‘x64''' | α69'')    (0)
//│ | | | | | | NEW α68''' UB (3)
//│ | | | | | | 2. C ('c55_66''' | ‘g53') <! (‘x64''' | α69'')    (2)
//│ | | | | | | | 2. C 'c55_66''' <! (‘x64''' | α69'')    (4)
//│ | | | | | | | | NEW 'c55_66''' UB (3)
//│ | | | | | | | | 2. C ‘x64''' <! (‘x64''' | α69'')    (6)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | 2. C ‘g53' <! (‘x64''' | α69'')    (4)
//│ | | | | | | | | 2. ARGH  DNF(1, {}∧‘g53')  <!  DNF(3, {}∧‘x64''' | α69'')
//│ | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | Consider {}∧‘g53' <: DNF(3, {}∧‘x64''' | α69'')
//│ | | | | | | | | | Possible: List({}∧‘x64''', α69'')
//│ | | | | | | | | | 2. A  {}∧‘g53'  %  List()  <!  List(‘x64''', α69'')  %  ⊥
//│ | | | | | | | | | | 2. A  {}∧‘g53'  %  List()  <!  List(α69'')  %  ‘x64'''
//│ | | | | | | | | | | | 2. C (‘g53' & ~(‘x64''')) <! α69''    (3)
//│ | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | EXTR[+] (‘g53' & ~(‘x64''')) || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | EXTR[+] ‘g53' || 2 .. 1024  1 true
//│ | | | | | | | | | | | | | => ‘g53'
//│ | | | | | | | | | | | | | EXTR[+] ~(‘x64''') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | EXTR[-] ‘x64''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | => ⊥(‘x64''')
//│ | | | | | | | | | | | | | => ~(⊥(‘x64'''))
//│ | | | | | | | | | | | | => (‘g53' & ~(⊥(‘x64''')))
//│ | | | | | | | | | | | | EXTR LHS  ~>  (‘g53' & ~(⊥(‘x64''')))  to 2
//│ | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | 2. C (‘g53' & ~(⊥(‘x64'''))) <! α69''    (5)
//│ | | | | | | | | | | | | | NEW α69'' LB (1)
//│ | | | | | Capture free variable type α69''
//│ | | | | 2. : α67'''
//│ | | | 1. : Code[α67''',(α59'' | α69'')]
//│ | | 1. : ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> Code[α67''',(α59'' | α69'')])
//│ | | CONSTRAIN ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> Code[α67''',(α59'' | α69'')]) <! bind70'
//│ | |   where 
//│ 		rhs54' <: Code[α58_60'..α58_61',α59_62'..α59_63']
//│ 		α59'' :> α59_62' <: α59_63'
//│ 		α58_60' <: 'a56'
//│ 		α58_61' :> α58_60'
//│ 		α59_63' :> α59_62'
//│ 		α67''' :> 'b57'
//│ 		α69'' :> (‘g53' & ~(⊥(‘x64''')))
//│ | | 1. C ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> Code[α67''',(α59'' | α69'')]) <! bind70'    (0)
//│ | | | wrong level: 3
//│ | | | EXTR[+] ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> Code[α67''',(α59'' | α69'')]) || 1 .. 1024  3 false
//│ | | | | EXTR[-] (rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) || 1 .. 1024  1 true
//│ | | | | => (rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,)
//│ | | | | EXTR[+] Code[α67''',(α59'' | α69'')] || 1 .. 1024  3 false
//│ | | | | | EXTR[-] α67''' || 1 .. 1024  3 false
//│ | | | | | => α67_71'
//│ | | | | | EXTR[+] α67''' || 1 .. 1024  3 false
//│ | | | | | | EXTR[+] α67_71' || 1 .. 1024  1 true
//│ | | | | | | => α67_71'
//│ | | | | | | EXTR[+] 'b57' || 1 .. 1024  1 true
//│ | | | | | | => 'b57'
//│ | | | | | => α67_72'
//│ | | | | | EXTR[-] (α59'' | α69'') || 1 .. 1024  2 false
//│ | | | | | | EXTR[-] α59'' || 1 .. 1024  2 false
//│ | | | | | | | EXTR[-] α59_63' || 1 .. 1024  1 true
//│ | | | | | | | => α59_63'
//│ | | | | | | => α59_73'
//│ | | | | | | EXTR[-] α69'' || 1 .. 1024  2 false
//│ | | | | | | => α69_74'
//│ | | | | | => (α59_73' | α69_74')
//│ | | | | | EXTR[+] (α59'' | α69'') || 1 .. 1024  2 false
//│ | | | | | | EXTR[+] α59'' || 1 .. 1024  2 false
//│ | | | | | | | EXTR[+] α59_73' || 1 .. 1024  1 true
//│ | | | | | | | => α59_73'
//│ | | | | | | | EXTR[+] α59_62' || 1 .. 1024  1 true
//│ | | | | | | | => α59_62'
//│ | | | | | | => α59_75'
//│ | | | | | | EXTR[+] α69'' || 1 .. 1024  2 false
//│ | | | | | | | EXTR[+] α69_74' || 1 .. 1024  1 true
//│ | | | | | | | => α69_74'
//│ | | | | | | | EXTR[+] (‘g53' & ~(⊥(‘x64'''))) || 1 .. 1024  1 true
//│ | | | | | | | => (‘g53' & ~(⊥(‘x64''')))
//│ | | | | | | => α69_76'
//│ | | | | | => (α59_75' | α69_76')
//│ | | | | => Code[α67_71'..α67_72',(α59_73' | α69_74')..(α59_75' | α69_76')]
//│ | | | => ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> Code[α67_71'..α67_72',(α59_73' | α69_74')..(α59_75' | α69_76')])
//│ | | | RECONSTRAINING TVs
//│ | | | | Reconstraining α67_71'
//│ | | | | Reconstraining α67_72'
//│ | | | | Reconstraining α59_73'
//│ | | | | Reconstraining α69_74'
//│ | | | | Reconstraining α59_75'
//│ | | | | Reconstraining α69_76'
//│ | | | EXTR LHS  ~>  ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> Code[α67_71'..α67_72',(α59_73' | α69_74')..(α59_75' | α69_76')])  to 1
//│ | | |  where 
//│ 		rhs54' <: Code[α58_60'..α58_61',α59_62'..α59_63']
//│ 		α58_60' <: 'a56'
//│ 		α58_61' :> α58_60'
//│ 		α59_63' :> α59_62'
//│ 		α67_72' :> α67_71' | 'b57'
//│ 		α59_73' <: α59_63'
//│ 		α59_75' :> α59_73' | α59_62'
//│ 		α69_76' :> α69_74' | (‘g53' & ~(⊥(‘x64''')))
//│ | | | 1. C ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> Code[α67_71'..α67_72',(α59_73' | α69_74')..(α59_75' | α69_76')]) <! bind70'    (2)
//│ | | | | NEW bind70' LB (1)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(bind),None,List(TypeName(g)),Left(Lam(Tup(List((None,Fld(_,Var(rhs))), (Some(Var(k)),Fld(_,Forall(List('c),App(Var(->),Tup(List((None,Fld(_,TyApp(Var(Code),List('a, 'c)))), (None,Fld(_,TyApp(Var(Code),List('b, Union('c,TypeName(g)))))))))))))),Quoted(Let(false,Var(x),Unquoted(Var(rhs)),Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x))))))))))))),((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> Code[α67''',(α59'' | α69'')])) where 
//│ 		rhs54' <: Code[α58_60'..α58_61',α59_62'..α59_63']
//│ 		α59'' :> α59_73' | α59_62' <: α59_75' & α59_63'
//│ 		α58_60' <: 'a56'
//│ 		α58_61' :> α58_60'
//│ 		α59_63' :> α59_62'
//│ 		α67''' :> α67_71' | 'b57' <: α67_72'
//│ 		α69'' :> α69_74' | (‘g53' & ~(⊥(‘x64'''))) <: α69_76'
//│ 		α67_72' :> α67_71' | 'b57'
//│ 		α59_73' <: α59_63'
//│ 		α59_75' :> α59_73' | α59_62'
//│ 		α69_76' :> α69_74' | (‘g53' & ~(⊥(‘x64''')))
//│ | CHECKING SUBSUMPTION...
//│ | CONSTRAIN ‹∀ 0. ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> Code[α67''',(α59'' | α69'')])› <! ‹∀ 0. ‹∀ 0. ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])››
//│ |   where 
//│ 		rhs54' <: Code[α58_60'..α58_61',α59_62'..α59_63']
//│ 		α59'' :> α59_73' | α59_62' <: α59_75' & α59_63'
//│ 		α58_60' <: 'a56'
//│ 		α58_61' :> α58_60'
//│ 		α59_63' :> α59_62'
//│ 		α67''' :> α67_71' | 'b57' <: α67_72'
//│ 		α69'' :> α69_74' | (‘g53' & ~(⊥(‘x64'''))) <: α69_76'
//│ 		α67_72' :> α67_71' | 'b57'
//│ 		α59_73' <: α59_63'
//│ 		α59_75' :> α59_73' | α59_62'
//│ 		α69_76' :> α69_74' | (‘g53' & ~(⊥(‘x64''')))
//│ | 0. C ‹∀ 0. ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> Code[α67''',(α59'' | α69'')])› <! ‹∀ 0. ‹∀ 0. ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])››    (0)
//│ | | BUMP TO LEVEL 1  -->  ‹∀ 0. ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])›
//│ | | where 
//│ | | 1. C ‹∀ 0. ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> Code[α67''',(α59'' | α69'')])› <! ‹∀ 0. ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])›    (2)
//│ | | | New skolem: 'a48' ~> ‘a77''
//│ | | | New skolem: 'g49' ~> ‘g78''
//│ | | | New skolem: 'b51' ~> ‘b81''
//│ | | | BUMP TO LEVEL 2  -->  ((Code[‘a77'',‘g78''], k: ‹∀ 2. (Code[‘a77'','c50_80'''] -> Code[‘b81'',('c50_80''' | ‘g78'')])›,) -> Code[‘b81'',‘g78''])
//│ | | | where 
//│ | | | 2. C ‹∀ 0. ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> Code[α67''',(α59'' | α69'')])› <! ((Code[‘a77'',‘g78''], k: ‹∀ 2. (Code[‘a77'','c50_80'''] -> Code[‘b81'',('c50_80''' | ‘g78'')])›,) -> Code[‘b81'',‘g78''])    (4)
//│ | | | | Assigning T :: T35' := ‘b81'' where 
//│ | | | | Set T35_82'' ~> T35'
//│ | | | | Assigning C :: C36' := ‘g78'' where 
//│ | | | | Set C36_83'' ~> C36'
//│ | | | | could be distribbed: HashSet(α69'', 'b57', α69_74', g53', α59_73', α59'', α67_71', α69_76', α59_63', α67''', α67_72', α59_75', α59_62')
//│ | | | | cannot be distribbed: HashSet('a56', 'b57', α58_61', α58_60', g53', rhs54', α59_63', α59_62')
//│ | | | | inner: ‹∀ 0. Code[α67''',(α59'' | α69'')]›
//│ | | | | raised: ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> ‹∀ 1. Code[α67_84'',(α59_87'' | α69_90'')]›)
//│ | | | |   where: 
//│ 		rhs54' <: Code[α58_60'..α58_61',α59_62'..α59_63']
//│ 		α58_60' <: 'a56'
//│ 		α58_61' :> α58_60'
//│ 		α59_63' :> α59_62'
//│ 		α67_84'' :> α67_85'' | 'b57' <: α67_86''
//│ 		α67_86'' :> α67_85'' | 'b57'
//│ 		α59_87'' :> α59_88'' | α59_62' <: α59_89'' & α59_63'
//│ 		α59_88'' <: α59_63'
//│ 		α59_89'' :> α59_88'' | α59_62'
//│ 		α69_90'' :> α69_91'' | (g53' & ~(⊥(‘x64'''))) <: α69_92''
//│ 		α69_92'' :> α69_91'' | (g53' & ~(⊥(‘x64''')))
//│ | | | | DISTRIB-L'  ~>  ‹∀ 0. ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> ‹∀ 1. Code[α67_84'',(α59_87'' | α69_90'')]›)›
//│ | | | | 2. C ‹∀ 0. ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> ‹∀ 1. Code[α67_84'',(α59_87'' | α69_90'')]›)› <! ((Code[‘a77'',‘g78''], k: ‹∀ 2. (Code[‘a77'','c50_80'''] -> Code[‘b81'',('c50_80''' | ‘g78'')])›,) -> Code[‘b81'',‘g78''])    (7)
//│ | | | | | Assigning T :: T35' := ‘b81'' where 
//│ | | | | | Set T35_93'' ~> T35'
//│ | | | | | Assigning C :: C36' := ‘g78'' where 
//│ | | | | | Set C36_94'' ~> C36'
//│ | | | | | could be distribbed: Set(g53', 'b57', α59_62', α59_63')
//│ | | | | | cannot be distribbed: HashSet('a56', 'b57', α58_61', α58_60', g53', rhs54', α59_63', α59_62')
//│ | | | | | INST [0]   ‹∀ 0. ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> ‹∀ 1. Code[α67_84'',(α59_87'' | α69_90'')]›)›
//│ | | | | |   where  
//│ 		rhs54' <: Code[α58_60'..α58_61',α59_62'..α59_63']
//│ 		α58_60' <: 'a56'
//│ 		α58_61' :> α58_60'
//│ 		α59_63' :> α59_62'
//│ 		α67_84'' :> α67_85'' | 'b57' <: α67_86''
//│ 		α67_86'' :> α67_85'' | 'b57'
//│ 		α59_87'' :> α59_88'' | α59_62' <: α59_89'' & α59_63'
//│ 		α59_88'' <: α59_63'
//│ 		α59_89'' :> α59_88'' | α59_62'
//│ 		α69_90'' :> α69_91'' | (g53' & ~(⊥(‘x64'''))) <: α69_92''
//│ 		α69_92'' :> α69_91'' | (g53' & ~(⊥(‘x64''')))
//│ | | | | | TO [2] ~>  ((rhs54_95'', k: ‹∀ 2. (Code['a56_97'','c55_102'''] -> Code['b57_103'',('c55_102''' | g53_104'')])›,) -> ‹∀ 2. Code[α67_114''',(α59_117''' | α69_120''')]›)
//│ | | | | |   where  
//│ 		rhs54_95'' <: Code[α58_96''..α58_98'',α59_99''..α59_100'']
//│ 		α58_96'' <: 'a56_97''
//│ 		α58_98'' :> α58_96''
//│ 		α59_100'' :> α59_99''
//│ 		α67_114''' :> α67_115''' | 'b57_103'' <: α67_116'''
//│ 		α67_116''' :> α67_115''' | 'b57_103''
//│ 		α59_117''' :> α59_118''' | α59_99'' <: α59_119''' & α59_100''
//│ 		α59_118''' <: α59_100''
//│ 		α59_119''' :> α59_118''' | α59_99''
//│ 		α69_120''' :> α69_121''' | (g53_104'' & ~(⊥(‘x64'''))) <: α69_122'''
//│ 		α69_122''' :> α69_121''' | (g53_104'' & ~(⊥(‘x64''')))
//│ | | | | | 2. C ((rhs54_95'', k: ‹∀ 2. (Code['a56_97'','c55_102'''] -> Code['b57_103'',('c55_102''' | g53_104'')])›,) -> ‹∀ 2. Code[α67_114''',(α59_117''' | α69_120''')]›) <! ((Code[‘a77'',‘g78''], k: ‹∀ 2. (Code[‘a77'','c50_80'''] -> Code[‘b81'',('c50_80''' | ‘g78'')])›,) -> Code[‘b81'',‘g78''])    (10)
//│ | | | | | | 2. C (Code[‘a77'',‘g78''], k: ‹∀ 2. (Code[‘a77'','c50_80'''] -> Code[‘b81'',('c50_80''' | ‘g78'')])›,) <! (rhs54_95'', k: ‹∀ 2. (Code['a56_97'','c55_102'''] -> Code['b57_103'',('c55_102''' | g53_104'')])›,)    (5)
//│ | | | | | | | 2. C Code[‘a77'',‘g78''] <! rhs54_95''    (6)
//│ | | | | | | | | NEW rhs54_95'' LB (2)
//│ | | | | | | | | 2. C Code[‘a77'',‘g78''] <! Code[α58_96''..α58_98'',α59_99''..α59_100'']    (9)
//│ | | | | | | | | | 2. C ‘a77'' <! α58_96''..α58_98''    (8)
//│ | | | | | | | | | | 2. C ‘a77'' <! α58_96''    (11)
//│ | | | | | | | | | | | NEW α58_96'' LB (2)
//│ | | | | | | | | | | | 2. C ‘a77'' <! 'a56_97''    (14)
//│ | | | | | | | | | | | | NEW 'a56_97'' LB (2)
//│ | | | | | | | | | 2. C ‘g78'' <! α59_99''..α59_100''    (8)
//│ | | | | | | | | | | 2. C ‘g78'' <! α59_99''    (11)
//│ | | | | | | | | | | | NEW α59_99'' LB (2)
//│ | | | | | | | 2. C ‹∀ 2. (Code[‘a77'','c50_80'''] -> Code[‘b81'',('c50_80''' | ‘g78'')])› <! ‹∀ 2. (Code['a56_97'','c55_102'''] -> Code['b57_103'',('c55_102''' | g53_104'')])›    (6)
//│ | | | | | | | | New skolem: 'c55_102''' ~> ‘c123'''
//│ | | | | | | | | BUMP TO LEVEL 3  -->  (Code['a56_97'',‘c123'''] -> Code['b57_103'',(‘c123''' | g53_104'')])
//│ | | | | | | | | where 
//│ 		'a56_97'' :> ‘a77''
//│ | | | | | | | | 3. C ‹∀ 2. (Code[‘a77'','c50_80'''] -> Code[‘b81'',('c50_80''' | ‘g78'')])› <! (Code['a56_97'',‘c123'''] -> Code['b57_103'',(‘c123''' | g53_104'')])    (9)
//│ | | | | | | | | | Passing T :: T35' <=< 'b57_103''
//│ | | | | | | | | | Assigning C :: C36' := (‘c123''' | g53_104'') where 
//│ | | | | | | | | | Set C36_124''' ~> C36'
//│ | | | | | | | | | could be distribbed: Set('c50_80''')
//│ | | | | | | | | | cannot be distribbed: Set('c50_80''')
//│ | | | | | | | | | INST [2]   ‹∀ 2. (Code[‘a77'','c50_80'''] -> Code[‘b81'',('c50_80''' | ‘g78'')])›
//│ | | | | | | | | |   where  
//│ | | | | | | | | | TO [3] ~>  (Code[‘a77'','c50_125'''] -> Code[‘b81'',('c50_125''' | ‘g78'')])
//│ | | | | | | | | |   where  
//│ | | | | | | | | | 3. C (Code[‘a77'','c50_125'''] -> Code[‘b81'',('c50_125''' | ‘g78'')]) <! (Code['a56_97'',‘c123'''] -> Code['b57_103'',(‘c123''' | g53_104'')])    (12)
//│ | | | | | | | | | | 3. C (Code['a56_97'',‘c123'''],) <! (Code[‘a77'','c50_125'''],)    (9)
//│ | | | | | | | | | | | 3. C Code['a56_97'',‘c123'''] <! Code[‘a77'','c50_125''']    (10)
//│ | | | | | | | | | | | | 3. C 'a56_97'' <! ‘a77''    (11)
//│ | | | | | | | | | | | | | NEW 'a56_97'' UB (2)
//│ | | | | | | | | | | | | | 3. C ‘a77'' <! ‘a77''    (14)
//│ | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | 3. C ‘c123''' <! 'c50_125'''    (11)
//│ | | | | | | | | | | | | | NEW 'c50_125''' LB (3)
//│ | | | | | | | | | | 3. C Code[‘b81'',('c50_125''' | ‘g78'')] <! Code['b57_103'',(‘c123''' | g53_104'')]    (9)
//│ | | | | | | | | | | | 3. C ‘b81'' <! 'b57_103''    (10)
//│ | | | | | | | | | | | | NEW 'b57_103'' LB (2)
//│ | | | | | | | | | | | 3. C ('c50_125''' | ‘g78'') <! (‘c123''' | g53_104'')    (10)
//│ | | | | | | | | | | | | 3. C 'c50_125''' <! (‘c123''' | g53_104'')    (13)
//│ | | | | | | | | | | | | | NEW 'c50_125''' UB (3)
//│ | | | | | | | | | | | | | 3. C ‘c123''' <! (‘c123''' | g53_104'')    (16)
//│ | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | 3. C ‘g78'' <! (‘c123''' | g53_104'')    (13)
//│ | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧‘g78'')  <!  DNF(3, {}∧‘c123''' | g53_104'')
//│ | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | Consider {}∧‘g78'' <: DNF(3, {}∧‘c123''' | g53_104'')
//│ | | | | | | | | | | | | | | Possible: List({}∧‘c123''', g53_104'')
//│ | | | | | | | | | | | | | | 3. A  {}∧‘g78''  %  List()  <!  List(‘c123''', g53_104'')  %  ⊥
//│ | | | | | | | | | | | | | | | 3. A  {}∧‘g78''  %  List()  <!  List(g53_104'')  %  ‘c123'''
//│ | | | | | | | | | | | | | | | | 3. C (‘g78'' & ~(‘c123''')) <! g53_104''    (12)
//│ | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | EXTR[+] (‘g78'' & ~(‘c123''')) || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | EXTR[+] ‘g78'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | => ‘g78''
//│ | | | | | | | | | | | | | | | | | | EXTR[+] ~(‘c123''') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | EXTR[-] ‘c123''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | => ⊥(‘c123''')
//│ | | | | | | | | | | | | | | | | | | => ~(⊥(‘c123'''))
//│ | | | | | | | | | | | | | | | | | => (‘g78'' & ~(⊥(‘c123''')))
//│ | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (‘g78'' & ~(⊥(‘c123''')))  to 2
//│ | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | 3. C (‘g78'' & ~(⊥(‘c123'''))) <! g53_104''    (15)
//│ | | | | | | | | | | | | | | | | | | NEW g53_104'' LB (2)
//│ | | | | | | | | UNSTASHING...
//│ | | | | | | 2. C ‹∀ 2. Code[α67_114''',(α59_117''' | α69_120''')]› <! Code[‘b81'',‘g78'']    (5)
//│ | | | | | | | Assigning T :: T35' := ‘b81'' where 
//│ | | | | | | | Set T35_126'' ~> T35'
//│ | | | | | | | Assigning C :: C36' := ‘g78'' where 
//│ | | | | | | | Set C36_127'' ~> C36'
//│ | | | | | | | 2. C ‹∀ 2. Code[α67_114''',(α59_117''' | α69_120''')]› <! (#Code<Object> & {Code#T: ‘b81'', Code#C: ‘g78''})    (8)
//│ | | | | | | | | 2. C ‹∀ 2. Code[α67_114''',(α59_117''' | α69_120''')]› <! #Code<Object>    (11)
//│ | | | | | | | | | Passing T :: T35' <=< α67_114'''
//│ | | | | | | | | | Assigning C :: C36' := (α59_117''' | α69_120''') where 
//│ 		α59_99'' :> ‘g78''
//│ 		α59_100'' :> α59_99''
//│ 		g53_104'' :> (‘g78'' & ~(⊥(‘c123''')))
//│ 		α59_117''' :> α59_118''' | α59_99'' <: α59_119''' & α59_100''
//│ 		α59_118''' <: α59_100''
//│ 		α59_119''' :> α59_118''' | α59_99''
//│ 		α69_120''' :> α69_121''' | (g53_104'' & ~(⊥(‘x64'''))) <: α69_122'''
//│ 		α69_122''' :> α69_121''' | (g53_104'' & ~(⊥(‘x64''')))
//│ | | | | | | | | | Set C36_128''' ~> C36'
//│ | | | | | | | | | Passing T :: T35' <=< α67_114'''
//│ | | | | | | | | | Assigning C :: C36' := (α59_117''' | α69_120''') where 
//│ 		α59_99'' :> ‘g78''
//│ 		α59_100'' :> α59_99''
//│ 		g53_104'' :> (‘g78'' & ~(⊥(‘c123''')))
//│ 		α59_117''' :> α59_118''' | α59_99'' <: α59_119''' & α59_100''
//│ 		α59_118''' <: α59_100''
//│ 		α59_119''' :> α59_118''' | α59_99''
//│ 		α69_120''' :> α69_121''' | (g53_104'' & ~(⊥(‘x64'''))) <: α69_122'''
//│ 		α69_122''' :> α69_121''' | (g53_104'' & ~(⊥(‘x64''')))
//│ | | | | | | | | | Set C36_129''' ~> C36'
//│ | | | | | | | | | INST [2]   ‹∀ 2. Code[α67_114''',(α59_117''' | α69_120''')]›
//│ | | | | | | | | |   where  
//│ 		α59_99'' :> ‘g78''
//│ 		α59_100'' :> α59_99''
//│ 		'b57_103'' :> ‘b81''
//│ 		g53_104'' :> (‘g78'' & ~(⊥(‘c123''')))
//│ 		α67_114''' :> α67_115''' | 'b57_103'' <: α67_116'''
//│ 		α67_116''' :> α67_115''' | 'b57_103''
//│ 		α59_117''' :> α59_118''' | α59_99'' <: α59_119''' & α59_100''
//│ 		α59_118''' <: α59_100''
//│ 		α59_119''' :> α59_118''' | α59_99''
//│ 		α69_120''' :> α69_121''' | (g53_104'' & ~(⊥(‘x64'''))) <: α69_122'''
//│ 		α69_122''' :> α69_121''' | (g53_104'' & ~(⊥(‘x64''')))
//│ | | | | | | | | | TO [2] ~>  Code[α67_130'',(α59_133'' | α69_136'')]
//│ | | | | | | | | |   where  
//│ 		α59_99'' :> ‘g78''
//│ 		α59_100'' :> α59_99''
//│ 		'b57_103'' :> ‘b81''
//│ 		g53_104'' :> (‘g78'' & ~(⊥(‘c123''')))
//│ 		α67_130'' :> α67_131'' | 'b57_103'' <: α67_132''
//│ 		α67_132'' :> α67_131'' | 'b57_103''
//│ 		α59_133'' :> α59_134'' | α59_99'' <: α59_135'' & α59_100''
//│ 		α59_134'' <: α59_100''
//│ 		α59_135'' :> α59_134'' | α59_99''
//│ 		α69_136'' :> α69_137'' | (g53_104'' & ~(⊥(‘x64'''))) <: α69_138''
//│ 		α69_138'' :> α69_137'' | (g53_104'' & ~(⊥(‘x64''')))
//│ | | | | | | | | | 2. C Code[α67_130'',(α59_133'' | α69_136'')] <! #Code<Object>    (14)
//│ | | | | | | | | | | Passing T :: T35' <=< α67_130''
//│ | | | | | | | | | | Assigning C :: C36' := (α59_133'' | α69_136'') where 
//│ 		α59_99'' :> ‘g78''
//│ 		α59_100'' :> α59_99''
//│ 		g53_104'' :> (‘g78'' & ~(⊥(‘c123''')))
//│ 		α59_133'' :> α59_134'' | α59_99'' <: α59_135'' & α59_100''
//│ 		α59_134'' <: α59_100''
//│ 		α59_135'' :> α59_134'' | α59_99''
//│ 		α69_136'' :> α69_137'' | (g53_104'' & ~(⊥(‘x64'''))) <: α69_138''
//│ 		α69_138'' :> α69_137'' | (g53_104'' & ~(⊥(‘x64''')))
//│ | | | | | | | | | | Set C36_139'' ~> C36'
//│ | | | | | | | | | | 2. C (#Code<Object> & {Code#T: α67_130'', Code#C: (α59_133'' | α69_136'')}) <! #Code<Object>    (17)
//│ | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | 2. C ‹∀ 2. Code[α67_114''',(α59_117''' | α69_120''')]› <! {Code#T: ‘b81'', Code#C: ‘g78''}    (11)
//│ | | | | | | | | | Passing T :: T35' <=< α67_114'''
//│ | | | | | | | | | Assigning C :: C36' := (α59_117''' | α69_120''') where 
//│ 		α59_99'' :> ‘g78''
//│ 		α59_100'' :> α59_99''
//│ 		g53_104'' :> (‘g78'' & ~(⊥(‘c123''')))
//│ 		α59_117''' :> α59_118''' | α59_99'' <: α59_119''' & α59_100''
//│ 		α59_118''' <: α59_100''
//│ 		α59_119''' :> α59_118''' | α59_99''
//│ 		α69_120''' :> α69_121''' | (g53_104'' & ~(⊥(‘x64'''))) <: α69_122'''
//│ 		α69_122''' :> α69_121''' | (g53_104'' & ~(⊥(‘x64''')))
//│ | | | | | | | | | Set C36_140''' ~> C36'
//│ | | | | | | | | | 2. ARGH  DNF(2, #Code<Object>{Code#T: α67_114''', Code#C: (α59_117''' | α69_120''')})  <!  DNF(2, {Code#T: ‘b81'', Code#C: ‘g78''})
//│ | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | Consider #Code<Object>{Code#T: α67_141'', Code#C: (α59_144'' | α69_147'')} <: DNF(2, {Code#T: ‘b81'', Code#C: ‘g78''})
//│ | | | | | | | | | | Possible: List({Code#T: ‘b81'', Code#C: ‘g78''})
//│ | | | | | | | | | | 2. A  #Code<Object>{Code#T: α67_141'', Code#C: (α59_144'' | α69_147'')}  %  List()  <!  List({Code#T: ‘b81'', Code#C: ‘g78''})  %  ⊥
//│ | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α67_141'', Code#C: (α59_144'' | α69_147'')}  %  List()  <!  List(((⊤ & {Code#T: ‘b81''}) & {Code#C: ‘g78''}))  %  ⊥
//│ | | | | | | | | | | | | Case.1
//│ | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α67_141'', Code#C: (α59_144'' | α69_147'')}  %  List()  <!  List((⊤ & {Code#T: ‘b81''}))  %  ⊥
//│ | | | | | | | | | | | | | Case.1.1
//│ | | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α67_141'', Code#C: (α59_144'' | α69_147'')}  %  List()  <!  List(⊤)  %  ⊥
//│ | | | | | | | | | | | | | Case.1.2
//│ | | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α67_141'', Code#C: (α59_144'' | α69_147'')}  %  List()  <!  List({Code#T: ‘b81''})  %  ⊥
//│ | | | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α67_141'', Code#C: (α59_144'' | α69_147'')}  %  List()  <!  List()  %  {Code#T:‘b81''}
//│ | | | | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α67_141'', Code#C: (α59_144'' | α69_147'')}  %  List()  <!  List()  %  |{Code#T:‘b81''}
//│ | | | | | | | | | | | | | | | | Looking up field Code#T in Some(Code) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | Lookup Code.Code#T : Some(mut T35'..T35') where 
//│ | | | | | | | | | | | | | | | | | Fresh[0] Code.Code#T : Some(mut α67_141''..α67_141'') where Some(
//│ 		'b57_103'' :> ‘b81''
//│ 		α67_141'' :> α67_142'' | 'b57_103'' <: α67_143''
//│ 		α67_143'' :> α67_142'' | 'b57_103'')
//│ | | | | | | | | | | | | | | | | |   & Some(α67_141'')  (from refinement)
//│ | | | | | | | | | | | | | | | | 2. C α67_141'' <! ‘b81''    (8)
//│ | | | | | | | | | | | | | | | | | NEW α67_141'' UB (2)
//│ | | | | | | | | | | | | | | | | | 2. C α67_142'' <! ‘b81''    (11)
//│ | | | | | | | | | | | | | | | | | | NEW α67_142'' UB (2)
//│ | | | | | | | | | | | | | | | | | 2. C 'b57_103'' <! ‘b81''    (11)
//│ | | | | | | | | | | | | | | | | | | NEW 'b57_103'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 2. C ‘b81'' <! ‘b81''    (14)
//│ | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | Case.2
//│ | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α67_141'', Code#C: (α59_144'' | α69_147'')}  %  List()  <!  List({Code#C: ‘g78''})  %  ⊥
//│ | | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α67_141'', Code#C: (α59_144'' | α69_147'')}  %  List()  <!  List()  %  {Code#C:‘g78''}
//│ | | | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α67_141'', Code#C: (α59_144'' | α69_147'')}  %  List()  <!  List()  %  |{Code#C:‘g78''}
//│ | | | | | | | | | | | | | | | Looking up field Code#C in Some(Code) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | Lookup Code.Code#C : Some(mut C36'..C36') where 
//│ | | | | | | | | | | | | | | | | Fresh[0] Code.Code#C : Some(mut (α59_144'' | α69_147'')..(α59_144'' | α69_147'')) where Some(
//│ 		α59_99'' :> ‘g78''
//│ 		α59_100'' :> α59_99''
//│ 		g53_104'' :> (‘g78'' & ~(⊥(‘c123''')))
//│ 		α59_144'' :> α59_145'' | α59_99'' <: α59_146'' & α59_100''
//│ 		α59_145'' <: α59_100''
//│ 		α59_146'' :> α59_145'' | α59_99''
//│ 		α69_147'' :> α69_148'' | (g53_104'' & ~(⊥(‘x64'''))) <: α69_149''
//│ 		α69_149'' :> α69_148'' | (g53_104'' & ~(⊥(‘x64'''))))
//│ | | | | | | | | | | | | | | | |   & Some((α59_144'' | α69_147''))  (from refinement)
//│ | | | | | | | | | | | | | | | 2. C (α59_144'' | α69_147'') <! ‘g78''    (8)
//│ | | | | | | | | | | | | | | | | 2. C α59_144'' <! ‘g78''    (11)
//│ | | | | | | | | | | | | | | | | | NEW α59_144'' UB (2)
//│ | | | | | | | | | | | | | | | | | 2. C α59_145'' <! ‘g78''    (14)
//│ | | | | | | | | | | | | | | | | | | NEW α59_145'' UB (2)
//│ | | | | | | | | | | | | | | | | | 2. C α59_99'' <! ‘g78''    (14)
//│ | | | | | | | | | | | | | | | | | | NEW α59_99'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 2. C ‘g78'' <! ‘g78''    (17)
//│ | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | 2. C α69_147'' <! ‘g78''    (11)
//│ | | | | | | | | | | | | | | | | | NEW α69_147'' UB (2)
//│ | | | | | | | | | | | | | | | | | 2. C α69_148'' <! ‘g78''    (14)
//│ | | | | | | | | | | | | | | | | | | NEW α69_148'' UB (2)
//│ | | | | | | | | | | | | | | | | | 2. C (g53_104'' & ~(⊥(‘x64'''))) <! ‘g78''    (14)
//│ | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(2, g53_104''∧~(⊥(‘x64''')))  <!  DNF(2, {}∧‘g78'')
//│ | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | 2. C g53_104'' <! ‘g78''    (17)
//│ | | | | | | | | | | | | | | | | | | | | NEW g53_104'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | | 2. C (‘g78'' & ~(⊥(‘c123'''))) <! ‘g78''    (20)
//│ | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | UNSTASHING...
//│ | | UNSTASHING...
//│ | CHECKING SUBSUMPTION...
//│ | CONSTRAIN ‹∀ 0. ‹∀ 0. ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])›› <! ‹∀ 0. ‹∀ 0. ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])››
//│ |   where 
//│ | 0. C ‹∀ 0. ‹∀ 0. ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])›› <! ‹∀ 0. ‹∀ 0. ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])››    (0)
//│ | | Already a subtype by <:<
//│ | Typing unit statements
//│ | : None
//│ ======== TYPED ========
//│ fun bind: ‹∀ 0. ((rhs54', k: ‹∀ 1. (Code['a56','c55''] -> Code['b57',('c55'' | ‘g53')])›,) -> Code[α67''',(α59'' | α69'')])› where 
//│ |		rhs54' <: Code[α58_60'..α58_61',α59_62'..α59_63']
//│ |		α59'' :> α59_73' | α59_62' <: α59_75' & α59_63'
//│ |		α58_60' <: 'a56'
//│ |		α58_61' :> α58_60'
//│ |		α59_63' :> α59_62'
//│ |		α67''' :> α67_71' | 'b57' <: α67_72'
//│ |		α69'' :> α69_74' | (‘g53' & ~(⊥(‘x64'''))) <: α69_76'
//│ |		α67_72' :> α67_71' | 'b57'
//│ |		α59_73' <: α59_63'
//│ |		α59_75' :> α59_73' | α59_62'
//│ |		α69_76' :> α69_74' | (‘g53' & ~(⊥(‘x64''')))
//│ fun bind: ‹∀ 0. ‹∀ 0. ((Code['a48','g49'], k: ‹∀ 1. (Code['a48','c50''] -> Code['b51',('c50'' | 'g49')])›,) -> Code['b51','g49'])›› where 
//│ expand ‹∀ 0. ((Code['a56_185',α59_186'], k: ‹∀ 1. (Code['a56_185','c55_187''] -> Code['b57_188',('c55_187'' | g53_189')])›,) -> Code['b57_188',(α59_186' | (g53_189' & ~(⊥(‘x64'''))))])›
//│ | expand ((Code['a56_185',α59_186'], k: ‹∀ 1. (Code['a56_185','c55_187''] -> Code['b57_188',('c55_187'' | g53_189')])›,) -> Code['b57_188',(α59_186' | (g53_189' & ~(⊥(‘x64'''))))])
//│ | | expand (Code['a56_185',α59_186'], k: ‹∀ 1. (Code['a56_185','c55_187''] -> Code['b57_188',('c55_187'' | g53_189')])›,)
//│ | | | expand Code['a56_185',α59_186']
//│ | | | | expand 'a56_185'
//│ | | | | | expand ⊥
//│ | | | | | ~> Bot
//│ | | | | | expand ⊤
//│ | | | | | ~> Top
//│ | | | | ~> α185
//│ | | | | expand α59_186'
//│ | | | | | expand ⊥
//│ | | | | | ~> Bot
//│ | | | | | expand ⊤
//│ | | | | | ~> Top
//│ | | | | ~> α186
//│ | | | ~> AppliedType(TypeName(Code),List(α185, α186))
//│ | | | expand ‹∀ 1. (Code['a56_185','c55_187''] -> Code['b57_188',('c55_187'' | g53_189')])›
//│ | | | | expand (Code['a56_185','c55_187''] -> Code['b57_188',('c55_187'' | g53_189')])
//│ | | | | | expand (Code['a56_185','c55_187''],)
//│ | | | | | | expand Code['a56_185','c55_187'']
//│ | | | | | | | expand 'a56_185'
//│ | | | | | | | ~> α185
//│ | | | | | | | expand 'c55_187''
//│ | | | | | | | | expand ⊥
//│ | | | | | | | | ~> Bot
//│ | | | | | | | | expand ⊤
//│ | | | | | | | | ~> Top
//│ | | | | | | | ~> α187
//│ | | | | | | ~> AppliedType(TypeName(Code),List(α185, α187))
//│ | | | | | ~> Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α185, α187))))))
//│ | | | | | expand Code['b57_188',('c55_187'' | g53_189')]
//│ | | | | | | expand 'b57_188'
//│ | | | | | | | expand ⊥
//│ | | | | | | | ~> Bot
//│ | | | | | | | expand ⊤
//│ | | | | | | | ~> Top
//│ | | | | | | ~> α188
//│ | | | | | | expand ('c55_187'' | g53_189')
//│ | | | | | | | expand 'c55_187''
//│ | | | | | | | ~> α187
//│ | | | | | | | expand g53_189'
//│ | | | | | | | | expand ⊥
//│ | | | | | | | | ~> Bot
//│ | | | | | | | | expand ⊤
//│ | | | | | | | | ~> Top
//│ | | | | | | | ~> α189
//│ | | | | | | ~> Union(α187,α189)
//│ | | | | | ~> AppliedType(TypeName(Code),List(α188, Union(α187,α189)))
//│ | | | | ~> Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α185, α187)))))),AppliedType(TypeName(Code),List(α188, Union(α187,α189))))
//│ | | | ~> PolyType(List(Right(α187)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α185, α187)))))),AppliedType(TypeName(Code),List(α188, Union(α187,α189)))))
//│ | | ~> Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α185, α186)))), (Some(Var(k)),Field(None,PolyType(List(Right(α187)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α185, α187)))))),AppliedType(TypeName(Code),List(α188, Union(α187,α189)))))))))
//│ | | expand Code['b57_188',(α59_186' | (g53_189' & ~(⊥(‘x64'''))))]
//│ | | | expand 'b57_188'
//│ | | | ~> α188
//│ | | | expand (α59_186' | (g53_189' & ~(⊥(‘x64'''))))
//│ | | | | expand α59_186'
//│ | | | | ~> α186
//│ | | | | expand (g53_189' & ~(⊥(‘x64''')))
//│ | | | | | expand g53_189'
//│ | | | | | ~> α189
//│ | | | | | expand ~(⊥(‘x64'''))
//│ | | | | | | expand ⊥(‘x64''')
//│ | | | | | | ~> α194
//│ | | | | | ~> Neg(α194)
//│ | | | | ~> Inter(α189,Neg(α194))
//│ | | | ~> Union(α186,Inter(α189,Neg(α194)))
//│ | | ~> AppliedType(TypeName(Code),List(α188, Union(α186,Inter(α189,Neg(α194)))))
//│ | ~> Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α185, α186)))), (Some(Var(k)),Field(None,PolyType(List(Right(α187)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α185, α187)))))),AppliedType(TypeName(Code),List(α188, Union(α187,α189))))))))),AppliedType(TypeName(Code),List(α188, Union(α186,Inter(α189,Neg(α194))))))
//│ ~> PolyType(List(Right(α185), Right(α186), Right(α188), Right(α189)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α185, α186)))), (Some(Var(k)),Field(None,PolyType(List(Right(α187)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α185, α187)))))),AppliedType(TypeName(Code),List(α188, Union(α187,α189))))))))),AppliedType(TypeName(Code),List(α188, Union(α186,Inter(α189,Neg(α194)))))))
//│ expand ‹∀ 0. ((Code['a48_190','g49_191'], k: ‹∀ 1. (Code['a48_190','c50_192''] -> Code['b51_193',('c50_192'' | 'g49_191')])›,) -> Code['b51_193','g49_191'])›
//│ | expand ((Code['a48_190','g49_191'], k: ‹∀ 1. (Code['a48_190','c50_192''] -> Code['b51_193',('c50_192'' | 'g49_191')])›,) -> Code['b51_193','g49_191'])
//│ | | expand (Code['a48_190','g49_191'], k: ‹∀ 1. (Code['a48_190','c50_192''] -> Code['b51_193',('c50_192'' | 'g49_191')])›,)
//│ | | | expand Code['a48_190','g49_191']
//│ | | | | expand 'a48_190'
//│ | | | | | expand ⊥
//│ | | | | | ~> Bot
//│ | | | | | expand ⊤
//│ | | | | | ~> Top
//│ | | | | ~> α190
//│ | | | | expand 'g49_191'
//│ | | | | | expand ⊥
//│ | | | | | ~> Bot
//│ | | | | | expand ⊤
//│ | | | | | ~> Top
//│ | | | | ~> α191
//│ | | | ~> AppliedType(TypeName(Code),List(α190, α191))
//│ | | | expand ‹∀ 1. (Code['a48_190','c50_192''] -> Code['b51_193',('c50_192'' | 'g49_191')])›
//│ | | | | expand (Code['a48_190','c50_192''] -> Code['b51_193',('c50_192'' | 'g49_191')])
//│ | | | | | expand (Code['a48_190','c50_192''],)
//│ | | | | | | expand Code['a48_190','c50_192'']
//│ | | | | | | | expand 'a48_190'
//│ | | | | | | | ~> α190
//│ | | | | | | | expand 'c50_192''
//│ | | | | | | | | expand ⊥
//│ | | | | | | | | ~> Bot
//│ | | | | | | | | expand ⊤
//│ | | | | | | | | ~> Top
//│ | | | | | | | ~> α192
//│ | | | | | | ~> AppliedType(TypeName(Code),List(α190, α192))
//│ | | | | | ~> Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α190, α192))))))
//│ | | | | | expand Code['b51_193',('c50_192'' | 'g49_191')]
//│ | | | | | | expand 'b51_193'
//│ | | | | | | | expand ⊥
//│ | | | | | | | ~> Bot
//│ | | | | | | | expand ⊤
//│ | | | | | | | ~> Top
//│ | | | | | | ~> α193
//│ | | | | | | expand ('c50_192'' | 'g49_191')
//│ | | | | | | | expand 'c50_192''
//│ | | | | | | | ~> α192
//│ | | | | | | | expand 'g49_191'
//│ | | | | | | | ~> α191
//│ | | | | | | ~> Union(α192,α191)
//│ | | | | | ~> AppliedType(TypeName(Code),List(α193, Union(α192,α191)))
//│ | | | | ~> Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α190, α192)))))),AppliedType(TypeName(Code),List(α193, Union(α192,α191))))
//│ | | | ~> PolyType(List(Right(α192)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α190, α192)))))),AppliedType(TypeName(Code),List(α193, Union(α192,α191)))))
//│ | | ~> Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α190, α191)))), (Some(Var(k)),Field(None,PolyType(List(Right(α192)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α190, α192)))))),AppliedType(TypeName(Code),List(α193, Union(α192,α191)))))))))
//│ | | expand Code['b51_193','g49_191']
//│ | | | expand 'b51_193'
//│ | | | ~> α193
//│ | | | expand 'g49_191'
//│ | | | ~> α191
//│ | | ~> AppliedType(TypeName(Code),List(α193, α191))
//│ | ~> Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α190, α191)))), (Some(Var(k)),Field(None,PolyType(List(Right(α192)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α190, α192)))))),AppliedType(TypeName(Code),List(α193, Union(α192,α191))))))))),AppliedType(TypeName(Code),List(α193, α191)))
//│ ~> PolyType(List(Right(α190), Right(α191), Right(α193)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α190, α191)))), (Some(Var(k)),Field(None,PolyType(List(Right(α192)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α190, α192)))))),AppliedType(TypeName(Code),List(α193, Union(α192,α191))))))))),AppliedType(TypeName(Code),List(α193, α191))))
//│ fun bind: forall 'a 'd 'b 'g. (Code['a, 'd], k: forall 'c. Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'd | 'g & ~??x]
//│ fun (%>) bind: forall 'a0 'g0 'b0. (Code['a0, 'g0], k: forall 'c0. Code['a0, 'c0] -> Code['b0, 'c0 | 'g0]) -> Code['b0, 'g0]


let f(k) = bind of code"123", k
//│ let f: forall 'b 'g. (forall 'c. Code[123, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]

f(id)
//│ Code[123, nothing]

bind of code"123", x => x
//│ Code[123, nothing]

bind of code"123", x =>
bind of code"${x} + 1", y =>
code"${y} + ${y}"
//│ Code[Int, nothing]

code"123" %> x =>
code"${x} + 1" %> y =>
code"${y} + ${y}"
//│ Code[Int, nothing]


fun test(x, y) = code"${x} + ${y}"
//│ fun test: forall 'a. (Code[Int, 'a], Code[Int, 'a]) -> Code[Int, 'a]

fun test2(x, y, f) = code"${x} + ${y}" %> f
//│ fun test2: forall 'g 'b. (Code[Int, 'g], Code[Int, 'g], forall 'c. Code[Int, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]

code"(x, y) => ${test2(code"x + 1", code"y * 2", tmp => code"[${tmp}, ${tmp}]") }"
//│ Code[(Int, Int) -> [Int, Int], nothing]



// * Naive version

fun gib_naive(n) =
  let rec body(x, y) = case
    0 then x
    1 then y
    n then code"${body(x, code"${x} + ${y}")(n - 1)}"
  code"(x, y) => ${body(code"x", code"y")(n)}"
//│ fun gib_naive: (0 | 1 | Int & ~0 & ~1) -> Code[(Int, Int) -> Int, nothing]

let gn5 = gib_naive(5)
run(gn5)
//│ let gn5: Code[(Int, Int) -> Int, nothing]
//│ (Int, Int) -> Int


// * Expected: needs polymorphic recursion
fun gib(n) =
  let rec body(x, y) = case
    0 then x
    1 then y
    n then code"${x} + ${y}" %> z => body(x, z)(n - 1)
  code"(x, y) => ${body(code"x", code"y")(n)}"
//│ fun gib: (0 | 1 | Int & ~0 & ~1) -> Code[(Int, Int) -> Int, ??c & ~??y]



// * Better version

fun body: forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
fun body(x, y) = case
  0 then x
  1 then y
  n then code"${x} + ${y}" %> z => body(x, z)(n - 1)
//│ fun body: forall 'g. (Code[Int, 'g], Code[Int, 'g]) -> (0 | 1 | Int & ~0 & ~1) -> Code[Int, 'g]
//│ fun body: forall 'g0. (Code[Int, 'g0], Code[Int, 'g0]) -> Int -> Code[Int, 'g0]

fun gib(n) =
  code"(x, y) => ${body(code"x", code"y")(n)}"
//│ fun gib: Int -> Code[(Int, Int) -> Int, nothing]

let gn5 = gib(5)
run(gn5)
//│ let gn5: Code[(Int, Int) -> Int, nothing]
//│ (Int, Int) -> Int


// * Alternative version:
fun body: forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
fun body(x, y) = case
  0 then x
  1 then y
  n then code"let tmp = ${x} + ${y} in ${body(x, code"tmp")(n - 1)}"
//│ fun body: forall 'a. (Code[Int, 'a], Code[Int, 'a]) -> (0 | 1 | Int & ~0 & ~1) -> Code[Int, 'a]
//│ fun body: forall 'g. (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]

fun gib(n) =
  code"(x, y) => ${body(code"x", code"y")(n)}"
//│ fun gib: Int -> Code[(Int, Int) -> Int, nothing]

let gn5 = gib(5)
run(gn5)
//│ let gn5: Code[(Int, Int) -> Int, nothing]
//│ (Int, Int) -> Int









