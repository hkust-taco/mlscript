:NewDefs
:NoJS


:d
fun (%>) bind: (Code['a, 'g], k: forall 'c: Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]
fun bind[g](rhs, k: forall 'c: Code['a, 'c] -> Code['b, 'c | g]) = code"let x = ${rhs} in ${k(code"x")}"
//│ 0. Typing TypingUnit(List(NuFunDef(None,Var(bind),Some(Var(%>)),List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'g)))), (Some(Var(k)),Field(None,PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g))))))))),AppliedType(TypeName(Code),List('b, 'g)))))), NuFunDef(None,Var(bind),None,List(TypeName(g)),Left(Lam(Tup(List((None,Fld(_,Var(rhs))), (Some(Var(k)),Fld(_,Forall(List('c),App(Var(->),Tup(List((None,Fld(_,TyApp(Var(Code),List('a, 'c)))), (None,Fld(_,TyApp(Var(Code),List('b, Union('c,TypeName(g)))))))))))))),Quoted(Let(false,Var(x),Unquoted(Var(rhs)),Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x)))))))))))))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(bind),Some(Var(%>)),List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'g)))), (Some(Var(k)),Field(None,PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g))))))))),AppliedType(TypeName(Code),List('b, 'g))))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(bind),None,List(TypeName(g)),Left(Lam(Tup(List((None,Fld(_,Var(rhs))), (Some(Var(k)),Fld(_,Forall(List('c),App(Var(->),Tup(List((None,Fld(_,TyApp(Var(Code),List('a, 'c)))), (None,Fld(_,TyApp(Var(Code),List('b, Union('c,TypeName(g)))))))))))))),Quoted(Let(false,Var(x),Unquoted(Var(rhs)),Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x)))))))))))))
//│ | Completing fun (%>) bind: (Code['a, 'g], k: forall 'c. Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]
//│ | | Type params 
//│ | | Params 
//│ | | Typing type Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'g)))), (Some(Var(k)),Field(None,PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g))))))))),AppliedType(TypeName(Code),List('b, 'g)))
//│ | | | vars=Map() newDefsInfo=Map()
//│ | | | 1. type Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'g)))), (Some(Var(k)),Field(None,PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g))))))))),AppliedType(TypeName(Code),List('b, 'g)))
//│ | | | | 1. type Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'g)))), (Some(Var(k)),Field(None,PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g)))))))))
//│ | | | | | 1. type AppliedType(TypeName(Code),List('a, 'g))
//│ | | | | | | 1. type 'a
//│ | | | | | | => 'a58'
//│ | | | | | | 1. type 'g
//│ | | | | | | => 'g59'
//│ | | | | | => Code['a58','g59']
//│ | | | | | 1. type PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g)))))
//│ | | | | | | 2. type Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g))))
//│ | | | | | | | 2. type Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c))))))
//│ | | | | | | | | 2. type AppliedType(TypeName(Code),List('a, 'c))
//│ | | | | | | | | | 2. type 'a
//│ | | | | | | | | | => 'a58'
//│ | | | | | | | | | 2. type 'c
//│ | | | | | | | | | => 'c60''
//│ | | | | | | | | => Code['a58','c60'']
//│ | | | | | | | => (Code['a58','c60''],)
//│ | | | | | | | 2. type AppliedType(TypeName(Code),List('b, Union('c,'g)))
//│ | | | | | | | | 2. type 'b
//│ | | | | | | | | => 'b61'
//│ | | | | | | | | 2. type Union('c,'g)
//│ | | | | | | | | | 2. type 'c
//│ | | | | | | | | | => 'c60''
//│ | | | | | | | | | 2. type 'g
//│ | | | | | | | | | => 'g59'
//│ | | | | | | | | => ('c60'' | 'g59')
//│ | | | | | | | => Code['b61',('c60'' | 'g59')]
//│ | | | | | | => (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])
//│ | | | | | | >>>>>>>> TreeMap()
//│ | | | | | | Inferred poly constr: (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])  —— where 
//│ | | | | | => ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›
//│ | | | | => (Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,)
//│ | | | | 1. type AppliedType(TypeName(Code),List('b, 'g))
//│ | | | | | 1. type 'b
//│ | | | | | => 'b61'
//│ | | | | | 1. type 'g
//│ | | | | | => 'g59'
//│ | | | | => Code['b61','g59']
//│ | | | => ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])
//│ | | => ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59']) ——— 'b61', 'a58', 'g59'
//│ | | >>>>>>>> TreeMap()
//│ | | Inferred poly constr: ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])  —— where 
//│ | | Type bind polymorphically? true && (0 === 0 || false || false
//│ | | CONSTRAIN ‹∀ 0. ‹∀ 0. ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])›› <! bind62'
//│ | |   where 
//│ | | 1. C ‹∀ 0. ‹∀ 0. ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])›› <! bind62'    (0)
//│ | | | NEW bind62' LB (0)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(bind),Some(Var(%>)),List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'g)))), (Some(Var(k)),Field(None,PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,'g))))))))),AppliedType(TypeName(Code),List('b, 'g)))))),‹∀ 0. ‹∀ 0. ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])››) where 
//│ | Completing fun bind = (rhs, k: forall 'c. ->(Code‹'a, 'c›, Code‹'b, 'c | g›,),) => code"let x = ${rhs} in ${k(code"x",)}"
//│ | | Type params (TypeName(g),g63',None)
//│ | | Params 
//│ | | Type bind polymorphically? true && (0 === 0 || true || false
//│ | | 1. Typing term Lam(Tup(List((None,Fld(_,Var(rhs))), (Some(Var(k)),Fld(_,Forall(List('c),App(Var(->),Tup(List((None,Fld(_,TyApp(Var(Code),List('a, 'c)))), (None,Fld(_,TyApp(Var(Code),List('b, Union('c,TypeName(g)))))))))))))),Quoted(Let(false,Var(x),Unquoted(Var(rhs)),Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x)))))))))))
//│ | | | 1. Typing pattern Tup(List((None,Fld(_,Var(rhs))), (Some(Var(k)),Fld(_,Forall(List('c),App(Var(->),Tup(List((None,Fld(_,TyApp(Var(Code),List('a, 'c)))), (None,Fld(_,TyApp(Var(Code),List('b, Union('c,TypeName(g))))))))))))))
//│ | | | | 1. Typing pattern Var(rhs)
//│ | | | | 1. : rhs64'
//│ | | | | 1. Typing pattern Asc(Var(k),PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,TypeName(g)))))))
//│ | | | | | Typing type PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,TypeName(g))))))
//│ | | | | | | vars=Map(g -> ‘g63') newDefsInfo=Map()
//│ | | | | | | 1. type PolyType(List(Right('c)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,TypeName(g))))))
//│ | | | | | | | 2. type Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c)))))),AppliedType(TypeName(Code),List('b, Union('c,TypeName(g)))))
//│ | | | | | | | | 2. type Tuple(List((None,Field(None,AppliedType(TypeName(Code),List('a, 'c))))))
//│ | | | | | | | | | 2. type AppliedType(TypeName(Code),List('a, 'c))
//│ | | | | | | | | | | 2. type 'a
//│ | | | | | | | | | | => 'a66'
//│ | | | | | | | | | | 2. type 'c
//│ | | | | | | | | | | => 'c65''
//│ | | | | | | | | | => Code['a66','c65'']
//│ | | | | | | | | => (Code['a66','c65''],)
//│ | | | | | | | | 2. type AppliedType(TypeName(Code),List('b, Union('c,TypeName(g))))
//│ | | | | | | | | | 2. type 'b
//│ | | | | | | | | | => 'b67'
//│ | | | | | | | | | 2. type Union('c,TypeName(g))
//│ | | | | | | | | | | 2. type 'c
//│ | | | | | | | | | | => 'c65''
//│ | | | | | | | | | | 2. type TypeName(g)
//│ | | | | | | | | | | => ‘g63'
//│ | | | | | | | | | => ('c65'' | ‘g63')
//│ | | | | | | | | => Code['b67',('c65'' | ‘g63')]
//│ | | | | | | | => (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])
//│ | | | | | | | >>>>>>>> TreeMap()
//│ | | | | | | | Inferred poly constr: (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])  —— where 
//│ | | | | | | => ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›
//│ | | | | | => ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])› ——— 'b67', 'a66'
//│ | | | | 1. : ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›
//│ | | | 1. : (rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,)
//│ | | | 1. Typing term Quoted(Let(false,Var(x),Unquoted(Var(rhs)),Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x))))))))))
//│ | | | | 2. Typing term Let(false,Var(x),Unquoted(Var(rhs)),Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x)))))))))
//│ | | | | | 2. Typing term Unquoted(Var(rhs))
//│ | | | | | | 2. Typing term Var(rhs)
//│ | | | | | | 2. : rhs64'
//│ | | | | | | CONSTRAIN rhs64' <! Code[α68'',α69'']
//│ | | | | | |   where 
//│ | | | | | | 2. C rhs64' <! Code[α68'',α69'']    (0)
//│ | | | | | | | wrong level: 2
//│ | | | | | | | RECONSTRAINING TVs
//│ | | | | | | | | Reconstraining α68_70'
//│ | | | | | | | | Reconstraining α68_71'
//│ | | | | | | | | Reconstraining α69_72'
//│ | | | | | | | | Reconstraining α69_73'
//│ | | | | | | | EXTR RHS  ~>  Code[α68_70'..α68_71',α69_72'..α69_73']  to 1
//│ | | | | | | |  where 
//│ 		α68_71' :> α68_70'
//│ 		α69_73' :> α69_72'
//│ | | | | | | | 2. C rhs64' <! Code[α68_70'..α68_71',α69_72'..α69_73']    (2)
//│ | | | | | | | | NEW rhs64' UB (1)
//│ | | | | | | Capture free variable type α69''
//│ | | | | | 2. : α68''
//│ | | | | | Create skolem tag ‘x74''' for VarSymbol(α68'',Var(x)) in quasiquote.
//│ | | | | | 3. Typing term Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x))))))))
//│ | | | | | | 3. Typing term App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x)))))))
//│ | | | | | | | 3. Typing term Var(k)
//│ | | | | | | | 3. : ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›
//│ | | | | | | | 3. Typing term Quoted(Var(x))
//│ | | | | | | | | 4. Typing term Var(x)
//│ | | | | | | | | | Capture free variable type ‘x74'''
//│ | | | | | | | | 4. : α68''
//│ | | | | | | | 3. : Code[α68'',‘x74''']
//│ | | | | | | | CONSTRAIN ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])› <! (Code[α68'',‘x74'''] -> α75''')
//│ | | | | | | |   where 
//│ 		α68'' :> α68_70' <: α68_71'
//│ 		α68_71' :> α68_70'
//│ | | | | | | | 3. C ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])› <! (Code[α68'',‘x74'''] -> α75''')    (0)
//│ | | | | | | | | could be distribbed: Set('c65'')
//│ | | | | | | | | cannot be distribbed: Set('c65'')
//│ | | | | | | | | INST [1]   ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›
//│ | | | | | | | |   where  
//│ | | | | | | | | TO [3] ~>  (Code['a66','c65_76'''] -> Code['b67',('c65_76''' | ‘g63')])
//│ | | | | | | | |   where  
//│ | | | | | | | | 3. C (Code['a66','c65_76'''] -> Code['b67',('c65_76''' | ‘g63')]) <! (Code[α68'',‘x74'''] -> α75''')    (2)
//│ | | | | | | | | | 3. C (Code[α68'',‘x74'''],) <! (Code['a66','c65_76'''],)    (2)
//│ | | | | | | | | | | 3. C Code[α68'',‘x74'''] <! Code['a66','c65_76''']    (3)
//│ | | | | | | | | | | | 3. C α68'' <! 'a66'    (4)
//│ | | | | | | | | | | | | NEW α68'' UB (1)
//│ | | | | | | | | | | | | 3. C α68_70' <! 'a66'    (6)
//│ | | | | | | | | | | | | | NEW α68_70' UB (1)
//│ | | | | | | | | | | | 3. C ‘x74''' <! 'c65_76'''    (4)
//│ | | | | | | | | | | | | NEW 'c65_76''' LB (3)
//│ | | | | | | | | | 3. C Code['b67',('c65_76''' | ‘g63')] <! α75'''    (2)
//│ | | | | | | | | | | NEW α75''' LB (3)
//│ | | | | | | 3. : α75'''
//│ | | | | | | CONSTRAIN α75''' <! Code[α77''',α78''']
//│ | | | | | |   where 
//│ 		α75''' :> Code['b67',('c65_76''' | ‘g63')]
//│ 		'c65_76''' :> ‘x74'''
//│ | | | | | | 3. C α75''' <! Code[α77''',α78''']    (0)
//│ | | | | | | | NEW α75''' UB (3)
//│ | | | | | | | 3. C Code['b67',('c65_76''' | ‘g63')] <! Code[α77''',α78''']    (2)
//│ | | | | | | | | 3. C 'b67' <! α77'''    (2)
//│ | | | | | | | | | NEW α77''' LB (1)
//│ | | | | | | | | 3. C ('c65_76''' | ‘g63') <! α78'''    (2)
//│ | | | | | | | | | NEW α78''' LB (3)
//│ | | | | | | Capture free variable type α78'''
//│ | | | | | 3. : α77'''
//│ | | | | | CONSTRAIN α78''' <! (‘x74''' | α79'')
//│ | | | | |   where 
//│ 		'c65_76''' :> ‘x74'''
//│ 		α78''' :> ('c65_76''' | ‘g63')
//│ | | | | | 2. C α78''' <! (‘x74''' | α79'')    (0)
//│ | | | | | | NEW α78''' UB (3)
//│ | | | | | | 2. C ('c65_76''' | ‘g63') <! (‘x74''' | α79'')    (2)
//│ | | | | | | | 2. C 'c65_76''' <! (‘x74''' | α79'')    (4)
//│ | | | | | | | | NEW 'c65_76''' UB (3)
//│ | | | | | | | | 2. C ‘x74''' <! (‘x74''' | α79'')    (6)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | 2. C ‘g63' <! (‘x74''' | α79'')    (4)
//│ | | | | | | | | 2. ARGH  DNF(1, {}∧‘g63')  <!  DNF(3, {}∧‘x74''' | α79'')
//│ | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | Consider {}∧‘g63' <: DNF(3, {}∧‘x74''' | α79'')
//│ | | | | | | | | | Possible: List({}∧‘x74''', α79'')
//│ | | | | | | | | | 2. A  {}∧‘g63'  %  List()  <!  List(‘x74''', α79'')  %  ⊥
//│ | | | | | | | | | | 2. A  {}∧‘g63'  %  List()  <!  List(α79'')  %  ‘x74'''
//│ | | | | | | | | | | | 2. C (‘g63' & ~(‘x74''')) <! α79''    (3)
//│ | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | EXTR LHS  ~>  (‘g63' & ~(⊥(‘x74''')))  to 2
//│ | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | 2. C (‘g63' & ~(⊥(‘x74'''))) <! α79''    (5)
//│ | | | | | | | | | | | | | NEW α79'' LB (1)
//│ | | | | | Capture free variable type α79''
//│ | | | | 2. : α77'''
//│ | | | 1. : Code[α77''',(α69'' | α79'')]
//│ | | 1. : ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> Code[α77''',(α69'' | α79'')])
//│ | | CONSTRAIN ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> Code[α77''',(α69'' | α79'')]) <! bind80'
//│ | |   where 
//│ 		rhs64' <: Code[α68_70'..α68_71',α69_72'..α69_73']
//│ 		α69'' :> α69_72' <: α69_73'
//│ 		α68_70' <: 'a66'
//│ 		α68_71' :> α68_70'
//│ 		α69_73' :> α69_72'
//│ 		α77''' :> 'b67'
//│ 		α79'' :> (‘g63' & ~(⊥(‘x74''')))
//│ | | 1. C ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> Code[α77''',(α69'' | α79'')]) <! bind80'    (0)
//│ | | | wrong level: 3
//│ | | | RECONSTRAINING TVs
//│ | | | | Reconstraining α77_81'
//│ | | | | Reconstraining α77_82'
//│ | | | | Reconstraining α69_83'
//│ | | | | Reconstraining α79_84'
//│ | | | | Reconstraining α69_85'
//│ | | | | Reconstraining α79_86'
//│ | | | EXTR LHS  ~>  ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> Code[α77_81'..α77_82',(α69_83' | α79_84')..(α69_85' | α79_86')])  to 1
//│ | | |  where 
//│ 		rhs64' <: Code[α68_70'..α68_71',α69_72'..α69_73']
//│ 		α68_70' <: 'a66'
//│ 		α68_71' :> α68_70'
//│ 		α69_73' :> α69_72'
//│ 		α77_82' :> α77_81' | 'b67'
//│ 		α69_83' <: α69_73'
//│ 		α69_85' :> α69_83' | α69_72'
//│ 		α79_86' :> α79_84' | (‘g63' & ~(⊥(‘x74''')))
//│ | | | 1. C ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> Code[α77_81'..α77_82',(α69_83' | α79_84')..(α69_85' | α79_86')]) <! bind80'    (2)
//│ | | | | NEW bind80' LB (1)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(bind),None,List(TypeName(g)),Left(Lam(Tup(List((None,Fld(_,Var(rhs))), (Some(Var(k)),Fld(_,Forall(List('c),App(Var(->),Tup(List((None,Fld(_,TyApp(Var(Code),List('a, 'c)))), (None,Fld(_,TyApp(Var(Code),List('b, Union('c,TypeName(g)))))))))))))),Quoted(Let(false,Var(x),Unquoted(Var(rhs)),Unquoted(App(Var(k),Tup(List((None,Fld(_,Quoted(Var(x))))))))))))),((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> Code[α77''',(α69'' | α79'')])) where 
//│ 		rhs64' <: Code[α68_70'..α68_71',α69_72'..α69_73']
//│ 		α69'' :> α69_83' | α69_72' <: α69_85' & α69_73'
//│ 		α68_70' <: 'a66'
//│ 		α68_71' :> α68_70'
//│ 		α69_73' :> α69_72'
//│ 		α77''' :> α77_81' | 'b67' <: α77_82'
//│ 		α79'' :> α79_84' | (‘g63' & ~(⊥(‘x74'''))) <: α79_86'
//│ 		α77_82' :> α77_81' | 'b67'
//│ 		α69_83' <: α69_73'
//│ 		α69_85' :> α69_83' | α69_72'
//│ 		α79_86' :> α79_84' | (‘g63' & ~(⊥(‘x74''')))
//│ | CHECKING SUBSUMPTION...
//│ | CONSTRAIN ‹∀ 0. ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> Code[α77''',(α69'' | α79'')])› <! ‹∀ 0. ‹∀ 0. ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])››
//│ |   where 
//│ 		rhs64' <: Code[α68_70'..α68_71',α69_72'..α69_73']
//│ 		α69'' :> α69_83' | α69_72' <: α69_85' & α69_73'
//│ 		α68_70' <: 'a66'
//│ 		α68_71' :> α68_70'
//│ 		α69_73' :> α69_72'
//│ 		α77''' :> α77_81' | 'b67' <: α77_82'
//│ 		α79'' :> α79_84' | (‘g63' & ~(⊥(‘x74'''))) <: α79_86'
//│ 		α77_82' :> α77_81' | 'b67'
//│ 		α69_83' <: α69_73'
//│ 		α69_85' :> α69_83' | α69_72'
//│ 		α79_86' :> α79_84' | (‘g63' & ~(⊥(‘x74''')))
//│ | 0. C ‹∀ 0. ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> Code[α77''',(α69'' | α79'')])› <! ‹∀ 0. ‹∀ 0. ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])››    (0)
//│ | | BUMP TO LEVEL 1  -->  ‹∀ 0. ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])›
//│ | | where 
//│ | | 1. C ‹∀ 0. ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> Code[α77''',(α69'' | α79'')])› <! ‹∀ 0. ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])›    (2)
//│ | | | New skolem: 'a58' ~> ‘a87''
//│ | | | New skolem: 'g59' ~> ‘g88''
//│ | | | New skolem: 'b61' ~> ‘b91''
//│ | | | BUMP TO LEVEL 2  -->  ((Code[‘a87'',‘g88''], k: ‹∀ 2. (Code[‘a87'','c60_90'''] -> Code[‘b91'',('c60_90''' | ‘g88'')])›,) -> Code[‘b91'',‘g88''])
//│ | | | where 
//│ | | | 2. C ‹∀ 0. ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> Code[α77''',(α69'' | α79'')])› <! ((Code[‘a87'',‘g88''], k: ‹∀ 2. (Code[‘a87'','c60_90'''] -> Code[‘b91'',('c60_90''' | ‘g88'')])›,) -> Code[‘b91'',‘g88''])    (4)
//│ | | | | Assigning T :: T45' := ‘b91'' where 
//│ | | | | Set T45_92'' ~> T45'
//│ | | | | Assigning C :: C46' := ‘g88'' where 
//│ | | | | Set C46_93'' ~> C46'
//│ | | | | could be distribbed: HashSet(α69'', α79_84', α69_85', α77''', α69_73', α79_86', α77_81', g63', 'b67', α69_72', α77_82', α79'', α69_83')
//│ | | | | cannot be distribbed: HashSet(α68_70', α69_73', rhs64', α68_71', 'a66', g63', 'b67', α69_72')
//│ | | | | inner: ‹∀ 0. Code[α77''',(α69'' | α79'')]›
//│ | | | | raised: ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> ‹∀ 1. Code[α77_94'',(α69_97'' | α79_100'')]›)
//│ | | | |   where: 
//│ 		rhs64' <: Code[α68_70'..α68_71',α69_72'..α69_73']
//│ 		α68_70' <: 'a66'
//│ 		α68_71' :> α68_70'
//│ 		α69_73' :> α69_72'
//│ 		α77_94'' :> α77_95'' | 'b67' <: α77_96''
//│ 		α77_96'' :> α77_95'' | 'b67'
//│ 		α69_97'' :> α69_98'' | α69_72' <: α69_99'' & α69_73'
//│ 		α69_98'' <: α69_73'
//│ 		α69_99'' :> α69_98'' | α69_72'
//│ 		α79_100'' :> α79_101'' | (g63' & ~(⊥(‘x74'''))) <: α79_102''
//│ 		α79_102'' :> α79_101'' | (g63' & ~(⊥(‘x74''')))
//│ | | | | DISTRIB-L'  ~>  ‹∀ 0. ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> ‹∀ 1. Code[α77_94'',(α69_97'' | α79_100'')]›)›
//│ | | | | 2. C ‹∀ 0. ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> ‹∀ 1. Code[α77_94'',(α69_97'' | α79_100'')]›)› <! ((Code[‘a87'',‘g88''], k: ‹∀ 2. (Code[‘a87'','c60_90'''] -> Code[‘b91'',('c60_90''' | ‘g88'')])›,) -> Code[‘b91'',‘g88''])    (7)
//│ | | | | | Assigning T :: T45' := ‘b91'' where 
//│ | | | | | Set T45_103'' ~> T45'
//│ | | | | | Assigning C :: C46' := ‘g88'' where 
//│ | | | | | Set C46_104'' ~> C46'
//│ | | | | | could be distribbed: Set('b67', α69_72', α69_73', g63')
//│ | | | | | cannot be distribbed: HashSet(α68_70', α69_73', rhs64', α68_71', 'a66', g63', 'b67', α69_72')
//│ | | | | | INST [0]   ‹∀ 0. ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> ‹∀ 1. Code[α77_94'',(α69_97'' | α79_100'')]›)›
//│ | | | | |   where  
//│ 		rhs64' <: Code[α68_70'..α68_71',α69_72'..α69_73']
//│ 		α68_70' <: 'a66'
//│ 		α68_71' :> α68_70'
//│ 		α69_73' :> α69_72'
//│ 		α77_94'' :> α77_95'' | 'b67' <: α77_96''
//│ 		α77_96'' :> α77_95'' | 'b67'
//│ 		α69_97'' :> α69_98'' | α69_72' <: α69_99'' & α69_73'
//│ 		α69_98'' <: α69_73'
//│ 		α69_99'' :> α69_98'' | α69_72'
//│ 		α79_100'' :> α79_101'' | (g63' & ~(⊥(‘x74'''))) <: α79_102''
//│ 		α79_102'' :> α79_101'' | (g63' & ~(⊥(‘x74''')))
//│ | | | | | TO [2] ~>  ((rhs64_105'', k: ‹∀ 2. (Code['a66_107'','c65_112'''] -> Code['b67_113'',('c65_112''' | g63_114'')])›,) -> ‹∀ 2. Code[α77_124''',(α69_127''' | α79_130''')]›)
//│ | | | | |   where  
//│ 		rhs64_105'' <: Code[α68_106''..α68_108'',α69_109''..α69_110'']
//│ 		α68_106'' <: 'a66_107''
//│ 		α68_108'' :> α68_106''
//│ 		α69_110'' :> α69_109''
//│ 		α77_124''' :> α77_125''' | 'b67_113'' <: α77_126'''
//│ 		α77_126''' :> α77_125''' | 'b67_113''
//│ 		α69_127''' :> α69_128''' | α69_109'' <: α69_129''' & α69_110''
//│ 		α69_128''' <: α69_110''
//│ 		α69_129''' :> α69_128''' | α69_109''
//│ 		α79_130''' :> α79_131''' | (g63_114'' & ~(⊥(‘x74'''))) <: α79_132'''
//│ 		α79_132''' :> α79_131''' | (g63_114'' & ~(⊥(‘x74''')))
//│ | | | | | 2. C ((rhs64_105'', k: ‹∀ 2. (Code['a66_107'','c65_112'''] -> Code['b67_113'',('c65_112''' | g63_114'')])›,) -> ‹∀ 2. Code[α77_124''',(α69_127''' | α79_130''')]›) <! ((Code[‘a87'',‘g88''], k: ‹∀ 2. (Code[‘a87'','c60_90'''] -> Code[‘b91'',('c60_90''' | ‘g88'')])›,) -> Code[‘b91'',‘g88''])    (10)
//│ | | | | | | 2. C (Code[‘a87'',‘g88''], k: ‹∀ 2. (Code[‘a87'','c60_90'''] -> Code[‘b91'',('c60_90''' | ‘g88'')])›,) <! (rhs64_105'', k: ‹∀ 2. (Code['a66_107'','c65_112'''] -> Code['b67_113'',('c65_112''' | g63_114'')])›,)    (5)
//│ | | | | | | | 2. C Code[‘a87'',‘g88''] <! rhs64_105''    (6)
//│ | | | | | | | | NEW rhs64_105'' LB (2)
//│ | | | | | | | | 2. C Code[‘a87'',‘g88''] <! Code[α68_106''..α68_108'',α69_109''..α69_110'']    (9)
//│ | | | | | | | | | 2. C ‘a87'' <! α68_106''..α68_108''    (8)
//│ | | | | | | | | | | 2. C ‘a87'' <! α68_106''    (11)
//│ | | | | | | | | | | | NEW α68_106'' LB (2)
//│ | | | | | | | | | | | 2. C ‘a87'' <! 'a66_107''    (14)
//│ | | | | | | | | | | | | NEW 'a66_107'' LB (2)
//│ | | | | | | | | | 2. C ‘g88'' <! α69_109''..α69_110''    (8)
//│ | | | | | | | | | | 2. C ‘g88'' <! α69_109''    (11)
//│ | | | | | | | | | | | NEW α69_109'' LB (2)
//│ | | | | | | | 2. C ‹∀ 2. (Code[‘a87'','c60_90'''] -> Code[‘b91'',('c60_90''' | ‘g88'')])› <! ‹∀ 2. (Code['a66_107'','c65_112'''] -> Code['b67_113'',('c65_112''' | g63_114'')])›    (6)
//│ | | | | | | | | New skolem: 'c65_112''' ~> ‘c133'''
//│ | | | | | | | | BUMP TO LEVEL 3  -->  (Code['a66_107'',‘c133'''] -> Code['b67_113'',(‘c133''' | g63_114'')])
//│ | | | | | | | | where 
//│ 		'a66_107'' :> ‘a87''
//│ | | | | | | | | 3. C ‹∀ 2. (Code[‘a87'','c60_90'''] -> Code[‘b91'',('c60_90''' | ‘g88'')])› <! (Code['a66_107'',‘c133'''] -> Code['b67_113'',(‘c133''' | g63_114'')])    (9)
//│ | | | | | | | | | Passing T :: T45' <=< 'b67_113''
//│ | | | | | | | | | Assigning C :: C46' := (‘c133''' | g63_114'') where 
//│ | | | | | | | | | Set C46_134''' ~> C46'
//│ | | | | | | | | | could be distribbed: Set('c60_90''')
//│ | | | | | | | | | cannot be distribbed: Set('c60_90''')
//│ | | | | | | | | | INST [2]   ‹∀ 2. (Code[‘a87'','c60_90'''] -> Code[‘b91'',('c60_90''' | ‘g88'')])›
//│ | | | | | | | | |   where  
//│ | | | | | | | | | TO [3] ~>  (Code[‘a87'','c60_135'''] -> Code[‘b91'',('c60_135''' | ‘g88'')])
//│ | | | | | | | | |   where  
//│ | | | | | | | | | 3. C (Code[‘a87'','c60_135'''] -> Code[‘b91'',('c60_135''' | ‘g88'')]) <! (Code['a66_107'',‘c133'''] -> Code['b67_113'',(‘c133''' | g63_114'')])    (12)
//│ | | | | | | | | | | 3. C (Code['a66_107'',‘c133'''],) <! (Code[‘a87'','c60_135'''],)    (9)
//│ | | | | | | | | | | | 3. C Code['a66_107'',‘c133'''] <! Code[‘a87'','c60_135''']    (10)
//│ | | | | | | | | | | | | 3. C 'a66_107'' <! ‘a87''    (11)
//│ | | | | | | | | | | | | | NEW 'a66_107'' UB (2)
//│ | | | | | | | | | | | | | 3. C ‘a87'' <! ‘a87''    (14)
//│ | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | 3. C ‘c133''' <! 'c60_135'''    (11)
//│ | | | | | | | | | | | | | NEW 'c60_135''' LB (3)
//│ | | | | | | | | | | 3. C Code[‘b91'',('c60_135''' | ‘g88'')] <! Code['b67_113'',(‘c133''' | g63_114'')]    (9)
//│ | | | | | | | | | | | 3. C ‘b91'' <! 'b67_113''    (10)
//│ | | | | | | | | | | | | NEW 'b67_113'' LB (2)
//│ | | | | | | | | | | | 3. C ('c60_135''' | ‘g88'') <! (‘c133''' | g63_114'')    (10)
//│ | | | | | | | | | | | | 3. C 'c60_135''' <! (‘c133''' | g63_114'')    (13)
//│ | | | | | | | | | | | | | NEW 'c60_135''' UB (3)
//│ | | | | | | | | | | | | | 3. C ‘c133''' <! (‘c133''' | g63_114'')    (16)
//│ | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | 3. C ‘g88'' <! (‘c133''' | g63_114'')    (13)
//│ | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧‘g88'')  <!  DNF(3, {}∧‘c133''' | g63_114'')
//│ | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | Consider {}∧‘g88'' <: DNF(3, {}∧‘c133''' | g63_114'')
//│ | | | | | | | | | | | | | | Possible: List({}∧‘c133''', g63_114'')
//│ | | | | | | | | | | | | | | 3. A  {}∧‘g88''  %  List()  <!  List(‘c133''', g63_114'')  %  ⊥
//│ | | | | | | | | | | | | | | | 3. A  {}∧‘g88''  %  List()  <!  List(g63_114'')  %  ‘c133'''
//│ | | | | | | | | | | | | | | | | 3. C (‘g88'' & ~(‘c133''')) <! g63_114''    (12)
//│ | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (‘g88'' & ~(⊥(‘c133''')))  to 2
//│ | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | 3. C (‘g88'' & ~(⊥(‘c133'''))) <! g63_114''    (15)
//│ | | | | | | | | | | | | | | | | | | NEW g63_114'' LB (2)
//│ | | | | | | | | UNSTASHING...
//│ | | | | | | 2. C ‹∀ 2. Code[α77_124''',(α69_127''' | α79_130''')]› <! Code[‘b91'',‘g88'']    (5)
//│ | | | | | | | Assigning T :: T45' := ‘b91'' where 
//│ | | | | | | | Set T45_136'' ~> T45'
//│ | | | | | | | Assigning C :: C46' := ‘g88'' where 
//│ | | | | | | | Set C46_137'' ~> C46'
//│ | | | | | | | 2. C ‹∀ 2. Code[α77_124''',(α69_127''' | α79_130''')]› <! (#Code<Object> & {Code#T: ‘b91'', Code#C: ‘g88''})    (8)
//│ | | | | | | | | 2. C ‹∀ 2. Code[α77_124''',(α69_127''' | α79_130''')]› <! #Code<Object>    (11)
//│ | | | | | | | | | Passing T :: T45' <=< α77_124'''
//│ | | | | | | | | | Assigning C :: C46' := (α69_127''' | α79_130''') where 
//│ 		α69_109'' :> ‘g88''
//│ 		α69_110'' :> α69_109''
//│ 		g63_114'' :> (‘g88'' & ~(⊥(‘c133''')))
//│ 		α69_127''' :> α69_128''' | α69_109'' <: α69_129''' & α69_110''
//│ 		α69_128''' <: α69_110''
//│ 		α69_129''' :> α69_128''' | α69_109''
//│ 		α79_130''' :> α79_131''' | (g63_114'' & ~(⊥(‘x74'''))) <: α79_132'''
//│ 		α79_132''' :> α79_131''' | (g63_114'' & ~(⊥(‘x74''')))
//│ | | | | | | | | | Set C46_138''' ~> C46'
//│ | | | | | | | | | Passing T :: T45' <=< α77_124'''
//│ | | | | | | | | | Assigning C :: C46' := (α69_127''' | α79_130''') where 
//│ 		α69_109'' :> ‘g88''
//│ 		α69_110'' :> α69_109''
//│ 		g63_114'' :> (‘g88'' & ~(⊥(‘c133''')))
//│ 		α69_127''' :> α69_128''' | α69_109'' <: α69_129''' & α69_110''
//│ 		α69_128''' <: α69_110''
//│ 		α69_129''' :> α69_128''' | α69_109''
//│ 		α79_130''' :> α79_131''' | (g63_114'' & ~(⊥(‘x74'''))) <: α79_132'''
//│ 		α79_132''' :> α79_131''' | (g63_114'' & ~(⊥(‘x74''')))
//│ | | | | | | | | | Set C46_139''' ~> C46'
//│ | | | | | | | | | INST [2]   ‹∀ 2. Code[α77_124''',(α69_127''' | α79_130''')]›
//│ | | | | | | | | |   where  
//│ 		α69_109'' :> ‘g88''
//│ 		α69_110'' :> α69_109''
//│ 		'b67_113'' :> ‘b91''
//│ 		g63_114'' :> (‘g88'' & ~(⊥(‘c133''')))
//│ 		α77_124''' :> α77_125''' | 'b67_113'' <: α77_126'''
//│ 		α77_126''' :> α77_125''' | 'b67_113''
//│ 		α69_127''' :> α69_128''' | α69_109'' <: α69_129''' & α69_110''
//│ 		α69_128''' <: α69_110''
//│ 		α69_129''' :> α69_128''' | α69_109''
//│ 		α79_130''' :> α79_131''' | (g63_114'' & ~(⊥(‘x74'''))) <: α79_132'''
//│ 		α79_132''' :> α79_131''' | (g63_114'' & ~(⊥(‘x74''')))
//│ | | | | | | | | | TO [2] ~>  Code[α77_140'',(α69_143'' | α79_146'')]
//│ | | | | | | | | |   where  
//│ 		α69_109'' :> ‘g88''
//│ 		α69_110'' :> α69_109''
//│ 		'b67_113'' :> ‘b91''
//│ 		g63_114'' :> (‘g88'' & ~(⊥(‘c133''')))
//│ 		α77_140'' :> α77_141'' | 'b67_113'' <: α77_142''
//│ 		α77_142'' :> α77_141'' | 'b67_113''
//│ 		α69_143'' :> α69_144'' | α69_109'' <: α69_145'' & α69_110''
//│ 		α69_144'' <: α69_110''
//│ 		α69_145'' :> α69_144'' | α69_109''
//│ 		α79_146'' :> α79_147'' | (g63_114'' & ~(⊥(‘x74'''))) <: α79_148''
//│ 		α79_148'' :> α79_147'' | (g63_114'' & ~(⊥(‘x74''')))
//│ | | | | | | | | | 2. C Code[α77_140'',(α69_143'' | α79_146'')] <! #Code<Object>    (14)
//│ | | | | | | | | | | Passing T :: T45' <=< α77_140''
//│ | | | | | | | | | | Assigning C :: C46' := (α69_143'' | α79_146'') where 
//│ 		α69_109'' :> ‘g88''
//│ 		α69_110'' :> α69_109''
//│ 		g63_114'' :> (‘g88'' & ~(⊥(‘c133''')))
//│ 		α69_143'' :> α69_144'' | α69_109'' <: α69_145'' & α69_110''
//│ 		α69_144'' <: α69_110''
//│ 		α69_145'' :> α69_144'' | α69_109''
//│ 		α79_146'' :> α79_147'' | (g63_114'' & ~(⊥(‘x74'''))) <: α79_148''
//│ 		α79_148'' :> α79_147'' | (g63_114'' & ~(⊥(‘x74''')))
//│ | | | | | | | | | | Set C46_149'' ~> C46'
//│ | | | | | | | | | | 2. C (#Code<Object> & {Code#T: α77_140'', Code#C: (α69_143'' | α79_146'')}) <! #Code<Object>    (17)
//│ | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | 2. C ‹∀ 2. Code[α77_124''',(α69_127''' | α79_130''')]› <! {Code#T: ‘b91'', Code#C: ‘g88''}    (11)
//│ | | | | | | | | | Passing T :: T45' <=< α77_124'''
//│ | | | | | | | | | Assigning C :: C46' := (α69_127''' | α79_130''') where 
//│ 		α69_109'' :> ‘g88''
//│ 		α69_110'' :> α69_109''
//│ 		g63_114'' :> (‘g88'' & ~(⊥(‘c133''')))
//│ 		α69_127''' :> α69_128''' | α69_109'' <: α69_129''' & α69_110''
//│ 		α69_128''' <: α69_110''
//│ 		α69_129''' :> α69_128''' | α69_109''
//│ 		α79_130''' :> α79_131''' | (g63_114'' & ~(⊥(‘x74'''))) <: α79_132'''
//│ 		α79_132''' :> α79_131''' | (g63_114'' & ~(⊥(‘x74''')))
//│ | | | | | | | | | Set C46_150''' ~> C46'
//│ | | | | | | | | | 2. ARGH  DNF(2, #Code<Object>{Code#T: α77_124''', Code#C: (α69_127''' | α79_130''')})  <!  DNF(2, {Code#T: ‘b91'', Code#C: ‘g88''})
//│ | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | Consider #Code<Object>{Code#T: α77_151'', Code#C: (α69_154'' | α79_157'')} <: DNF(2, {Code#T: ‘b91'', Code#C: ‘g88''})
//│ | | | | | | | | | | Possible: List({Code#T: ‘b91'', Code#C: ‘g88''})
//│ | | | | | | | | | | 2. A  #Code<Object>{Code#T: α77_151'', Code#C: (α69_154'' | α79_157'')}  %  List()  <!  List({Code#T: ‘b91'', Code#C: ‘g88''})  %  ⊥
//│ | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α77_151'', Code#C: (α69_154'' | α79_157'')}  %  List()  <!  List(((⊤ & {Code#T: ‘b91''}) & {Code#C: ‘g88''}))  %  ⊥
//│ | | | | | | | | | | | | Case.1
//│ | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α77_151'', Code#C: (α69_154'' | α79_157'')}  %  List()  <!  List((⊤ & {Code#T: ‘b91''}))  %  ⊥
//│ | | | | | | | | | | | | | Case.1.1
//│ | | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α77_151'', Code#C: (α69_154'' | α79_157'')}  %  List()  <!  List(⊤)  %  ⊥
//│ | | | | | | | | | | | | | Case.1.2
//│ | | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α77_151'', Code#C: (α69_154'' | α79_157'')}  %  List()  <!  List({Code#T: ‘b91''})  %  ⊥
//│ | | | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α77_151'', Code#C: (α69_154'' | α79_157'')}  %  List()  <!  List()  %  {Code#T:‘b91''}
//│ | | | | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α77_151'', Code#C: (α69_154'' | α79_157'')}  %  List()  <!  List()  %  |{Code#T:‘b91''}
//│ | | | | | | | | | | | | | | | | Looking up field Code#T in Some(Code) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | Lookup Code.Code#T : Some(mut T45'..T45') where 
//│ | | | | | | | | | | | | | | | | | Fresh[0] Code.Code#T : Some(mut α77_151''..α77_151'') where Some(
//│ 		'b67_113'' :> ‘b91''
//│ 		α77_151'' :> α77_152'' | 'b67_113'' <: α77_153''
//│ 		α77_153'' :> α77_152'' | 'b67_113'')
//│ | | | | | | | | | | | | | | | | |   & Some(α77_151'')  (from refinement)
//│ | | | | | | | | | | | | | | | | 2. C α77_151'' <! ‘b91''    (8)
//│ | | | | | | | | | | | | | | | | | NEW α77_151'' UB (2)
//│ | | | | | | | | | | | | | | | | | 2. C α77_152'' <! ‘b91''    (11)
//│ | | | | | | | | | | | | | | | | | | NEW α77_152'' UB (2)
//│ | | | | | | | | | | | | | | | | | 2. C 'b67_113'' <! ‘b91''    (11)
//│ | | | | | | | | | | | | | | | | | | NEW 'b67_113'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 2. C ‘b91'' <! ‘b91''    (14)
//│ | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | Case.2
//│ | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α77_151'', Code#C: (α69_154'' | α79_157'')}  %  List()  <!  List({Code#C: ‘g88''})  %  ⊥
//│ | | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α77_151'', Code#C: (α69_154'' | α79_157'')}  %  List()  <!  List()  %  {Code#C:‘g88''}
//│ | | | | | | | | | | | | | | 2. A  #Code<Object>{Code#T: α77_151'', Code#C: (α69_154'' | α79_157'')}  %  List()  <!  List()  %  |{Code#C:‘g88''}
//│ | | | | | | | | | | | | | | | Looking up field Code#C in Some(Code) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | Lookup Code.Code#C : Some(mut C46'..C46') where 
//│ | | | | | | | | | | | | | | | | Fresh[0] Code.Code#C : Some(mut (α69_154'' | α79_157'')..(α69_154'' | α79_157'')) where Some(
//│ 		α69_109'' :> ‘g88''
//│ 		α69_110'' :> α69_109''
//│ 		g63_114'' :> (‘g88'' & ~(⊥(‘c133''')))
//│ 		α69_154'' :> α69_155'' | α69_109'' <: α69_156'' & α69_110''
//│ 		α69_155'' <: α69_110''
//│ 		α69_156'' :> α69_155'' | α69_109''
//│ 		α79_157'' :> α79_158'' | (g63_114'' & ~(⊥(‘x74'''))) <: α79_159''
//│ 		α79_159'' :> α79_158'' | (g63_114'' & ~(⊥(‘x74'''))))
//│ | | | | | | | | | | | | | | | |   & Some((α69_154'' | α79_157''))  (from refinement)
//│ | | | | | | | | | | | | | | | 2. C (α69_154'' | α79_157'') <! ‘g88''    (8)
//│ | | | | | | | | | | | | | | | | 2. C α69_154'' <! ‘g88''    (11)
//│ | | | | | | | | | | | | | | | | | NEW α69_154'' UB (2)
//│ | | | | | | | | | | | | | | | | | 2. C α69_155'' <! ‘g88''    (14)
//│ | | | | | | | | | | | | | | | | | | NEW α69_155'' UB (2)
//│ | | | | | | | | | | | | | | | | | 2. C α69_109'' <! ‘g88''    (14)
//│ | | | | | | | | | | | | | | | | | | NEW α69_109'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 2. C ‘g88'' <! ‘g88''    (17)
//│ | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | 2. C α79_157'' <! ‘g88''    (11)
//│ | | | | | | | | | | | | | | | | | NEW α79_157'' UB (2)
//│ | | | | | | | | | | | | | | | | | 2. C α79_158'' <! ‘g88''    (14)
//│ | | | | | | | | | | | | | | | | | | NEW α79_158'' UB (2)
//│ | | | | | | | | | | | | | | | | | 2. C (g63_114'' & ~(⊥(‘x74'''))) <! ‘g88''    (14)
//│ | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(2, g63_114''∧~(⊥(‘x74''')))  <!  DNF(2, {}∧‘g88'')
//│ | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | 2. C g63_114'' <! ‘g88''    (17)
//│ | | | | | | | | | | | | | | | | | | | | NEW g63_114'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | | 2. C (‘g88'' & ~(⊥(‘c133'''))) <! ‘g88''    (20)
//│ | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | UNSTASHING...
//│ | | UNSTASHING...
//│ | CHECKING SUBSUMPTION...
//│ | CONSTRAIN ‹∀ 0. ‹∀ 0. ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])›› <! ‹∀ 0. ‹∀ 0. ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])››
//│ |   where 
//│ | 0. C ‹∀ 0. ‹∀ 0. ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])›› <! ‹∀ 0. ‹∀ 0. ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])››    (0)
//│ | | Already a subtype by <:<
//│ | Typing unit statements
//│ | : None
//│ ======== TYPED ========
//│ fun bind: ‹∀ 0. ((rhs64', k: ‹∀ 1. (Code['a66','c65''] -> Code['b67',('c65'' | ‘g63')])›,) -> Code[α77''',(α69'' | α79'')])› where 
//│ |		rhs64' <: Code[α68_70'..α68_71',α69_72'..α69_73']
//│ |		α69'' :> α69_83' | α69_72' <: α69_85' & α69_73'
//│ |		α68_70' <: 'a66'
//│ |		α68_71' :> α68_70'
//│ |		α69_73' :> α69_72'
//│ |		α77''' :> α77_81' | 'b67' <: α77_82'
//│ |		α79'' :> α79_84' | (‘g63' & ~(⊥(‘x74'''))) <: α79_86'
//│ |		α77_82' :> α77_81' | 'b67'
//│ |		α69_83' <: α69_73'
//│ |		α69_85' :> α69_83' | α69_72'
//│ |		α79_86' :> α79_84' | (‘g63' & ~(⊥(‘x74''')))
//│ fun bind: ‹∀ 0. ‹∀ 0. ((Code['a58','g59'], k: ‹∀ 1. (Code['a58','c60''] -> Code['b61',('c60'' | 'g59')])›,) -> Code['b61','g59'])›› where 
//│ expand ‹∀ 0. ((Code['a66_195',α69_196'], k: ‹∀ 1. (Code['a66_195','c65_197''] -> Code['b67_198',('c65_197'' | g63_199')])›,) -> Code['b67_198',(α69_196' | (g63_199' & ~(⊥(‘x74'''))))])›
//│ | expand ((Code['a66_195',α69_196'], k: ‹∀ 1. (Code['a66_195','c65_197''] -> Code['b67_198',('c65_197'' | g63_199')])›,) -> Code['b67_198',(α69_196' | (g63_199' & ~(⊥(‘x74'''))))])
//│ | | expand (Code['a66_195',α69_196'], k: ‹∀ 1. (Code['a66_195','c65_197''] -> Code['b67_198',('c65_197'' | g63_199')])›,)
//│ | | | expand Code['a66_195',α69_196']
//│ | | | | expand 'a66_195'
//│ | | | | | expand ⊥
//│ | | | | | ~> Bot
//│ | | | | | expand ⊤
//│ | | | | | ~> Top
//│ | | | | ~> α195
//│ | | | | expand α69_196'
//│ | | | | | expand ⊥
//│ | | | | | ~> Bot
//│ | | | | | expand ⊤
//│ | | | | | ~> Top
//│ | | | | ~> α196
//│ | | | ~> AppliedType(TypeName(Code),List(α195, α196))
//│ | | | expand ‹∀ 1. (Code['a66_195','c65_197''] -> Code['b67_198',('c65_197'' | g63_199')])›
//│ | | | | expand (Code['a66_195','c65_197''] -> Code['b67_198',('c65_197'' | g63_199')])
//│ | | | | | expand (Code['a66_195','c65_197''],)
//│ | | | | | | expand Code['a66_195','c65_197'']
//│ | | | | | | | expand 'a66_195'
//│ | | | | | | | ~> α195
//│ | | | | | | | expand 'c65_197''
//│ | | | | | | | | expand ⊥
//│ | | | | | | | | ~> Bot
//│ | | | | | | | | expand ⊤
//│ | | | | | | | | ~> Top
//│ | | | | | | | ~> α197
//│ | | | | | | ~> AppliedType(TypeName(Code),List(α195, α197))
//│ | | | | | ~> Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α195, α197))))))
//│ | | | | | expand Code['b67_198',('c65_197'' | g63_199')]
//│ | | | | | | expand 'b67_198'
//│ | | | | | | | expand ⊥
//│ | | | | | | | ~> Bot
//│ | | | | | | | expand ⊤
//│ | | | | | | | ~> Top
//│ | | | | | | ~> α198
//│ | | | | | | expand ('c65_197'' | g63_199')
//│ | | | | | | | expand 'c65_197''
//│ | | | | | | | ~> α197
//│ | | | | | | | expand g63_199'
//│ | | | | | | | | expand ⊥
//│ | | | | | | | | ~> Bot
//│ | | | | | | | | expand ⊤
//│ | | | | | | | | ~> Top
//│ | | | | | | | ~> α199
//│ | | | | | | ~> Union(α197,α199)
//│ | | | | | ~> AppliedType(TypeName(Code),List(α198, Union(α197,α199)))
//│ | | | | ~> Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α195, α197)))))),AppliedType(TypeName(Code),List(α198, Union(α197,α199))))
//│ | | | ~> PolyType(List(Right(α197)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α195, α197)))))),AppliedType(TypeName(Code),List(α198, Union(α197,α199)))))
//│ | | ~> Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α195, α196)))), (Some(Var(k)),Field(None,PolyType(List(Right(α197)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α195, α197)))))),AppliedType(TypeName(Code),List(α198, Union(α197,α199)))))))))
//│ | | expand Code['b67_198',(α69_196' | (g63_199' & ~(⊥(‘x74'''))))]
//│ | | | expand 'b67_198'
//│ | | | ~> α198
//│ | | | expand (α69_196' | (g63_199' & ~(⊥(‘x74'''))))
//│ | | | | expand α69_196'
//│ | | | | ~> α196
//│ | | | | expand (g63_199' & ~(⊥(‘x74''')))
//│ | | | | | expand g63_199'
//│ | | | | | ~> α199
//│ | | | | | expand ~(⊥(‘x74'''))
//│ | | | | | | expand ⊥(‘x74''')
//│ | | | | | | ~> α204
//│ | | | | | ~> Neg(α204)
//│ | | | | ~> Inter(α199,Neg(α204))
//│ | | | ~> Union(α196,Inter(α199,Neg(α204)))
//│ | | ~> AppliedType(TypeName(Code),List(α198, Union(α196,Inter(α199,Neg(α204)))))
//│ | ~> Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α195, α196)))), (Some(Var(k)),Field(None,PolyType(List(Right(α197)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α195, α197)))))),AppliedType(TypeName(Code),List(α198, Union(α197,α199))))))))),AppliedType(TypeName(Code),List(α198, Union(α196,Inter(α199,Neg(α204))))))
//│ ~> PolyType(List(Right(α195), Right(α196), Right(α198), Right(α199)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α195, α196)))), (Some(Var(k)),Field(None,PolyType(List(Right(α197)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α195, α197)))))),AppliedType(TypeName(Code),List(α198, Union(α197,α199))))))))),AppliedType(TypeName(Code),List(α198, Union(α196,Inter(α199,Neg(α204)))))))
//│ expand ‹∀ 0. ((Code['a58_200','g59_201'], k: ‹∀ 1. (Code['a58_200','c60_202''] -> Code['b61_203',('c60_202'' | 'g59_201')])›,) -> Code['b61_203','g59_201'])›
//│ | expand ((Code['a58_200','g59_201'], k: ‹∀ 1. (Code['a58_200','c60_202''] -> Code['b61_203',('c60_202'' | 'g59_201')])›,) -> Code['b61_203','g59_201'])
//│ | | expand (Code['a58_200','g59_201'], k: ‹∀ 1. (Code['a58_200','c60_202''] -> Code['b61_203',('c60_202'' | 'g59_201')])›,)
//│ | | | expand Code['a58_200','g59_201']
//│ | | | | expand 'a58_200'
//│ | | | | | expand ⊥
//│ | | | | | ~> Bot
//│ | | | | | expand ⊤
//│ | | | | | ~> Top
//│ | | | | ~> α200
//│ | | | | expand 'g59_201'
//│ | | | | | expand ⊥
//│ | | | | | ~> Bot
//│ | | | | | expand ⊤
//│ | | | | | ~> Top
//│ | | | | ~> α201
//│ | | | ~> AppliedType(TypeName(Code),List(α200, α201))
//│ | | | expand ‹∀ 1. (Code['a58_200','c60_202''] -> Code['b61_203',('c60_202'' | 'g59_201')])›
//│ | | | | expand (Code['a58_200','c60_202''] -> Code['b61_203',('c60_202'' | 'g59_201')])
//│ | | | | | expand (Code['a58_200','c60_202''],)
//│ | | | | | | expand Code['a58_200','c60_202'']
//│ | | | | | | | expand 'a58_200'
//│ | | | | | | | ~> α200
//│ | | | | | | | expand 'c60_202''
//│ | | | | | | | | expand ⊥
//│ | | | | | | | | ~> Bot
//│ | | | | | | | | expand ⊤
//│ | | | | | | | | ~> Top
//│ | | | | | | | ~> α202
//│ | | | | | | ~> AppliedType(TypeName(Code),List(α200, α202))
//│ | | | | | ~> Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α200, α202))))))
//│ | | | | | expand Code['b61_203',('c60_202'' | 'g59_201')]
//│ | | | | | | expand 'b61_203'
//│ | | | | | | | expand ⊥
//│ | | | | | | | ~> Bot
//│ | | | | | | | expand ⊤
//│ | | | | | | | ~> Top
//│ | | | | | | ~> α203
//│ | | | | | | expand ('c60_202'' | 'g59_201')
//│ | | | | | | | expand 'c60_202''
//│ | | | | | | | ~> α202
//│ | | | | | | | expand 'g59_201'
//│ | | | | | | | ~> α201
//│ | | | | | | ~> Union(α202,α201)
//│ | | | | | ~> AppliedType(TypeName(Code),List(α203, Union(α202,α201)))
//│ | | | | ~> Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α200, α202)))))),AppliedType(TypeName(Code),List(α203, Union(α202,α201))))
//│ | | | ~> PolyType(List(Right(α202)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α200, α202)))))),AppliedType(TypeName(Code),List(α203, Union(α202,α201)))))
//│ | | ~> Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α200, α201)))), (Some(Var(k)),Field(None,PolyType(List(Right(α202)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α200, α202)))))),AppliedType(TypeName(Code),List(α203, Union(α202,α201)))))))))
//│ | | expand Code['b61_203','g59_201']
//│ | | | expand 'b61_203'
//│ | | | ~> α203
//│ | | | expand 'g59_201'
//│ | | | ~> α201
//│ | | ~> AppliedType(TypeName(Code),List(α203, α201))
//│ | ~> Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α200, α201)))), (Some(Var(k)),Field(None,PolyType(List(Right(α202)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α200, α202)))))),AppliedType(TypeName(Code),List(α203, Union(α202,α201))))))))),AppliedType(TypeName(Code),List(α203, α201)))
//│ ~> PolyType(List(Right(α200), Right(α201), Right(α203)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α200, α201)))), (Some(Var(k)),Field(None,PolyType(List(Right(α202)),Function(Tuple(List((None,Field(None,AppliedType(TypeName(Code),List(α200, α202)))))),AppliedType(TypeName(Code),List(α203, Union(α202,α201))))))))),AppliedType(TypeName(Code),List(α203, α201))))
//│ fun bind: forall 'a 'd 'b 'g. (Code['a, 'd], k: forall 'c. Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'd | 'g & ~??x]
//│ fun (%>) bind: forall 'a0 'g0 'b0. (Code['a0, 'g0], k: forall 'c0. Code['a0, 'c0] -> Code['b0, 'c0 | 'g0]) -> Code['b0, 'g0]


let f(k) = bind of code"123", k
//│ let f: forall 'b 'g. (forall 'c. Code[123, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]

f(id)
//│ Code[123, nothing]

bind of code"123", x => x
//│ Code[123, nothing]

bind of code"123", x =>
bind of code"${x} + 1", y =>
code"${y} + ${y}"
//│ Code[Int, nothing]

code"123" %> x =>
code"${x} + 1" %> y =>
code"${y} + ${y}"
//│ Code[Int, nothing]


fun test(x, y) = code"${x} + ${y}"
//│ fun test: forall 'a. (Code[Int, 'a], Code[Int, 'a]) -> Code[Int, 'a]

fun test2(x, y, f) = code"${x} + ${y}" %> f
//│ fun test2: forall 'g 'b. (Code[Int, 'g], Code[Int, 'g], forall 'c. Code[Int, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]

code"(x, y) => ${test2(code"x + 1", code"y * 2", tmp => code"[${tmp}, ${tmp}]") }"
//│ Code[(Int, Int) -> [Int, Int], nothing]



// * Naive version

fun gib_naive(n) =
  let rec body(x, y) = case
    0 then x
    1 then y
    n then code"${body(x, code"${x} + ${y}")(n - 1)}"
  code"(x, y) => ${body(code"x", code"y")(n)}"
//│ fun gib_naive: (0 | 1 | Int & ~0 & ~1) -> Code[(Int, Int) -> Int, nothing]

let gn5 = gib_naive(5)
run(gn5)
//│ let gn5: Code[(Int, Int) -> Int, nothing]
//│ (Int, Int) -> Int


// * Expected: needs polymorphic recursion
fun gib(n) =
  let rec body(x, y) = case
    0 then x
    1 then y
    n then code"${x} + ${y}" %> z => body(x, z)(n - 1)
  code"(x, y) => ${body(code"x", code"y")(n)}"
//│ fun gib: (0 | 1 | Int & ~0 & ~1) -> Code[(Int, Int) -> Int, ??c & ~??y]



// * Better version

fun body: forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
fun body(x, y) = case
  0 then x
  1 then y
  n then code"${x} + ${y}" %> z => body(x, z)(n - 1)
//│ fun body: forall 'g. (Code[Int, 'g], Code[Int, 'g]) -> (0 | 1 | Int & ~0 & ~1) -> Code[Int, 'g]
//│ fun body: forall 'g0. (Code[Int, 'g0], Code[Int, 'g0]) -> Int -> Code[Int, 'g0]

fun gib(n) =
  code"(x, y) => ${body(code"x", code"y")(n)}"
//│ fun gib: Int -> Code[(Int, Int) -> Int, nothing]

let gn5 = gib(5)
run(gn5)
//│ let gn5: Code[(Int, Int) -> Int, nothing]
//│ (Int, Int) -> Int


// * Alternative version:
fun body: forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
fun body(x, y) = case
  0 then x
  1 then y
  n then code"let tmp = ${x} + ${y} in ${body(x, code"tmp")(n - 1)}"
//│ fun body: forall 'a. (Code[Int, 'a], Code[Int, 'a]) -> (0 | 1 | Int & ~0 & ~1) -> Code[Int, 'a]
//│ fun body: forall 'g. (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]

fun gib(n) =
  code"(x, y) => ${body(code"x", code"y")(n)}"
//│ fun gib: Int -> Code[(Int, Int) -> Int, nothing]

let gn5 = gib(5)
run(gn5)
//│ let gn5: Code[(Int, Int) -> Int, nothing]
//│ (Int, Int) -> Int






