:NewDefs

:NoJS



declare class Scope[OuterCtx, InnerCtx] {
  fun bind(code: Code['a, InnerCtx | OuterCtx]): Code['a, InnerCtx]
}
declare fun scope(body: forall 'in: Scope['in, 'out] -> Code['a, 'in | 'out]): Code['a, 'out]
//│ declare class Scope[OuterCtx, InnerCtx] {
//│   constructor()
//│   fun bind: forall 'a. (code: Code['a, InnerCtx | OuterCtx]) -> Code['a, InnerCtx]
//│ }
//│ fun scope: forall 'out 'a0. (body: forall 'in. Scope['in, 'out] -> Code['a0, 'in | 'out]) -> Code['a0, 'out]


scope of scp =>
  let a = scp.bind(code"123")
  let b = scp.bind(code"${a} + 1")
  code"${a} * ${b}"
//│ Code[Int, nothing]


scope of outer =>
  let a = outer.bind(code"123")
  code"x => ${
    code"${a} * x"
  }"
//│ Code[Int -> Int, nothing]


// * Note: expected extrusion!
scope of outer =>
let a = outer.bind(code"123")
code"x => ${
  scope of inner =>
  let b = outer.bind(code"${a} + ${code"x"}")
  code"${b} * 2"
}"
//│ Code[Int -> Int, ??x & ~??in]


scope of outer =>
let a = outer.bind(code"123")
code"x => ${
  scope of inner =>
  let b = inner.bind(code"${a} + ${code"x"}")
  code"${b} * 2"
}"
//│ Code[Int -> Int, nothing]


fun (<|) via(f, x) = f(x)
//│ fun (<|) via: forall 'a 'b. ('a -> 'b, 'a) -> 'b

scope <| outer =>
let a = outer.bind(code"123")
code"x => ${
  scope <| inner =>
  let b = inner.bind(code"${a} + ${code"x"}")
  code"${b} * 2"
}"
//│ Code[Int -> Int, nothing]



// * Note: a failed alternative interface:

declare class Scope[Res, OuterCtx, InnerCtx] {
  fun bind: (nameHint: Str, value: Code['a, InnerCtx | OuterCtx]) -> Code['a, InnerCtx]
  virtual fun result: Code[Res, InnerCtx]
}
declare fun reify(scope: forall 'in: () -> Scope['a, 'in, 'out]): Code['a, 'out]
//│ declare class Scope[Res, OuterCtx, InnerCtx] {
//│   constructor()
//│   fun bind: forall 'a. (nameHint: Str, value: Code['a, InnerCtx | OuterCtx]) -> Code['a, InnerCtx]
//│   fun result: Code[Res, InnerCtx]
//│ }
//│ fun reify: forall 'a0 'out. (scope: forall 'in. () -> Scope['a0, 'in, 'out]) -> Code['a0, 'out]

:e
class Example() extends Scope {
  let c0 = this.bind("a", code"123")
  let c1 = this.bind("b", code"${c0} + 1")
  val result = code"${c1} * ${c1}"
}
//│ ╔══[ERROR] Indirectly-recursive member should have a type signature
//│ ║  l.84: 	  let c0 = this.bind("a", code"123")
//│ ╙──      	               ^^^^^
//│ ╔══[ERROR] Indirectly-recursive member should have a type signature
//│ ║  l.85: 	  let c1 = this.bind("b", code"${c0} + 1")
//│ ╙──      	               ^^^^^
//│ ╔══[ERROR] Cannot access `this` while initializing field c0
//│ ║  l.84: 	  let c0 = this.bind("a", code"123")
//│ ╙──      	           ^^^^
//│ ╔══[ERROR] Cannot access `this` while initializing field c1
//│ ║  l.85: 	  let c1 = this.bind("b", code"${c0} + 1")
//│ ║        	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── The access to `this` is here
//│ ║  l.84: 	  let c0 = this.bind("a", code"123")
//│ ╙──      	           ^^^^
//│ ╔══[ERROR] Cannot access `this` while initializing field result
//│ ║  l.86: 	  val result = code"${c1} * ${c1}"
//│ ║        	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── The access to `this` is here
//│ ║  l.84: 	  let c0 = this.bind("a", code"123")
//│ ╙──      	           ^^^^
//│ ╔══[ERROR] Member `bind` is declared (or its declaration is inherited) but is not implemented in `Example`
//│ ║  l.83: 	class Example() extends Scope {
//│ ║        	      ^^^^^^^
//│ ╟── Declared here:
//│ ║  l.71: 	  fun bind: (nameHint: Str, value: Code['a, InnerCtx | OuterCtx]) -> Code['a, InnerCtx]
//│ ╙──      	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ class Example() extends Scope {
//│   fun bind: forall 'a. (nameHint: Str, value: Code['a, 'InnerCtx | 'OuterCtx]) -> Code['a, 'InnerCtx]
//│   let c0: error
//│   let c1: error
//│   val result: Code[Int, nothing]
//│ }

reify(Example)
//│ Code[Int, nothing]



