:NewDefs
:NoJS


:e
let c = code"x"
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.6: 	let c = code"x"
//│ ╙──     	             ^
//│ let c: Code[error, nothing]


let r = code"x => ${c}"
//│ let r: Code[anything -> error, nothing]

run(r)(1)
//│ error


// Bra, Rcd, Sel 
let rcd = code"{x: 10, y: 100, z: 1000}.z"
//│ let rcd: Code[1000, nothing]

run(rcd)
//│ 1000


// Let, Var, App -> evaluates to 3
let let_var = code"let y = 1 in y + 1 * 2"
//│ let let_var: Code[Int, nothing]

run(let_var)
//│ Int

// Fun, If
fun id(x) = x 
//│ fun id: forall 'a. 'a -> 'a

let global_fun = code"id(4)"
//│ let global_fun: Code[4, nothing]

run(global_fun)
//│ 4

let local_fun = code"let plus1 = x => x + 1 in plus1(if true then 1 else 2)"
//│ let local_fun: Code[Int, nothing]

run(local_fun)
//│ Int

let res = code"let id = x => x in id(3)"
//│ let res: Code[3, nothing]
run(res)
//│ 3

// Tup, Subs
let tup = code"let x = 1 in let y = 2 in [x, y].1"
//│ let tup: Code[2, nothing]

run(tup)
//│ 2

// Quasiquote 
:e
let code_in_code = code"let x = code"1" in x"
//│ ╔══[ERROR] Nested quotation is not allowed.
//│ ║  l.65: 	let code_in_code = code"let x = code"1" in x"
//│ ╙──      	                                ^^^^^^^
//│ let code_in_code: Code[error, nothing]


// Unquoted - Const function
let unquoted = code"let x = 3 in ${Const(10)} * x"
//│ let unquoted: Code[Int, nothing]
run(unquoted)
//│ Int

code"0.5 *. 2"
//│ Code[Num, nothing]

code"[(), null]"
//│ Code[[(), null], nothing]

let str_lit = code""" "hello" """
//│ let str_lit: Code["hello", nothing]


let y = 1
let free = code"y"
//│ let y: 1
//│ let free: Code[1, nothing]

let code_nested = code"let a = 1 in let b = 2 in ${code"a + b"}"
//│ let code_nested: Code[Int, nothing]

run(code_nested)
//│ Int

// We don't support non-lexically-bound free variables
:e
let y = code"x"
code"let id = x => ${y} in id(true)"
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.101: 	let y = code"x"
//│ ╙──       	             ^
//│ let y: Code[error, nothing]
//│ Code[error, nothing]

run(res)
//│ 3

let y = 1
let free_y = code"y"
//│ let y: 1
//│ let free_y: Code[1, nothing]

let use_free = code"let y = 3 in ${code"let y = 5 in ${code"let y = 100 in ${free_y}"} + y"} + y"
//│ let use_free: Code[Int, nothing]


run(use_free)
//│ Int

let res = code"let z = x => ${let c = code"x + 1" in c} in z"
//│ let res: Code[Int -> Int, nothing]


run(res)(100)
//│ Int


let f = 0
//│ let f: 0

fun f(x) = x
//│ fun f: forall 'a. 'a -> 'a


let res = code"f(1)"
//│ let res: Code[1, nothing]


run(res)
//│ 1


class Foo(n: Int)
//│ class Foo(n: Int)


let res = code"Foo(1)"
//│ let res: Code[Foo, nothing]


run(res)
//│ Foo

let codeA = code"let y = 2 in y"
let codeB = code"y + y"
//│ let codeA: Code[2, nothing]
//│ let codeB: Code[Int, nothing]


let both = code"${codeA}, ${codeB}"
//│ let both: Code[Int, nothing]

:e
let a = code"let x = 0 in x"
let b = code"x"
let c = code"${a} + ${b}"
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.169: 	let b = code"x"
//│ ╙──       	             ^
//│ let a: Code[0, nothing]
//│ let b: Code[error, nothing]
//│ let c: Code[Int, nothing]


run(c)
//│ Int

let res = code"{x: y} => y"
//│ let res: Code[forall 'a. {x: 'a} -> 'a, nothing]

run(res)({x:1})
//│ 1

code"x => ${ code"x" }"
//│ Code[forall 'a. 'a -> 'a, nothing]


run(code"x => x + ${x}")(1)
//│ Int

run(code"x => x + ${code"x"}")(1)
//│ Int

let v: Var[Int, nothing]
//│ let v: Var[Int, nothing]

run(v)
//│ Int

let v: Var[Int, anything]
//│ let v: Var[Int, anything]

:e
run(v)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.208: 	run(v)
//│ ║         	^^^^^^
//│ ╙── expression of type `anything` does not match type `nothing`
//│ error | Int


let x = code"1"
code"$x + 1"
//│ let x: Code[1, nothing]
//│ Code[Int, nothing]


:pe
code"$"
//│ ╔══[LEXICAL ERROR] unexpected character '$'
//│ ║  l.223: 	code"$"
//│ ╙──       	     ^
//│ ╔══[PARSE ERROR] Unexpected error in expression position
//│ ║  l.223: 	code"$"
//│ ╙──       	     ^
//│ ╔══[PARSE ERROR] Unexpected end of quasiquote section; an expression was expected here
//│ ║  l.223: 	code"$"
//│ ╙──       	      ^
//│ Code[(), nothing]
