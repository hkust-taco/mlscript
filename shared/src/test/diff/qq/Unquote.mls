:NewDefs
:NoJS


:e
let res = code"x"
code"(x) => ${res}"
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.6: 	let res = code"x"
//│ ╙──     	               ^
//│ let res: Code[error, nothing]
//│ Code[anything -> error, nothing]


:e
let res = code"x"
code"let y = 1 in ${res}"
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.16: 	let res = code"x"
//│ ╙──      	               ^
//│ let res: Code[error, nothing]
//│ Code[error, nothing]


:e
let a = code"x"
let b = code"y"
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.26: 	let a = code"x"
//│ ╙──      	             ^
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.27: 	let b = code"y"
//│ ╙──      	             ^
//│ let a: Code[error, nothing]
//│ let b: Code[error, nothing]


:e
code"a + a"
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.39: 	code"a + a"
//│ ║        	     ^^^^^
//│ ╟── code fragment of type `Code[error, nothing]` is not an instance of type `Int`
//│ ║  l.26: 	let a = code"x"
//│ ║        	        ^^^^^^^
//│ ╟── but it flows into reference with expected type `Int`
//│ ║  l.39: 	code"a + a"
//│ ╙──      	     ^
//│ Code[Int | error, nothing]


:e
code"a + b"
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.53: 	code"a + b"
//│ ║        	     ^^^^^
//│ ╟── code fragment of type `Code[error, nothing]` is not an instance of type `Int`
//│ ║  l.26: 	let a = code"x"
//│ ║        	        ^^^^^^^
//│ ╟── but it flows into reference with expected type `Int`
//│ ║  l.53: 	code"a + b"
//│ ╙──      	     ^
//│ Code[Int | error, nothing]


:e
code"x + (let x = 2 in x * x)"
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.67: 	code"x + (let x = 2 in x * x)"
//│ ╙──      	     ^
//│ Code[Int, nothing]


:e
let a = code"x"
let b = code"y"
let x = 1
code"let x = 1
${a} + (let y = 1 in ${b})
"
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.76: 	let b = code"y"
//│ ╙──      	             ^
//│ let a: Code[1, nothing]
//│ let b: Code[error, nothing]
//│ let x: 1
//│ Code[Int, nothing]



let cde = code"a"
//│ let cde: Code[Code[1, nothing], nothing]

let cde_w_unquote = code"${cde}"
//│ let cde_w_unquote: Code[Code[1, nothing], nothing]


:e
let cde_w_free_vars = code"let x = 1 in x + y"
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.99: 	let cde_w_free_vars = code"let x = 1 in x + y"
//│ ╙──      	                                            ^
//│ let cde_w_free_vars: Code[Int, nothing]


let cde_w_unquote_w_free_vars = code"${cde_w_free_vars}"
//│ let cde_w_unquote_w_free_vars: Code[Int, nothing]


:e
let cde_w_unquote_w_local_free_vars = code"[z, ${cde_w_unquote_w_free_vars}]"
//│ ╔══[ERROR] identifier not found: z
//│ ║  l.111: 	let cde_w_unquote_w_local_free_vars = code"[z, ${cde_w_unquote_w_free_vars}]"
//│ ╙──       	                                            ^
//│ let cde_w_unquote_w_local_free_vars: Code[[error, Int], nothing]


:e
let free_var1 = code"let x = 1 in x + y"
let free_var2 = code"let i = 1 in i + x"
let cde_w_mutli_unquote = code"${free_var2} + ${free_var1}"
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.119: 	let free_var1 = code"let x = 1 in x + y"
//│ ╙──       	                                      ^
//│ let free_var1: Code[Int, nothing]
//│ let free_var2: Code[Int, nothing]
//│ let cde_w_mutli_unquote: Code[Int, nothing]

fun f(x, y) = code"[${x}, ${y}]"
//│ fun f: forall 'a 'b 'c. (Code['a, 'b], Code['c, 'b]) -> Code[['a, 'c], 'b]


:e
let x = code"y"
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.134: 	let x = code"y"
//│ ╙──       	             ^
//│ let x: Code[error, nothing]

let c = f(x, x)
//│ let c: Code[[error, error], nothing]


:e
let cde_arr = code"[${code"y"}, ${code"y"}]"
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.145: 	let cde_arr = code"[${code"y"}, ${code"y"}]"
//│ ╙──       	                           ^
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.145: 	let cde_arr = code"[${code"y"}, ${code"y"}]"
//│ ╙──       	                                       ^
//│ let cde_arr: Code[[error, error], nothing]

code"let y = 1 in ${cde_arr}"
//│ Code[[error, error], nothing]


:e
y => code"[${code"y"}, ${code"y"}]"
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.159: 	y => code"[${code"y"}, ${code"y"}]"
//│ ╙──       	                  ^
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.159: 	y => code"[${code"y"}, ${code"y"}]"
//│ ╙──       	                              ^
//│ anything -> Code[[error, error], nothing]

code"y => ${c}"
//│ Code[anything -> [error, error], nothing]


fun f(x, y) = [code"[${x}, ${y}]", x, y]
//│ fun f: forall 'a 'b 'c 'd 'e. (Code['a, 'b] & 'c, Code['d, 'b] & 'e) -> [Code[['a, 'd], 'b], 'c, 'e]



fun f(x) = x
//│ fun f: forall 'a. 'a -> 'a

let built_in_binding_test = code"let f = x => x + 1 in f(if true then 1 else 2)"
//│ let built_in_binding_test: Code[Int, nothing]

code"f(0)"
//│ Code[0, nothing]

:e
// :ge
code"${code"${code"${z}"}"}"
//│ ╔══[ERROR] identifier not found: z
//│ ║  l.194: 	code"${code"${code"${z}"}"}"
//│ ╙──       	                     ^
//│ Code[nothing, nothing]

let z = code"1"
code"${code"${z}"}"
//│ let z: Code[1, nothing]
//│ Code[1, nothing]


:e
code"let x = 1 in let z = 1 in ${code"x + y"}"
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.207: 	code"let x = 1 in let z = 1 in ${code"x + y"}"
//│ ╙──       	                                          ^
//│ Code[Int, nothing]


code"let z = 0 in ${code"z + 1"}"
//│ Code[Int, nothing]

:e
code"let x = 1 in ${code"x + y"}"
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.218: 	code"let x = 1 in ${code"x + y"}"
//│ ╙──       	                             ^
//│ Code[Int, nothing]

let n = 1
code"${Const(n)} + 1"
//│ let n: 1
//│ Code[Int, nothing]

code"let x = 42 in x"
//│ Code[42, nothing]

code"let x = 42 in ${code"x"}"
//│ Code[42, nothing]

code"let x = 42 in ${code"x"}"
//│ Code[42, nothing]


code"let a = 1 in let b = 2 in ${a}"
//│ Code[1, nothing]
