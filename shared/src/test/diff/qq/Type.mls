:NewParser

:d
:ne
:NoJS
let qq_int = code"10"
//│ 1. Typing term Quoted' 10 '
//│ | 1. Typing term 10
//│ | 1. : 10<int,number>
//│ 1. : Code<>
//│ ⬤ Typed as: Code<>
//│  where: 
//│ qq_int: Code

:d
:ne
:NoJS
let int_tuple = (3, 2)
//│ 1. Typing term '(' 3, 2, ')'
//│ | 1. Typing term 3, 2,
//│ | | 1. Typing term 3
//│ | | 1. : 3<int,number>
//│ | | 1. Typing term 2
//│ | | 1. : 2<int,number>
//│ | 1. : (3<int,number>, 2<int,number>,)
//│ 1. : (3<int,number>, 2<int,number>,)
//│ ⬤ Typed as: (3<int,number>, 2<int,number>,)
//│  where: 
//│ int_tuple: (3, 2,)

type IntCode = Code[int]
//│ ╔══[ERROR] not a recognized type: (Code)[int]
//│ ║  l.31: 	type IntCode = Code[int]
//│ ╙──      	               ^^^^^^^^^
//│ Defined type alias IntCode
//│ ╔══[ERROR] identifier not found: IntCode
//│ ║  l.31: 	type IntCode = Code[int]
//│ ╙──      	     ^^^^^^^
//│ IntCode: () -> error

// fun foo(x: IntCode): unit <- this has error 

// foo(qq_int)
