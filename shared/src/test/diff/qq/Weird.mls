:NewDefs
:NoJS

fun power(x) = case
  0 then `1.0
  n then x `*. power(x)(n - 1)
//│ fun power: forall 'a. Code[Num, 'a] -> (0 | Int & ~0) -> Code[Num, 'a]


:e
let p3 = y `=>
  discard(run(x `=> power(x `+ y)(3)))
  y
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.12: 	  discard(run(x `=> power(x `+ y)(3)))
//│ ║        	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `?y & ~??x` does not match type `nothing`
//│ let p3: Code[forall 'a. (Int & 'a) -> 'a, nothing]


:e
`let y = `42 `in
  discard(run(x `=> power(x `+ y)(3)))
  y
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.23: 	  discard(run(x `=> power(x `+ y)(3)))
//│ ║        	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `?y & ~??x` does not match type `nothing`
//│ Code[42, nothing]


:e
`let y = `42 `in
  discard(run(`let x = `0 `in power(x `+ y)(3)))
  y
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.34: 	  discard(run(`let x = `0 `in power(x `+ y)(3)))
//│ ║        	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `?y & ~??x` does not match type `nothing`
//│ Code[42, nothing]


fun bind(rhs, k: forall 'g : Code['a, 'g] -> Code['b, 'c | 'g]) =
  `let x = rhs `in k(x)
//│ fun bind: forall 'a 'c 'b. (Code['a, 'c], k: forall 'g. Code['a, 'g] -> Code['b, 'g | 'c]) -> Code['b, 'c]


// fun body: forall 'g : (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
fun body(x, y) = case
  0 then x
  1 then y
  n then bind of x `+ y, z => body(y, z)(n - 1)
//│ fun body: forall 'a. (Code[Int, anything] & 'a, Code[Int, anything] & 'a) -> (0 | 1 | Int & ~0 & ~1) -> (Code[Int, anything] | 'a)


n => (x, y) `=> body(x, y)(n)
//│ (0 | 1 | Int & ~0 & ~1) -> Code[(Int, Int) -> Int, ??g & ~??y]

fun gib(n) = ((x, y) `=> body(x, y)(n))
//│ fun gib: (0 | 1 | Int & ~0 & ~1) -> Code[(Int, Int) -> Int, ??g & ~??y]


let g5 = gib(5)
//│ let g5: Code[(Int, Int) -> Int, ??g & ~??y]

:e
run(g5)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.67: 	run(g5)
//│ ║        	^^^^^^^
//│ ╙── expression of type `??g & ~??y` does not match type `nothing`
//│ error | (Int, Int) -> Int

x `=> x `+ (x `=> x)`(`42)
//│ Code[Int -> Int, nothing]


fun foo =
  `let x = `1
  mut let v = x
  `let x = `true
  x
//│ fun foo: Code[true, nothing]

:pe
:e
`let x = `1 `if
//│ ╔══[PARSE ERROR] This quote syntax is not supported yet
//│ ║  l.87: 	`let x = `1 `if
//│ ╙──      	         ^^
//│ ╔══[PARSE ERROR] Expected '`in'; found 'if' keyword instead
//│ ║  l.87: 	`let x = `1 `if
//│ ╙──      	             ^^
//│ ╔══[PARSE ERROR] Expected end of input; found 'if' keyword instead
//│ ║  l.87: 	`let x = `1 `if
//│ ╙──      	             ^^
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.87: 	`let x = `1 `if
//│ ║        	               ^
//│ ╙── undefined literal of type `()` is not an instance of type `Code`
//│ Code[error, nothing]

:pe
:e
`let x = `1 `in
//│ ╔══[PARSE ERROR] Unexpected end of input; an expression was expected here
//│ ║  l.105: 	`let x = `1 `in
//│ ╙──       	               ^
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.105: 	`let x = `1 `in
//│ ║         	               ^
//│ ╙── undefined literal of type `()` is not an instance of type `Code`
//│ Code[error, nothing]


class Ref[A](init: A) { mut val value: A = init }
//│ class Ref[A](init: A) {
//│   mut val value: A
//│ }


x `=>
  let v = Ref(x)
  let _ = y `=>
    set v.value = y
    `0
  v.value
//│ Code[forall 'a. 'a -> 'a, ??y & ~??x]

let foo =
  mut let r = `0
  x `=> ((set r = x), `0), r
//│ let foo: Code[0, nothing] | Var['a, in ??x out ??x0]


fun foo =
  `let x = `1
  let v = Ref(x)
  `let x = `true
  set v.value = x
  x
//│ fun foo: Code[true, nothing]

let a = `42
//│ let a: Code[42, nothing]

:w
`let x = a `in
  `log`(x)
  x
//│ ╔══[WARNING] Expression in statement position should have type `()`.
//│ ╟── Use a comma expression `... , ()` to explicitly discard non-unit values, making your intent clearer.
//│ ╟── Type mismatch in quasiquote:
//│ ║  l.149: 	  `log`(x)
//│ ║         	  ^^^^^^^^
//│ ╙── code fragment of type `Code[?a, ?b | ?c]` does not match type `()`
//│ Code[42, nothing]

:w
`let x = a
`log`(x)
x
//│ ╔══[WARNING] Expression in statement position should have type `()`.
//│ ╟── Use a comma expression `... , ()` to explicitly discard non-unit values, making your intent clearer.
//│ ╟── Type mismatch in quasiquote:
//│ ║  l.161: 	`log`(x)
//│ ║         	^^^^^^^^
//│ ╙── code fragment of type `Code[?a, ?b | ?c]` does not match type `()`
//│ Code[42, nothing]

:w
`let x = a `in
  run of
    `log`(x)
    `1
  x
//│ ╔══[WARNING] Expression in statement position should have type `()`.
//│ ╟── Use a comma expression `... , ()` to explicitly discard non-unit values, making your intent clearer.
//│ ╟── Type mismatch in quasiquote:
//│ ║  l.174: 	    `log`(x)
//│ ║         	    ^^^^^^^^
//│ ╙── code fragment of type `Code[?a, ?b | ?c]` does not match type `()`
//│ ╔══[WARNING] Expression in statement position should have type `()`.
//│ ╟── Use a comma expression `... , ()` to explicitly discard non-unit values, making your intent clearer.
//│ ╟── Type mismatch in application:
//│ ║  l.173: 	  run of
//│ ║         	  ^^^^^^
//│ ║  l.174: 	    `log`(x)
//│ ║         	^^^^^^^^^^^^
//│ ║  l.175: 	    `1
//│ ║         	^^^^^^
//│ ╟── integer literal of type `1` does not match type `()`
//│ ║  l.175: 	    `1
//│ ║         	     ^
//│ ╟── but it flows into application with expected type `()`
//│ ║  l.173: 	  run of
//│ ║         	  ^^^^^^
//│ ║  l.174: 	    `log`(x)
//│ ║         	^^^^^^^^^^^^
//│ ║  l.175: 	    `1
//│ ╙──       	^^^^^^
//│ Code[42, nothing]

:e
`let x = a `in
  let _ = run of
    `let _ = `log`(x)
    `1
  x
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.206: 	  let _ = run of
//│ ║         	          ^^^^^^
//│ ║  l.207: 	    `let _ = `log`(x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.208: 	    `1
//│ ║         	^^^^^^
//│ ╟── code fragment context type of type `?x` does not match type `nothing`
//│ ║  l.207: 	    `let _ = `log`(x)
//│ ║         	                   ^
//│ ╟── but it flows into code fragment context type with expected type `nothing`
//│ ║  l.207: 	    `let _ = `log`(x)
//│ ╙──       	             ^^^^^^^^
//│ Code[42, nothing]


`let x = `1 `in
  `let _ = `log`(x)
  x
//│ Code[1, nothing]

fun foo =
  `let x = `1
  `let _ = `log`(x)
  x
//│ fun foo: Code[1, nothing]
