:NewDefs
:NoJS



fun (%>) bind: (Code['a, 'g], k: forall 'c: Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]
//│ fun (%>) bind: forall 'a 'g 'b. (Code['a, 'g], k: forall 'c. Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]

// fun (%>) bind(rhs, k: forall 'c: Code['a, 'c] -> Code['b, 'c]) = code"let x = ${rhs} in ${k(code"x")}"



fun body(x, y) = case
  0 then x
  1 then y
  n then code"${x} + ${y}" %> z => body(x, z)(n - 1)
//│ fun body: forall 'a. (Code[Int, anything] & 'a, Code[Int, anything] & 'a) -> (0 | 1 | Int & ~0 & ~1) -> (Code[Int, ??c] | 'a)

:e
body : forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.20: 	body : forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
//│ ║        	^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.6: 	fun (%>) bind: (Code['a, 'g], k: forall 'c: Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]
//│ ║       	                                                     ^^
//│ ╟── into type `'g`
//│ ║  l.20: 	body : forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
//│ ║        	                                                                     ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.16: 	  n then code"${x} + ${y}" %> z => body(x, z)(n - 1)
//│ ║        	                              ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.16: 	  n then code"${x} + ${y}" %> z => body(x, z)(n - 1)
//│ ╙──      	                           ^^
//│ forall 'g. (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]

let c = code"(x, y) => ${body(code"x", code"y")(0)}"
//│ let c: Code[(Int, Int) -> Int, ??c & ~??y]

:e
run(c)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.43: 	run(c)
//│ ║        	^^^^^^
//│ ╙── expression of type `??c & ~??y` does not match type `nothing`
//│ error | (Int, Int) -> Int



// * An unnecessary complication, just for testing purposes:

fun body(x, y) = case
  0 then x
  1 then y
  n then code"${x} + ${y}" %> z => code"${body(x, z)(n - 1)}"
//│ fun body: forall 'b 'a. (Code['b, anything] & 'a, Code['b, anything] & 'a) -> (0 | 1 | Int & ~0 & ~1) -> (Code[Int & (Int | 'b), ??c] | 'a)

code"(x, y) => ${body(code"x", code"y")(0)}"
//│ Code[(Int, Int) -> Int, ??c & ~??y]

:e
body : forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.64: 	body : forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
//│ ║        	^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.6: 	fun (%>) bind: (Code['a, 'g], k: forall 'c: Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]
//│ ║       	                                                     ^^
//│ ╟── into type `'g`
//│ ║  l.64: 	body : forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
//│ ║        	                                                                     ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.57: 	  n then code"${x} + ${y}" %> z => code"${body(x, z)(n - 1)}"
//│ ║        	                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.57: 	  n then code"${x} + ${y}" %> z => code"${body(x, z)(n - 1)}"
//│ ╙──      	                           ^^
//│ forall 'g. (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]

let c = code"(x, y) => ${body(code"x", code"y")(0)}"
//│ let c: Code[(Int, Int) -> Int, ??c & ~??y]

:e
run(c)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.87: 	run(c)
//│ ║        	^^^^^^
//│ ╙── expression of type `??c & ~??y` does not match type `nothing`
//│ error | (Int, Int) -> Int



