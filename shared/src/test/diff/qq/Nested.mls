:NewDefs
:NoJS


:e
let t = code"id(code"123")"
//│ ╔══[ERROR] Nested quotation is not allowed.
//│ ║  l.6: 	let t = code"id(code"123")"
//│ ╙──     	                ^^^^^^^^^
//│ let t: Code[error, nothing]

let inner0 = code"123"
let t = code"id(inner0)"
//│ let inner0: Code[123, nothing]
//│ let t: Code[Code[123, nothing], nothing]

let r = run(t)
let rr = run(r)
//│ let r: Code[123, nothing]
//│ let rr: 123

:e
let t = code"let x = code"1" in code"y => ${x} + 1""
//│ ╔══[ERROR] Nested quotation is not allowed.
//│ ║  l.23: 	let t = code"let x = code"1" in code"y => ${x} + 1""
//│ ╙──      	                     ^^^^^^^
//│ ╔══[ERROR] Nested quotation is not allowed.
//│ ║  l.23: 	let t = code"let x = code"1" in code"y => ${x} + 1""
//│ ╙──      	                                ^^^^^^^^^^^^^^^^^^^
//│ let t: Code[error, nothing]

let inner1 = code"1"
let inner2(x) = code"y => ${x} + 1"
let t = code"let x = inner1 in inner2(x)"
//│ let inner1: Code[1, nothing]
//│ let inner2: Code[Int, anything] -> Code[anything -> Int, nothing]
//│ let t: Code[Code[anything -> Int, nothing], nothing]

run(run(t))(0)
//│ Int

let r = run(t)
//│ let r: Code[anything -> Int, nothing]
run(r)
//│ anything -> Int

let inner3 = code"2"
let t = code"let x = inner1 in let y = inner3 in x"
//│ let inner3: Code[2, nothing]
//│ let t: Code[Code[1, nothing], nothing]
run(r)
//│ anything -> Int

let c1 = code"let y = inner1 in x => y"
//│ let c1: Code[anything -> Code[1, nothing], nothing]

let r = run(c1)(0)
//│ let r: Code[1, nothing]

let t = code"x => x"
//│ let t: Code[forall 'a. 'a -> 'a, nothing]
run(t)(0)
//│ 0

let y = code"1"
let r = code"""x => x + ${y}"""
//│ let y: Code[1, nothing]
//│ let r: Code[Int -> Int, nothing]

run(r)(3)
//│ Int

let x = code"1"
let r = code"""x => x + ${x}"""
//│ let x: Code[1, nothing]
//│ let r: Code[Int -> Int, nothing]

run(r)(0)
//│ Int

let x = code"2"
//│ let x: Code[2, nothing]

let r = code"""x => (let x = 1 in x + ${x})"""
//│ let r: Code[anything -> Int, nothing]

run(r)("happy")
//│ Int

let inner4(x) = code"let x = inner2 in ${x}"
let c2 = code"let x = inner1 in inner4(x)"
//│ let inner4: anything -> Code[Code[Int, anything] -> Code[anything -> Int, nothing], nothing]
//│ let c2: Code[Code[Code[Int, anything] -> Code[anything -> Int, nothing], nothing], nothing]
let r = run(c2)
//│ let r: Code[Code[Int, anything] -> Code[anything -> Int, nothing], nothing]
let rr = run(r)
//│ let rr: Code[Int, anything] -> Code[anything -> Int, nothing]
rr(code"123")
//│ Code[anything -> Int, nothing]

let inner4(x) = code"let y = 100 in ${x}"
let c3 = code"let x1 = inner1 in let x2 = inner2 in inner4(x)"
//│ let inner4: forall 'a. Code['a, anything] -> Code['a, nothing]
//│ let c3: Code[Code[2, nothing], nothing]
let r = run(c3)
//│ let r: Code[2, nothing]
run(r)
//│ 2


let r = code"x => ${code"x + 1"}"
//│ let r: Code[Int -> Int, nothing]

run(r)(1)
//│ Int


let r = code"x => ${ x }"
run(r)
run(code"x => ${ x }")
//│ let r: Code[forall 'a. 'a -> 'a, nothing]
//│ forall 'b. 'b -> 'b

f => code"x => ${ let tmp = f(x) in x }"
//│ forall 'a 'b 'c. (Var[in 'a out 'a | 'b, in ??x out ??x0] -> anything) -> Code[('b & 'c) -> ('a | 'c), nothing]

let inner5(x) = code"${x}"
let r = code"x => inner5(x)"
//│ let inner5: forall 'a 'b. Code['a, 'b] -> Code['a, 'b]
//│ let r: Code[forall 'c 'd. Code['c, 'd] -> Code['c, 'd], nothing]
run(r)(code"1")
//│ Code[1, nothing]

:e
code"code"code"x => ${x}"""
//│ ╔══[ERROR] Nested quotation is not allowed.
//│ ║  l.135: 	code"code"code"x => ${x}"""
//│ ╙──       	     ^^^^^^^^^^^^^^^^^^^^^
//│ Code[error, nothing]

code"r"
//│ Code[Code[forall 'a 'b. Code['a, 'b] -> Code['a, 'b], nothing], nothing]


code"x => ${code"${code"${code"x"}"}"}"
//│ Code[forall 'a. 'a -> 'a, nothing]

fun f(cde) = code"x => ${code"${code"${code"x + ${cde}"}"}"}"
run(f(Const(114)))(514)
//│ fun f: Code[Int, anything] -> Code[Int -> Int, nothing]
//│ Int

fun f(x) = code"${run(x)} + 1"
//│ fun f: forall 'a. Code[Code[Int, 'a], nothing] -> Code[Int, 'a]

:e
code"x => ${code"code"code"${x}"""}"
//│ ╔══[ERROR] Nested quotation is not allowed.
//│ ║  l.157: 	code"x => ${code"code"code"${x}"""}"
//│ ╙──       	                 ^^^^^^^^^^^^^^^^
//│ Code[anything -> error, nothing]

:e
code"xxx => ${code"code"code"${xxx}"""}"
//│ ╔══[ERROR] Nested quotation is not allowed.
//│ ║  l.164: 	code"xxx => ${code"code"code"${xxx}"""}"
//│ ╙──       	                   ^^^^^^^^^^^^^^^^^^
//│ Code[anything -> error, nothing]


