:NewDefs
:NoJS



// * This definition is not good as it leads to extrusion; we need `k` to be polymorphic (which requires annotation)
fun (%>) bind(rhs, k) = code"let x = ${rhs} in ${k(code"x")}"
//│ fun (%>) bind: forall 'a 'b 'c. (Code['a, 'b], Code['a, ??x] -> Code['c, 'b]) -> Code['c, 'b]

fun (%>) bind(rhs, k) = code"let x = ${rhs} in ${k(x)}"
//│ fun (%>) bind: forall 'a 'b 'c. (Code['c, 'a], Var['c, in ??x out ??x0] -> Code['b, 'a]) -> Code['b, 'a]

// * Notice the extrusion
fun foo(k) = code"x => ${k(code"x")}"
//│ fun foo: forall 'a 'b 'c. (Code['b, ??x] -> Code['c, 'a]) -> Code['b -> 'c, 'a]

fun (%>) bind(rhs, k) = code"(x => ${k(code"x")})(${rhs})"
//│ fun (%>) bind: forall 'a 'b 'c. (Code['a, 'b], Code['a, ??x] -> Code['c, 'b]) -> Code['c, 'b]

fun app = code"(f, x) => f(x)"
fun (%>) bind(rhs, k) = code"${app}(x => ${k(code"x")}, ${rhs})"
//│ fun app: forall 'a 'b. Code[('a -> 'b, 'a) -> 'b, nothing]
//│ fun (%>) bind: forall 'c 'd 'e. (Code['c, 'd], Code['c, ??x] -> Code['e, 'd]) -> Code['e, 'd]


fun app(f, x) = f(x)
fun bind2(rhs, k) = code"app(x => ${k(code"x")}, ${rhs})"
//│ fun app: forall 'a 'b. ('a -> 'b, 'a) -> 'b
//│ fun bind2: forall 'c 'd 'e. (Code['c, 'd], Code['c, ??x] -> Code['e, 'd]) -> Code['e, 'd]

:e
fun foo() =
  let bar = 42 // not at top level
  code"bar"
//│ ╔══[ERROR] identifier not found: bar
//│ ║  l.34: 	  code"bar"
//│ ╙──      	       ^^^
//│ fun foo: () -> Code[error, nothing]

fun (++) myadd(x, y) = x + y
code"1 ++ 2"
//│ fun (++) myadd: (Int, Int) -> Int
//│ Code[Int, nothing]

// G <: ??x | 'a
fun bind(rhs, k: forall 'C: Code['A, 'C] -> Code['B, 'C | 'G]) = code"let x = ${rhs} in ${k(code"x")}"
//│ fun bind: forall 'A 'a 'B. (Code['A, 'a], k: forall 'C. Code['A, 'C] -> Code['B, 'C | 'a]) -> Code['B, 'a]

bind : forall 'a, 'c, 'g: (Code['a, 'g], k: forall 'c: Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]
//│ forall 'g 'a. (Code['a, 'g], k: forall 'c. Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]


fun foo(dbg) =
  code"x => ${let c = code"(${x}, ${foo(dbg)})" in dbg(c)}"
//│ fun foo: forall 'a 'b. (Code[anything -> 'a, anything] -> Code['a, 'b]) -> Code[anything -> 'a, 'b]

fun power(x) = case
  0 then `1.0
  n then x `*. power(x)(n - 1)
//│ fun power: forall 'a. Code[Num, 'a] -> (0 | Int & ~0) -> Code[Num, 'a]

:e
let p3 = y `=>
  discard(run(x `=> power(x `+ y)(3)))
  y
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.64: 	  discard(run(x `=> power(x `+ y)(3)))
//│ ║        	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `?y & ~??x` does not match type `nothing`
//│ let p3: Code[forall 'a. (Int & 'a) -> 'a, nothing]
