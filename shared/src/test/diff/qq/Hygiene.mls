:NewDefs
:NoJS


// Test 1
let code_test = code"let x0 = 1 in let x1 = 10 in let x2 = 100 in x0 + x1 + x2"
//│ let code_test: Code[Int, nothing]

run(code_test)
//│ Int


// Test 2
fun test: forall 'c: (Int, cde: Code[Int, 'c]) => Code[Int, 'c]
fun test(n, cde) = if n > 0 then code"let x = ${Const(n)} in ${test(n - 1, code"${cde} + x")}" else cde
//│ fun test: forall 'a. (Int, Code[Int, anything] & 'a) -> (Code[Int, nothing] | 'a)
//│ fun test: forall 'c. (Int, cde: Code[Int, 'c]) -> Code[Int, 'c]

run(test(3, code"0"))
//│ Int

fun test(n, cde) = if n > 0 then code"${test(n - 1, code"${cde} + ${Const(n)}")}" else cde
//│ fun test: forall 'a 'b. (Int, Code[anything, anything] & 'b) -> (Code[Int, 'a] | 'b)


run(test(3, code"0"))
//│ Int


// Test 3: note that the free variable makes this unhygienic, which is intended
:e
fun cde_template(cde) = code"${cde} + x"
fun test(n, cde) = if n > 0 then code"let x = ${Const(n)} in ${test(n - 1, cde_template(cde))}" else cde
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.32: 	fun cde_template(cde) = code"${cde} + x"
//│ ╙──      	                                      ^
//│ fun cde_template: forall 'a. Code[Int, 'a] -> Code[Int, 'a]
//│ fun test: forall 'b. (Int, Code[anything, anything] & 'b) -> (Code[Int, nothing] | 'b)

let c = test(3, code"0")
//│ let c: Code[0, nothing]


run(c)
//│ Int


code"x => ${ code"x" }"
//│ Code[forall 'a. 'a -> 'a, nothing]


let x4 = code"x => x => x => x"
run(x4)(1)(2)(3)
//│ let x4: Code[forall 'a. anything -> anything -> 'a -> 'a, nothing]
//│ 3

let y4 = code"let y = 1 in let y = 2 in let y = 3 in y"
run(y4)
//│ let y4: Code[3, nothing]
//│ 3

code"x => ${let x = code"42" in run(x), x}"
//│ Code[anything -> 42, nothing]
