:NoRecursiveTypes

// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ ('head & 'a) -> (List['a] & 'tail) -> (Cons['a] with {head: 'head, tail: 'tail})
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

class ST[S, A]
  method Inv_S: S -> S
  method Cov_A: A
//│ Defined class ST[=S, +A]
//│ Declared ST.Inv_S: ST['S, ?] -> 'S -> 'S
//│ Declared ST.Cov_A: ST['S, 'A] -> 'A

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ List['a] -> 'a
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ List['a] -> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

def is_empty: forall 'a. List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ anything -> bool
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]

def single: forall 'a. 'a -> List['a]
def single x = cons x nil
//│ single: 'a -> List['a]
//│       = <missing implementation>
//│ 'a -> List['a]
//│   <:  single:
//│ 'a -> List['a]
//│       = [Function: single]

def length: forall 'a. List['a] -> int
rec def length l =
  if is_empty l then 0
  else succ (length (tail l))
//│ length: List[?] -> int
//│       = <missing implementation>
//│ List[?] -> int
//│   <:  length:
//│ List[?] -> int
//│       = [Function: length1]

def choose: forall 'a. 'a -> 'a -> 'a
def choose x y = if true then x else y
//│ choose: 'a -> 'a -> 'a
//│       = <missing implementation>
//│ 'a -> 'a -> 'a
//│   <:  choose:
//│ 'a -> 'a -> 'a
//│       = [Function: choose]

def map: forall 'a 'b. ('a -> 'b) -> List['a] -> List['b]
rec def map f l =
  if is_empty l then nil
  else cons (f (head l)) (map f (tail l))
//│ map: ('a -> 'b) -> List['a] -> List['b]
//│    = <missing implementation>
//│ ('a -> 'b) -> List['a] -> List['b]
//│   <:  map:
//│ ('a -> 'b) -> List['a] -> List['b]
//│    = [Function: map]

def runST: (forall 's. ST['s, 'v]) -> 'v
//│ runST: (forall 's. ST['s, 'v]) -> 'v
//│      = <missing implementation>

def argST: ST['s, int]
//│ argST: ST['s, int]
//│      = <missing implementation>



// ============ Sec 2 ============

def id x = x
//│ id: 'a -> 'a
//│   = [Function: id]

// FreezeML B1
def poly f = (f 1, f true)
//│ poly: (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│     = [Function: poly]

// FreezeML A10
poly id
//│ res: (1, true,)
//│    = [ 1, true ]

def app f x = f x
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = [Function: app]

// FreezeML D1
app poly id
//│ res: (1, true,)
//│    = [ 1, true ]

// FreezeML F2
ids = single id
//│ ids: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id], tail: Nil {} }

idss = single ids
//│ idss: List[List[forall 'a. 'a -> 'a]]
//│     = Cons {
//│         head: Cons { head: [Function: id], tail: Nil {} },
//│         tail: Nil {}
//│       }

def revapp x f = f x
//│ revapp: 'a -> ('a -> 'b) -> 'b
//│       = [Function: revapp]

// FreezeML D2
revapp id poly
//│ res: (1, true,)
//│    = [ 1, true ]

// FreezeML C1
length ids
//│ res: int
//│    = 1

// FreezeML C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id], tail: Nil {} }

app (map head) (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id], tail: Nil {} }

// nope
fun f -> poly f
//│ res: (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│    = [Function: res]

// FreezeML D2
// nope in plain HMF
revapp id poly
//│ res: (1, true,)
//│    = [ 1, true ]

// nope
let f = revapp id in f poly
//│ res: (1, true,)
//│    = [ 1, true ]

:ne
def iapp: (int -> int) -> int -> int
let f = revapp id in (f poly, f iapp)
//│ iapp: (int -> int) -> int -> int
//│ res: ((1, true,), int -> int,)

// ============ Sec 3 ============

// FreezeML C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// nope
single id : List[forall 'a. 'a -> 'a]
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id], tail: Nil {} }

:ne
def foo: ((forall 'a. 'a -> 'a) -> (int, bool)) -> int
foo (fun f -> (f 1, f true))
//│ foo: ((forall 'a. 'a -> 'a) -> (int, bool,)) -> int
//│ res: int

choose nil ids
choose ids nil
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id], tail: Nil {} }

let f = choose nil in f ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// FreezeML D4
:ne
app runST argST
//│ res: int

// ============ Sec 4 ============

// c.f. FreezeML A1
fun x -> fun y -> x
//│ res: 'a -> anything -> 'a
//│    = [Function: res]

// FreezeML C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id], tail: Nil {} }

let foo x y = single y in foo ids id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id], tail: Nil {} }

head ids 1
//│ res: 1
//│    = 1

// ============ Sec 5 ============

// FreezeML B1
def poly: (forall 'a. 'a -> 'a) -> (int, bool)
def poly f = (f 1, f true)
//│ poly: (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = <missing implementation>
//│ (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│   <:  poly:
//│ (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = [Function: poly1]

const x y = x
//│ const: 'a -> anything -> 'a
//│      = [Function: const1]

// ============ Sec 6 ============

// FreezeML C5
xs = cons id ids
//│ xs: List[forall 'a. 'a -> 'a]
//│   = Cons {
//│       head: [Function: id],
//│       tail: Cons { head: [Function: id], tail: Nil {} }
//│     }
