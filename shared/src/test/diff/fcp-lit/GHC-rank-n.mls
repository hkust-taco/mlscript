// * Practical type inference for arbitrary-rank types
// * Many examples in the Motivation section, incl a rank-3 one



// Theorem 4.3 (Distributivity) ⊢dsk ∀a.σ1 → σ2 ≤ (∀a.σ1) → ∀a.σ2.


class F[A]
  method Id: A -> A
class G[A]
  method Id: A -> A
//│ Defined class F[=A]
//│ Declared F.Id: F['A] -> 'A -> 'A
//│ Defined class G[=A]
//│ Declared G.Id: G['A] -> 'A -> 'A

def f: forall 'a. F['a] -> G['a]
//│ f: F['a] -> G['a]
//│  = <missing implementation>


f : (forall 'a. F['a]) -> (forall 'a. G['a])
//│ res: (forall 'a. F['a]) -> (forall 'a0. G['a0])
//│    = <no result>
//│      f is not implemented


:DontDistributeForalls

:e
f: (forall 'a. F['a]) -> (forall 'a. G['a])
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.32: 	f: (forall 'a. F['a]) -> (forall 'a. G['a])
//│ ║        	^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.32: 	f: (forall 'a. F['a]) -> (forall 'a. G['a])
//│ ║        	                                       ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.32: 	f: (forall 'a. F['a]) -> (forall 'a. G['a])
//│ ╙──      	^
//│ res: (forall 'a. F['a]) -> (forall 'a0. G['a0])
//│    = <no result>
//│      f is not implemented



// "In this example it is plain as a pike-staff that i should have the type (∀a.a → a)"
// foo = (\i. (i 3, i True)) :: (∀a.a → a) → (Int, Bool)

foo = (fun i -> (i 3, i true)) : (forall 'a. 'a -> 'a) -> (int, bool)
//│ foo: (forall 'a. 'a -> 'a) -> (int, bool,)
//│    = [Function: foo]

// bar has type ∀a.(Int → a) → a
// foo w = bar (\x. x+w)

def bar: forall 'a. (int -> 'a) -> 'a
//│ bar: (int -> 'a) -> 'a
//│    = <missing implementation>

foo w = bar (fun x -> x + w)
//│ foo: int -> int
//│    = <no result>
//│      bar is not implemented


