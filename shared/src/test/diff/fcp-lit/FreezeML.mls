// * FreezeML: complete and easy type inference for first-class polymorphism
// * https://dl.acm.org/doi/10.1145/3385412.3386003
// * Extended version: https://arxiv.org/abs/2004.00396

:NoRecursiveTypes


// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]

class ST[S, A]
  method Inv_S: S -> S
  method Cov_A: A
//│ Defined class ST[=S, +A]
//│ Declared ST.Inv_S: ST['S, ?] -> 'S -> 'S
//│ Declared ST.Cov_A: ST['S, 'A] -> 'A


// ============ Type signatures for functions used in the examples ============

def head: List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ List['a] -> 'a
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ List['a] -> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

// Used to represent `[]` in the papers
def nil: List['a]
nil = Nil {}
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

def cons: 'a -> List['a] -> List['a]
def cons head tail = Cons { head; tail }
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ ('head & 'a) -> (List['a] & 'tail) -> (Cons['a] with {head: 'head, tail: 'tail})
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

def is_empty: forall 'a. List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ anything -> bool
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]

def single: 'a -> List['a]
def single x = cons x nil
//│ single: 'a -> List['a]
//│       = <missing implementation>
//│ 'a -> List['a]
//│   <:  single:
//│ 'a -> List['a]
//│       = [Function: single]

def append: List['a] -> List['a] -> List['a]
rec def append l1 l2 =
  if is_empty l1 then l2
  else cons (head l1) (append (tail l1) l2)
//│ append: List['a] -> List['a] -> List['a]
//│       = <missing implementation>
//│ List['a] -> List['a] -> List['a]
//│   <:  append:
//│ List['a] -> List['a] -> List['a]
//│       = [Function: append]

def length: List['a] -> int
rec def length l =
  if is_empty l then 0
  else succ (length (tail l))
//│ length: List[?] -> int
//│       = <missing implementation>
//│ List[?] -> int
//│   <:  length:
//│ List[?] -> int
//│       = [Function: length1]

def id: 'a -> 'a
def id x = x
//│ id: 'a -> 'a
//│   = <missing implementation>
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a
//│   = [Function: id1]

def ids: List[forall 'a. 'a -> 'a]
def ids = single id
//│ ids: List[forall 'a. 'a -> 'a]
//│    = <missing implementation>
//│ List[forall 'a. 'a -> 'a]
//│   <:  ids:
//│ List[forall 'a. 'a -> 'a]
//│    = [Function: ids]

def inc: int -> int
def inc = succ
//│ inc: int -> int
//│    = <missing implementation>
//│ int -> int
//│   <:  inc:
//│ int -> int
//│    = [Function: inc]

def choose: 'a -> 'a -> 'a
def choose x y = if true then x else y
//│ choose: 'a -> 'a -> 'a
//│       = <missing implementation>
//│ 'a -> 'a -> 'a
//│   <:  choose:
//│ 'a -> 'a -> 'a
//│       = [Function: choose]

def poly: (forall 'a. 'a -> 'a) -> (int, bool)
def poly f = (f 1, f true)
//│ poly: (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = <missing implementation>
//│ (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│   <:  poly:
//│ (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = [Function: poly]

def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
def auto x = x x
//│ auto: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│     = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto:
//│ (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│     = [Function: auto]

def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
def auto_ x = x x
//│ auto_: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto_:
//│ (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = [Function: auto_]

def map: ('a -> 'b) -> List['a] -> List['b]
rec def map f l =
  if is_empty l then nil
  else cons (f (head l)) (map f (tail l))
//│ map: ('a -> 'b) -> List['a] -> List['b]
//│    = <missing implementation>
//│ ('b -> 'a) -> List['b] -> List['a]
//│   <:  map:
//│ ('a -> 'b) -> List['a] -> List['b]
//│    = [Function: map]

def app: ('a -> 'b) -> 'a -> 'b
def app f x = f x
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = <missing implementation>
//│ ('a -> 'b) -> 'a -> 'b
//│   <:  app:
//│ ('a -> 'b) -> 'a -> 'b
//│    = [Function: app]

def revapp: 'a -> ('a -> 'b) -> 'b
def revapp x f = f x
//│ revapp: 'a -> ('a -> 'b) -> 'b
//│       = <missing implementation>
//│ 'a -> ('a -> 'b) -> 'b
//│   <:  revapp:
//│ 'a -> ('a -> 'b) -> 'b
//│       = [Function: revapp]

def flip: ('a -> 'b -> 'c) -> 'b -> 'a -> 'c
def flip f = fun x -> fun y -> f y x
//│ flip: ('a -> 'b -> 'c) -> 'b -> 'a -> 'c
//│     = <missing implementation>
//│ ('a -> 'b -> 'c) -> 'b -> 'a -> 'c
//│   <:  flip:
//│ ('a -> 'b -> 'c) -> 'b -> 'a -> 'c
//│     = [Function: flip]

:ng
def runST: (forall 's. ST['s, 'v]) -> 'v
//│ runST: (forall 's. ST['s, 'v]) -> 'v

:ng
def argST: ST['s, int]
//│ argST: ST['s, int]


// ============ A. polymorphic instantiation ============

// A1
const2 x y = y
//│ const2: anything -> 'a -> 'a
//│       = [Function: const2]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun (x: forall 'a. 'a -> 'a) -> x x
//│ res: (forall 'a. 'a -> 'a) -> 'a0 -> 'a0
//│    = [Function: res]

// A4'
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
def f: ('a -> 'a) -> List['a] -> 'a
//│ f: ('a -> 'a) -> List['a] -> 'a
//│  = <missing implementation>

:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
def g: List['a] -> List['a] -> 'a
g (single id) ids
//│ g: List['a] -> List['a] -> 'a
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

:ng
def h: int -> (forall 'a. 'a -> 'a)
def k: 'a -> List['a] -> 'a
def lst: List[forall 'a. int -> 'a -> 'a]
//│ h: int -> (forall 'a. 'a -> 'a)
//│ k: 'a -> List['a] -> 'a
//│ lst: List[forall 'a. int -> 'a -> 'a]

// E1
:ng
k h lst
//│ res: int -> 'a -> 'a

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> 'a -> 'a

// E3
:ng
def r: (forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> int
//│ r: (forall 'b. anything -> 'b -> 'b) -> int
:ng
r (fun x -> fun y -> y)
//│ res: int

:ng
:ns
r
//│ res: (forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> int


// ============ F. FreezeML Programs ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
a = choose id (fun (x: (forall 'a. 'a -> 'a)) -> auto_ x)
//│ a: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│  = [Function: id1]

a id
//│ res: 'b -> 'b
//│    = [Function: id1]

choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]

a = choose id auto_
//│ a: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│  = [Function: id1]

a id
//│ res: 'b -> 'b
//│    = [Function: id1]






// ============ Expected error cases (useful for regression-testing error messages) ============


:ns
:e // * Skolem extrusion; rightly rejected
choose id (fun (x: ('a -> 'a)) -> auto_ x)
//│ ╔══[ERROR] Type error in application
//│ ║  l.503: 	choose id (fun (x: ('a -> 'a)) -> auto_ x)
//│ ║         	                                  ^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.172: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ║         	                        ^^
//│ ╟── back into type variable `'a`
//│ ║  l.172: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ╙──       	                              ^^
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'a0 'd. ('a0 -> 'a0) -> 'd)
//│     'd :> (forall 'b. 'b -> 'b) | error
//│     'a0 :> ??a
//│         <: ??a0
//│    = [Function: id1]

// * The skolem used to (unsafely) leak into this type – see also `Skolems.mls`:
res
//│ res: (anything -> ??a & 'a) -> (error | 'a | 'b -> 'b)
//│    = [Function: id1]

:e // skolem extrusion
res id
//│ ╔══[ERROR] Type error in application
//│ ║  l.527: 	res id
//│ ║         	^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.172: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ║         	                        ^^
//│ ╟── back into type variable `'a`
//│ ║  l.172: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ║         	                              ^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.503: 	choose id (fun (x: ('a -> 'a)) -> auto_ x)
//│ ╙──       	                          ^^
//│ res: error | 'b -> 'b
//│    = [Function: id1]


:e
a (fun x -> { u = x })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.545: 	a (fun x -> { u = x })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── record literal of type `{u: ?a}` does not match type `'a`
//│ ║  l.545: 	a (fun x -> { u = x })
//│ ║         	            ^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.172: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ╙──       	                              ^^
//│ res: error | 'b -> ('b | {u: 'b})
//│    = [Function (anonymous)]


