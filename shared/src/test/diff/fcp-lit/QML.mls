:NoRecursiveTypes
:DontDistributeForalls
// :GeneralizeArguments


// =============== Sec 2 ===============
let id x = x in id
(id 3, id false)
//│ res: 'a -> 'a
//│    = [Function (anonymous)]
//│ res: (3, false,)
//│    = [ 3, false ]

let poly f = (f 1, f true) in poly
//│ res: (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│    = [Function (anonymous)]
let poly f = let y = f in (y 1, y true) in poly
//│ res: (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│    = [Function (anonymous)]

// Altered from
// let poly f = let y = f {forall 'a. 'a -> 'a} in (y 1, y true)
def poly = fun (f : (forall 'a. 'a -> 'a)) -> (f 1, f true)
//│ poly: (forall 'a. 'a -> 'a) -> (1, true,)
//│     = [Function: poly]

def app : ('a -> 'b) -> 'a -> 'b
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = <missing implementation>

def revapp : 'a -> ('a -> 'b) -> 'b
//│ revapp: 'a -> ('a -> 'b) -> 'b
//│       = <missing implementation>

app poly (fun x -> x)
//│ res: (1, true,)
//│    = <no result>
//│      app is not implemented

revapp (fun x -> x) poly
//│ res: (1, true,)
//│    = <no result>
//│      revapp is not implemented

class List[A]
  method Get: A
//│ Defined class List[+A]
//│ Declared List.Get: List['A] -> 'A

def single : 'a -> List['a]
//│ single: 'a -> List['a]
//│       = <missing implementation>

def ids = single (fun x -> x)
//│ ids: List[forall 'a. 'a -> 'a]
//│    = <no result>
//│      single is not implemented

single ids
//│ res: List[List[forall 'a. 'a -> 'a]]
//│    = <no result>
//│      single is not implemented

def map: ('a -> 'b) -> List['a] -> List['b]
def head: List['a] -> 'a
//│ map: ('a -> 'b) -> List['a] -> List['b]
//│    = <missing implementation>
//│ head: List['a] -> 'a
//│     = <missing implementation>

map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = <no result>
//│      map is not implemented
app (map head) (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = <no result>
//│      app is not implemented

def fst: forall 'a 'b. (('a, 'b),) -> 'a
def fst ((x, _),) = x
def snd: forall 'a 'b. (('a, 'b),) -> 'b
def snd ((_, x),) = x
//│ fst: ('a, anything,) -> 'a
//│    = <missing implementation>
//│ ('a, anything,) -> 'a
//│   <:  fst:
//│ ('a, anything,) -> 'a
//│    = [Function: fst]
//│ snd: (anything, 'b,) -> 'b
//│    = <missing implementation>
//│ (anything, 'a,) -> 'a
//│   <:  snd:
//│ (anything, 'b,) -> 'b
//│    = [Function: snd]

// def pack : 
def pack t = fun f -> f t
//│ pack: 'a -> (forall 'b. ('a -> 'b) -> 'b)
//│     = [Function: pack]

def open p t = p t
//│ open: ('a -> 'b) -> 'a -> 'b
//│     = [Function: open]

// Altered from
// let f = {exists 'a. 'a * ('a -> 'a) * ('a -> int)} (0, (fun x -> x + 1) , (fun x -> x));
// open {exists 'a. a * ('a -> 'a) * ('a -> int)} g = f in (snd (snd g)) (fst g);;
let f = pack ((0, (fun x -> x + 1, fun x -> x),),) in
  open f (fun x -> (snd (snd x)) (fst x))
//│ res: 0
//│    = 0


// =============== Sec 3 ===============

def run : (forall 'g. 'g -> 'a) -> 'a
//│ run: (anything -> 'a) -> 'a
//│    = <missing implementation>

def e : 'g -> int
//│ e: anything -> int
//│  = <missing implementation>

// * Notice the effect of distributivity
(fun (f : (forall 'g. int -> 'g)) -> f 1)
//│ res: (int -> nothing) -> nothing
//│    = [Function: res]

run e
//│ res: int
//│    = <no result>
//│      run is not implemented

fun (x : (forall 'a. 'a -> 'a)) -> x
//│ res: (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│    = [Function: res]


let abstype = pack ((id, id),) in
  let module = pack ((id, app),) in
  open abstype (fun x -> (snd x) (fst x 1))
//│ res: 1
//│    = <no result>
//│      app is not implemented

let abstype = pack ((id, id),) in
  let module = pack ((id, app),) in
  open module (fun x -> (snd x) (fun a -> ((a, a),)) (fst x 1))
//│ res: ((1, 1,),)
//│    = <no result>
//│      app is not implemented

:escape
def Math: nothing
//│ Math: nothing
//│     = <missing implementation>

def div: int -> int -> int
def div a b = Math.trunc(a/b)
//│ div: int -> int -> int
//│    = <missing implementation>
//│ number -> number -> nothing
//│   <:  div:
//│ int -> int -> int
//│    = [Function: div1]

def mod = let rec mod a b = if a < b then a else mod (a - b) b in mod
//│ mod: int -> int -> int
//│    = [Function: mod]


// ********** SMALL ARRAY EXAMPLE **********

// exists r. forall b. Sig[a, r, b]
// (forall r. (forall b. Sig[a, r, b]) -> y) -> y

:DistributeForalls
// :GeneralizeArguments

type ExSmall = (forall 'r. ('a -> 'r, 'r -> int -> 'a) -> 'y) -> 'y
//│ Defined type alias ExSmall

def sbase : ExSmall
def sbase f = f (fun a -> a, fun r -> fun (i : int) -> r)
//│ sbase: ExSmall
//│      = <missing implementation>
//│ ((forall 'a. 'a -> 'a, forall 'b. 'b -> int -> 'b,) -> 'c) -> 'c
//│   <:  sbase:
//│ ExSmall
//│      = [Function: sbase]

def sstep : ExSmall -> ExSmall
//│ sstep: ExSmall -> ExSmall
//│      = <missing implementation>

:e // * Since "sound extrusion"
def sstep = fun xx -> xx (fun (xinit, xsub) -> 
  let init a = (xinit a, xinit a) in
  let sub ((r1, r2)) i =
    if mod i 2 == 0
    then xsub r1 (div i 2)
    else xsub r2 (div i 2) in
  fun f -> f (init, sub))
//│ ((forall 'a 'b 'c 'd 'e. ('a -> 'b, 'd -> int -> 'e,) -> (('a -> ('b, 'b,), ('d, 'd,) -> (int & number) -> 'e,) -> 'c) -> 'c) -> 'f) -> 'f
//│   <:  sstep:
//│ ExSmall -> ExSmall
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.198: 	def sstep = fun xx -> xx (fun (xinit, xsub) -> 
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.199: 	  let init a = (xinit a, xinit a) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.200: 	  let sub ((r1, r2)) i =
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.201: 	    if mod i 2 == 0
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.202: 	    then xsub r1 (div i 2)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.203: 	    else xsub r2 (div i 2) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.204: 	  fun f -> f (init, sub))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.181: 	type ExSmall = (forall 'r. ('a -> 'r, 'r -> int -> 'a) -> 'y) -> 'y
//│ ║         	                                  ^^
//│ ╟── back into type variable `'r`
//│ ║  l.181: 	type ExSmall = (forall 'r. ('a -> 'r, 'r -> int -> 'a) -> 'y) -> 'y
//│ ║         	                                      ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this applied expression:
//│ ║  l.198: 	def sstep = fun xx -> xx (fun (xinit, xsub) -> 
//│ ║         	                      ^^
//│ ╟── • this function:
//│ ║  l.198: 	def sstep = fun xx -> xx (fun (xinit, xsub) -> 
//│ ║         	                          ^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.199: 	  let init a = (xinit a, xinit a) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.200: 	  let sub ((r1, r2)) i =
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.201: 	    if mod i 2 == 0
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.202: 	    then xsub r1 (div i 2)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.203: 	    else xsub r2 (div i 2) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.204: 	  fun f -> f (init, sub))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.202: 	    then xsub r1 (div i 2)
//│ ╙──       	              ^^
//│      = [Function: sstep]

// * Alternative, with an annotation on `f`:
def sstep = fun xx -> xx (fun (xinit, xsub) -> 
  let init a = (xinit a, xinit a) in
  let sub ((r1, r2)) i =
    if mod i 2 == 0
    then xsub r1 (div i 2)
    else xsub r2 (div i 2) in
  fun (f : forall 'r. ('a -> 'r, 'r -> int -> 'a) -> 'y) -> f (init, sub))
//│ ((forall 'a 'b 'c. ('a -> 'b, 'b -> int -> 'a,) -> (forall 'r. ('a -> 'r, 'r -> int -> 'a,) -> 'c) -> 'c) -> 'd) -> 'd
//│   <:  sstep:
//│ ExSmall -> ExSmall
//│      = [Function: sstep1]

let mkSArray n = if n == 0 then sbase else sstep (sstep sbase) in
  mkSArray 1 (fun (xinit, xsub) -> xsub (xinit 2) 2)
//│ res: 2
//│    = 2

def mkSArray : int -> ExSmall
rec def mkSArray n = if n == 0 then sbase else sstep (mkSArray (n - 1))
//│ mkSArray: int -> ExSmall
//│         = <missing implementation>
//│ int -> ExSmall
//│   <:  mkSArray:
//│ int -> ExSmall
//│         = [Function: mkSArray]

mkSArray 2 (fun (xinit, xsub) -> xinit 2)
//│ res: ??r
//│    = [ [ 2, 2 ], [ 2, 2 ] ]

ma2 = mkSArray 2
//│ ma2: ExSmall
//│    = [Function (anonymous)]

a2 = ma2 (fun (xinit, xsub) -> xsub (xinit true) 0)
//│ a2: true
//│   = true

not a2
//│ res: bool
//│    = false

a2 = ma2 (fun (xinit, xsub) -> xinit true)
//│ a2: ??r
//│   = [ [ true, true ], [ true, true ] ]

:e // This is expected – xinit returns a value of locally-quantified type 'r
a2[0]
//│ ╔══[ERROR] Type error in array access
//│ ║  l.301: 	a2[0]
//│ ║         	^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.181: 	type ExSmall = (forall 'r. ('a -> 'r, 'r -> int -> 'a) -> 'y) -> 'y
//│ ║         	                                  ^^
//│ ╟── into array access of type `Array[?a]`
//│ ║  l.301: 	a2[0]
//│ ║         	^^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.296: 	a2 = ma2 (fun (xinit, xsub) -> xinit true)
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.284: 	ma2 = mkSArray 2
//│ ║         	      ^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.296: 	a2 = ma2 (fun (xinit, xsub) -> xinit true)
//│ ╙──       	     ^^^
//│ res: error | undefined
//│    = [ true, true ]

// * Notice the (safely-)extruded skolem for the locally-quantified 'r
ma2 (fun (xinit, xsub) -> let tmp = xinit true in (tmp, tmp))
//│ res: (??r, ??r,)
//│    = [
//│        [ [ true, true ], [ true, true ] ],
//│        [ [ true, true ], [ true, true ] ]
//│      ]

ma1 = mkSArray 1
//│ ma1: ExSmall
//│    = [Function (anonymous)]

ma1 (fun (xinit, xsub) -> xinit true)
//│ res: ??r
//│    = [ true, true ]

ma1 (fun (xinit, xsub) -> xsub (xinit true) 0)
//│ res: true
//│    = true


// * Trying to do something unsafe now!

:e
ma1 (fun (xinit1, xsub1) -> ma2 (fun (xinit2, xsub2) -> xsub2 (xinit1 true) 0))
//│ ╔══[ERROR] Type error in application
//│ ║  l.348: 	ma1 (fun (xinit1, xsub1) -> ma2 (fun (xinit2, xsub2) -> xsub2 (xinit1 true) 0))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.181: 	type ExSmall = (forall 'r. ('a -> 'r, 'r -> int -> 'a) -> 'y) -> 'y
//│ ║         	                                  ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.348: 	ma1 (fun (xinit1, xsub1) -> ma2 (fun (xinit2, xsub2) -> xsub2 (xinit1 true) 0))
//│ ║         	                                                               ^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.284: 	ma2 = mkSArray 2
//│ ║         	      ^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.348: 	ma1 (fun (xinit1, xsub1) -> ma2 (fun (xinit2, xsub2) -> xsub2 (xinit1 true) 0))
//│ ║         	                            ^^^
//│ ╟── • this applied expression:
//│ ║  l.348: 	ma1 (fun (xinit1, xsub1) -> ma2 (fun (xinit2, xsub2) -> xsub2 (xinit1 true) 0))
//│ ║         	                                                        ^^^^^
//│ ╟── • this tuple literal:
//│ ║  l.348: 	ma1 (fun (xinit1, xsub1) -> ma2 (fun (xinit2, xsub2) -> xsub2 (xinit1 true) 0))
//│ ║         	                                     ^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.348: 	ma1 (fun (xinit1, xsub1) -> ma2 (fun (xinit2, xsub2) -> xsub2 (xinit1 true) 0))
//│ ╙──       	                                                               ^^^^^^^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: boolean true is not iterable (cannot read property Symbol(Symbol.iterator))

:e
ma1 (fun (xinit1, xsub1) -> ma2 (fun (xinit2, xsub2) -> xsub1 (xinit2 true) 0))
//│ ╔══[ERROR] Type error in application
//│ ║  l.379: 	ma1 (fun (xinit1, xsub1) -> ma2 (fun (xinit2, xsub2) -> xsub1 (xinit2 true) 0))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.181: 	type ExSmall = (forall 'r. ('a -> 'r, 'r -> int -> 'a) -> 'y) -> 'y
//│ ║         	                                  ^^
//│ ╟── into type `'r0`
//│ ║  l.181: 	type ExSmall = (forall 'r. ('a -> 'r, 'r -> int -> 'a) -> 'y) -> 'y
//│ ║         	                                      ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this applied expression:
//│ ║  l.379: 	ma1 (fun (xinit1, xsub1) -> ma2 (fun (xinit2, xsub2) -> xsub1 (xinit2 true) 0))
//│ ║         	                                                               ^^^^^^
//│ ╟── • this tuple literal:
//│ ║  l.379: 	ma1 (fun (xinit1, xsub1) -> ma2 (fun (xinit2, xsub2) -> xsub1 (xinit2 true) 0))
//│ ║         	                                     ^^^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.284: 	ma2 = mkSArray 2
//│ ║         	      ^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.379: 	ma1 (fun (xinit1, xsub1) -> ma2 (fun (xinit2, xsub2) -> xsub1 (xinit2 true) 0))
//│ ╙──       	                            ^^^
//│ res: error
//│    = [ true, true ]


// ******** ORIGINAL ARRAY EXAMPLE ********

type Sig[a, r, b] = (((a -> r, r -> int -> a), r -> int -> a -> r), (a -> b -> b) -> b -> r -> b)
type ExSig = (forall 'r. (forall 'b. ((('a -> 'r, 'r -> int -> 'a), 'r -> int -> 'a -> 'r), ('a -> 'b -> 'b) -> 'b -> 'r -> 'b)) -> 'y) -> 'y
//│ Defined type alias Sig[=a, =r, =b]
//│ Defined type alias ExSig

// :e // works after fixing freshening levels
def base : ExSig
def base f = f ((((fun a -> a, fun r -> fun (i : int) -> r), fun r -> fun (i : int) -> fun a -> a), fun f -> fun b -> fun r -> f r b),)
//│ base: ExSig
//│     = <missing implementation>
//│ ((((forall 'a. 'a -> 'a, forall 'b. 'b -> int -> 'b,), forall 'c. anything -> int -> 'c -> 'c,), forall 'd 'e 'f. ('d -> 'e -> 'f) -> 'e -> 'd -> 'f,) -> 'g) -> 'g
//│   <:  base:
//│ ExSig
//│     = [Function: base]

def step : ExSig -> ExSig
//│ step: ExSig -> ExSig
//│     = <missing implementation>

// * The problem here is due to the polymorphism of the `fold` function, which is defined on the outside of the tuple.
// * The reproduction in `QML_exist_Records.mls`, where `fold` is quantified on the inside, does not have this problem.
// * So I suppose we could avoid the problem by pushing (distributing) the quantification inside the tuple, which we do not yet support.
:e
def step = fun xx -> xx (fun ((((xinit, xsub), xupdate), xfold),) ->
  let init a = (xinit a, xinit a) in
  let sub r i =
    if mod i 2 == 0
    then xsub (fst r) (div i 2)
    else xsub (snd r) (div i 2) in
  let update r i a =
    if mod i 2 == 0
    then (xupdate (fst r) (div i 2) a, snd r)
    else (fst r, xupdate (snd r) (div i 2) a) in
  let fold f b r = xfold f (xfold f b (fst r)) (snd r) in
    fun f -> f ((((init, sub), update), fold),) )
//│ ((forall 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p. ((('h -> 'e, 'o -> int -> 'm,), 'k -> int -> 'b -> 'f & 'i -> int -> 'b -> 'j,), 'a -> ('d -> 'g -> 'c & 'n -> 'l -> 'd),) -> (((('h -> ('e, 'e,), ('o, 'o,) -> (int & number) -> 'm,), forall 'q 'r. ('k & 'q, 'i & 'r,) -> (int & number) -> 'b -> ('f | 'q, 'r | 'j,),), 'a -> 'n -> ('l, 'g,) -> 'c,) -> 'p) -> 'p) -> 's) -> 's
//│   <:  step:
//│ ExSig -> ExSig
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.431: 	def step = fun xx -> xx (fun ((((xinit, xsub), xupdate), xfold),) ->
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.432: 	  let init a = (xinit a, xinit a) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.433: 	  let sub r i =
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.434: 	    if mod i 2 == 0
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.435: 	    then xsub (fst r) (div i 2)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.436: 	    else xsub (snd r) (div i 2) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.437: 	  let update r i a =
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.438: 	    if mod i 2 == 0
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.439: 	    then (xupdate (fst r) (div i 2) a, snd r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.440: 	    else (fst r, xupdate (snd r) (div i 2) a) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.441: 	  let fold f b r = xfold f (xfold f b (fst r)) (snd r) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.442: 	    fun f -> f ((((init, sub), update), fold),) )
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.409: 	type ExSig = (forall 'r. (forall 'b. ((('a -> 'r, 'r -> int -> 'a), 'r -> int -> 'a -> 'r), ('a -> 'b -> 'b) -> 'b -> 'r -> 'b)) -> 'y) -> 'y
//│ ║         	                                              ^^
//│ ╟── back into type variable `'r`
//│ ║  l.409: 	type ExSig = (forall 'r. (forall 'b. ((('a -> 'r, 'r -> int -> 'a), 'r -> int -> 'a -> 'r), ('a -> 'b -> 'b) -> 'b -> 'r -> 'b)) -> 'y) -> 'y
//│ ║         	                                                  ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this applied expression:
//│ ║  l.431: 	def step = fun xx -> xx (fun ((((xinit, xsub), xupdate), xfold),) ->
//│ ║         	                     ^^
//│ ╟── • this function:
//│ ║  l.431: 	def step = fun xx -> xx (fun ((((xinit, xsub), xupdate), xfold),) ->
//│ ║         	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.432: 	  let init a = (xinit a, xinit a) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.433: 	  let sub r i =
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.434: 	    if mod i 2 == 0
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.435: 	    then xsub (fst r) (div i 2)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.436: 	    else xsub (snd r) (div i 2) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.437: 	  let update r i a =
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.438: 	    if mod i 2 == 0
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.439: 	    then (xupdate (fst r) (div i 2) a, snd r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.440: 	    else (fst r, xupdate (snd r) (div i 2) a) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.441: 	  let fold f b r = xfold f (xfold f b (fst r)) (snd r) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.442: 	    fun f -> f ((((init, sub), update), fold),) )
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.82: 	def snd: forall 'a 'b. (('a, 'b),) -> 'b
//│ ╙──      	                             ^^
//│     = [Function: step]

let mkArray n = if n == 0 then base else step base in
  mkArray 1 (fun ((((xinit, xsub), xupdate), xfold),) -> xinit 2)
//│ res: ??r | ??r0
//│    = [ 2, 2 ]

def mkArray : int -> ExSig
//│ mkArray: int -> ExSig
//│        = <missing implementation>

rec def mkArray n = if n == 0 then base else step (mkArray (n - 1))
//│ int -> ExSig
//│   <:  mkArray:
//│ int -> ExSig
//│        = [Function: mkArray]

mkArray 3 (fun ((((xinit, xsub), xupdate), xfold),) -> xinit 2)
//│ res: ??r
//│    = [ [ [ 2, 2 ], [ 2, 2 ] ], [ [ 2, 2 ], [ 2, 2 ] ] ]

:e
res 0
//│ ╔══[ERROR] Type error in application
//│ ║  l.531: 	res 0
//│ ║         	^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.409: 	type ExSig = (forall 'r. (forall 'b. ((('a -> 'r, 'r -> int -> 'a), 'r -> int -> 'a -> 'r), ('a -> 'b -> 'b) -> 'b -> 'r -> 'b)) -> 'y) -> 'y
//│ ║         	                                              ^^
//│ ╟── into application of type `0 -> ?a`
//│ ║  l.531: 	res 0
//│ ║         	^^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.526: 	mkArray 3 (fun ((((xinit, xsub), xupdate), xfold),) -> xinit 2)
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.526: 	mkArray 3 (fun ((((xinit, xsub), xupdate), xfold),) -> xinit 2)
//│ ╙──       	^^^^^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: res is not a function


// =============== Sec 7 ===============

def choose: 'a -> 'a -> 'a
//│ choose: 'a -> 'a -> 'a
//│       = <missing implementation>

choose (head ids)
//│ res: 'a -> (forall 'b. 'a | 'b -> 'b)
//│    = <no result>
//│      choose is not implemented

