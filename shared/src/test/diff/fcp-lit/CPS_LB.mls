:NoJS

:NoRecursiveTypes


// ------------ Dummy classes to represent the types in the examples ------------

class List[a]
  method Get: a
//│ Defined class List[+a]
//│ Declared List.Get: List['a] -> 'a

// Used to represent `::`
def cons: 'a -> List['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]

// Used to represent `[]`
def nil: List['a]
//│ nil: List[nothing]

def concat: string -> List[string] -> string
//│ concat: string -> List[string] -> string


// ------------ Examples ------------


// (* s  starts a sequence, cps style *)
def s k = k () nil
//│ s: (() -> List[nothing] -> 'a) -> 'a

def insert v () acu k = k () (cons v acu)
//│ insert: 'a -> () -> List['a] -> (() -> List['a] -> 'b) -> 'b

// (* x  inserts "x" in the acu *)
def x () = insert "x" ()
//│ x: () -> List['a] -> (() -> List["x" | 'a] -> 'b) -> 'b

// (* We call x a 'token', in the sequence. *)

// (* e  ends the sequence. It builds a token that can be inserted in another sequence or that can be printed. *)
def e () acu = insert (concat "," acu)
//│ e: () -> List[string] -> () -> List['a] -> (() -> List['a | string] -> 'b) -> 'b


// (* Prints a token *)
def print t = t () nil (fun () -> fun r -> log (concat "," r))
//│ print: (() -> List[nothing] -> (() -> List[string] -> unit) -> 'a) -> 'a

// Added by me:
s x x (s x x e)
//│ res: (() -> List[string] -> 'a) -> 'a


def test8  = (s x x (s x x e) x (s x x x e) e)
//│ test8: () -> List['a] -> (() -> List['a | string] -> 'b) -> 'b

print test8


def test14 = (s x x x x x x x x x x x x x x e)
//│ test14: () -> List['a] -> (() -> List['a | string] -> 'b) -> 'b

def test16 = (s x x x x x x x x x x x x x x x x e)
//│ test16: () -> List['a] -> (() -> List['a | string] -> 'b) -> 'b

// (* This is too much for the type-checker. *)
def test18 = (s x x x x x x x x x x x x x x x x x x e)
//│ test18: () -> List['a] -> (() -> List['a | string] -> 'b) -> 'b

:RecursiveTypes
def test18 = (s x x x x x x x x x x x x x x x x x x e)
//│ test18: () -> List['a] -> (() -> List['a | string] -> 'b) -> 'b
:NoRecursiveTypes


// (* A function that receives a token *)
def f t = (s x x t x x e)
//│ f: (() -> List["x"] -> (forall 'a 'b. () -> List['a] -> (() -> List["x" | 'a] -> 'b) -> 'b) -> (forall 'a 'c. () -> List['a] -> (() -> List["x" | 'a] -> 'c) -> 'c) -> (forall 'a0 'd. () -> List[string] -> () -> List['a0] -> (() -> List['a0 | string] -> 'd) -> 'd) -> 'e) -> 'e

// (* If the token is used twice, we must reveive two arguments *)
def g t1 t2 = (s x x t1 x (s x t2 x e) e)
//│ g: (() -> List["x"] -> (forall 'a 'b. () -> List['a] -> (() -> List["x" | 'a] -> 'b) -> 'b) -> 'c -> (forall 'a0 'd. () -> List[string] -> () -> List['a0] -> (() -> List['a0 | string] -> 'd) -> 'd) -> 'e) -> (() -> List["x"] -> (forall 'a 'f. () -> List['a] -> (() -> List["x" | 'a] -> 'f) -> 'f) -> (forall 'a0 'g. () -> List[string] -> () -> List['a0] -> (() -> List['a0 | string] -> 'g) -> 'g) -> 'c) -> 'e

// (* This does not type. It requires first-class polymorphism. *)
def h t = g t t
//│ h: (() -> List["x"] -> ((forall 'a 'b. () -> List['a] -> (() -> List["x" | 'a] -> 'b) -> 'b) -> 'c -> (forall 'a0 'd. () -> List[string] -> () -> List['a0] -> (() -> List['a0 | string] -> 'd) -> 'd) -> 'e & (forall 'a 'f. () -> List['a] -> (() -> List["x" | 'a] -> 'f) -> 'f) -> (forall 'a0 'g. () -> List[string] -> () -> List['a0] -> (() -> List['a0 | string] -> 'g) -> 'g) -> 'c)) -> 'e

