:NoRecursiveTypes
:GeneralizeArguments // * Needed in order to quantify non-function arguments to runST

// From HML implementation

// Daan Leijen. 2009. Flexible Types: Robust Type Inference for First-Class Polymorphism. In
//   Proceedings of the 36th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming
//   Languages (Savannah, GA, USA) (POPL ’09). Association for Computing Machinery, New York,
//   NY, USA, 66–77. https://doi.org/10.1145/1480881.1480891 

// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]

class ST[S, A]
  method Inv_S: S -> S
  method Cov_A: A
//│ Defined class ST[=S, +A]
//│ Declared ST.Inv_S: ST['S, ?] -> 'S -> 'S
//│ Declared ST.Cov_A: ST['S, 'A] -> 'A

class Ref[S, A]
  method Inv_S: S -> S
  method Cov_A: A
//│ Defined class Ref[=S, +A]
//│ Declared Ref.Inv_S: Ref['S, ?] -> 'S -> 'S
//│ Declared Ref.Cov_A: Ref['S, 'A] -> 'A


// ============ Type signatures for functions used in the examples ============

def head: List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ List['a] -> 'a
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ List['a] -> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

// Used to represent `[]` in the papers
def nil: List['a]
nil = Nil {}
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

def cons: 'a -> List['a] -> List['a]
def cons head tail = Cons { head; tail }
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ ('head & 'a) -> (List['a] & 'tail) -> (Cons['a] with {head: 'head, tail: 'tail})
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

def is_empty: forall 'a. List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ anything -> bool
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]

def single: 'a -> List['a]
def single x = cons x nil
//│ single: 'a -> List['a]
//│       = <missing implementation>
//│ 'a -> List['a]
//│   <:  single:
//│ 'a -> List['a]
//│       = [Function: single]

def append: List['a] -> List['a] -> List['a]
rec def append l1 l2 =
  if is_empty l1 then l2
  else cons (head l1) (append (tail l1) l2)
//│ append: List['a] -> List['a] -> List['a]
//│       = <missing implementation>
//│ List['a] -> (List['a] & 'b) -> (List['a] | 'b)
//│   <:  append:
//│ List['a] -> List['a] -> List['a]
//│       = [Function: append]

def length: List['a] -> int
rec def length l =
  if is_empty l then 0
  else succ (length (tail l))
//│ length: List[?] -> int
//│       = <missing implementation>
//│ List[?] -> int
//│   <:  length:
//│ List[?] -> int
//│       = [Function: length1]

def id: 'a -> 'a
def id x = x
//│ id: 'a -> 'a
//│   = <missing implementation>
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a
//│   = [Function: id1]

def ids: List[forall 'a. 'a -> 'a]
ids = single id
//│ ids: List[forall 'a. 'a -> 'a]
//│    = <missing implementation>
//│ List[forall 'a. 'a -> 'a]
//│   <:  ids:
//│ List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

def inc: int -> int
inc = succ
//│ inc: int -> int
//│    = <missing implementation>
//│ int -> int
//│   <:  inc:
//│ int -> int
//│    = [Function: succ]

def choose: 'a -> 'a -> 'a
def choose x y = if true then x else y
//│ choose: 'a -> 'a -> 'a
//│       = <missing implementation>
//│ 'a -> 'a -> 'a
//│   <:  choose:
//│ 'a -> 'a -> 'a
//│       = [Function: choose]

def auto : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
def auto x = x x
//│ auto: (forall 'a. 'a -> 'a) -> (forall 'a0. 'a0 -> 'a0)
//│     = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto:
//│ (forall 'a. 'a -> 'a) -> (forall 'a0. 'a0 -> 'a0)
//│     = [Function: auto]

def xauto : forall 'a. (forall 'b. 'b -> 'b) -> 'a -> 'a
def xauto x = x x
//│ xauto: (forall 'b. 'b -> 'b) -> 'a -> 'a
//│      = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  xauto:
//│ (forall 'b. 'b -> 'b) -> 'a -> 'a
//│      = [Function: xauto]

def takeAuto: ((forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)) -> (forall 'a. 'a -> 'a)
def takeAuto auto = auto id
//│ takeAuto: ((forall 'a. 'a -> 'a) -> (forall 'a0. 'a0 -> 'a0)) -> (forall 'a1. 'a1 -> 'a1)
//│         = <missing implementation>
//│ ((forall 'a. 'a -> 'a) -> 'b) -> 'b
//│   <:  takeAuto:
//│ ((forall 'a. 'a -> 'a) -> (forall 'a0. 'a0 -> 'a0)) -> (forall 'a1. 'a1 -> 'a1)
//│         = [Function: takeAuto]

def const: forall 'a 'b. 'a -> 'b -> 'a
def const x y = x
//│ const: 'a -> anything -> 'a
//│      = <missing implementation>
//│ 'a -> anything -> 'a
//│   <:  const:
//│ 'a -> anything -> 'a
//│      = [Function: const1]

def map: ('a -> 'b) -> List['a] -> List['b]
rec def map f l =
  if is_empty l then nil
  else cons (f (head l)) (map f (tail l))
//│ map: ('a -> 'b) -> List['a] -> List['b]
//│    = <missing implementation>
//│ ('a -> 'b) -> List['a] -> List['b]
//│   <:  map:
//│ ('a -> 'b) -> List['a] -> List['b]
//│    = [Function: map]

def app: ('a -> 'b) -> 'a -> 'b
def app f x = f x
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = <missing implementation>
//│ ('a -> 'b) -> 'a -> 'b
//│   <:  app:
//│ ('a -> 'b) -> 'a -> 'b
//│    = [Function: app]

def revapp: 'a -> ('a -> 'b) -> 'b
def revapp x f = f x
//│ revapp: 'a -> ('a -> 'b) -> 'b
//│       = <missing implementation>
//│ 'a -> ('a -> 'b) -> 'b
//│   <:  revapp:
//│ 'a -> ('a -> 'b) -> 'b
//│       = [Function: revapp]

def fst: forall 'a 'b. (('a, 'b),) -> 'a
def fst ((x, _),) = x
//│ fst: (('a, anything,),) -> 'a
//│    = <missing implementation>
//│ (('a, anything,),) -> 'a
//│   <:  fst:
//│ (('a, anything,),) -> 'a
//│    = [Function: fst]

def snd: forall 'a 'b. (('a, 'b),) -> 'b
def snd ((_, x),) = x
//│ snd: ((anything, 'b,),) -> 'b
//│    = <missing implementation>
//│ ((anything, 'a,),) -> 'a
//│   <:  snd:
//│ ((anything, 'b,),) -> 'b
//│    = [Function: snd]

:ng
def runST: forall 'a. (forall 's. ST['s, 'a]) -> 'a
//│ runST: (forall 's. ST['s, 'a]) -> 'a

:ng
def newRef: forall 'a 's. 'a -> ST['s, Ref['s, 'a]]
//│ newRef: 'a -> ST['s, Ref['s, 'a]]

:ng
def returnST: forall 'a 's. 'a -> ST['s, 'a]
//│ returnST: 'a -> ST['s, 'a]



// ============ Hindley Milner ============

// -- standard Hindley-Milner tests

// [("\\x -> x", ok "forall a. a -> a")
fun x -> x
//│ res: 'a -> 'a
//│    = [Function: res]

// ,("\\f x -> f x", ok "forall a b. (a -> b) -> a -> b")
fun f -> fun x -> f x
//│ res: ('a -> 'b) -> 'a -> 'b
//│    = [Function: res]

// ,("inc True", Wrong)
:e
inc true
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.277: 	inc true
//│ ║         	^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `int`
//│ ║  l.277: 	inc true
//│ ║         	    ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.146: 	def inc: int -> int
//│ ╙──       	         ^^^
//│ res: error | int
//│    = 2

// ,("let i = \\x -> x in i i", ok "forall a. a -> a")
let i = fun x -> x in i i
//│ res: 'a -> 'a
//│    = [Function (anonymous)]

// ,("\\i -> i i", Wrong)              -- infinite type
fun i -> i i
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// ,("\\i -> (i 1, i True)", Wrong)    -- polymorphic use of parameter
fun i -> (i 1, i true)
//│ res: (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│    = [Function: res]

// ,("single id", ok "forall (a >= forall b. b -> b). [a]")
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ,("choose (\\x y -> x) (\\x y -> y)", ok "forall a. a -> a -> a")
choose (fun x -> fun y -> x) (fun x -> fun y -> y)
//│ res: 'a -> 'a -> 'a
//│    = [Function (anonymous)]

// ,("choose id", ok "forall (a >= forall b. b -> b). a -> a")
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// ]

// ============ Higher rank & impredicative ============

// -- impredicative application and higher rank arguments are fully supported

// [("xauto",ok "forall a. (forall a. a -> a) -> a -> a")     -- just to show the types of xauto and auto
xauto
//│ res: (forall 'b. 'b -> 'b) -> 'a -> 'a
//│    = [Function: xauto]

// ,("auto", ok "(forall a. a -> a) -> (forall a. a -> a)")
auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'a0. 'a0 -> 'a0)
//│    = [Function: auto]

// ,("\\(i :: forall a. a -> a) -> i i", ok "forall (a >= forall b. b -> b). (forall b. b -> b) -> a") -- ok "forall a. (forall a. a -> a) -> a -> a")
fun (i: forall 'a. 'a -> 'a) -> i i
fun i -> i i
//│ res: (forall 'a. 'a -> 'a) -> 'a0 -> 'a0
//│    = [Function: res]
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// ,("auto id", ok "forall a. a -> a")
auto id
//│ res: 'a -> 'a
//│    = [Function: id1]

// ,("apply auto id", ok "forall a. a -> a")
app auto id
//│ res: 'a -> 'a
//│    = [Function: id1]

// ,("(single :: (forall a. a -> a) -> [forall a. a->a]) id", ok "[forall a. a-> a]")
(single : (forall 'a. 'a -> 'a) -> List[forall 'a. 'a -> 'a]) id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ,("runST (returnST 1)", ok "Int")
:ng
runST (returnST 1)
//│ res: 1

// ,("runST (newRef 1)", Wrong)
:ng
runST (newRef 1)
//│ res: Ref[in ??s & 's out 's | ??s0, 1]

// ,("apply runST (returnST 1)", ok "Int")
:ng
app runST (returnST 1)
//│ res: 1

// ,("map xauto ids", ok "forall a. [a -> a]")
map xauto ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ,("map xauto (map xauto ids)", Wrong)
// * This term is fine, though they mark it as wrong in their system (because they don't have distrib. nor subtyping)
map xauto (map xauto ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ,("map auto ids", ok "[forall a. a -> a]")
map auto ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ,("map auto (map auto ids)", ok "[forall a. a -> a]")
map auto (map auto ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ,("head ids", ok "forall a. a -> a")
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// ,("tail ids", ok "[forall a. a -> a]")
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// ,("apply tail ids", ok "[forall a. a -> a]")
app tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// ,("map head (single ids)", ok "[forall a. a -> a]")
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ,("apply (map head) (single ids)", ok "[forall a. a -> a]")
app (map head) (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// -- check infinite poly types

:e
// ,("(undefined :: some a. [a -> a] -> Int) (undefined :: some c. [(forall d. d -> c) -> c])", Wrong)
:ng
(error : List['a -> 'a] -> int) (error : List[(forall 'd. 'd -> 'c) -> 'c])
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: ? -> 'a
//│ ╙──
//│ res: int

// ,("(undefined :: some a. [a -> a] -> Int) (undefined :: [(forall d. d -> d) -> (Int -> Int)])", Wrong)
:e
:ng
(error : List['a -> 'a] -> int) (error : List[(forall 'd. 'd -> 'd) -> (int -> int)])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.435: 	(error : List['a -> 'a] -> int) (error : List[(forall 'd. 'd -> 'd) -> (int -> int)])
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'d` is not an instance of type `int`
//│ ║  l.435: 	(error : List['a -> 'a] -> int) (error : List[(forall 'd. 'd -> 'd) -> (int -> int)])
//│ ║         	                                                          ^^
//│ ╟── but it flows into quantified type variable with expected type `int`
//│ ║  l.435: 	(error : List['a -> 'a] -> int) (error : List[(forall 'd. 'd -> 'd) -> (int -> int)])
//│ ║         	                                                      ^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.435: 	(error : List['a -> 'a] -> int) (error : List[(forall 'd. 'd -> 'd) -> (int -> int)])
//│ ╙──       	                                                                        ^^^
//│ res: error | int

// ,("(undefined :: some a. [a -> (forall b. b -> b)] -> Int) (undefined :: some c. [(forall d. d -> d) -> c])", ok "Int")
:ng
(error : List['a -> (forall 'b. 'b -> 'b)] -> int) (error : List[(forall 'd. 'd -> 'd) -> 'c])
//│ res: int

// -- these fail horribly in ghc: (choose auto id) is rejected while ((choose auto) id) is accepted -- so much for parenthesis :-)

// ,("choose id auto", ok "(forall a. a -> a) -> (forall a. a -> a)")
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'a1 -> 'a1)
//│    = [Function: id1]

// ,("choose auto id", ok "(forall a. a -> a) -> (forall a. a -> a)")
choose auto id
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'a1 -> 'a1)
//│    = [Function: auto]

// ,("choose xauto xauto", ok "forall a. (forall b. b -> b) -> a -> a")
choose xauto xauto
//│ res: (forall 'b. 'b -> 'b) -> 'a -> 'a
//│    = [Function: xauto]

// ,("choose id xauto", Wrong)
choose id xauto
//│ res: (forall 'b. 'b -> 'b & 'a) -> ('a | 'a0 -> 'a0)
//│    = [Function: id1]

// ,("choose xauto id", Wrong)
choose xauto id
//│ res: (forall 'b. 'b -> 'b & 'a) -> ('a | 'a0 -> 'a0)
//│    = [Function: xauto]

// -- these fail too in ghc: (choose ids []) is accepted while (choose [] ids) is rejected

// ,("choose [] ids", ok "[forall a. a -> a]")
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// ,("choose ids []", ok "[forall a. a -> a]")
choose ids nil
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// -- check escaping skolems

// ,("\\x -> auto x", Wrong)                                                                             -- escape in match
fun x -> auto x
//│ res: (forall 'a. 'a -> 'a) -> 'a0 -> 'a0
//│    = [Function: res]

// ,("let poly (xs :: [forall a. a -> a]) = 1 in (\\x -> poly x)", Wrong)                              -- escape in apply
let poly (xs: List[forall 'a. 'a -> 'a]) = 1 in fun x -> poly x
//│ res: List[forall 'a. 'a -> 'a] -> 1
//│    = [Function (anonymous)]

// ,("\\x -> (x :: [forall a. a -> a])", Wrong)                                                          -- escape in apply
fun x -> (x : List[forall 'a. 'a -> 'a])
//│ res: List[forall 'a. 'a -> 'a] -> List[forall 'a. 'a -> 'a]
//│    = [Function: res]

// ,("\\x -> let polys (xs :: [forall a . a -> a]) = 1; f y = x in polys [f::some a. forall b. b -> a]",Wrong)  -- escape in unify (with rigid annotations, otherwise we get a skolem mismatch)
fun x -> let polys (xs: List[forall 'a. 'a -> 'a]) = 1 in let f y = x in polys (single (f : forall 'b. 'b -> 'a))
//│ res: ??a -> 1
//│    = [Function: res]

// ,("ids :: forall b. [forall a. a -> b]", Wrong)                                                       -- unify different skolems
:e
ids : forall 'b. List[forall 'a. 'a -> 'b]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.518: 	ids : forall 'b. List[forall 'a. 'a -> 'b]
//│ ║         	^^^
//│ ╟── type `'a` does not match type `'b`
//│ ║  l.518: 	ids : forall 'b. List[forall 'a. 'a -> 'b]
//│ ║         	                                 ^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.518: 	ids : forall 'b. List[forall 'a. 'a -> 'b]
//│ ║         	                                       ^^
//│ ╟── Note: quantified type variable 'a is defined at:
//│ ║  l.518: 	ids : forall 'b. List[forall 'a. 'a -> 'b]
//│ ╙──       	                             ^^
//│ res: List[anything -> nothing]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// -- co/contra variance

// ,("let g (x::(forall a. a -> a) -> Int) = x id; f (x :: Int -> Int) = x 1 in g f", Wrong)                                      -- HMF is invariant
let g (x: (forall 'a. 'a -> 'a) -> int) = x id in let f (x: int -> int) = x 1 in g f
//│ res: int
//│    = 1

// ,("let g (x::(forall a. a -> a) -> Int) = x id; f (x :: Int -> Int) = x 1 in g (\\(x :: forall a. a -> a) -> f x)", ok "Int")  -- but we can always use explicit annotations to type such examples
let g (x: (forall 'a. 'a -> 'a) -> int) = x id in let f (x: int -> int) = x 1 in g (fun (x: forall 'a. 'a -> 'a) -> f x)
//│ res: int
//│    = 1

// -- shared polymorphism

// ,("let f (x :: [forall a.a -> a]) = x in let g (x :: [Int -> Int]) = x in let ids = [id] in (f ids, g ids)", ok "([forall a. a -> a],[Int -> Int])")
let f (x: List[forall 'a. 'a -> 'a]) = x in let g (x: List[int -> int]) = x in let ids = single id in (f ids, g ids)
//│ res: (List[forall 'a. 'a -> 'a], List[int -> int],)
//│    = [
//│        Cons { head: [Function: id1], tail: Nil {} },
//│        Cons { head: [Function: id1], tail: Nil {} }
//│      ]

// ]

// ============ Encoding of existentials ============

// -- simulating existential types

// ("let pack x f    = \\(open :: some b. forall a. (a,a -> Int) -> b) -> open (x,f); \
//     \unpack ex f = ex f; \
//     \existsB = pack True (\\b -> if b then 1 else 0); \
//     \existsI = pack 1 id; \
//     \exs     = [existsB,existsI]\   
// \in unpack (head exs) (\\ex -> (snd ex) (fst ex))"     
// ,ok "Int")
let pack x f = fun (open: forall 'a. (('a, 'a -> int),) -> 'b) -> open ((x, f)) in
  let unpack ex f = ex f in
  let existsB = pack true (fun b -> if b then 1 else 0) in
  let existsI = pack 1 id in
  let exs = cons existsB (cons existsI nil) in
    unpack (head exs) (fun ex -> (snd ex) (fst ex))
//│ res: int
//│    = 1

// ============ Rigid annotations ============

// -- test 'rigid' annotations, i.e. annotations are taken literally and do not instantiate or generalize

// [("single (id :: forall a. a -> a)", ok "forall (a >= forall b. b -> b). [a]")
single (id : forall 'a. 'a -> 'a)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ,("(id :: forall a. a -> a) 1", ok "Int")   -- not all annotations are rigid
(id : forall 'a. 'a -> 'a) 1
//│ res: 1
//│    = 1

// ,("(id :: some a. a -> a) 1", ok "Int")
(id : 'a -> 'a) 1
//│ res: 1
//│    = 1

// ,("\\x -> ((\\y -> x) :: some a. forall b. b -> a)", ok "forall a. forall (b >= forall c. c -> a). a -> b")
fun x -> (fun y -> x) : forall 'b. 'b -> 'a
//│ res: 'a -> anything -> 'a
//│    = [Function: res]

// ,("\\(f :: forall a. a -> a) -> ((f f) :: forall a. a -> a)", ok "forall (a >= forall b. b -> b). (forall b. b -> b) -> a")
fun (f: forall 'a. 'a -> 'a) -> ((f f) : forall 'a. 'a -> 'a)
//│ res: (forall 'a. 'a -> 'a) -> (forall 'a0. 'a0 -> 'a0)
//│    = [Function: res]

// ,("revapp (id :: forall a. a -> a) auto", ok "forall a. a -> a")
revapp (id : forall 'a. 'a -> 'a) auto
//│ res: 'a -> 'a
//│    = [Function: id1]

// ,("choose inc id", ok "Int -> Int")
choose inc id
//│ res: int -> int
//│    = [Function: succ]

// ,("choose inc (id :: forall a. a -> a)", if SupportRigidAnnotations `elem` features then Wrong else ok "Int -> Int")
choose inc (id : forall 'a. 'a -> 'a)
//│ res: int -> int
//│    = [Function: succ]

// ,("choose inc (id :: some a. a -> a)", ok "Int -> Int")
choose inc (id : 'a -> 'a)
//│ res: int -> int
//│    = [Function: succ]

// ]

// ============ N-ary applications, order of arguments ============

// -- tests n-ary applications

// [("revapp id auto", ok "forall a. a -> a")     
revapp id auto
//│ res: 'a -> 'a
//│    = [Function: id1]

// ,("let f = revapp id in f auto", ok "forall a. a -> a")   
let f = revapp id in f auto
//│ res: 'a -> 'a
//│    = [Function: id1]

// ,("let f = revapp (id :: forall a. a -> a) in f auto", ok "forall a. a -> a") 
let f = revapp (id : forall 'a. 'a -> 'a) in f auto
//│ res: 'a -> 'a
//│    = [Function: id1]

// -- check functions that return polymorphic values

// ,("head ids 1", ok "Int")
head ids 1
//│ res: 1
//│    = 1

// ,("auto id 1", ok "Int")
auto id 1
//│ res: 1
//│    = 1

// ]

// ============ Flexible bounds ============

// -- test sharing of polymorphic types

// [("let ids = single id in (map auto ids, append (single inc) ids)", ok "([forall a. a -> a],[Int -> Int])")
let ids = single id in (map auto ids, append (single inc) ids)
//│ res: (List[forall 'a. 'a -> 'a], List[int -> int],)
//│    = [
//│        Cons { head: [Function: id1], tail: Nil {} },
//│        Cons {
//│          head: [Function: succ],
//│          tail: Cons { head: [Function: id1], tail: Nil {} }
//│        }
//│      ]

// ,("single id",ok "forall (a >= forall b. b -> b). [a]")
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ,("choose id",ok "forall (a >= forall b. b -> b). a -> a")
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// ,("choose id inc", ok "Int -> Int")
choose id inc
//│ res: int -> int
//│    = [Function: id1]

// ,("choose id auto", ok "(forall a. a -> a) -> (forall a. a -> a)")
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'a1 -> 'a1)
//│    = [Function: id1]

// ,("\\x y -> x", ok "forall a. forall (b >= forall c. c -> a). a -> b")
fun x -> fun y -> x
//│ res: 'a -> anything -> 'a
//│    = [Function: res]

// ]

// ============ Experimental "rigid" keyword ============

// -- Experimental: the "rigid" keyword prevents instantiation or generalization of the principal type of an expression
// -- this is perhaps more convenient than writing an annotation (but not more expressive)

// ("single (rigid id)", ok "[forall a. a -> a]")  
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ,("let pauto (f :: forall a. a -> a) = rigid f in map pauto ids", ok "[forall a. a -> a]")
let pauto (f: forall 'a. 'a -> 'a) = f in map pauto ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ,("let pauto (f :: forall a. a -> a) = rigid f in map pauto (map pauto ids)", ok "[forall a. a -> a]")
let pauto (f: forall 'a. 'a -> 'a) = f in map pauto (map pauto ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ,("\\x -> rigid (\\y -> x)", ok "forall a. a -> (forall b. b -> a)")
f = fun x -> fun y -> x
//│ f: 'a -> anything -> 'a
//│  = [Function: f]

// ,("\\x -> rigid (\\y -> const x y)", ok "forall a. a -> (forall b. b -> a)")
fun x -> fun y -> const x y
//│ res: 'a -> anything -> 'a
//│    = [Function: res]

// ,("let c x = rigid (\\y -> x) in \\x y -> c x y", ok "forall a b. a -> b -> a")
let c x = fun y -> x in fun x -> fun y -> c x y
//│ res: 'a -> anything -> 'a
//│    = [Function (anonymous)]

// ,("choose plus (\\x -> id)", ok "Int -> Int -> Int")
choose add (fun x -> id)
//│ res: int -> int -> int
//│    = [Function: add]

// ,("choose plus (\\x -> rigid id)", Wrong)      
choose add (fun x -> id)
//│ res: int -> int -> int
//│    = [Function: add]

// ,("choose inc (rigid id)", Wrong)  
choose inc id
//│ res: int -> int
//│    = [Function: succ]

// ,("choose id", ok "forall a. (a -> a) -> (a -> a)")
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// ,("choose (rigid id)", ok "(forall a. a -> a) -> (forall a. a -> a)")
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// ,("revapp (rigid id) auto", ok "forall a. a -> a")
revapp id auto
//│ res: 'a -> 'a
//│    = [Function: id1]

// -- manipulate instantiation of each quantifier:

// ,("[const]", ok "forall a b. [a -> b -> a]")
single const
//│ res: List[forall 'a. 'a -> anything -> 'a]
//│    = Cons { head: [Function: const1], tail: Nil {} }

// ,("[rigid const]", ok "[forall a b. a -> b -> a]")    
single const
//│ res: List[forall 'a. 'a -> anything -> 'a]
//│    = Cons { head: [Function: const1], tail: Nil {} }

// ,("[const :: some a. forall b. a -> b -> a]", ok "forall a. [forall b. a -> b -> a]")
single (const : forall 'b. 'a -> 'b -> 'a)
//│ res: List[forall 'a. 'a -> anything -> 'a]
//│    = Cons { head: [Function: const1], tail: Nil {} }

// ,("[const :: some b. forall a. a -> b -> a]", ok "forall b. [forall a. a -> b -> a]")
single (const : forall 'a. 'a -> 'b -> 'a)
//│ res: List[forall 'a. 'a -> anything -> 'a]
//│    = Cons { head: [Function: const1], tail: Nil {} }

// ]

// ============ Type propagation ============

// -- test type propagation  (SupportPropagation `elem` features)

// ("(\\f -> f f) :: (forall a. a -> a) -> (forall a. a -> a)", ok "(forall a. a -> a) -> (forall a. a -> a)")
(fun f -> f f) : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ res: (forall 'a. 'a -> 'a) -> (forall 'a0. 'a0 -> 'a0)
//│    = [Function: res]

// ,("(let x = 1 in (\\f -> (f x, f True))) :: (forall a. a -> a) -> (Int,Bool)", ok "(forall a. a -> a) -> (Int,Bool)")
(let x = 1 in fun f -> (f x, f true)) : (forall 'a. 'a -> 'a) -> (int, bool)
//│ res: (forall 'a. 'a -> 'a) -> (int, bool,)
//│    = [Function (anonymous)]

// -- test type propagation through applications (SupportAppPropagation `elem` features)

// ("single id :: [forall a. a -> a]", ok "[forall a. a -> a]")
single id : List[forall 'a. 'a -> 'a]
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ,("returnST 1 :: forall s. ST s Int", ok "forall s. ST s Int")
// * Note: requires :DistributeForalls OR ascription-LHS generalization
:ng
returnST 1 : forall 's. ST['s, int]
//│ res: ST['s, int]

// ,("auto id :: Int -> Int", ok "Int -> Int")
auto id : int -> int
//│ res: int -> int
//│    = [Function: id1]

// ,("head ids 1 :: Int", ok "Int")
head ids 1 : int
//│ res: int
//│    = 1

// ,("head ids :: Int -> Int", ok "Int -> Int")
head ids : int -> int
//│ res: int -> int
//│    = [Function: id1]

// ============ Type propagation to arguments ============

// -- test type propagation to arguments (SupportPropagateToArg `elem` features)

// ("takeAuto (\\f -> f f)", ok "forall a. a -> a")
takeAuto (fun f -> f f)
//│ res: 'a -> 'a
//│    = [Function: id1]

// ,("[id]: [ids]", ok "[[forall a. a -> a]]")
cons (single id) (single ids)
//│ res: List[List[forall 'a. 'a -> 'a]]
//│    = Cons {
//│        head: Cons { head: [Function: id1], tail: Nil {} },
//│        tail: Cons {
//│          head: Cons { head: [Function: id1], tail: Nil {} },
//│          tail: Nil {}
//│        }
//│      }

// ,("([id] :: [forall a. a -> a]) : [[\\x -> x]]", ok "[[forall a. a -> a]]")
cons (single id : List[forall 'a. 'a -> 'a]) (single (single (fun x -> x)))
//│ res: List[List[forall 'a. 'a -> 'a]]
//│    = Cons {
//│        head: Cons { head: [Function: id1], tail: Nil {} },
//│        tail: Cons {
//│          head: Cons { head: [Function (anonymous)], tail: Nil {} },
//│          tail: Nil {}
//│        }
//│      }

// ,("apply takeAuto (\\f -> f f)", ok "forall a. a -> a")
app takeAuto (fun f -> f f)
//│ res: 'a -> 'a
//│    = [Function: id1]

// ,("revapp (\\f -> f f) takeAuto", ok "forall a. a -> a")
revapp (fun f -> f f) takeAuto
//│ res: 'a -> 'a
//│    = [Function: id1]

// ,("apply (\\f -> choose auto f) (auto :: (forall a. a -> a) -> (forall a. a -> a))", ok "(forall a. a -> a) -> (forall a. a -> a)")
app (fun f -> choose auto f) (auto : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a))
//│ res: (forall 'a 'a0. 'a -> 'a & 'a0 -> 'a0) -> (forall 'a1. 'a1 -> 'a1)
//│    = [Function: auto]

// ,("revapp (auto :: (forall a. a -> a) -> (forall a. a -> a)) (\\f -> choose auto f)", ok "(forall a. a -> a) -> (forall a. a -> a)")
revapp (auto : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)) (fun f -> choose auto f)
//│ res: (forall 'a 'a0. 'a -> 'a & 'a0 -> 'a0) -> (forall 'a1. 'a1 -> 'a1)
//│    = [Function: auto]

// ============ Eta expansion of polymorphic types ============

// -- this is *not* supported by HML: inference of polymorphic types for arguments that are just passed around..
// -- in MLF arguments can have an inferred polymorphic type as long as it is not used (or revealed explicitly)

// [("\\x -> auto x", ok "forall a. (forall a. a -> a) -> a -> a")
fun x -> auto x
//│ res: (forall 'a. 'a -> 'a) -> 'a0 -> 'a0
//│    = [Function: res]

// ,("\\x -> (auto x, x 1)", Wrong)
fun x -> (auto x, x 1)
//│ res: (forall 'a. 'a -> 'a & 1 -> 'b) -> (forall 'a0. 'a0 -> 'a0, 'b,)
//│    = [Function: res]

// ,("\\x -> (auto x, (x :: forall a. a -> a) 1)", ok "forall a. (forall a. a -> a) -> (a -> a, Int)")
fun x -> (auto x, (x : forall 'a. 'a -> 'a) 1)
//│ res: (forall 'a 'a0. 'a -> 'a & 'a0 -> 'a0) -> (forall 'a1. 'a1 -> 'a1, 1,)
//│    = [Function: res]

// ,("\\x -> (auto x, (x :: Int -> Int) 1)", Wrong)
fun x -> (auto x, (x : int -> int) 1)
//│ res: (forall 'a. 'a -> 'a & int -> int) -> (forall 'a0. 'a0 -> 'a0, int,)
//│    = [Function: res]

// ]

// ("(\\(x :: forall a. a -> a) -> xauto x) :: (forall a. a -> a) -> (forall a. a -> a)", ok "(forall a. a -> a) -> (forall a. a -> a)")

(fun x -> xauto x) : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ res: (forall 'a. 'a -> 'a) -> (forall 'a0. 'a0 -> 'a0)
//│    = [Function: res]

// ("xauto :: (forall a. a -> a) -> (forall a. a -> a)"", Wrong)
xauto : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ res: (forall 'a. 'a -> 'a) -> (forall 'a0. 'a0 -> 'a0)
//│    = [Function: xauto]



// ============ ============ ============ Our own tests ============ ============ ============


:NoJS


def runST2: forall 'a. (forall 's. (ST['s, 'a], ST['s, 'a])) -> 'a
runST2 ((newRef 1, newRef 2))
//│ runST2: (forall 's. (ST['s, 'a], ST['s, 'a],)) -> 'a
//│ res: Ref[in ??s & 's out 's | ??s0, 1 | 2]

def runST3: forall 'a. (forall 's. ST[('s, 's), 'a]) -> 'a
def newRef3: forall 'a 's. 'a -> ST[('s, 's), Ref['s, 'a]]
runST3 (newRef3 1)
//│ runST3: (forall 's. ST[('s, 's,), 'a]) -> 'a
//│ newRef3: 'a -> ST[('s, 's,), Ref['s, 'a]]
//│ res: Ref[in ??s & 's out 's | ??s0, 1]

def runST4: forall 'a 'b. (forall 's. ST['s, ('a, 'b)]) -> ('a, 'b)
def newRef4: forall 'a 's. 'a -> ST['s, (Ref['s, 'a], Ref['s, 'a])]
runST4 (newRef4 1)
//│ runST4: (forall 's. ST['s, ('a, 'b,)]) -> ('a, 'b,)
//│ newRef4: 'a -> ST['s, (Ref['s, 'a], Ref['s, 'a],)]
//│ res: (Ref[in ??s & 's out 's | 's0 | ??s0, 1], Ref[in ??s & 's0 out 's | 's0 | ??s0, 1],)


// * Distributivity demonstration:

def test1: List['a -> 'a]
def test2: List[forall 'a. 'a -> 'a]
//│ test1: List['a -> 'a]
//│ test2: List[forall 'a. 'a -> 'a]

test1 = test2
//│ List[forall 'a. 'a -> 'a]
//│   <:  test1:
//│ List['a -> 'a]

:e
test2 = test1
//│ List['a -> 'a]
//│   <:  test2:
//│ List[forall 'a. 'a -> 'a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.965: 	test2 = test1
//│ ║         	^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.955: 	def test2: List[forall 'a. 'a -> 'a]
//│ ║         	                           ^^
//│ ╟── back into type variable `'a`
//│ ║  l.955: 	def test2: List[forall 'a. 'a -> 'a]
//│ ╙──       	                                 ^^



// ———————————— Some tests without distribtivity, for reference ————————————


// * Here are all the cases that fail without :DistributeForalls

:DontDistributeForalls


// ,("map xauto ids", ok "forall a. [a -> a]")
// * Note the less precise type we now infer:
map xauto ids
//│ res: List['a -> 'a]

// ,("map xauto (map xauto ids)", Wrong)
:e
map xauto (map xauto ids)
//│ ╔══[ERROR] Type error in application
//│ ║  l.996: 	map xauto (map xauto ids)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.173: 	def xauto : forall 'a. (forall 'b. 'b -> 'b) -> 'a -> 'a
//│ ║         	                                   ^^
//│ ╟── back into type variable `'b`
//│ ║  l.173: 	def xauto : forall 'a. (forall 'b. 'b -> 'b) -> 'a -> 'a
//│ ╙──       	                                         ^^
//│ res: List['a -> 'a] | error


// * This doesn't work (without distrib.) because we don't currently generalize non-functions:
:e
(fun x -> xauto x) : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.1011: 	(fun x -> xauto x) : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ ║          	^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.1011: 	(fun x -> xauto x) : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ ║          	                                                          ^^
//│ ╟── back into type variable `'a`
//│ ║  l.1011: 	(fun x -> xauto x) : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ ║          	                                                                ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.1011: 	(fun x -> xauto x) : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ ╙──        	          ^^^^^^^
//│ res: (forall 'a. 'a -> 'a) -> (forall 'a0. 'a0 -> 'a0)
// * But we can trivially fix it by forcing generalization through a polymorphic let binding:
(fun x -> let poly = xauto x in poly) : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ res: (forall 'a. 'a -> 'a) -> (forall 'a0. 'a0 -> 'a0)

:e
xauto : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.1031: 	xauto : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ ║          	^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.1031: 	xauto : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ ║          	                                             ^^
//│ ╟── back into type variable `'a`
//│ ║  l.1031: 	xauto : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ ║          	                                                   ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.1031: 	xauto : (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│ ╙──        	^^^^^
//│ res: (forall 'a. 'a -> 'a) -> (forall 'a0. 'a0 -> 'a0)


