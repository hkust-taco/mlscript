:NoRecursiveTypes
:NoConstrainedTypes
:DontDistributeForalls



// * Pfenning 88
(fun f -> (f 1, f true))(fun x -> x)
//│ res: (1, true,)
//│    = [ 1, true ]



// * FML: Simple, partial type-inference for System F based on type-containment
// * https://dl.acm.org/doi/abs/10.1145/1090189.1086383

// we may exhibit terms than are typable in F but not in the predicative fragment F(≤^F_p)
// One such term (λz. z y z) (λz. z y z) is due to Pawel Urzyczyn, according to Leivant [Lei91].
pawel y = (fun z -> z y z) (fun z -> z y z)
//│ pawel: ('a -> 'a -> (forall 'b 'c. ('a -> 'b -> 'c & 'b) -> 'c) -> 'd & 'a) -> 'd
//│      = [Function: pawel]

def f = (fun z -> z z : (forall 'X. 'X -> 'X) -> (forall 'X. 'X -> 'X))
//│ f: ('a -> (forall 'X. 'X -> 'X) -> (forall 'X0. 'X0 -> 'X0) & 'a) -> (forall 'X. 'X -> 'X) -> (forall 'X0. 'X0 -> 'X0)
//│  = [Function: f]

f ((fun y -> y) : forall 'X. 'X -> 'X)
//│ res: (forall 'X. 'X -> 'X) -> (forall 'X0. 'X0 -> 'X0)
//│    = [Function (anonymous)]

def f = (fun z -> z z); f (fun y -> y)
//│ f: ('a -> 'b & 'a) -> 'b
//│  = [Function: f1]
//│ res: 'a -> 'a
//│    = [Function (anonymous)]



// * A Dependently Typed Calculus with Polymorphic Subtyping
// * https://i.cs.hku.hk/~bruno/papers/scp2021.pdf

// callcc’ : ∀a:⋆. ((∀b:⋆. a → b) → a) → a
// callcc : ∀a:⋆.∀b:⋆. ((a → b) → a) → a
// callcc = callcc’

def callcc' : forall 'A. ((forall 'B. 'A -> 'B) -> 'A) -> 'A
//│ callcc': (('A -> nothing) -> 'A) -> 'A
//│        = <missing implementation>

def callcc : forall 'A. forall 'B. (('A -> 'B) -> 'A) -> 'A
//│ callcc: (('A -> nothing) -> 'A) -> 'A
//│       = <missing implementation>

def callcc = callcc'
//│ (('A -> nothing) -> 'A) -> 'A
//│   <:  callcc:
//│ (('A -> nothing) -> 'A) -> 'A
//│       = <no result>
//│         callcc' is not implemented


