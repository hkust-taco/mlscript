:NoJS
:NoRecursiveTypes

// ============ Dummy classes to represent the types in the examples ============
// Char is represented as String
// All type constructors beside arrow are invariant in Boxy

class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]

class List[a]
  method Head: a
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a

def cons[a]: a -> List[a] -> List[a]
//│ cons: 'a -> List['a] -> List['a]

def nil: List['a]
//│ nil: List[nothing]

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
//│ head: List['a] -> 'a

def tail: forall 'a. List['a] -> List['a]
//│ tail: List['a] -> List['a]

def single: forall 'a. 'a -> List['a]
//│ single: 'a -> List['a]

def length: forall 'a. List['a] -> int
//│ length: List[?] -> int

def ids: List[forall 'a. 'a -> 'a]
//│ ids: List[forall 'a. 'a -> 'a]

// ============ Sec 1 ============

def f get = (get (cons 1 (cons 2 nil)), get (cons "a" (cons "b" (cons "c" nil))))
//│ f: (List[1 | 2] -> 'a & List["a" | "b" | "c"] -> 'b) -> ('a, 'b,)

// definition in paper:
//   g None = (0, "0")
//   g (Some get) = (get [1,2], get ["a","b","c"])
def g x = case x of
  { None -> (0, "0")
  | Some -> (x.val (cons 1 (cons 2 nil)), x.val (cons "a" (cons "b" (cons "c" nil))))
  }
//│ g: (None | Some[?] & {val: List[1 | 2] -> 'a & List["a" | "b" | "c"] -> 'b}) -> (0 | 'a, "0" | 'b,)

// ============ Sec 2 ============

// FreezeML C1
length ids
//│ res: int

// ============ Sec 3.2 ============

(fun x -> fun g -> (g true, g 3)) 4
//│ res: (true -> 'a & 3 -> 'b) -> ('a, 'b,)

// ============ Sec 3.3 ============

// let-bound version of id, with lexically scoped type variables (TODO: support this)
// def id: forall 'a. 'a -> 'a
// def id = fun x -> let y = x: 'a in y
fun x -> let y = x in y
//│ res: 'a -> 'a

// ============ Sec 4.4 ============

let f = (fun g -> (g 3, g true)): (forall 'a. 'a -> 'a) -> (int, bool) in f (fun x -> x)
let f = fun g -> (g 3, g true) in f (fun x -> x)
//│ res: (int, bool,)
//│ res: (3, true,)

(fun g -> (g 3, g true)) (fun x -> x)
//│ res: (3, true,)

// ============ Sec 6 ============

// FreezeML C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]

// FreezeML C4
single id
//│ res: List[forall 'a. 'a -> 'a]

// FreezeML C3
head ids
//│ res: 'a -> 'a

// FreezeML C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]

let f = fun x -> nil in f (fun g -> (g 3, g true))
//│ res: List[nothing]

// ============ Sec 7 ============

// eta-expansion does not preserve typability (in the presented system)
def f: (int -> (forall 'a. 'a -> 'a)) -> int
fun x -> f x // Not typeable in Boxy Types!
//│ f: (int -> (forall 'a. 'a -> 'a)) -> int
//│ res: (int -> (forall 'a. 'a -> 'a)) -> int

