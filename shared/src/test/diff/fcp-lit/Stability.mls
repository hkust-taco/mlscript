// * Seeking Stability by Being Lazy and Shallow
// * Lazy and Shallow Instantiation Is User Friendly
// * https://dl.acm.org/doi/10.1145/3471874.3472985

// * A lot of these examples are transcribed lossily because we currently
// * do not have anything like explicit type applications and Haskell-style type classes.
// * It turns out most of the examples are very Haskell-specific and thus not insightful for us.


:NoRecursiveTypes



// Preliminary definitions


// id :: ∀ a. a → a
def id: forall 'a. 'a -> 'a
//│ id: 'a -> 'a
//│   = <missing implementation>

// pair :: ∀ a. a → ∀ b. b → (a, b)
def pair: forall 'a. 'a -> (forall 'b. 'b -> ('a, 'b,))
pair x y = (x, y)
//│ pair: 'a -> 'b -> ('a, 'b,)
//│     = <missing implementation>
//│ 'a -> 'b -> ('a, 'b,)
//│   <:  pair:
//│ 'a -> 'b -> ('a, 'b,)
//│     = [Function: pair]

// myPairX x = pair x
myPairX x = pair x
//│ myPairX: 'a -> 'b -> ('a, 'b,)
//│        = [Function: myPairX]



// 3.1 Similarity 1: Let-Inlining and Extraction


// Example 1: myId

// myId = id
myId = id
//│ myId: 'a -> 'a
//│     = <no result>
//│       id is not implemented


// Example 2: myPair

// myPair = pair
myPair = pair
//│ myPair: 'a -> 'b -> ('a, 'b,)
//│       = [Function: pair]


// Example 3: myPairX

// myPairX x = pair x
myPairX x = pair x
//│ myPairX: 'a -> 'b -> ('a, 'b,)
//│        = [Function: myPairX1]



// 3.2 Similarity 2: Signature Property
// (The second similarity annotates a let binding with the inferred type 𝜎 of the bound expression e1.)


// Example 4: infer

// infer = 𝜆 @a (x :: a) → x
infer = forall 'a. fun (x: 'a) -> x
//│ infer: 'a -> 'a
//│      = [Function: infer]

def infer: 'a -> 'a
infer = forall 'a. fun (x: 'a) -> x
//│ infer: 'a -> 'a
//│      = <missing implementation>
//│ 'a -> 'a
//│   <:  infer:
//│ 'a -> 'a
//│      = [Function: infer1]



// 3.3 Similarity 3: Type Signatures
// (Changing a type signature should not affect runtime semantics.)


// Example 5: swizzle

// undef :: ∀ a. Int → a → a
// undef = undefined
:re
def undef: forall 'a. int -> 'a -> 'a
undef = error
//│ undef: int -> 'a -> 'a
//│      = <missing implementation>
//│ nothing
//│   <:  undef:
//│ int -> 'a -> 'a
//│      Runtime error:
//│        Error: an error was thrown

// swizzle :: Int → ∀ a. a → a
// swizzle = undef
:re
def swizzle: int -> (forall 'a. 'a -> 'a)
swizzle = undef
//│ swizzle: int -> (forall 'a. 'a -> 'a)
//│        = <missing implementation>
//│ int -> 'a -> 'a
//│   <:  swizzle:
//│ int -> (forall 'a. 'a -> 'a)
//│        Runtime error:
//│          ReferenceError: undef is not defined

// In Haskell, "deeply skolemization" would eta expand swizzle as:
swizzle = fun x -> undef x
//│ int -> 'a -> 'a
//│   <:  swizzle:
//│ int -> (forall 'a. 'a -> 'a)
//│        = [Function: swizzle1]



// 3.4 Similarity 4: Pattern-Inlining and Extraction
// (changing variable patterns into 𝜆-binders)


// Example 6: infer2, again

// infer2 @a (x :: a) = x
infer2 = forall 'a. fun (x: 'a) -> x
//│ infer2: 'a -> 'a
//│       = [Function: infer2]



// 3.5 Similarity 5: Single vs. Multiple Equations


// Example 7: unitId1 and unitId2

unitId1 () = id
//│ unitId1: () -> (forall 'a. 'a -> 'a)
//│        = <no result>
//│          id is not implemented

// Unlike in Haskell, here multiple equations simply shadow one another
unitId2 () = id
unitId2 () = id
//│ unitId2: () -> (forall 'a. 'a -> 'a)
//│        = <no result>
//│          id is not implemented
//│ unitId2: () -> (forall 'a. 'a -> 'a)
//│        = <no result>
//│          id is not implemented



// 3.6 Similarity 6: 𝜂-Expansion


// Example 8: eta

// noEta = id
noEta = id
//│ noEta: 'a -> 'a
//│      = <no result>
//│        id is not implemented

// eta = 𝜆x → id x
eta = fun x -> id x
//│ eta: 'a -> 'a
//│    = <no result>
//│      id is not implemented



