:NoRecursiveTypes
:DontDistributeForalls



// (*
//  * This example was written by Susumu NISHIMURA 
//  * According to him, it requires impredicative polymorphism.
//  *)



// (* my list definition *)

// type mylist ('b) = Nil | Cons of ('b * mylist ('b));;

// * ML-style version
class Ls[A] method Head: A
def cons: ('a, Ls['a]) -> Ls['a]
def nil: Ls['a]
def elim: Ls['a] -> (('a, Ls['a]) -> 'r, () -> 'r) -> 'r
//│ Defined class Ls[+A]
//│ Declared Ls.Head: Ls['A] -> 'A
//│ cons: ('a, Ls['a],) -> Ls['a]
//│     = <missing implementation>
//│ nil: Ls[nothing]
//│    = <missing implementation>
//│ elim: Ls['a] -> (('a, Ls['a],) -> 'r, () -> 'r,) -> 'r
//│     = <missing implementation>

// * Structural version
class Nil
class Cons[a]: { head: a; tail: List[a] }
type List[a] = Nil | Cons[a]
Nil = Nil {}
Cons (head, tail) = Cons { head; tail }
//│ Defined class Nil
//│ Defined class Cons[+a]
//│ Defined type alias List[+a]
//│ Nil: Nil
//│    = Nil {}
//│ Cons: ('head & 'a, List['a] & 'tail,) -> (Cons['a] with {head: 'head, tail: 'tail})
//│     = [Function: Cons1]



// let rec foo =
//   fun xs ->
//     begin match xs with
//       Nil -> Nil
//     | Cons (x,xs) -> Cons (x+1, foo (foo xs))
//     end

// * Note: doesn't work with :precise-rec-typing
rec def foo xs = elim xs (
    fun (h, t) -> cons (h + 1, foo (foo t)),
    fun () -> nil
  )
//│ foo: Ls[int] -> Ls[int]
//│    = <no result>
//│      elim is not implemented

// * An easier thing to type check, just for the record
rec def foo xs = elim xs (
    fun (h, t) -> cons (h + 1, foo t),
    fun () -> nil
  )
//│ foo: Ls[int] -> Ls[int]
//│    = <no result>
//│      elim is not implemented

// * === === === *
:RecursiveTypes
rec def foo = fun xs -> case xs of
  Nil -> Nil,
  Cons -> Cons (xs.head + 1, foo (foo xs.tail))
//│ foo: 'a -> 'tail
//│   where
//│     'tail :> (Cons[int] with {tail: 'tail}) | Nil
//│     'a <: (Cons[?] with {head: int, tail: 'a}) | Nil
//│    = [Function: foo2]
// * This simpler version works but only with :RecursiveTypes
rec def foo = fun xs -> case xs of
  { Nil -> Nil
  | Cons -> Cons (xs.head + 1, foo xs.tail)
  }
//│ foo: 'a -> 'tail
//│   where
//│     'tail :> (Cons[int] with {tail: 'tail}) | Nil
//│     'a <: (Cons[?] with {head: int, tail: 'a}) | Nil
//│    = [Function: foo3]
:NoRecursiveTypes
// * === === === *



// (* Type def: ba = forall b.(int->b->b)->b->b *)
// type ba = ['b] (int -> 'b -> 'b) -> 'b -> 'b
// (* z can be typed more polymorphic. *)
// type baa = ['a, 'b] ('a  -> 'b -> 'b)-> 'b -> 'b 
type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ Defined type alias Ba
//│ Defined type alias Baa


// LP: this Baa type is a bit weird. It's equivalent to:
def b: (nothing -> 'b -> 'b) -> 'b -> 'b
//│ b: (nothing -> 'b -> 'b) -> 'b -> 'b
//│  = <missing implementation>

// LP: indeed:
b: Baa
//│ res: Baa
//│    = <no result>
//│      b is not implemented
:ng
b = error: Baa
//│ Baa
//│   <:  b:
//│ (nothing -> 'b -> 'b) -> 'b -> 'b



// (* build and foldr *)
// let build = 
//   fun (g : ['b] (('a -> 'b -> 'b) -> 'b -> 'b)) -> 
//     g (fun x xs -> Cons (x,xs)) Nil


def build_ = fun g -> g (fun x -> fun xs -> Cons (x, xs)) Nil
//│ build_: ((forall 'b. 'b -> (forall 'a 'tail. (List['a] & 'tail) -> (Cons['a | 'b] with {head: 'b, tail: 'tail}))) -> Nil -> 'c) -> 'c
//│       = [Function: build_]

:e // * Expected: List is a structural equirecursive types and recursive types are disabled
build_ : forall 'a. (forall 'b. (('a -> 'b -> 'b) -> 'b -> 'b)) -> List['a]
//│ ╔══[ERROR] Cyclic-looking constraint while typing type ascription; a type annotation may be required
//│ ║  l.136: 	build_ : forall 'a. (forall 'b. (('a -> 'b -> 'b) -> 'b -> 'b)) -> List['a]
//│ ║         	^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> List['a]
//│    = [Function: build_]


:e // works with :RecursiveTypes
def build = fun (g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> g (fun x -> fun xs -> Cons (x, xs)) Nil
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.146: 	def build = fun (g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> g (fun x -> fun xs -> Cons (x, xs)) Nil
//│ ║         	                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ build: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> ('tail | error)
//│   where
//│     'tail :> (Cons['a] with {tail: 'tail}) | Nil
//│      = [Function: build]

// * ^ Not sure why this one only works with recursive types:
:RecursiveTypes
def build = fun (g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> g (fun x -> fun xs -> Cons (x, xs)) Nil
//│ build: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> 'tail
//│   where
//│     'tail :> (Cons['a] with {tail: 'tail}) | Nil
//│      = [Function: build1]
:NoRecursiveTypes


def build2_ = fun g -> g (fun x -> fun xs -> cons (x, xs)) nil
//│ build2_: ((forall 'b. 'b -> (forall 'a. Ls['a] -> Ls['a | 'b])) -> Ls[nothing] -> 'c) -> 'c
//│        = <no result>
//│          cons is not implemented

build2_ : forall 'a. (forall 'b. (('a -> 'b -> 'b) -> 'b -> 'b)) -> Ls['a]
//│ res: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│    = <no result>
//│      build2_ and cons are not implemented

def build2 = fun (g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> g (fun x -> fun xs -> cons (x, xs)) nil
//│ build2: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│       = <no result>
//│         cons is not implemented



// let rec foldr =
//   fun k z xs -> 
//     begin match xs with
//       Nil -> z
//     | Cons (x, xs) -> k x (foldr k z xs)
//     end


rec def foldr k z xs =
  elim xs (
    fun (h, t) -> k h (foldr k z t),
    fun () -> z
  )
//│ foldr: ('a -> 'b -> 'b) -> 'b -> Ls['a] -> 'b
//│      = <no result>
//│        elim is not implemented


rec def foldr = fun k -> fun z -> fun xs ->
  case xs of
    Nil -> z,
    Cons -> k xs.head (foldr k z xs.tail)
//│ foldr: ('head -> 'a -> 'a) -> 'a -> 'b -> 'a
//│   where
//│     'b <: (Cons[?] with {head: 'head, tail: 'b}) | Nil
//│      = [Function: foldr1]



// (* encoding `foo' with foldr *)

// let (z : baa) = fun c n -> n
def z = (fun c -> fun n -> n) : Baa
def z_ = fun c -> fun n -> n
//│ z: Baa
//│  = [Function: z]
//│ z_: anything -> (forall 'a. 'a -> 'a)
//│   = [Function: z_]



// let rec (k : int -> ba -> ba) = fun x (xs : ba) c n -> c (x+1) (xs k z c n)


def k: int -> Ba -> Ba
//│ k: int -> Ba -> Ba
//│  = <missing implementation>

// * Note: annotation in `(xs: Ba)` is needed
def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ int -> Ba -> (forall 'b 'a 'b0. (int -> ('b -> 'a & 'b0 -> ('b & 'b0))) -> ('b & 'b0) -> 'a)
//│   <:  k:
//│ int -> Ba -> Ba
//│  = <no result>
//│    k is not implemented

// * [FCP-IMPROV] annotation in `z` was not needed
def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ int -> Ba -> (forall 'b 'a 'b0. (int -> ('b -> 'a & 'b0 -> ('b & 'b0))) -> ('b & 'b0) -> 'a)
//│   <:  k:
//│ int -> Ba -> Ba
//│  = <no result>
//│    k and k are not implemented


// * Versions with unannotated recursive defs:

// * The following tests don't benefit from `:RecursiveTypes` but enabling it reduces the number of shown errors
:RecursiveTypes

// * Notice the extrusion, yielding an imprecise type
:e
rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ int -> Ba -> (int -> (??b | 'a) -> (??b0 & 'a & 'b)) -> (??b0 & 'a) -> (??b | 'b)
//│   <:  k:
//│ int -> Ba -> Ba
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.255: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.101: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║         	                                   ^^
//│ ╟── back into type variable `'b`
//│ ║  l.101: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║         	                             ^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.102: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──       	                                      ^^
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.255: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.101: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║         	                                   ^^
//│ ╟── back into type variable `'b0`
//│ ║  l.101: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║         	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.255: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╙──       	                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│  = [Function: k1]


rec def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k_ z_ c n)
//│ k_: 'k_
//│   where
//│     'k_ :> int -> ('k_ -> (anything -> (forall 'a. 'a -> 'a)) -> 'b -> 'c -> 'd) -> (int -> 'd -> 'e & 'b) -> 'c -> 'e
//│   = [Function: k_]

:e
k = k_
//│ 'k_
//│   where
//│     'k_ :> int -> ('k_ -> (anything -> (forall 'a. 'a -> 'a)) -> 'b -> 'c -> 'd) -> (int -> 'd -> 'e & 'b) -> 'c -> 'e
//│   <:  k:
//│ int -> Ba -> Ba
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.294: 	k = k_
//│ ║         	^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.216: 	def z_ = fun c -> fun n -> n
//│ ║         	         ^^^^^^^^^^^^^^^^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.287: 	rec def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k_ z_ c n)
//│ ║         	                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.294: 	k = k_
//│ ╙──       	    ^^
//│  = [Function: k_]



// (* untyped terms *)
// (* let z = fun c -> fun n -> n *)
// (* let rec k = fun x xs c cn -> c (x+1) (xs k z c n) *)

// (* System F terms *)
// (* let z = /\b -> fun (c : int -> b -> b) -> fun (n : b) -> n *)
// (* let rec (k : int -> (forall b.(int->b->b)->b->b)			*)
// (*	            -> (forall b.(int->b->b)->b->b)) =			*)
// (*     \(a : int) -> \(as : forall b.(int->b->b)->b->b) ->		*)
// (*         /\b -> \(c : int->b->b) -> \(n : b) ->			*)
// (*             ((as[forall b.(int->b->b)->b->b] k z)[b] c z)		*)


// (* definition with build and foldr *)
// let bfoo xs = build (foldr k z xs)

def bfoo xs = build (foldr k z xs)
//│ bfoo: 'a -> 'tail
//│   where
//│     'tail :> (Cons[int] with {tail: 'tail}) | Nil
//│     'a <: (Cons[?] with {head: int, tail: 'a}) | Nil
//│     = [Function: bfoo]

:e
def bfoo_ xs = build_ (foldr k_ z_ xs)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.341: 	def bfoo_ xs = build_ (foldr k_ z_ xs)
//│ ║         	               ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?b -> (forall ?c. ?c -> ?c)` does not match type `Cons[?a] | Nil`
//│ ║  l.216: 	def z_ = fun c -> fun n -> n
//│ ║         	         ^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.34: 	type List[a] = Nil | Cons[a]
//│ ║        	               ^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.131: 	def build_ = fun g -> g (fun x -> fun xs -> Cons (x, xs)) Nil
//│ ╙──       	                                                     ^^
//│ bfoo_: 'a -> error
//│   where
//│     'a <: (Cons[?] with {head: int, tail: 'a}) | Nil
//│      = [Function: bfoo_]
// * Alt:
def bfoo_ xs = build_ (foldr k z_ xs)
//│ bfoo_: 'a -> 'tail
//│   where
//│     'tail :> (Cons[int] with {tail: 'tail}) | Nil
//│     'a <: (Cons[?] with {head: int, tail: 'a}) | Nil
//│      = [Function: bfoo_1]


lst = Cons (0, Cons (0, Cons (0, Nil)))
//│ lst: Cons[0] with {tail: Cons[0] with {tail: Cons[0] with {tail: Nil}}}
//│    = Cons {
//│        head: 0,
//│        tail: Cons { head: 0, tail: Cons { head: 0, tail: Nil {} } }
//│      }

// (* test run *)
// let lst0 = Cons (0, Cons (0, Cons (0, Cons (0, Nil))));;
lst0 = Cons (0, Cons (0, Cons (0, Cons (0, Nil))))
//│ lst0: Cons[0] with {tail: Cons[0] with {tail: Cons[0] with {tail: Cons[0] with {tail: Nil}}}}
//│     = Cons {
//│         head: 0,
//│         tail: Cons { head: 0, tail: Cons { head: 0, tail: [Cons] } }
//│       }

// foo lst0;;
foo lst0
//│ res: 'tail
//│   where
//│     'tail :> (Cons[int] with {tail: 'tail}) | Nil
//│    = Cons {
//│        head: 1,
//│        tail: Cons { head: 1, tail: Cons { head: 1, tail: [Cons] } }
//│      }

// bfoo lst0;;
bfoo lst0
//│ res: 'tail
//│   where
//│     'tail :> (Cons[int] with {tail: 'tail}) | Nil
//│    = Cons {
//│        head: 1,
//│        tail: Cons { head: 2, tail: Cons { head: 4, tail: [Cons] } }
//│      }

bfoo_ lst0
//│ res: 'tail
//│   where
//│     'tail :> (Cons[int] with {tail: 'tail}) | Nil
//│    = Cons {
//│        head: 1,
//│        tail: Cons { head: 2, tail: Cons { head: 4, tail: [Cons] } }
//│      }



// (* This does not type :
// type baa = ['a, 'b] ('a  -> 'b -> 'b)-> 'b -> 'b
//   let rec (k : int -> baa -> baa) = fun x (xs : baa) c n -> c (x+1) (xs k z c n)
// *)


def k: int -> Baa -> Baa
//│ k: int -> Baa -> Baa
//│  = <missing implementation>

:e
def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ int -> Baa -> (forall 'a 'b. (int -> 'a -> 'b) -> 'a -> 'b)
//│   <:  k:
//│ int -> Baa -> Baa
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.425: 	def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` does not match type `'a`
//│ ║  l.425: 	def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                       ^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.102: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──       	                          ^^
//│  = <no result>
//│    k is not implemented


// * Using `k` here on purpose to simulate an annotated rec def
def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ k_: int -> (forall 'a 'b 'c. ((int -> Baa -> Baa) -> Baa -> 'a -> 'b -> 'c) -> (forall 'd. (int -> 'c -> 'd & 'a) -> 'b -> 'd))
//│   = <no result>
//│     k and k are not implemented

:e
k = k_ // nope
//│ int -> (forall 'a 'b 'c. ((int -> Baa -> Baa) -> Baa -> 'a -> 'b -> 'c) -> (forall 'd. (int -> 'c -> 'd & 'a) -> 'b -> 'd))
//│   <:  k:
//│ int -> Baa -> Baa
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.449: 	k = k_ // nope
//│ ║         	^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.102: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║         	                                      ^^
//│ ╟── back into type variable `'b`
//│ ║  l.102: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║         	                                ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.443: 	def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.449: 	k = k_ // nope
//│ ╙──       	    ^^
//│  = <no result>
//│    k_, k and k are not implemented


rec def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k_ z c n)
//│ k_: 'k_
//│   where
//│     'k_ :> int -> ('k_ -> Baa -> 'a -> 'b -> 'c) -> (int -> 'c -> 'd & 'a) -> 'b -> 'd
//│   = [Function: k_1]

:e
k = k_ // nope
//│ 'k_
//│   where
//│     'k_ :> int -> ('k_ -> Baa -> 'a -> 'b -> 'c) -> (int -> 'c -> 'd & 'a) -> 'b -> 'd
//│   <:  k:
//│ int -> Baa -> Baa
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.480: 	k = k_ // nope
//│ ║         	^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.102: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║         	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.473: 	rec def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k_ z c n)
//│ ║         	                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.480: 	k = k_ // nope
//│ ╙──       	    ^^
//│  = [Function: k_1]


rec def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k_ z_ c n)
//│ k_: 'k_
//│   where
//│     'k_ :> int -> ('k_ -> (anything -> (forall 'a. 'a -> 'a)) -> 'b -> 'c -> 'd) -> (int -> 'd -> 'e & 'b) -> 'c -> 'e
//│   = [Function: k_2]

// k = k_ // nope


