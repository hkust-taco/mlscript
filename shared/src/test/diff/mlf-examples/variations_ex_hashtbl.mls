:NoRecursiveTypes
:NoJS



// ============ Dummy definitions to type the examples ============


class List[a]
  method Get: a
def nil: List['a]
def cons[a]: a -> List[a] -> List[a]
def match_list: forall 'a 'b. List['a] -> 'b -> ('a -> List['a] -> 'b) -> 'b
def isnil: List['a] -> bool
//│ Defined class List[+a]
//│ Declared List.Get: List['a] -> 'a
//│ nil: List[nothing]
//│ cons: 'a -> List['a] -> List['a]
//│ match_list: List['a] -> 'b -> ('a -> List['a] -> 'b) -> 'b
//│ isnil: List[?] -> bool

class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
def none = None {}
def some val = Some { val }
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]
//│ none: None
//│ some: 'val -> Some['val]

def match_opt: forall 'a 'r. (() -> 'r, 'a -> 'r) -> Option['a] -> 'r
//│ match_opt: (() -> 'r, 'a -> 'r,) -> Option['a] -> 'r

match_opt (n, s) opt = case opt of
  None -> n(),
  Some -> s(opt.val)
//│ (() -> 'a, 'val -> 'a,) -> (None | Some[?] & {val: 'val}) -> 'a
//│   <:  match_opt:
//│ (() -> 'r, 'a -> 'r,) -> Option['a] -> 'r



// ============ From the original examples ============

type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def add (n: ChurchInt) (m: ChurchInt) = n succ m
def printInt (n: ChurchInt) = toString (n (fun x -> x + 1) 0)
//│ succ: ChurchInt -> ('a -> ('a & 'b)) -> 'a -> 'b
//│ add: ChurchInt -> ChurchInt -> (ChurchInt | ('a -> ('a & 'b)) -> 'a -> 'b)
//│ printInt: ChurchInt -> string

def create_hashtbl () = nil
def hashtbl_add table key element = cons ((key, element)) table
//│ create_hashtbl: () -> List[nothing]
//│ hashtbl_add: List['a] -> 'b -> 'c -> List[('b, 'c,) | 'a]

table = create_hashtbl ()
table = hashtbl_add table "one" (fun f -> fun x -> f x)
// table = hashtbl_add table "two" (fun f -> fun x -> f (f x))
//│ table: List[nothing]
//│ table: List[("one", forall 'a 'b. ('a -> 'b) -> 'a -> 'b,)]



// ============ Our own variations on ex_hashtbl ============


rec def find table key =
  match_list table none (fun h -> fun t ->
    if eq h.0 key then some h.1
    else find t key
  )
//│ find: List[{0: anything, 1: 'val}] -> anything -> (None | Some['val])

def nfind table key =
  let opt = find table key in
  case opt of
  { None -> fun f -> fun x -> x
  | Some -> opt.val
  }
//│ nfind: List[{0: anything, 1: 'val}] -> anything -> (anything -> 'a -> 'a | 'val)

def nfind: List[{0: anything; 1: 'val}] -> anything -> (anything -> 'a -> 'a | 'val)
//│ nfind: List[{0: anything, 1: 'val}] -> anything -> (anything -> 'a -> 'a | 'val)

// * Alternative
// def nfind table key =
//   (fun opt -> case opt of
//   { None -> fun f -> fun x -> x
//   | Some -> opt.val
//   }) (find table key)


// * Note that this works:

def x = nfind table "one"
//│ x: ('b -> 'a) -> ('a & 'b) -> 'a

// def x: ('b -> 'a) -> ('a & 'b) -> 'a

add x
//│ res: ChurchInt -> (ChurchInt | ('a -> ('a & 'b)) -> 'a -> 'b)

// * But this doesn't, because `nfind table "one"` is no longer generalized:

:stats
:e
add (nfind table "one")
//│ ╔══[ERROR] Type error in application
//│ ║  l.113: 	add (nfind table "one")
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.47: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                                           ^^
//│ ╟── back into type variable `'a`
//│ ║  l.47: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.113: 	add (nfind table "one")
//│ ║         	     ^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.63: 	table = hashtbl_add table "one" (fun f -> fun x -> f x)
//│ ╙──      	                                                     ^
//│ res: error | ChurchInt -> (ChurchInt | ('a -> ('a & 'b)) -> 'a -> 'b)
//│ constrain calls  : 100
//│ annoying  calls  : 7
//│ subtyping calls  : 305

// * On the other hand, in this variation, distributivity saves the day:

tmp = nfind table
//│ tmp: anything -> ('b -> 'a) -> ('a & 'b) -> 'a

tmp "one"
//│ res: ('b -> 'a) -> ('a & 'b) -> 'a

add (tmp "one")
//│ res: ChurchInt -> (ChurchInt | ('a -> ('a & 'b)) -> 'a -> 'b)

// * But it all works with argument-generalization:
// ==========================================================================================
:GeneralizeArguments

:stats
add (nfind table "one")
//│ res: ChurchInt -> (ChurchInt | ('a -> ('a & 'b)) -> 'a -> 'b)
//│ constrain calls  : 94
//│ annoying  calls  : 7
//│ subtyping calls  : 280

:stats
(fun x -> add x) (nfind table "one")
//│ res: ChurchInt -> (ChurchInt | ('a -> ('a & 'b)) -> 'a -> 'b)
//│ constrain calls  : 106
//│ annoying  calls  : 7
//│ subtyping calls  : 314


:stats
zog = printInt (add (nfind table "one") (nfind table "two"))
//│ zog: string
//│ constrain calls  : 283
//│ annoying  calls  : 14
//│ subtyping calls  : 786

:DontGeneralizeArguments
// ==========================================================================================



b = find table "two"
//│ b: None | Some[forall 'a 'b. ('a -> 'b) -> 'a -> 'b]

match_opt (
    fun () -> fun f -> fun x -> x,
    fun v -> v
  ) b
//│ res: ('a -> 'b) -> ('a & 'c) -> ('b | 'c)

match_opt (
    fun () -> fun f -> fun x -> x,
    fun v -> v
  ) (find table "two")
//│ res: ('a -> 'b) -> ('a & 'c) -> ('b | 'c)

def foo key = match_opt (
    fun () -> fun f -> id,
    fun v -> v
  ) (find table key)
//│ foo: anything -> ('a -> 'b) -> 'a -> ('b | 'a)

foo 1
//│ res: ('a -> 'b) -> 'a -> ('b | 'a)

:e
foo 1 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.202: 	foo 1 2
//│ ║         	^^^^^^^
//│ ╟── integer literal of type `2` is not a function
//│ ║  l.202: 	foo 1 2
//│ ║         	      ^
//│ ╟── Note: constraint arises from application:
//│ ║  l.63: 	table = hashtbl_add table "one" (fun f -> fun x -> f x)
//│ ║        	                                                   ^^^
//│ ╟── from reference:
//│ ║  l.63: 	table = hashtbl_add table "one" (fun f -> fun x -> f x)
//│ ╙──      	                                                   ^
//│ res: 'a -> 'a | error

foo 1 error
//│ res: 'a -> 'a

foo 1 error 2
//│ res: 2

(fun key -> match_opt (
    fun () -> fun f -> fun x -> x,
    fun v -> v
  ) (find table key)) "two"
//│ res: ('a -> 'b) -> ('c & 'a) -> ('c | 'b)

res id
//│ res: 'a -> 'a

case b of
  None -> fun f -> fun x -> x,
  Some -> b.val
//│ res: ('a -> 'b) -> ('c & 'a) -> ('c | 'b)

res id
//│ res: 'a -> 'a

(fun opt -> case b of
  None -> fun f -> fun x -> x,
  Some -> b.val) (find table "two")
//│ res: ('a -> 'b) -> ('c & 'a) -> ('c | 'b)


