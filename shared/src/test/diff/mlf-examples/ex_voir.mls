:NoRecursiveTypes

// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ ('head & 'a) -> (List['a] & 'tail) -> (Cons['a] with {head: 'head, tail: 'tail})
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}



// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let choose x y = if true then x else y
// let choose3 x y z = (choose (choose x y) z)
// let id = (fun x -> x : sid)
// let succ n = n + 1
def choose x y = if true then x else y
def choose3 x y z = choose (choose x y) z
def id = (fun x -> x) : Sid
def id_ = fun x -> x
def succ n = n + 1
//│ choose: 'a -> 'a -> 'a
//│       = [Function: choose]
//│ choose3: 'a -> 'a -> 'a -> 'a
//│        = [Function: choose3]
//│ id: Sid
//│   = [Function: id]
//│ id_: 'a -> 'a
//│    = [Function: id_]
//│ succ: int -> int
//│     = [Function: succ]

// let test = choose3 id
// let test2 = test succ
def test = choose3 id
def test_ = choose3 id_
def test2 = test succ
def test2_ = test_ succ
//│ test: 'a -> 'a -> (Sid | 'a)
//│     = [Function: test]
//│ test_: 'a -> 'a -> ('b -> 'b | 'a)
//│      = [Function: test_]
//│ test2: 'a -> (int -> int | Sid | 'a)
//│      = [Function: test2]
//│ test2_: 'a -> (int -> int | 'a)
//│       = [Function: test2_]

// (* Messages d'erreur foireux : *)
// type s1 = ['a] 'a -> int * int ;;
// type s2 = ['a] 'a -> bool * bool ;
// fun x y -> ((x:s1),(y:s2), if true then x else y) ;; 
// fun x y -> ((x:s1),(y:s2), x x) ;; 
type S1 = forall 'a. 'a -> (int, int)
type S2 = forall 'a. 'a -> (bool, bool)
fun x -> fun y -> ((x : S1), (y : S2), if true then x else y)
fun x -> fun y -> ((x : S1), (y : S2), x x)
//│ Defined type alias S1
//│ Defined type alias S2
//│ res: (S1 & 'a) -> (S2 & 'a) -> (S1, S2, 'a,)
//│    = [Function: res]
//│ res: (S1 & 'a -> 'b & 'a) -> S2 -> (S1, S2, 'b,)
//│    = [Function: res]

// (* please onlyweak ['b = sid] 'b -> 'b : sid -> sid *)

// (*
// let example f = (f:['a] 'a -> int -> 'b) f
// let mkpair x y = (x,y)
def example f = (f: forall 'a. 'a -> int -> 'b) f
def example_ f = f f
def mkpair x y = (x, y)
//│ example: (anything -> int -> 'b) -> int -> 'b
//│        = [Function: example]
//│ example_: ('a -> 'b & 'a) -> 'b
//│         = [Function: example_]
//│ mkpair: 'a -> 'b -> ('a, 'b,)
//│       = [Function: mkpair]

// untype example mkpair
// (* �a echoue parce qu'on instancie 'b avec un type contenant 'a *)
// (* Il faudrait que le message d'erreur soit plus clair. *)
// *)
example mkpair
example_ mkpair
//│ res: int -> (??a, int,)
//│    = [Function (anonymous)]
//│ res: 'a -> (forall 'b 'c. 'b -> 'c -> ('b, 'c,), 'a,)
//│    = [Function (anonymous)]

// let make_ex3 x (f:['a > sid] 'a -> 'b ) = f x 
def make_ex3 x (f: forall 'a. ('a | Sid) -> 'b) = f x
//│ make_ex3: anything -> (anything -> 'a) -> 'a
//│         = [Function: make_ex3]

// let ex_list3 = [ make_ex3 succ ;
// 		 make_ex3 id ;
// 		 make_ex3 not ]

def ex_list3 = cons (make_ex3 succ) (
      cons (make_ex3 id) (
      cons (make_ex3 not) nil))
//│ ex_list3: List[forall 'a. (anything -> 'a) -> 'a]
//│         = [Function: ex_list3]


// * TODO: what is `open`?

// (*let test3 = listiter (open (fun v -> choose v id)) ex_list3  *)
// (* Meme message d'erreur je crois. *)

// type i = int
// (* Affichage : nom des variables ??? *)
// please unify ['a1 = ['a2 = ['a3 = ['a4 = ['a5 = 0] 'a5 -> i]
//                                         ('a4 -> i) -> i]
//                                         ('a3 -> i) -> i] 'a2 -> i] 'a1 -> i
//          :   ['b1 = ['b2 = ['b3 = ['b4 = 0] ('b4 -> i) -> i]
//                                         ('b3 -> i) -> i]
//                                         ('b2 -> i) -> i] 'b1 -> i

// (* Cet exemple cr�e un graphe mal form�. *)
// please failon_unify ['a] ['b = ['c] 'c -> 'a] 'b -> 'a
//          :   ['a] ['b > ['c] 'c -> list ('c)] 'b -> 'a

// (* Plus simple *)
// please failon_unify ['a] ['b = ['c] 'c -> 'a] 'b -> 'a
//          :   ['a] ['b > ['c] 'c -> 'c] 'b -> 'a

// (* Extrusion automatique de binders. *)
// please unify  ['a] ['b > ['c] 'c -> 'a] 'b -> 'a
//           :   ['a] ['b > ['c] 'c -> 'c] 'b -> 'a
//           =   ['c] ('c -> 'c) -> 'c


