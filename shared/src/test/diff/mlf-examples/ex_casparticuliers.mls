:NoRecursiveTypes
:DistributeForalls

// (*** L'annotation est n�cessaire sur z, mais z n'est utilis� qu'une seule fois. ***)
// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let t (z:sid) = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a )
def t (z: Sid) = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: Sid -> (forall 'a. anything -> 'a -> 'a)
//│  = [Function: t]

// (* Une seule instance, mais polymorphe. *)
// let t z = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a );;
def t z = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: (??a -> ??a0) -> anything -> 'a -> 'a
//│  = [Function: t1]

def t z = fun a -> z
//│ t: 'a -> anything -> 'a
//│  = [Function: t2]


// (*** Ne type pas avec les value-restriction. Emb�tant. ***)

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let zero f x = x
// ;;

def zero f x = x
//│ zero: anything -> 'a -> 'a
//│     = [Function: zero]

def zero_ty: ChurchInt
//│ zero_ty: ChurchInt
//│        = <missing implementation>

// let succ (n:Int) = fun f x -> f (n f x)
// ;;
def succ_ty: ChurchInt -> ChurchInt
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ' n = fun f -> fun x -> f (n f x)
//│ succ_ty: ChurchInt -> ChurchInt
//│        = <missing implementation>
//│ succ: ChurchInt -> ('a -> ('a & 'b)) -> 'a -> 'b
//│     = [Function: succ]
//│ succ': ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│      = [Function: succ$]

// * Note: without constrained types we don't get the principal type of succ' (at least assuming no distrib)

succ_ty = succ
//│ ChurchInt -> ('a -> ('a & 'b)) -> 'a -> 'b
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ]

// * Note that this equires distributivity (see Church encoding test files)
succ_ty = succ'
//│ ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ$]

succ'
//│ res: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│    = [Function: succ$]

// * Legit error: (bad bounds)
:e
succ' {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.76: 	succ' {}
//│ ║        	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.76: 	succ' {}
//│ ║        	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.47: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ║        	                                   ^^^
//│ ╟── from reference:
//│ ║  l.47: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^
//│ res: (nothing -> 'a) -> anything -> 'a | error
//│    = [Function (anonymous)]

:e
succ' {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.93: 	succ' {} {}
//│ ║        	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.93: 	succ' {} {}
//│ ║        	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.47: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ║        	                                   ^^^
//│ ╟── from reference:
//│ ║  l.47: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.93: 	succ' {} {}
//│ ║        	^^^^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.93: 	succ' {} {}
//│ ║        	         ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.47: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ║        	                                ^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.47: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                ^
//│ res: anything -> nothing | error
//│    = [Function (anonymous)]

:e
succ' {} {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.122: 	succ' {} {} {}
//│ ║         	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.122: 	succ' {} {} {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.47: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ║        	                                   ^^^
//│ ╟── from reference:
//│ ║  l.47: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.122: 	succ' {} {} {}
//│ ║         	^^^^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.122: 	succ' {} {} {}
//│ ║         	         ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.47: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ║        	                                ^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.47: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                ^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function

fun x -> succ' x x x x x x x x x
//│ res: ('a -> 'a -> 'b & 'b -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> 'c & 'a) -> 'c
//│    = [Function: res]


// let rec to_church n =
//   if n = 0 then zero
//   else succ (to_church (n-1))
// ;;

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

rec def to_church_1 n =
  if n == 0 then zero
  else succ (to_church_1 (n - 1))
//│ to_church_1: int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b
//│            = [Function: to_church_1]

rec def to_church_1_t n =
  if n == 0 then zero
  else succ_ty (to_church_1_t (n - 1))
//│ to_church_1_t: int -> (anything -> 'a -> 'a | ChurchInt)
//│              = [Function: to_church_1_t]

rec def to_church_1_tt n =
  if n == 0 then zero_ty
  else succ_ty (to_church_1_tt (n - 1))
//│ to_church_1_tt: int -> ChurchInt
//│               = <no result>
//│                 zero_ty is not implemented

// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))

:ng // rec non-fun not supported in JS
rec def wat =
  succ wat
//│ wat: ('a -> ('a & 'b)) -> 'a -> 'b

rec def wat n =
  succ (wat n)
//│ wat: anything -> ('a -> ('a & 'b)) -> 'a -> 'b
//│    = [Function: wat]

:e
rec def wat n =
  succ wat n
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.197: 	rec def wat n =
//│ ║         	            ^^^
//│ ║  l.198: 	  succ wat n
//│ ║         	^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                                   ^^
//│ ╟── back into type variable `'a`
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                             ^^
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.197: 	rec def wat n =
//│ ║         	            ^^^
//│ ║  l.198: 	  succ wat n
//│ ║         	^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                                   ^^
//│ ╟── back into type variable `'a`
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                             ^^
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.197: 	rec def wat n =
//│ ║         	            ^^^
//│ ║  l.198: 	  succ wat n
//│ ║         	^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                                           ^^
//│ ╟── back into type variable `'a`
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.198: 	  succ wat n
//│ ║         	  ^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.46: 	def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
//│ ╙──      	                                                   ^
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.197: 	rec def wat n =
//│ ║         	            ^^^
//│ ║  l.198: 	  succ wat n
//│ ║         	^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                                           ^^
//│ ╟── back into type variable `'a`
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.198: 	  succ wat n
//│ ║         	  ^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.46: 	def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
//│ ╙──      	                                                   ^
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.197: 	rec def wat n =
//│ ║         	            ^^^
//│ ║  l.198: 	  succ wat n
//│ ║         	^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                                   ^^
//│ ╟── back into type variable `'a`
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                                                 ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.198: 	  succ wat n
//│ ╙──       	  ^^^^^^^^^^
//│ wat: ((??a | 'a) -> (??a0 & 'a & 'b)) -> (??a0 & 'a) -> (??a | 'b)
//│    = [Function: wat1]

:precise-rec-typing
rec def wat n =
  succ wat n
//│ wat: ('a -> ('a & 'b)) -> 'a -> 'b
//│    = [Function: wat2]

:ng
rec def nani =
  succ' nani
//│ nani: ('a -> 'a) -> anything -> 'a

rec def wat_2 n =
  succ (wat_2 n)
//│ wat_2: anything -> ('a -> ('a & 'b)) -> 'a -> 'b
//│      = [Function: wat_2]

def to_church_1_repro n =
  succ (to_church_ty n)
//│ to_church_1_repro: int -> ('a -> ('a & 'b)) -> 'a -> 'b
//│                  = <no result>
//│                    to_church_ty is not implemented



rec def to_church_1_st n =
  if n == 0 then zero
  else succ_ty (to_church_1_st (n - 1))
//│ to_church_1_st: int -> (anything -> 'a -> 'a | ChurchInt)
//│               = [Function: to_church_1_st]

rec def to_church_2 n =
  if n == 0 then zero
  else succ' (to_church_2 (n - 1))
//│ to_church_2: int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b
//│            = [Function: to_church_2]

to_church_ty = to_church_2
//│ int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_2]

// (* Marche *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)
// ;;

rec def to_church_3 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ to_church_3: int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b
//│            = [Function: to_church_3]

// (* Ne Marche Pas *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else (fun f x -> f ((to_church (n-1)) f x) : Int)
// ;;
rec def to_church_4 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ to_church_4: int -> ((ChurchInt | 'a) -> ChurchInt) -> 'a -> (ChurchInt | 'a)
//│            = [Function: to_church_4]


// (* La r�cursion est monomorphe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;

rec def to_church_5 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_5 (n - 1)) f x)
//│ to_church_5: int -> ('a -> 'b & 'a -> 'a) -> ('a & 'b) -> 'b
//│            = [Function: to_church_5]

to_church_ty = to_church_1
//│ int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1]

to_church_ty = to_church_1_t
//│ int -> (anything -> 'a -> 'a | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1_t]

to_church_ty = to_church_1_tt
//│ int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = <no result>
//│               to_church_1_tt and zero_ty are not implemented

to_church_ty = to_church_1_st
//│ int -> (anything -> 'a -> 'a | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1_st]

:ng
// :e // due to tapping
to_church_ty = to_church_2
//│ int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b
//│   <:  to_church_ty:
//│ int -> ChurchInt

to_church_ty = to_church_3
//│ int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_3]

:e
to_church_ty = to_church_4
//│ int -> ((ChurchInt | 'a) -> ChurchInt) -> 'a -> (ChurchInt | 'a)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.392: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `('a -> 'a) -> 'a -> 'a` does not match type `'a0`
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                             ^^
//│             = [Function: to_church_4]

// :e
to_church_ty = to_church_5
//│ int -> ('a -> 'b & 'a -> 'a) -> ('a & 'b) -> 'b
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_5]




// (* Echoue avec la value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;


// // * It seems this one may need polymorphic recursion...?
// // *  ...but it's just a version with succ inlined!?
rec def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> ('a -> 'b & 'a -> 'a) -> ('a & 'b) -> 'b
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty7]

// * ... since we can fix it by using the annotation for rec calls:
def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty8]


// (* �a coince. *)
// let tc n = (to_church n : Int);;

def tc n = to_church_1 n : ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc]

def tc n = to_church_ty n : ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc1]

def tc n = to_church_2 n : ChurchInt // Requires :RecursiveTypes
//│ tc: int -> ChurchInt
//│   = [Function: tc2]

// Notice the top/bot extruded skolem in the results
def tc n = to_church_3 n
//│ tc: int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b
//│   = [Function: tc3]

// * This test is "flaky" (unreliable) because its success depends on
// *  which order the previous FAILING test performs its constraining,
// *  which is notably dependent on variable names.
// *  This happens because we now stop at the first constraint failure
// *  (otherwise some failing test cases like in NestedDataTypes take too long).
// :e
tc 1 id
//│ res: 'a -> 'a
//│    = [Function (anonymous)]

tc: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: tc3]

def tc n = to_church_3 n : ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc4]

// (* Duplicate with to_church1 ("Marche") above *)
// (* Avec la value restriction : �a passe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)


// (*** Les annotations de type ne commutent pas. ***)
// type sid = ['a] 'a -> 'a
// type z = ['a,'b] ('a -> 'b) -> ('a -> 'b)
type Z = forall 'a 'b. ('a -> 'b) -> ('a -> 'b)
//│ Defined type alias Z

// let f x = (x:sid), ((x:sid):z)

// :e // due to tapping
def f x = ((x : Sid), ((x : Sid) : Z))
//│ f: Sid -> (Sid, Z,)
//│  = [Function: f]

// (* Ne type pas ... c'est une instance polymorphe. Interdit. *)
// untype fun x -> (x:sid), (x:z)
fun x -> ((x : Sid), (x : Z))
//│ res: (Sid & Z) -> (Sid, Z,)
//│    = [Function: res]





// * === With Constrained Types ===

:DontDistributeForalls
:ConstrainedTypes



// let succ (n:Int) = fun f x -> f (n f x)
// ;;
def succ_ty: ChurchInt -> ChurchInt
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ' n = fun f -> fun x -> f (n f x)
//│ succ_ty: ChurchInt -> ChurchInt
//│        = <missing implementation>
//│ succ: ChurchInt -> (forall 'b. 'b -> (forall 'a 'c. 'a -> 'c
//│   where
//│     'b <: 'a -> 'a & 'a -> 'c))
//│     = [Function: succ1]
//│ succ': 'a -> (forall 'b. 'b -> (forall 'c 'd 'e. 'e -> 'd
//│   where
//│     'b <: 'c -> 'd
//│     'a <: 'b -> 'e -> 'c))
//│      = [Function: succ$1]

// * Note: without constrained types we wouldn't get the principal type of succ'

succ_ty = succ
//│ ChurchInt -> (forall 'b. 'b -> (forall 'a 'c. 'a -> 'c
//│   where
//│     'b <: 'a -> 'a & 'a -> 'c))
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ1]

// * Still requires distributivity even with CT
:e
succ_ty = succ'
//│ 'a -> (forall 'b. 'b -> (forall 'c 'd 'e. 'e -> 'd
//│   where
//│     'a <: 'b -> 'e -> 'c
//│     'b <: 'c -> 'd))
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.548: 	succ_ty = succ'
//│ ║         	^^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                                   ^^
//│ ╟── back into type variable `'a`
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.523: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.548: 	succ_ty = succ'
//│ ╙──       	          ^^^^^
//│        = [Function: succ$1]
:DistributeForalls
succ_ty = succ'
//│ 'a -> 'b -> ('c -> 'd
//│   where
//│     'b <: 'e -> 'd
//│     'a <: 'b -> 'c -> 'e)
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ$1]
:DontDistributeForalls

succ'
//│ res: 'a -> (forall 'b. 'b -> (forall 'c 'd 'e. 'e -> 'd
//│   where
//│     'a <: 'b -> 'e -> 'c
//│     'b <: 'c -> 'd))
//│    = [Function: succ$1]

// :e // * Error delayed by inconsistent constrained types
succ' {}
//│ res: 'a -> (forall 'b 'c 'd. 'd -> 'c
//│   where
//│     'a <: 'b -> 'c
//│     anything <: 'a -> 'd -> 'b)
//│    = [Function (anonymous)]

// :e // * Error delayed by inconsistent constrained types
succ' {} {}
//│ res: 'a -> 'b
//│   where
//│     anything <: 'c -> 'b & anything -> 'a -> 'c
//│    = [Function (anonymous)]

:e
succ' {} {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.606: 	succ' {} {} {}
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.606: 	succ' {} {} {}
//│ ║         	         ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.523: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──       	                                ^^^^^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function



