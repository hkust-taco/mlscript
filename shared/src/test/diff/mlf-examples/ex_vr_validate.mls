:NoRecursiveTypes

// (* Value restriction. *)
// let id x = x 
def id x = x
//│ id: 'a -> 'a
//│   = [Function: id]

// untype let x = id id in x 1, x true
// untype let x = (id id:'a) in x 1, x true
// ;;
let x = id id in (x 1, x true)
let x = (id id : 'a) in (x 1, x true)
//│ res: (1, true,)
//│    = [ 1, true ]
//│ res: (1, true,)
//│    = [ 1, true ]

// type sid = ['a] 'a -> 'a
// ;;
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let annot x = (x:sid)
// ;;
def annot x = x : Sid
//│ annot: Sid -> Sid
//│      = [Function: annot]

// let delta x = let y = (x:sid) in y y
// ;;
def delta x = let y = (x : Sid) in y y
//│ delta: Sid -> Sid
//│      = [Function: delta]

// untype fun x -> let y = (annot x) in y y
// ;;
fun x -> let y = annot x in y y
//│ res: Sid -> Sid
//│    = [Function: res]

