
:showRepl
class Box[T]: { inner: T }
  method Map: (T -> 'a) -> Box['a]
  method Map f = Box { inner = f this.inner }
  method Get = this.inner
box0 = Box { inner = 0 }
//│ Defined class Box[+T]
//│ Declared Box.Map: Box['T] -> ('T -> 'a) -> Box['a]
//│ Defined Box.Map: Box['T] -> ('T -> 'inner) -> Box['inner]
//│ Defined Box.Get: Box['T] -> 'T
//│ ┌ Block at ReplHost.mls:3
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let res;
//│ │ │   class Box {
//│ │ │     constructor(fields) {
//│ │ │       this.inner = fields.inner;
//│ │ │     }
//│ │ │     Map(f) {
//│ │ │       const self = this;
//│ │ │       return new Box({ inner: f(self.inner) });
//│ │ │     }
//│ │ │     get Get() {
//│ │ │       const self = this;
//│ │ │       return self.inner;
//│ │ │     }
//│ │ │   }
//│ │ └── Reply
//│ │     undefined
//│ └─┬ Query 1/1
//│   ├── Prelude: <empty>
//│   ├── Code:
//│   ├──   globalThis.box0 = new Box({ inner: 0 });
//│   ├── Intermediate: Box { inner: 0 }
//│   └── Reply: [success] Box { inner: 0 }
//│ box0: Box[0]
//│     = Box { inner: 0 }

:showRepl
box1 = Box { inner = 1 }
//│ ┌ Block at ReplHost.mls:41
//│ ├── No prelude
//│ └─┬ Query 1/1
//│   ├── Prelude: <empty>
//│   ├── Code:
//│   ├──   globalThis.box1 = new Box({ inner: 1 });
//│   ├── Intermediate: Box { inner: 1 }
//│   └── Reply: [success] Box { inner: 1 }
//│ box1: Box[1]
//│     = Box { inner: 1 }

:showRepl
case box1 of { Box -> 0 }
//│ ┌ Block at ReplHost.mls:54
//│ ├── No prelude
//│ └─┬ Query 1/1
//│   ├── Prelude:
//│   ├──   let a;
//│   ├── Code:
//│   ├──   res = (a = box1, a instanceof Box ? 0 : (() => {
//│   ├──     throw new Error("non-exhaustive case expression");
//│   ├──   })());
//│   ├── Intermediate: 0
//│   └── Reply: [success] 0
//│ res: 0
//│    = 0

:showRepl
box1.Map (fun x -> add x 1)
box1.Map (fun x -> add x 2)
box1.Map (fun x -> Box { inner = x })
//│ ┌ Block at ReplHost.mls:70
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   function add(x, y) {
//│ │ │     if (arguments.length === 2) {
//│ │ │       return x + y;
//│ │ │     } else {
//│ │ │       return (y) => x + y;
//│ │ │     }
//│ │ │   }
//│ │ └── Reply
//│ │     undefined
//│ ├─┬ Query 1/3
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   res = box1.Map((x) => add(x)(1));
//│ │ ├── Intermediate: Box { inner: 2 }
//│ │ └── Reply: [success] Box { inner: 2 }
//│ ├─┬ Query 2/3
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   res = box1.Map((x) => add(x)(2));
//│ │ ├── Intermediate: Box { inner: 3 }
//│ │ └── Reply: [success] Box { inner: 3 }
//│ └─┬ Query 3/3
//│   ├── Prelude: <empty>
//│   ├── Code:
//│   ├──   res = box1.Map((x) => new Box({ inner: x }));
//│   ├── Intermediate: Box { inner: Box { inner: 1 } }
//│   └── Reply: [success] Box { inner: Box { inner: 1 } }
//│ res: Box[int]
//│    = Box { inner: 2 }
//│ res: Box[int]
//│    = Box { inner: 3 }
//│ res: Box[Box[1]]
//│    = Box { inner: Box { inner: 1 } }

box1.Map (fun x -> Box { inner = x })
//│ res: Box[Box[1]]
//│    = Box { inner: Box { inner: 1 } }
