:NewDefs

class V0()
class V1(val x: Int)
class V2(x: Int, y: Int)
class Pos(x: Int)
class V22(c1: V2, c2: V2)
class Half(invalid: Int, valid: Int)
class None(no: Int)
//│ class V0()
//│ class V1(x: Int)
//│ class V2(x: Int, y: Int)
//│ class Pos(x: Int)
//│ class V22(c1: V2, c2: V2)
//│ class Half(invalid: Int, valid: Int)
//│ class None(no: Int)

V2.unapply(V2(114, 514))
//│ [Int, Int]
//│ res
//│     = [ 114, 514 ]

:js
fun sum(v) =
  if v is
    V0() then 0
    V1(a) then a
    V2(a, b) then a + b
    Pos(x) and x > 0 then x
    V22(V2(x1, y1), V2(x2, y2)) then x1 + y1 + x2 + y2
    Half(_, x) then x
    None(_) then 0
    _ then -1
//│ fun sum: Object -> Int
//│ // Prelude
//│ class TypingUnit2 {}
//│ const typing_unit2 = new TypingUnit2;
//│ // Query 1
//│ globalThis.sum = function sum(v) {
//│   return ((() => {
//│     let a;
//│     return (a = v, a instanceof V0.class ? 0 : a instanceof V1.class ? (([a]) => a)(V1.unapply(v)) : a instanceof V2.class ? (([
//│       a,
//│       b
//│     ]) => a + b)(V2.unapply(v)) : a instanceof Pos.class ? (([x]) => x > 0 === true ? x : -1)(Pos.unapply(v)) : a instanceof V22.class ? (([
//│       tmp0,
//│       tmp1
//│     ]) => tmp0 instanceof V2.class ? (([
//│       x1,
//│       y1
//│     ]) => tmp1 instanceof V2.class ? (([
//│       x2,
//│       y2
//│     ]) => x1 + y1 + x2 + y2)(V2.unapply(tmp1)) : -1)(V2.unapply(tmp0)) : -1)(V22.unapply(v)) : a instanceof Half.class ? (([
//│       tmp2,
//│       x
//│     ]) => x)(Half.unapply(v)) : a instanceof None.class ? (([tmp3]) => 0)(None.unapply(v)) : -1);
//│   })());
//│ };
//│ // End of generated code
//│ sum

sum(V0())
sum(V1(42))
sum(V2(1, 1))
sum(Pos(1))
sum(Pos(0))
sum(V22(V2(1, 2), V2(3, 4)))
sum(Half(-1, 1))
sum(None(42))
sum(42)
//│ Int
//│ res
//│     = 0
//│ res
//│     = 42
//│ res
//│     = 2
//│ res
//│     = 1
//│ res
//│     = -1
//│ res
//│     = 10
//│ res
//│     = 1
//│ res
//│     = 0
//│ res
//│     = -1

class Some[T](val value: T)
//│ class Some[T](value: T)

:js
fun get1(s) =
  if s is
    Some(V1(x)) then x
    Some(y) then y
//│ fun get1: forall 'a. Some[Object & 'a] -> (Int | 'a)
//│ // Prelude
//│ class TypingUnit5 {}
//│ const typing_unit5 = new TypingUnit5;
//│ // Query 1
//│ globalThis.get1 = function get1(s) {
//│   return ((() => {
//│     let a;
//│     return (a = s, a instanceof Some.class ? (([tmp4]) => ((y) => tmp4 instanceof V1.class ? (([x]) => x)(V1.unapply(tmp4)) : y)(tmp4))(Some.unapply(s)) : (() => {
//│       throw new Error("non-exhaustive case expression");
//│     })());
//│   })());
//│ };
//│ // End of generated code
//│ get1

get1(Some(V1(1)))
get1(Some(V0()))
//│ Int | V0
//│ res
//│     = 1
//│ res
//│     = V0 {}

let s2 = Some(1)
//│ let s2: Some[1]
//│ s2
//│    = Some {}

:js
fun foo(s) =
  if s is
    Some(t) then let b = s2.value in b + t.x
    _ then 0  
//│ fun foo: (Object & ~#Some | Some[{x: Int}]) -> Int
//│ // Prelude
//│ class TypingUnit8 {}
//│ const typing_unit8 = new TypingUnit8;
//│ // Query 1
//│ globalThis.foo = function foo(s) {
//│   return ((() => {
//│     return s instanceof Some.class ? (([t]) => ((b) => b + t.x)(s2.value))(Some.unapply(s)) : 0;
//│   })());
//│ };
//│ // End of generated code
//│ foo

foo(Some(V1(12)))
//│ Int
//│ res
//│     = 13

fun bar(s) =
  if s is
    Some(_) then let b = s2.value in b + 1
    _ then 0
//│ fun bar: (Object & ~#Some | Some[anything]) -> Int
//│ bar

bar(Some(V1(12)))
//│ Int
//│ res
//│     = 2

:js
class FooBar {
  val x = 42
}
//│ class FooBar {
//│   constructor()
//│   val x: 42
//│ }
//│ // Prelude
//│ class TypingUnit12 {
//│   #FooBar;
//│   constructor() {
//│   }
//│   get FooBar() {
//│     const qualifier = this;
//│     if (this.#FooBar === undefined) {
//│       class FooBar {
//│         #x;
//│         get x() { return this.#x; }
//│         constructor() {
//│           this.#x = 42;
//│           const x = this.#x;
//│         }
//│       };
//│       this.#FooBar = FooBar;
//│     }
//│     return this.#FooBar;
//│   }
//│ }
//│ const typing_unit12 = new TypingUnit12;
//│ globalThis.FooBar = typing_unit12.FooBar;
//│ // End of generated code

:js
fun t(x) =
  if x is
    FooBar then 1
    _ then 0
//│ fun t: Object -> (0 | 1)
//│ // Prelude
//│ class TypingUnit13 {}
//│ const typing_unit13 = new TypingUnit13;
//│ // Query 1
//│ globalThis.t = function t(x) {
//│   return ((() => {
//│     return x instanceof FooBar ? 1 : 0;
//│   })());
//│ };
//│ // End of generated code
//│ t

t(new FooBar())
//│ 0 | 1
//│ res
//│     = 1

:e
:ge
fun ft(x) =
  if x is
    FooBar(x) then x
    _ then 0
//│ ╔══[ERROR] class FooBar expects 0 parameter but found 1 parameter
//│ ║  l.224: 	    FooBar(x) then x
//│ ╙──       	    ^^^^^^^^^
//│ fun ft: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

:js
module MM
fun m(x) =
  if x is
    MM then 1
    _ then 0
//│ module MM
//│ fun m: Object -> (0 | 1)
//│ // Prelude
//│ class TypingUnit16 {
//│   #MM;
//│   constructor() {
//│   }
//│   get MM() {
//│     const qualifier = this;
//│     if (this.#MM === undefined) {
//│       class MM {}
//│       this.#MM = new MM();
//│       this.#MM.class = MM;
//│     }
//│     return this.#MM;
//│   }
//│ }
//│ const typing_unit16 = new TypingUnit16;
//│ globalThis.MM = typing_unit16.MM;
//│ // Query 1
//│ globalThis.m = function m(x) {
//│   return ((() => {
//│     return x instanceof MM.class ? 1 : 0;
//│   })());
//│ };
//│ // End of generated code
//│ m

:e
class VVC(v: Int, vc: Int)
fun c(x) =
  if x is
    VVC(x, y, z) then x + y + z
    _ then 0
//│ ╔══[ERROR] class VVC expects 2 parameters but found 3 parameters
//│ ║  l.271: 	    VVC(x, y, z) then x + y + z
//│ ╙──       	    ^^^^^^^^^^^^
//│ class VVC(v: Int, vc: Int)
//│ fun c: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared



// * Testing polymorphic `unapply`

class C[A](f: A -> A)
//│ class C[A](f: A -> A)

let r = C.unapply
//│ let r: forall '#f. (C[?] & {#f: '#f}) -> ['#f]
//│ r
//│   = [Function: unapply]

let r2 = r(C(succ))
//│ let r2: [Int -> Int]
//│ r2
//│    = [ [Function: succ] ]

let r3 = (([f]) => f) of r2
//│ let r3: Int -> Int
//│ r3
//│    = [Function: succ]

r3(123)
//│ Int
//│ res
//│     = 124

let r4 = r(C(id))
//│ let r4: ['A -> 'A]
//│ r4
//│    = [ [Function: id] ]

// * Notice that the type is not generalized (lack of distributivity?)
let g = (([f]) => f) of r4
//│ let g: 'A -> 'A
//│ g
//│   = [Function: id]

g(0)
//│ 0
//│ res
//│     = 0

// * Approximated type
g(true)
//│ 0 | true
//│ res
//│     = true



