:NewParser
:NewDefs

:js
class C(a: Int) { val a = 1 }
//│ class C(a: Int) {
//│   val a: 1
//│ }
//│ // Prelude
//│ let res;
//│ class TypingUnit {
//│   #C;
//│   constructor() {
//│   }
//│   get C() {
//│     const qualifier = this;
//│     if (this.#C === undefined) {
//│       class C {
//│         #a;
//│         get a() { return this.#a; }
//│         constructor(a) {
//│           this.#a = a;
//│           this.#a = 1;
//│           const a1 = this.#a;
//│         }
//│       static
//│         unapply(x) {
//│           return [x.#a];
//│         }
//│       };
//│       this.#C = ((a) => Object.freeze(new C(a)));
//│       this.#C.class = C;
//│       this.#C.unapply = C.unapply;
//│     }
//│     return this.#C;
//│   }
//│ }
//│ const typing_unit = new TypingUnit;
//│ globalThis.C = typing_unit.C;
//│ // End of generated code

// should return 1
let a = C(2)
a.a
//│ let a: C
//│ 1
//│ a
//│   = C {}
//│ res
//│     = 1

:js
class C2(a: Int, b: Int) {
  val a = b + 1
  val b = a + 1
}
//│ class C2(a: Int, b: Int) {
//│   val a: Int
//│   val b: Int
//│ }
//│ // Prelude
//│ class TypingUnit2 {
//│   #C2;
//│   constructor() {
//│   }
//│   get C2() {
//│     const qualifier = this;
//│     if (this.#C2 === undefined) {
//│       class C2 {
//│         #a;
//│         #b;
//│         get a() { return this.#a; }
//│         get b() { return this.#b; }
//│         constructor(a, b) {
//│           this.#a = a;
//│           this.#b = b;
//│           this.#a = b + 1;
//│           const a1 = this.#a;
//│           this.#b = a1 + 1;
//│           const b1 = this.#b;
//│         }
//│       static
//│         unapply(x) {
//│           return ([
//│             x.#a,
//│             x.#b
//│           ]);
//│         }
//│       };
//│       this.#C2 = ((a, b) => Object.freeze(new C2(a, b)));
//│       this.#C2.class = C2;
//│       this.#C2.unapply = C2.unapply;
//│     }
//│     return this.#C2;
//│   }
//│ }
//│ const typing_unit2 = new TypingUnit2;
//│ globalThis.C2 = typing_unit2.C2;
//│ // End of generated code

let c2 = C2(1, 2)
c2.a
c2.b
//│ let c2: C2
//│ Int
//│ c2
//│    = C2 {}
//│ res
//│     = 3
//│ res
//│     = 4

class C3(a: Int) {
  val a = 42
  class C4(a: Int) {
    val a = 44
  }
}
//│ class C3(a: Int) {
//│   class C4(a: Int) {
//│     val a: 44
//│   }
//│   val a: 42
//│ }

:e
let c3 = C3(1)
let c4 = c3.C4(2)
c3.a
c4.a
//│ ╔══[ERROR] Access to class member not yet supported
//│ ║  l.128: 	let c4 = c3.C4(2)
//│ ╙──       	           ^^^
//│ let c3: C3
//│ let c4: error
//│ error
//│ c3
//│    = C3 {}
//│ c4
//│    = C4 {}
//│ res
//│     = 42
//│ res
//│     = 44
