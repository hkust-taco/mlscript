:NewDefs

:js
class A(x0: Int) {
  let x1 = x0 + 1
  log([x1])
  let x2 = x1 + 1
  log([x1, x2])
  val x3 = x2 + 1
}
//│ class A(x0: Int) {
//│   let x1: Int
//│   let x2: Int
//│   val x3: Int
//│ }
//│ // Prelude
//│ function log(x) {
//│   return console.info(x);
//│ }
//│ let res;
//│ class TypingUnit {
//│   #A;
//│   constructor() {
//│   }
//│   get A() {
//│     const qualifier = this;
//│     if (this.#A === undefined) {
//│       class A {
//│         #x0;
//│         #x3;
//│         get x3() { return this.#x3; }
//│         constructor(x0) {
//│           this.#x0 = x0;
//│           const x1 = x0 + 1;
//│           log([x1]);
//│           const x2 = x1 + 1;
//│           log([
//│             x1,
//│             x2
//│           ]);
//│           this.#x3 = x2 + 1;
//│           const x3 = this.#x3;
//│         }
//│       static
//│         unapply(x) {
//│           return [x.#x0];
//│         }
//│       };
//│       this.#A = ((x0) => Object.freeze(new A(x0)));
//│       this.#A.class = A;
//│       this.#A.unapply = A.unapply;
//│     }
//│     return this.#A;
//│   }
//│ }
//│ const typing_unit = new TypingUnit;
//│ globalThis.A = typing_unit.A;
//│ // End of generated code

// FIXME: should be rejected
A(0).x1
//│ Int
//│ res
//│     = undefined
//│ // Output
//│ [ 1 ]
//│ [ 1, 2 ]

A(1).x3
//│ Int
//│ res
//│     = 4
//│ // Output
//│ [ 2 ]
//│ [ 2, 3 ]

:js
class AA() {
  let x = 42
  let no = 0
  fun f(y: Int) = x + y
}
AA().f(0)
//│ class AA() {
//│   fun f: (y: Int) -> Int
//│   let no: 0
//│   let x: 42
//│ }
//│ Int
//│ // Prelude
//│ class TypingUnit3 {
//│   #AA;
//│   constructor() {
//│   }
//│   get AA() {
//│     const qualifier = this;
//│     if (this.#AA === undefined) {
//│       class AA {
//│         #x;
//│         constructor() {
//│           this.#x = 42;
//│           const x = this.#x;
//│           const no = 0;
//│         }
//│         f(y) {
//│           const qualifier1 = this;
//│           return qualifier1.#x + y;
//│         }
//│       static
//│         unapply(x) {
//│           return [];
//│         }
//│       };
//│       this.#AA = (() => Object.freeze(new AA()));
//│       this.#AA.class = AA;
//│       this.#AA.unapply = AA.unapply;
//│     }
//│     return this.#AA;
//│   }
//│ }
//│ const typing_unit3 = new TypingUnit3;
//│ globalThis.AA = typing_unit3.AA;
//│ // Query 1
//│ res = AA().f(0);
//│ // End of generated code
//│ res
//│     = 42

:js
class B(x: Int, val y: Int)
//│ class B(x: Int, y: Int)
//│ // Prelude
//│ class TypingUnit4 {
//│   #B;
//│   constructor() {
//│   }
//│   get B() {
//│     const qualifier = this;
//│     if (this.#B === undefined) {
//│       class B {
//│         #x;
//│         #y;
//│         get y() { return this.#y; }
//│         constructor(x, y) {
//│           this.#x = x;
//│           this.#y = y;
//│         }
//│       static
//│         unapply(x) {
//│           return ([
//│             x.#x,
//│             x.#y
//│           ]);
//│         }
//│       };
//│       this.#B = ((x, y) => Object.freeze(new B(x, y)));
//│       this.#B.class = B;
//│       this.#B.unapply = B.unapply;
//│     }
//│     return this.#B;
//│   }
//│ }
//│ const typing_unit4 = new TypingUnit4;
//│ globalThis.B = typing_unit4.B;
//│ // End of generated code

:e
B(0, 0).x
//│ ╔══[ERROR] Parameter 'x' cannot tbe accessed as a field
//│ ║  l.168: 	B(0, 0).x
//│ ║         	       ^^
//│ ╟── Either make the parameter a `val` or access it through destructuring
//│ ║  l.130: 	class B(x: Int, val y: Int)
//│ ╙──       	        ^
//│ Int | error
//│ res
//│     = undefined

B(0, 0).y
//│ Int
//│ res
//│     = 0

:e
:js
class C {
  constructor(val x: Int, y: Int)
}
//│ ╔══[ERROR] Cannot use `val` in constructor parameters
//│ ║  l.187: 	  constructor(val x: Int, y: Int)
//│ ╙──       	                  ^
//│ class C {
//│   constructor(x: Int, y: Int)
//│ }
//│ // Prelude
//│ class TypingUnit7 {
//│   #C;
//│   constructor() {
//│   }
//│   get C() {
//│     const qualifier = this;
//│     if (this.#C === undefined) {
//│       class C {
//│         #x;
//│         get x() { return this.#x; }
//│         constructor(x, y) {
//│           this.#x = x;
//│         }
//│       };
//│       this.#C = C;
//│     }
//│     return this.#C;
//│   }
//│ }
//│ const typing_unit7 = new TypingUnit7;
//│ globalThis.C = typing_unit7.C;
//│ // End of generated code

// * TODO improve error location
:e
fun f(val x: Int) = x + 1
//│ ╔══[ERROR] Cannot use `val` in this position
//│ ║  l.221: 	fun f(val x: Int) = x + 1
//│ ╙──       	          ^^^^^^
//│ fun f: (x: Int) -> Int

:pe
(val x: 1)
//│ ╔══[PARSE ERROR] Illegal position for field specification
//│ ║  l.228: 	(val x: 1)
//│ ╙──       	     ^^^^
//│ 1
//│ res
//│     = 1

:pe
:e
(val x: 1) =>
//│ ╔══[PARSE ERROR] Unexpected end of input; an expression was expected here
//│ ║  l.238: 	(val x: 1) =>
//│ ╙──       	             ^
//│ ╔══[ERROR] Cannot use `val` in this position
//│ ║  l.238: 	(val x: 1) =>
//│ ╙──       	     ^^^^
//│ (x: 1) -> ()
//│ res
//│     = [Function: res]

:e
(val x: 1) => ()
//│ ╔══[ERROR] Cannot use `val` in this position
//│ ║  l.250: 	(val x: 1) => ()
//│ ╙──       	     ^^^^
//│ (x: 1) -> ()
//│ res
//│     = [Function: res]

class D(x: Int) {
  let x = 1
}
if D(42) is D(x) then x else 0
//│ class D(x: Int) {
//│   let x: 1
//│ }
//│ 0 | 1
//│ res
//│     = 1

class E(x: Int) {
  val x = 2
}
if E(42) is E(x) then x else 0
//│ class E(x: Int) {
//│   val x: 2
//│ }
//│ 0 | 2
//│ res
//│     = 2

class F(val x: Int) {
  let x = 3
}
F(0).x
//│ class F(x: Int) {
//│   let x: 3
//│ }
//│ 3
//│ res
//│     = 3

class G(val x: Int) {
  val x = 4
}
G(1).x
//│ class G(x: Int) {
//│   val x: 4
//│ }
//│ 4
//│ res
//│     = 4
