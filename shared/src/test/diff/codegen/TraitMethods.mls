
// To generate the prelude without printing it in the next test case
()
//│ res: ()
//│    = []

:js
trait T0
  method Foo: int
//│ Defined trait T0
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)

def foo x = x.Foo
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)

:js
trait T1
  method Foo = 1
//│ Defined trait T1
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)

:js
class A: T0
//│ Defined class A
//│ Code generation encountered an error:
//│   undeclared type name T0 when resolving base classes

:js
class B: A & T1
//│ Defined class B
//│ Code generation encountered an error:
//│   undeclared type name T1 when resolving base classes

:e
:js
a = A{}
//│ // Query 1
//│ globalThis.a = new A({});
//│ // End of generated code
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.66: 	a = A{}
//│ ║        	    ^
//│ ╟── Note that class A is abstract:
//│ ║  l.53: 	class A: T0
//│ ║        	      ^^^^^
//│ ╟── Hint: method Foo is abstract
//│ ║  l.9: 	  method Foo: int
//│ ╙──     	         ^^^^^^^^
//│ a: error
//│ Runtime error:
//│   ReferenceError: A is not defined

foo a
//│ ╔══[ERROR] identifier not found: foo
//│ ║  l.83: 	foo a
//│ ╙──      	^^^
//│ res: error
//│ Code generation encountered an error:
//│   unresolved symbol foo

// Note: calling convention not yet supported in JS
a.(A.Foo)
//│ res: int
//│ Runtime error:
//│   ReferenceError: a is not defined

:js
b = B{}
foo b
//│ b: B
//│ ╔══[ERROR] identifier not found: foo
//│ ║  l.99: 	foo b
//│ ╙──      	^^^
//│ res: error
//│ Code generation encountered an error:
//│   unresolved symbol foo

b.(A.Foo)
//│ res: int
//│ Runtime error:
//│   ReferenceError: b is not defined

:e
type Id[X] = X
class AAA
  method F: int
  method F = 1
  method G: 'a -> 'a
  method G x = x
class BBB: AAA
  method F: int
  method G: 'a -> 'a
//│ ╔══[ERROR] Overriding method AAA.F without an overriding definition is not allowed.
//│ ║  l.121: 	  method F: int
//│ ║         	         ^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.117: 	  method F = 1
//│ ╙──       	         ^^^^^
//│ ╔══[ERROR] Overriding method AAA.G without an overriding definition is not allowed.
//│ ║  l.122: 	  method G: 'a -> 'a
//│ ║         	         ^^^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.119: 	  method G x = x
//│ ╙──       	         ^^^^^^^
//│ Defined type alias Id[+X]
//│ Defined class AAA
//│ Declared AAA.F: AAA -> int
//│ Declared AAA.G: AAA -> 'a -> 'a
//│ Defined AAA.F: AAA -> 1
//│ Defined AAA.G: AAA -> 'a -> 'a
//│ Defined class BBB
//│ Declared BBB.F: BBB -> int
//│ Declared BBB.G: BBB -> 'a -> 'a


trait T3
  method Foo: 1 | 2
trait T4
  method Foo: 0 | 1
class C: T3 & T4
//│ Defined trait T3
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)

C.Foo
//│ res: C -> 1
//│ Code generation encountered an error:
//│   unresolved symbol C

:e
fun x -> x.Foo
//│ ╔══[ERROR] Implicit call to method Foo is forbidden because it is ambiguous.
//│ ║  l.170: 	fun x -> x.Foo
//│ ║         	         ^^^^^
//│ ╟── Unrelated methods named Foo are defined by:
//│ ╟── • trait T0
//│ ║  l.8: 	trait T0
//│ ║       	      ^^
//│ ╟── • trait T1
//│ ║  l.37: 	trait T1
//│ ║        	      ^^
//│ ╟── • trait T3
//│ ║  l.146: 	trait T3
//│ ║         	      ^^
//│ ╟── • trait T4
//│ ║  l.148: 	trait T4
//│ ╙──       	      ^^
//│ res: anything -> error
//│    = [Function: res]



