
// To generate the prelude without printing it in the next test case
()
//│ res: ()
//│    = []

:js
trait T0
  method Foo: int
//│ Defined trait T0
//│ Declared T0.Foo: T0 -> int
//│ // Prelude
//│ const T0 = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ // End of generated code

def foo x = x.Foo
//│ foo: T0 -> int
//│    = [Function: foo]

:js
trait T1
  method Foo = 1
//│ Defined trait T1
//│ Defined T1.Foo: T1 -> 1
//│ // Prelude
//│ const T1 = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│       if (!("Foo" in instance)) {
//│         Object.defineProperty(instance, "Foo", {
//│           get: function () {
//│             return 1;
//│           }
//│         });
//│       }
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ // End of generated code

:js
class A: T0
//│ Defined class A
//│ // Prelude
//│ class A {
//│   constructor(fields) {
//│     T0.implement(this);
//│   }
//│ }
//│ // End of generated code

:js
class B: A & T1
//│ Defined class B
//│ // Prelude
//│ class B extends A {
//│   constructor(fields) {
//│     super(fields);
//│     T1.implement(this);
//│   }
//│ }
//│ // End of generated code

:e
:js
a = A{}
//│ // Query 1
//│ globalThis.a = new A({});
//│ // End of generated code
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.101: 	a = A{}
//│ ║         	    ^
//│ ╟── Note that class A is abstract:
//│ ║  l.77: 	class A: T0
//│ ║        	      ^^^^^
//│ ╟── Hint: method Foo is abstract
//│ ║  l.9: 	  method Foo: int
//│ ╙──     	         ^^^^^^^^
//│ a: error
//│  = A {}

foo a
//│ res: int
//│    = undefined

// Note: calling convention not yet supported in JS
a.(A.Foo)
//│ res: int
//│    = undefined

:js
b = B{}
foo b
//│ // Query 1
//│ globalThis.b = new B({});
//│ // Query 2
//│ res = foo(b);
//│ // End of generated code
//│ b: B
//│  = B {}
//│ res: int
//│    = 1

b.(A.Foo)
//│ res: int
//│    = undefined

:e
type Id[X] = X
class AAA
  method F: int
  method F = 1
  method G: 'a -> 'a
  method G x = x
class BBB: AAA
  method F: int
  method G: 'a -> 'a
//│ ╔══[ERROR] Overriding method AAA.F without an overriding definition is not allowed.
//│ ║  l.151: 	  method F: int
//│ ║         	         ^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.147: 	  method F = 1
//│ ╙──       	         ^^^^^
//│ ╔══[ERROR] Overriding method AAA.G without an overriding definition is not allowed.
//│ ║  l.152: 	  method G: 'a -> 'a
//│ ║         	         ^^^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.149: 	  method G x = x
//│ ╙──       	         ^^^^^^^
//│ Defined type alias Id[+X]
//│ Defined class AAA
//│ Declared AAA.F: AAA -> int
//│ Declared AAA.G: AAA -> 'a -> 'a
//│ Defined AAA.F: AAA -> 1
//│ Defined AAA.G: AAA -> 'a -> 'a
//│ Defined class BBB
//│ Declared BBB.F: BBB -> int
//│ Declared BBB.G: BBB -> 'a -> 'a


trait T3
  method Foo: 1 | 2
trait T4
  method Foo: 0 | 1
class C: T3 & T4
//│ Defined trait T3
//│ Declared T3.Foo: T3 -> (1 | 2)
//│ Defined trait T4
//│ Declared T4.Foo: T4 -> (0 | 1)
//│ Defined class C

C.Foo
//│ res: C -> 1
//│    = undefined

:e
fun x -> x.Foo
//│ ╔══[ERROR] Implicit call to method Foo is forbidden because it is ambiguous.
//│ ║  l.192: 	fun x -> x.Foo
//│ ║         	         ^^^^^
//│ ╟── Unrelated methods named Foo are defined by:
//│ ╟── • trait T0
//│ ║  l.8: 	trait T0
//│ ║       	      ^^
//│ ╟── • trait T1
//│ ║  l.41: 	trait T1
//│ ║        	      ^^
//│ ╟── • trait T3
//│ ║  l.176: 	trait T3
//│ ║         	      ^^
//│ ╟── • trait T4
//│ ║  l.178: 	trait T4
//│ ╙──       	      ^^
//│ res: anything -> error
//│    = [Function: res]


