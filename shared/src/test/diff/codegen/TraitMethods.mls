
// To generate the prelude without printing it in the next test case
()
//│ res: ()
//│    = []

:js
trait T0
  method Foo: int
//│ Defined trait T0
//│ Declared T0.Foo: t0 -> int
//│ // Prelude
//│ const T0 = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ // End of generated code

def foo x = x.Foo
//│ foo: t0 -> int
//│    = [Function: foo]

:js
trait T1
  method Foo = 1
//│ Defined trait T1
//│ Defined T1.Foo: t1 -> 1
//│ // Prelude
//│ const T1 = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│       if (!("Foo" in instance)) {
//│         Object.defineProperty(instance, "Foo", {
//│           enumerable: true,
//│           get: function () {
//│             return 1;
//│           }
//│         });
//│       }
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ // End of generated code

:js
class A: T0
//│ Defined class A
//│ // Prelude
//│ class A {
//│   constructor(fields) {
//│     T0.implement(this);
//│   }
//│ }
//│ // End of generated code

:js
class B: A & T1
//│ Defined class B
//│ // Prelude
//│ class B extends A {
//│   constructor(fields) {
//│     super(fields);
//│     T1.implement(this);
//│   }
//│ }
//│ // End of generated code

:e
:js
a = A{}
//│ // Query 1
//│ globalThis.a = new A({});
//│ res = a;
//│ // End of generated code
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.102: 	a = A{}
//│ ║         	    ^
//│ ╟── Note that class A is abstract:
//│ ║  l.78: 	class A: T0
//│ ║        	      ^^^^^
//│ ╟── Hint: method Foo is abstract
//│ ║  l.9: 	  method Foo: int
//│ ╙──     	         ^^^^^^^^
//│ a: error
//│  = A {}

foo a
//│ res: int
//│    = undefined

// Note: calling convention not yet supported in JS
a.(A.Foo)
//│ res: int
//│    = undefined

:js
b = B{}
foo b
//│ // Query 1
//│ globalThis.b = new B({});
//│ res = b;
//│ // Query 2
//│ res = foo(b);
//│ // End of generated code
//│ b: B
//│  = B { Foo: [Getter] }
//│ res: int
//│    = 1

b.(A.Foo)
//│ res: int
//│    = undefined

