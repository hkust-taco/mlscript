
// To generate the prelude without printing it in the next test case
()
//│ res: ()
//│    = []

:js
trait T0
  method Foo: int
//│ Defined trait T0
//│ Declared T0.Foo: t0 -> int
//│ // End of generated code

:js
trait T1
  method Foo = 1
//│ Defined trait T1
//│ Defined T1.Foo: t1 -> 1
//│ // End of generated code

:js
class A: T0
//│ Defined class A
//│ // Prelude
//│ class A {}
//│ // End of generated code

:js
class B: A & T1
//│ Defined class B
//│ // Prelude
//│ class B extends A {
//│   constructor(fields) {
//│     super(fields);
//│   }
//│ }
//│ // End of generated code

:e
:js
A{}
//│ // Query 1
//│ res = new A({});
//│ // End of generated code
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.41: 	A{}
//│ ║        	^
//│ ╟── Note that class A is abstract:
//│ ║  l.22: 	class A: T0
//│ ║        	      ^^^^^
//│ ╟── Hint: method Foo is abstract
//│ ║  l.9: 	  method Foo: int
//│ ╙──     	         ^^^^^^^^
//│ res: error
//│    = A {}

// FIXME
:js
b = B{}
B.Foo
//│ // Query 1
//│ globalThis.b = new B({});
//│ res = b;
//│ // Query 2
//│ res = ((x) => new B(x)).Foo;
//│ // End of generated code
//│ b: B
//│  = B {}
//│ res: (B & t0 & t1) -> 1
//│    = undefined

:e
type Id[X] = X
class AAA
  method F: int
  method F = 1
  method G: 'a -> 'a
  method G x = x
class BBB: AAA
  method F: int
  method G: 'a -> 'a
//│ ╔══[ERROR] Overriding method AAA.F without an overriding definition is not allowed.
//│ ║  l.80: 	  method F: int
//│ ║        	         ^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.76: 	  method F = 1
//│ ╙──      	         ^^^^^
//│ ╔══[ERROR] Overriding method AAA.G without an overriding definition is not allowed.
//│ ║  l.81: 	  method G: 'a -> 'a
//│ ║        	         ^^^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.78: 	  method G x = x
//│ ╙──      	         ^^^^^^^
//│ Defined type alias Id
//│ Defined class AAA
//│ Declared AAA.F: AAA -> int
//│ Declared AAA.G: AAA -> 'a -> 'a
//│ Defined AAA.F: AAA -> 1
//│ Defined AAA.G: AAA -> 'a -> 'a
//│ Defined class BBB
//│ Declared BBB.F: BBB -> int
//│ Declared BBB.G: BBB -> 'a -> 'a


trait T3
  method Foo: 1 | 2
trait T4
  method Foo: 0 | 1
class C: T3 & T4
//│ Defined trait T3
//│ Declared T3.Foo: t3 -> (1 | 2)
//│ Defined trait T4
//│ Declared T4.Foo: t4 -> (0 | 1)
//│ Defined class C

C.Foo
//│ res: (C & t3 & t4) -> 1
//│    = undefined

:e
fun x -> x.Foo
//│ ╔══[ERROR] Implicit call to method Foo is forbidden because it is ambiguous.
//│ ║  l.121: 	fun x -> x.Foo
//│ ║         	         ^^^^^
//│ ╟── Unrelated methods named Foo are defined by:
//│ ╟── • trait T0
//│ ║  l.8: 	trait T0
//│ ║       	      ^^
//│ ╟── • trait T1
//│ ║  l.15: 	trait T1
//│ ║        	      ^^
//│ ╟── • trait T3
//│ ║  l.105: 	trait T3
//│ ║         	      ^^
//│ ╟── • trait T4
//│ ║  l.107: 	trait T4
//│ ╙──       	      ^^
//│ res: anything -> error
//│    = [Function: res]



