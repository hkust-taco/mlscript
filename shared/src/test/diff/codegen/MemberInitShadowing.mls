:NewDefs


// * This is a valid use of let-binding shadowing
:js
class A(x0: Int) {
  let x1 = x0 + 1
  let x1 = x1 + 1
  log(x1)
}
//│ class A(x0: Int) {
//│   let x1: Int
//│ }
//│ // Prelude
//│ function log(x) {
//│   return console.info(x);
//│ }
//│ let res;
//│ class TypingUnit {
//│   #A;
//│   constructor() {
//│   }
//│   get A() {
//│     const qualifier = this;
//│     if (this.#A === undefined) {
//│       class A {
//│         #x0;
//│         constructor(x0) {
//│           this.#x0 = x0;
//│           const x1 = x0 + 1;
//│           const x11 = x11 + 1;
//│           log(x11);
//│         }
//│       static
//│         unapply(x) {
//│           return [x.#x0];
//│         }
//│       };
//│       this.#A = ((x0) => Object.freeze(new A(x0)));
//│       this.#A.class = A;
//│       this.#A.unapply = A.unapply;
//│     }
//│     return this.#A;
//│   }
//│ }
//│ const typing_unit = new TypingUnit;
//│ globalThis.A = typing_unit.A;
//│ // End of generated code

// FIXME
A(123)
//│ A
//│ res
//│ Runtime error:
//│ ReferenceError: Cannot access 'x11' before initialization


// TODO `val` redefinition should be a type error
:js
class A(x0: Int) {
  val x1 = x0 + 1
  val x1 = x1 + 1
  log(x1)
}
//│ class A(x0: Int) {
//│   val x1: Int
//│ }
//│ // Prelude
//│ class TypingUnit2 {
//│   #A;
//│   constructor() {
//│   }
//│   get A() {
//│     const qualifier = this;
//│     if (this.#A === undefined) {
//│       class A {
//│         #x0;
//│         #x1;
//│         get x1() { return this.#x1; }
//│         constructor(x0) {
//│           this.#x0 = x0;
//│           this.#x1 = x0 + 1;
//│           const x1 = this.#x1;
//│           this.#x1 = x1 + 1;
//│           const x11 = this.#x1;
//│           log(x11);
//│         }
//│       static
//│         unapply(x) {
//│           return [x.#x0];
//│         }
//│       };
//│       this.#A = ((x0) => Object.freeze(new A(x0)));
//│       this.#A.class = A;
//│       this.#A.unapply = A.unapply;
//│     }
//│     return this.#A;
//│   }
//│ }
//│ const typing_unit2 = new TypingUnit2;
//│ globalThis.A = typing_unit2.A;
//│ // End of generated code

A(123)
//│ A
//│ res
//│     = A {}
//│ // Output
//│ 125

