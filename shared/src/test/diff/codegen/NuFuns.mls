:NewDefs


:js
fun foo =
  fun bar(x) = x + 1
  bar(10)
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.6: 	  fun bar(x) = x + 1
//│ ║       	               ^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `int`
//│ ║  l.6: 	  fun bar(x) = x + 1
//│ ╙──     	                   ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.7: 	  bar(10)
//│ ║       	  ^^^^^^^
//│ ╟── integer literal of type `10` is not an instance of type `int`
//│ ║  l.7: 	  bar(10)
//│ ║       	      ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.6: 	  fun bar(x) = x + 1
//│ ╙──     	               ^
//│ fun foo: error | int
//│ // Prelude
//│ let res;
//│ class TypingUnit {}
//│ const typing_unit = new TypingUnit;
//│ // Query 1
//│ globalThis.foo = function foo() {
//│   return ((() => {
//│     let bar = (x) => x + 1;
//│     return bar(10);
//│   })());
//│ };
//│ // End of generated code

fun foo =
  class C(a: int) { fun bar(x) = a + x + 1 }
  C(100).bar(10)
foo
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.38: 	  class C(a: int) { fun bar(x) = a + x + 1 }
//│ ║        	                                 ^^^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `int`
//│ ║  l.38: 	  class C(a: int) { fun bar(x) = a + x + 1 }
//│ ╙──      	                                         ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.39: 	  C(100).bar(10)
//│ ║        	  ^^^^^^
//│ ╟── integer literal of type `100` is not an instance of type `int`
//│ ║  l.39: 	  C(100).bar(10)
//│ ║        	    ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.38: 	  class C(a: int) { fun bar(x) = a + x + 1 }
//│ ╙──      	             ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.39: 	  C(100).bar(10)
//│ ║        	  ^^^^^^^^^^^^^^
//│ ╟── integer literal of type `10` is not an instance of type `int`
//│ ║  l.39: 	  C(100).bar(10)
//│ ║        	             ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.38: 	  class C(a: int) { fun bar(x) = a + x + 1 }
//│ ╙──      	                                     ^
//│ fun foo: error | int
//│ error | int
//│ res
//│     = [Function: foo1]

fun main =
  mixin B { log(1) }
  log(0)
  module M extends B
  log(2)
main
//│ fun main: unit
//│ unit
//│ res
//│     = [Function: main]
