
// To generate the prelude without printing it in the next test case
succ 1
//│ res: int
//│    = 2

:js
fun ((x, y)) -> x
//│ // Query 1
//│ res = (([
//│   x,
//│   y
//│ ]) => x);
//│ // End of generated code
//│ res: ('a, anything,) -> 'a
//│    = [Function: res]

:js
fun {x = 1} -> 0
res { x = 1 }
//│ // Query 1
//│ res = (({ x }) => 0);
//│ // Query 2
//│ res = res({ x: 1 });
//│ // End of generated code
//│ res: {x: 1} -> 0
//│    = [Function: res]
//│ res: 0
//│    = 0

:js
def f x = case 1 of { 1 -> x }
//│ // Query 1
//│ globalThis.f = function f(x) {
//│   let a;
//│   return (a = 1, a === 1 ? x : (() => {
//│     throw new Error("non-exhaustive case expression");
//│   })());
//│ };
//│ // End of generated code
//│ f: 'a -> 'a
//│  = [Function: f]

// Top-level `def` shadowing:
:js
def tmp = 1
def tmp = succ tmp
//│ // Query 1
//│ globalThis.tmp = 1;
//│ // Query 2
//│ globalThis.tmp1 = succ(tmp);
//│ // End of generated code
//│ tmp: 1
//│    = 1
//│ tmp: int
//│    = 2

// Local shadowing:
:js
def tmp tmp = tmp
tmp (let tmp = 1 in tmp)
let t = tmp in let tmp = 1 in t tmp
//│ // Query 1
//│ globalThis.tmp2 = function tmp2(tmp) {
//│   return tmp;
//│ };
//│ // Query 2
//│ res = tmp2(((tmp) => tmp)(1));
//│ // Query 3
//│ res = ((t) => ((tmp) => t(tmp))(1))(tmp2);
//│ // End of generated code
//│ tmp: 'a -> 'a
//│    = [Function: tmp2]
//│ res: 1
//│    = 1
//│ res: 1
//│    = 1

