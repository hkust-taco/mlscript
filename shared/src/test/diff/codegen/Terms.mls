
// Define some classes.
class A: { a: int }
class B: { b: int }
class C: { c: int }
class D: { d: int }
//│ Defined class A
//│ Defined class B
//│ Defined class C
//│ Defined class D

// Then define some values.
def x = 0
def y = 1
def z = 2
def s = "s"
//│ x: 0
//│  = 0
//│ y: 1
//│  = 1
//│ z: 2
//│  = 2
//│ s: "s"
//│  = 's'

// Var
:js
x
//│ // Query 1
//│ res = x;
//│ // End of generated code
//│ res: 0
//│    = 0

// Lam
:js
fun x -> x
//│ // Query 1
//│ res = (x) => x;
//│ // End of generated code
//│ res: 'a -> 'a
//│    = [Function: res]

// App(Var(op), lhs, rhs)
:js
0 + 1
//│ // Query 1
//│ res = 0 + 1;
//│ // End of generated code
//│ res: int
//│    = 1

// App(Var(op), lhs, rhs): Complex 1
:js
x * y - 1 * 3
//│ // Query 1
//│ res = x * y - 1 * 3;
//│ // End of generated code
//│ res: int
//│    = -3

// App(Var(op), lhs, rhs): Complex 2
:js
:e
z ** 4 * z / (x + 5)
//│ // Query 1
//│ res = z ** 4 * z / (x + 5);
//│ // End of generated code
//│ ╔══[ERROR] identifier not found: **
//│ ║  l.65: 	z ** 4 * z / (x + 5)
//│ ╙──      	  ^^
//│ res: int
//│    = 6.4

// App(App(App(Var("if"), test), consequent), alternative)
:js
if true then 1 else 2
//│ // Query 1
//│ res = true ? 1 : 2;
//│ // End of generated code
//│ res: 1 | 2
//│    = 1

// App(Var(callee), ...): Construct objects conforming some traits
:js
trait T: { x: int }
T { x = 0 }
//│ Defined trait T
//│ // Query 1
//│ res = { 
//│ x: 0
//│  };
//│ // End of generated code
//│ res: {x: 0} & t
//│    = { x: 0 }

// App(callee, Tup(args)): Call a constructor
:js
A { a = 0 }
//│ // Query 1
//│ res = new A({ 
//│ a: 0
//│  });
//│ // End of generated code
//│ res: A & {a: 0}
//│    = A { a: 0 }

// App(callee, Tup(args)): Call a function
:js
def f x = x
f 0
//│ // Query 1
//│ const f = (x) => x;
//│ res = f;
//│ // Query 2
//│ res = f(0);
//│ // End of generated code
//│ f: 'a -> 'a
//│  = [Function: f]
//│ res: 0
//│    = 0

// Rcd: Empty
:js
{}
//│ // Query 1
//│ res = {};
//│ // End of generated code
//│ res: anything
//│    = {}

// Rcd: Flat
:js
{ x = 0; y = 0 }
//│ // Query 1
//│ res = {
//│   x: 0,
//│   y: 0
//│ };
//│ // End of generated code
//│ res: {x: 0, y: 0}
//│    = { x: 0, y: 0 }

// Rcd: Nested
:js
{ x = { y = 0 }; z = 0 }
//│ // Query 1
//│ res = {
//│   x: { 
//│   y: 0
//│    },
//│   z: 0
//│ };
//│ // End of generated code
//│ res: {x: {y: 0}, z: 0}
//│    = { x: { y: 0 }, z: 0 }

// Rcd: Super nested
:js
{ x = { y = { a = 0; b = "s" } }; w = 0; a = (0, 0); z }
//│ // Query 1
//│ res = {
//│   x: { 
//│   y: {
//│     a: 0,
//│     b: "s"
//│   }
//│    },
//│   w: 0,
//│   a: [
//│     0,
//│     0
//│   ],
//│   z: z
//│ };
//│ // End of generated code
//│ res: {a: (0, 0,), w: 0, x: {y: {a: 0, b: "s"}}, z: 2}
//│    = { x: { y: { a: 0, b: 's' } }, w: 0, a: [ 0, 0 ], z: 2 }

// Sel: Select an immediate record
:js
{ x = 0; y = 0 }.x
//│ // Query 1
//│ res = ({
//│   x: 0,
//│   y: 0
//│ }).x;
//│ // End of generated code
//│ res: 0
//│    = 0

// Sel: Select from an expression
:js
(if true then { x = 0 } else { x = 1 }).x
//│ // Query 1
//│ res = (true ? { 
//│ x: 0
//│  } : { 
//│ x: 1
//│  }).x;
//│ // End of generated code
//│ res: 0 | 1
//│    = 0

// Let
:js
let x = 0 in x + 1
//│ // Query 1
//│ res = (function (x) {
//│   return x + 1;
//│ })(0);
//│ // End of generated code
//│ res: int
//│    = 1

// Blk: Unused in MLParser

// CaseOf: Empty
:js
def f x = case x of { }
//│ // Query 1
//│ const f1 = (x) => {
//│   let temp;
//│   return (temp = x, (function () {
//│     throw new Error("non-exhaustive case expression");
//│   })());
//│ };
//│ res = f1;
//│ // End of generated code
//│ f: nothing -> nothing
//│  = [Function: f1]

// CaseOf: Just the wildcard
:js
case 0 of { _ -> 1 }
//│ // Query 1
//│ res = 0, 1;
//│ // End of generated code
//│ res: 1
//│    = 1

// CaseOf: One branch with the wildcard
:js
case 0 of
  { A -> 1
  | _ -> 0
  }
//│ // Query 1
//│ res = 0 instanceof A ? 1 : 0;
//│ // End of generated code
//│ res: 0 | 1
//│    = 0

// CaseOf: Two branches with the wildcard
:js
case 0 of
  { A -> 1
  | B -> 2
  | _ -> 0
  }
//│ // Query 1
//│ res = temp = 0, temp instanceof A ? 1 : temp instanceof B ? 2 : 0;
//│ // End of generated code
//│ res: 0 | 1 | 2
//│    = 0

// CaseOf: Two branches without the wildcard
:js
case A { a = 0 } of
  { A -> "A"
  | B -> "B"
  }
//│ // Query 1
//│ res = temp1 = new A({ 
//│ a: 0
//│  }), temp1 instanceof A ? "A" : temp1 instanceof B ? "B" : (function () {
//│   throw new Error("non-exhaustive case expression");
//│ })();
//│ // End of generated code
//│ res: "A" | "B"
//│    = 'A'

// IntLit
:js
42
//│ // Query 1
//│ res = 42;
//│ // End of generated code
//│ res: 42
//│    = 42

// StrLit
:js
"Hello"
//│ // Query 1
//│ res = "Hello";
//│ // End of generated code
//│ res: "Hello"
//│    = 'Hello'

// Asc
:js
42 : int
//│ // Query 1
//│ res = 42;
//│ // End of generated code
//│ res: int
//│    = 42

// Bra: How?

// Tup
:js
(x, y)
//│ // Query 1
//│ res = [
//│   x,
//│   y
//│ ];
//│ // End of generated code
//│ res: (0, 1,)
//│    = [ 0, 1 ]
