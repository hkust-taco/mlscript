
// Define some classes.
class A: { a: int }
class B: { b: int }
class C: { c: int }
class D: { d: int }
//│ Defined class A
//│ Defined class B
//│ Defined class C
//│ Defined class D

// Then define some values.
def x = 0
def y = 1
def z = 2
def s = "s"
//│ x: 0
//│  = 0
//│ y: 1
//│  = 1
//│ z: 2
//│  = 2
//│ s: "s"
//│  = 's'

// Var
:js
x
//│ // Query 1
//│ res = x;
//│ // End of generated code
//│ res: 0
//│    = 0

// Lam
:js
fun x -> x
//│ // Query 1
//│ res = ((x) => x);
//│ // End of generated code
//│ res: 'a -> 'a
//│    = [Function: res]

// App(Var(op), lhs, rhs)
:js
0 + 1
//│ // Query 1
//│ res = 0 + 1;
//│ // End of generated code
//│ res: int
//│    = 1

// App(Var(op), lhs, rhs): Complex 1
:js
x * y - 1 * 3
//│ // Query 1
//│ res = x * y - 1 * 3;
//│ // End of generated code
//│ res: int
//│    = -3

// App(Var(op), lhs, rhs): Complex 2
:js
:e
z ** 4 * z / (x + 5)
//│ // Query 1
//│ res = z ** 4 * z / (x + 5);
//│ // End of generated code
//│ ╔══[ERROR] identifier not found: **
//│ ║  l.65: 	z ** 4 * z / (x + 5)
//│ ╙──      	  ^^
//│ res: int
//│    = 6.4

// App(App(App(Var("if"), test), consequent), alternative)
:js
if true then 1 else 2
//│ // Query 1
//│ res = true ? 1 : 2;
//│ // End of generated code
//│ res: 1 | 2
//│    = 1

// App(Var(callee), ...): Construct objects conforming some traits
:js
trait T: { x: int }
T { x = 0 }
//│ Defined trait T
//│ // Prelude
//│ const T = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ // Query 1
//│ res = T.build({ x: 0 });
//│ // End of generated code
//│ res: {x: 0} & t
//│    = { x: 0 }

// App(callee, Tup(args)): Call a constructor
:js
A { a = 0 }
//│ // Query 1
//│ res = new A({ a: 0 });
//│ // End of generated code
//│ res: A & {a: 0}
//│    = A { a: 0 }

// App(callee, Tup(args)): Call a function
:js
def f x = x
f 0
//│ // Query 1
//│ globalThis.f = function f(x) {
//│   return x;
//│ };
//│ res = f;
//│ // Query 2
//│ res = f(0);
//│ // End of generated code
//│ f: 'a -> 'a
//│  = [Function: f]
//│ res: 0
//│    = 0

// Rcd: Empty
:js
{}
//│ // Query 1
//│ res = {};
//│ // End of generated code
//│ res: anything
//│    = {}

// Rcd: Sole
:js
{ x = 0 }
//│ // Query 1
//│ res = { x: 0 };
//│ // End of generated code
//│ res: {x: 0}
//│    = { x: 0 }

// Rcd: Flat
:js
{ x = 0; y = 0 }
//│ // Query 1
//│ res = {
//│   x: 0,
//│   y: 0
//│ };
//│ // End of generated code
//│ res: {x: 0, y: 0}
//│    = { x: 0, y: 0 }

// Rcd: Nested
:js
{ x = { y = 0 }; z = 0 }
//│ // Query 1
//│ res = {
//│   x: { y: 0 },
//│   z: 0
//│ };
//│ // End of generated code
//│ res: {x: {y: 0}, z: 0}
//│    = { x: { y: 0 }, z: 0 }

// Rcd: Super nested
:js
{ x = { y = { a = 0; b = "s" } }; w = 0; a = (0, 0); z }
//│ // Query 1
//│ res = {
//│   x: {
//│     y: {
//│       a: 0,
//│       b: "s"
//│     }
//│   },
//│   w: 0,
//│   a: [
//│     0,
//│     0
//│   ],
//│   z: z
//│ };
//│ // End of generated code
//│ res: {a: (0, 0,), w: 0, x: {y: {a: 0, b: "s"}}, z: 2}
//│    = { x: { y: { a: 0, b: 's' } }, w: 0, a: [ 0, 0 ], z: 2 }

// Sel: Select an immediate record
:js
{ x = 0; y = 0 }.x
//│ // Query 1
//│ res = ({
//│   x: 0,
//│   y: 0
//│ }).x;
//│ // End of generated code
//│ res: 0
//│    = 0

// Sel: Select from an expression
:js
(if true then { x = 0 } else { x = 1 }).x
//│ // Query 1
//│ res = (true ? { x: 0 } : { x: 1 }).x;
//│ // End of generated code
//│ res: 0 | 1
//│    = 0

// Let
:js
let x = 0 in x + 1
//│ // Query 1
//│ res = (function (x) {
//│   return x + 1;
//│ })(0);
//│ // End of generated code
//│ res: int
//│    = 1

// Blk: Unused in MLParser

// CaseOf: Empty
:js
def f x = case x of { }
//│ // Query 1
//│ globalThis.f1 = function f1(x) {
//│   let a;
//│   return (a = x, (function () {
//│     throw new Error("non-exhaustive case expression");
//│   })());
//│ };
//│ res = f1;
//│ // End of generated code
//│ f: nothing -> nothing
//│  = [Function: f1]

// CaseOf: Just the wildcard
:js
case 0 of { _ -> 1 }
//│ // Query 1
//│ res = (0, 1);
//│ // End of generated code
//│ res: 1
//│    = 1

// CaseOf: One branch with the wildcard
:js
case 0 of
  { A -> 1
  | _ -> 0
  }
//│ // Query 1
//│ res = 0 instanceof A ? 1 : 0;
//│ // End of generated code
//│ res: 0 | 1
//│    = 0

// CaseOf: Two branches with the wildcard
:js
case 0 of
  { A -> 1
  | B -> 2
  | _ -> 0
  }
//│ // Query 1
//│ let a;
//│ res = (a = 0, a instanceof A ? 1 : a instanceof B ? 2 : 0);
//│ // End of generated code
//│ res: 0 | 1 | 2
//│    = 0

// CaseOf: Two branches without the wildcard
:js
case A { a = 0 } of
  { A -> "A"
  | B -> "B"
  }
//│ // Query 1
//│ let b;
//│ res = (b = new A({ a: 0 }), b instanceof A ? "A" : b instanceof B ? "B" : (function () {
//│   throw new Error("non-exhaustive case expression");
//│ })());
//│ // End of generated code
//│ res: "A" | "B"
//│    = 'A'

// IntLit
:js
42
//│ // Query 1
//│ res = 42;
//│ // End of generated code
//│ res: 42
//│    = 42

// StrLit
:js
"Hello"
//│ // Query 1
//│ res = "Hello";
//│ // End of generated code
//│ res: "Hello"
//│    = 'Hello'

// Asc
:js
42 : int
//│ // Query 1
//│ res = 42;
//│ // End of generated code
//│ res: int
//│    = 42

// Bra: How?

// Tup
:js
(x, y)
//│ // Query 1
//│ res = [
//│   x,
//│   y
//│ ];
//│ // End of generated code
//│ res: (0, 1,)
//│    = [ 0, 1 ]


// With
{} with {}
//│ res: anything
//│    = {}
:js
rcd1 = { x = "a"; y = "b" }
rcd2 = rcd1 with { x = 1; z = 2 }
(rcd1.x, rcd1.y, rcd2.x, rcd2.y, rcd2.z)
//│ // Query 1
//│ globalThis.rcd1 = {
//│   x: "a",
//│   y: "b"
//│ };
//│ res = rcd1;
//│ // Query 2
//│ globalThis.rcd2 = withConstruct(rcd1, {
//│   x: 1,
//│   z: 2
//│ });
//│ res = rcd2;
//│ // Query 3
//│ res = [
//│   rcd1.x,
//│   rcd1.y,
//│   rcd2.x,
//│   rcd2.y,
//│   rcd2.z
//│ ];
//│ // End of generated code
//│ rcd1: {x: "a", y: "b"}
//│     = { x: 'a', y: 'b' }
//│ rcd2: {x: 1, y: "b", z: 2}
//│     = { x: 1, y: 'b', z: 2 }
//│ res: ("a", "b", 1, "b", 2,)
//│    = [ 'a', 'b', 1, 'b', 2 ]

class M: {mut x : int}
//│ Defined class M

:js
a1 = M {mut x = 233}
a1.x <- 666
a1.x
//│ // Query 1
//│ globalThis.a1 = new M({ x: 233 });
//│ res = a1;
//│ // Query 2
//│ res = (a1.x = 666, []);
//│ // Query 3
//│ res = a1.x;
//│ // End of generated code
//│ a1: M with {mut x: 'x}
//│   where
//│     'x :> 233
//│        <: int
//│   = M { x: 233 }
//│ = []
//│ res: 233
//│    = 666

:js
t1 = (mut "hello", mut true)
//│ // Query 1
//│ globalThis.t1 = [
//│   "hello",
//│   true
//│ ];
//│ res = t1;
//│ // End of generated code
//│ t1: (mut 'a, mut 'b,)
//│   where
//│     'b :> true
//│     'a :> "hello"
//│   = [ 'hello', true ]

:js
t1._1 <- "bye"
t1._1
//│ // Query 1
//│ res = (t1["_1"] = "bye", []);
//│ // Query 2
//│ res = t1["_1"];
//│ // End of generated code
//│ = []
//│ res: "hello"
//│    = 'bye'

:js
def muta1 : MutArray[int]
muta1 = (mut 1, mut 2, mut 3, mut 4)
//│ // Query 1 is empty
//│ // Query 2
//│ globalThis.muta1 = [
//│   1,
//│   2,
//│   3,
//│   4
//│ ];
//│ res = muta1;
//│ // End of generated code
//│ muta1: MutArray[int]
//│      = <missing implementation>
//│ (mut 'a, mut 'b, mut 'c, mut 'd,)
//│   where
//│     'd :> 4
//│     'c :> 3
//│     'b :> 2
//│     'a :> 1
//│   <:  muta1:
//│ MutArray[int]
//│      = [ 1, 2, 3, 4 ]

:js
muta1[1] <- 233
muta1
//│ // Query 1
//│ res = (muta1[1] = 233, []);
//│ // Query 2
//│ res = muta1;
//│ // End of generated code
//│ = []
//│ res: MutArray[int]
//│    = [ 1, 233, 3, 4 ]

:js
def xpp rc = (fun _ -> rc) (rc.x <- rc.x + 1)
xpp a1
//│ // Query 1
//│ globalThis.xpp = function xpp(rc) {
//│   return ((_) => rc)((rc.x = rc.x + 1, []));
//│ };
//│ res = xpp;
//│ // Query 2
//│ res = xpp(a1);
//│ // End of generated code
//│ xpp: ({mut x: int} & 'a) -> 'a
//│    = [Function: xpp]
//│ res: M
//│    = M { x: 667 }

:js
tu = (mut (), mut 2)
tu._1 <- (tu._2 <- 3)
tu._1
tu._2
//│ // Query 1
//│ globalThis.tu = [
//│   [],
//│   2
//│ ];
//│ res = tu;
//│ // Query 2
//│ res = (tu["_1"] = (tu["_2"] = 3, []), []);
//│ // Query 3
//│ res = tu["_1"];
//│ // Query 4
//│ res = tu["_2"];
//│ // End of generated code
//│ tu: (mut 'a, mut 'b,)
//│   where
//│     'b :> 2
//│     'a :> ()
//│   = [ [], 2 ]
//│ = []
//│ res: ()
//│    = []
//│ res: 2
//│    = 3
