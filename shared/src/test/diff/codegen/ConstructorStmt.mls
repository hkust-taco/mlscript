:NewDefs


log("Hello!")
//│ ()
//│ res
//│     = undefined
//│ // Output
//│ Hello!


:js
module Test0 {
  log("Hello!")
}
//│ module Test0
//│ // Prelude
//│ class TypingUnit1 {
//│   #Test0;
//│   constructor() {
//│   }
//│   get Test0() {
//│     const qualifier = this;
//│     if (this.#Test0 === undefined) {
//│       class Test0 {
//│         constructor() {
//│           log("Hello!");
//│         }
//│       }
//│       this.#Test0 = new Test0();
//│       this.#Test0.class = Test0;
//│     }
//│     return this.#Test0;
//│   }
//│ }
//│ const typing_unit1 = new TypingUnit1;
//│ globalThis.Test0 = typing_unit1.Test0;
//│ // End of generated code

:js
Test0
//│ Test0
//│ // Prelude
//│ class TypingUnit2 {}
//│ const typing_unit2 = new TypingUnit2;
//│ // Query 1
//│ res = Test0;
//│ // End of generated code
//│ res
//│     = Test0 { class: [class Test0] }
//│ // Output
//│ Hello!

:js
Test0
//│ Test0
//│ // Prelude
//│ class TypingUnit3 {}
//│ const typing_unit3 = new TypingUnit3;
//│ // Query 1
//│ res = Test0;
//│ // End of generated code
//│ res
//│     = Test0 { class: [class Test0] }

:js
class A(a: Int) {
  log(a)
}
//│ class A(a: Int)
//│ // Prelude
//│ class TypingUnit4 {
//│   #A;
//│   constructor() {
//│   }
//│   get A() {
//│     const qualifier = this;
//│     if (this.#A === undefined) {
//│       class A {
//│         #a;
//│         constructor(a) {
//│           this.#a = a;
//│           log(a);
//│         }
//│       static
//│         unapply(x) {
//│           return [x.#a];
//│         }
//│       };
//│       this.#A = ((a) => Object.freeze(new A(a)));
//│       this.#A.class = A;
//│       this.#A.unapply = A.unapply;
//│     }
//│     return this.#A;
//│   }
//│ }
//│ const typing_unit4 = new TypingUnit4;
//│ globalThis.A = typing_unit4.A;
//│ // End of generated code

:js
let aa = A(42)
//│ let aa: A
//│ // Prelude
//│ class TypingUnit5 {}
//│ const typing_unit5 = new TypingUnit5;
//│ // Query 1
//│ globalThis.aa1 = A(42);
//│ // End of generated code
//│ aa
//│    = A {}
//│ // Output
//│ 42

:js
aa
//│ A
//│ // Prelude
//│ class TypingUnit6 {}
//│ const typing_unit6 = new TypingUnit6;
//│ // Query 1
//│ res = aa1;
//│ // End of generated code
//│ res
//│     = A {}

:js
let ab = A(0)
//│ let ab: A
//│ // Prelude
//│ class TypingUnit7 {}
//│ const typing_unit7 = new TypingUnit7;
//│ // Query 1
//│ globalThis.ab1 = A(0);
//│ // End of generated code
//│ ab
//│    = A {}
//│ // Output
//│ 0

:e
:w
:js
class Foo {
  this: { x: Int }
}
//│ ╔══[ERROR] Type `#Foo` does not contain member `x`
//│ ║  l.145: 	  this: { x: Int }
//│ ╙──       	          ^
//│ ╔══[WARNING] Expression in statement position should have type `unit`.
//│ ╟── Use the `discard` function to discard non-unit values, making the intent clearer.
//│ ╟── Type mismatch in type ascription:
//│ ║  l.145: 	  this: { x: Int }
//│ ║         	  ^^^^
//│ ╟── type `{x: Int}` does not match type `()`
//│ ║  l.145: 	  this: { x: Int }
//│ ║         	        ^^^^^^^^^^
//│ ╟── but it flows into expression in statement position with expected type `()`
//│ ║  l.145: 	  this: { x: Int }
//│ ╙──       	  ^^^^
//│ class Foo {
//│   constructor()
//│ }
//│ // Prelude
//│ class TypingUnit8 {
//│   #Foo;
//│   constructor() {
//│   }
//│   get Foo() {
//│     const qualifier = this;
//│     if (this.#Foo === undefined) {
//│       class Foo {};
//│       this.#Foo = Foo;
//│     }
//│     return this.#Foo;
//│   }
//│ }
//│ const typing_unit8 = new TypingUnit8;
//│ globalThis.Foo = typing_unit8.Foo;
//│ // End of generated code

:e
:w
:js
class Bar {
  super: { x: Int }
}
//│ ╔══[ERROR] Illegal use of `super`
//│ ║  l.186: 	  super: { x: Int }
//│ ╙──       	  ^^^^^
//│ ╔══[ERROR] Type `#Bar` does not contain member `x`
//│ ║  l.186: 	  super: { x: Int }
//│ ╙──       	           ^
//│ ╔══[WARNING] Expression in statement position should have type `unit`.
//│ ╟── Use the `discard` function to discard non-unit values, making the intent clearer.
//│ ╟── Type mismatch in type ascription:
//│ ║  l.186: 	  super: { x: Int }
//│ ║         	  ^^^^^
//│ ╟── type `{x: Int}` does not match type `()`
//│ ║  l.186: 	  super: { x: Int }
//│ ║         	         ^^^^^^^^^^
//│ ╟── but it flows into expression in statement position with expected type `()`
//│ ║  l.186: 	  super: { x: Int }
//│ ╙──       	  ^^^^^
//│ class Bar {
//│   constructor()
//│ }
//│ // Prelude
//│ class TypingUnit9 {
//│   #Bar;
//│   constructor() {
//│   }
//│   get Bar() {
//│     const qualifier = this;
//│     if (this.#Bar === undefined) {
//│       class Bar {};
//│       this.#Bar = Bar;
//│     }
//│     return this.#Bar;
//│   }
//│ }
//│ const typing_unit9 = new TypingUnit9;
//│ globalThis.Bar = typing_unit9.Bar;
//│ // End of generated code

:js
class Baz() {
  val x = 123
  log([1, x])
  val y =
    log([2, x])
    x + 1
  log([3, y])
}
//│ class Baz() {
//│   val x: 123
//│   val y: Int
//│ }
//│ // Prelude
//│ class TypingUnit10 {
//│   #Baz;
//│   constructor() {
//│   }
//│   get Baz() {
//│     const qualifier = this;
//│     if (this.#Baz === undefined) {
//│       class Baz {
//│         #x;
//│         get x() { return this.#x; }
//│         #y;
//│         get y() { return this.#y; }
//│         constructor() {
//│           this.#x = 123;
//│           const x = this.#x;
//│           log([
//│             1,
//│             x
//│           ]);
//│           this.#y = (() => {
//│             log([
//│               2,
//│               x
//│             ]);
//│             return x + 1;
//│           })();
//│           const y = this.#y;
//│           log([
//│             3,
//│             y
//│           ]);
//│         }
//│       static
//│         unapply(x) {
//│           return [];
//│         }
//│       };
//│       this.#Baz = (() => Object.freeze(new Baz()));
//│       this.#Baz.class = Baz;
//│       this.#Baz.unapply = Baz.unapply;
//│     }
//│     return this.#Baz;
//│   }
//│ }
//│ const typing_unit10 = new TypingUnit10;
//│ globalThis.Baz = typing_unit10.Baz;
//│ // End of generated code

let baz = Baz()
log([baz.x, baz.y])
//│ let baz: Baz
//│ ()
//│ baz
//│     = Baz {}
//│ // Output
//│ [ 1, 123 ]
//│ [ 2, 123 ]
//│ [ 3, 124 ]
//│ res
//│     = undefined
//│ // Output
//│ [ 123, 124 ]

:js
class Q() {
  let q = 42
  fun qq =
    let f = (x: Int) => {q: x + q};; f(1)
}
//│ class Q() {
//│   let q: 42
//│   fun qq: {q: Int}
//│ }
//│ // Prelude
//│ class TypingUnit12 {
//│   #Q;
//│   constructor() {
//│   }
//│   get Q() {
//│     const qualifier = this;
//│     if (this.#Q === undefined) {
//│       class Q {
//│         #q;
//│         constructor() {
//│           this.#q = 42;
//│           const q = this.#q;
//│         }
//│         get qq() {
//│           const qualifier1 = this;
//│           return ((() => {
//│             let f = (x) => ({ q: x + qualifier1.#q });
//│             return f(1);
//│           })());
//│         }
//│       static
//│         unapply(x) {
//│           return [];
//│         }
//│       };
//│       this.#Q = (() => Object.freeze(new Q()));
//│       this.#Q.class = Q;
//│       this.#Q.unapply = Q.unapply;
//│     }
//│     return this.#Q;
//│   }
//│ }
//│ const typing_unit12 = new TypingUnit12;
//│ globalThis.Q = typing_unit12.Q;
//│ // End of generated code

let q = Q()
q.qq.q
//│ let q: Q
//│ Int
//│ q
//│   = Q {}
//│ res
//│     = 43

:js
class W() {
  let x = 42
  fun add(self: Int) = x + self
}
//│ class W() {
//│   fun add: (self: Int) -> Int
//│   let x: 42
//│ }
//│ // Prelude
//│ class TypingUnit14 {
//│   #W;
//│   constructor() {
//│   }
//│   get W() {
//│     const qualifier = this;
//│     if (this.#W === undefined) {
//│       class W {
//│         #x;
//│         constructor() {
//│           this.#x = 42;
//│           const x = this.#x;
//│         }
//│         add(self) {
//│           const qualifier1 = this;
//│           return qualifier1.#x + self;
//│         }
//│       static
//│         unapply(x) {
//│           return [];
//│         }
//│       };
//│       this.#W = (() => Object.freeze(new W()));
//│       this.#W.class = W;
//│       this.#W.unapply = W.unapply;
//│     }
//│     return this.#W;
//│   }
//│ }
//│ const typing_unit14 = new TypingUnit14;
//│ globalThis.W = typing_unit14.W;
//│ // End of generated code

:js
let www = W()
www.add(42)
//│ let www: W
//│ Int
//│ // Prelude
//│ class TypingUnit15 {}
//│ const typing_unit15 = new TypingUnit15;
//│ // Query 1
//│ globalThis.www1 = W();
//│ // Query 2
//│ res = www1.add(42);
//│ // End of generated code
//│ www
//│     = W {}
//│ res
//│     = 84
