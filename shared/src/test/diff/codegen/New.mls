:NewDefs


class C
//│ class C {
//│   constructor()
//│ }

:js
new C
//│ C
//│ // Prelude
//│ class TypingUnit1 {}
//│ const typing_unit1 = new TypingUnit1;
//│ // Query 1
//│ res = new C;
//│ // End of generated code
//│ res
//│     = C {}

:e
:js
C()
//│ ╔══[ERROR] Construction of unparameterized class C should use the `new` keyword
//│ ║  l.23: 	C()
//│ ╙──      	^
//│ C
//│ // Prelude
//│ class TypingUnit2 {}
//│ const typing_unit2 = new TypingUnit2;
//│ // Query 1
//│ res = C();
//│ // End of generated code
//│ res
//│ Runtime error:
//│   TypeError: Class constructor C cannot be invoked without 'new'

:js
:e // TODO support first-class classes
let c = C
//│ ╔══[ERROR] Construction of unparameterized class C should use the `new` keyword
//│ ║  l.40: 	let c = C
//│ ╙──      	        ^
//│ let c: () -> C
//│ // Prelude
//│ class TypingUnit3 {}
//│ const typing_unit3 = new TypingUnit3;
//│ // Query 1
//│ globalThis.c = C;
//│ // End of generated code
//│ c
//│   = [class C]

:re // TODO should eventually be reject in type checking
c()
//│ C
//│ res
//│ Runtime error:
//│   TypeError: Class constructor C cannot be invoked without 'new'


class C()
//│ class C()

:js
new C
//│ C
//│ // Prelude
//│ class TypingUnit6 {}
//│ const typing_unit6 = new TypingUnit6;
//│ // Query 1
//│ res = new C.class;
//│ // End of generated code
//│ res
//│     = C {}

:js
C()
//│ C
//│ // Prelude
//│ class TypingUnit7 {}
//│ const typing_unit7 = new TypingUnit7;
//│ // Query 1
//│ res = C();
//│ // End of generated code
//│ res
//│     = C {}

:js
let c = C
//│ let c: () -> C
//│ // Prelude
//│ class TypingUnit8 {}
//│ const typing_unit8 = new TypingUnit8;
//│ // Query 1
//│ globalThis.c1 = C;
//│ // End of generated code
//│ c
//│   = [Function (anonymous)] {
//│       class: [class C],
//│       unapply: [Function: unapply]
//│     }

c()
//│ C
//│ res
//│     = C {}


:js
class X(val a: Int)
new X(1).a
//│ class X(a: Int)
//│ Int
//│ // Prelude
//│ class TypingUnit10 {
//│   #X;
//│   constructor() {
//│   }
//│   get X() {
//│     const qualifier = this;
//│     if (this.#X === undefined) {
//│       class X {
//│         #a;
//│         get a() { return this.#a; }
//│         constructor(a) {
//│           this.#a = a;
//│         }
//│       static
//│         unapply(x) {
//│           return [x.#a];
//│         }
//│       };
//│       this.#X = ((a) => Object.freeze(new X(a)));
//│       this.#X.class = X;
//│       this.#X.unapply = X.unapply;
//│     }
//│     return this.#X;
//│   }
//│ }
//│ const typing_unit10 = new TypingUnit10;
//│ globalThis.X = typing_unit10.X;
//│ // Query 1
//│ res = new X.class(1).a;
//│ // End of generated code
//│ res
//│     = 1

:js
class X {
  val a = 1
}
(new X).a
//│ class X {
//│   constructor()
//│   val a: 1
//│ }
//│ 1
//│ // Prelude
//│ class TypingUnit11 {
//│   #X;
//│   constructor() {
//│   }
//│   get X() {
//│     const qualifier = this;
//│     if (this.#X === undefined) {
//│       class X {
//│         #a;
//│         get a() { return this.#a; }
//│         constructor() {
//│           this.#a = 1;
//│           const a = this.#a;
//│         }
//│       };
//│       this.#X = X;
//│     }
//│     return this.#X;
//│   }
//│ }
//│ const typing_unit11 = new TypingUnit11;
//│ globalThis.X = typing_unit11.X;
//│ // Query 1
//│ res = (new X).a;
//│ // End of generated code
//│ res
//│     = 1


