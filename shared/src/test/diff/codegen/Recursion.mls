:js
rec def pow0 n x =
  if n > 0 then pow0 (n - 1) x * x
  else 1
//│ // Prelude
//│ let res;
//│ // Query 1
//│ globalThis.pow0 = function pow0(n) {
//│   return (x) => n > 0 ? pow0(n - 1)(x) * x : 1;
//│ };
//│ res = pow0;
//│ // End of generated code
//│ pow0: int -> int -> int
//│     = [Function: pow0]

pow0 3 4
//│ res: int
//│    = 64

:js
def pow1 x =
  let rec go n =
    if n > 0 then go (n - 1) * x
    else 1
  in go
//│ // Query 1
//│ globalThis.pow1 = function pow1(x) {
//│   return ((function (go) {
//│     return go;
//│   })(function go(n) {
//│     return n > 0 ? go(n - 1) * x : 1;
//│   }));
//│ };
//│ res = pow1;
//│ // End of generated code
//│ pow1: int -> int -> int
//│     = [Function: pow1]

pow1 3 4
//│ res: int
//│    = 81

:js
rec def pow2 n = { call = fun x -> if n > 0 then (pow2 (n - 1)).call x * x else 1 }
//│ // Query 1
//│ globalThis.pow2 = function pow2(n) {
//│   return { call: (x) => n > 0 ? pow2(n - 1).call(x) * x : 1 };
//│ };
//│ res = pow2;
//│ // End of generated code
//│ pow2: int -> {call: int -> int}
//│     = [Function: pow2]

(pow2 3).call 4
//│ res: int
//│    = 64

:js
let rec x = { f = x } in x
//│ res: {f: 'a} as 'a
//│ Code generation encountered an error:
//│   recursive non-function definition x is not supported

:js
let x = { f = x } in x
//│ res: {f: 'a} as 'a
//│ Code generation encountered an error:
//│   unresolved symbol x
