:NewDefs

:js
class Test(n: Int) {
  fun inc = Test(n + 1)
}
//│ class Test(n: Int) {
//│   fun inc: Test
//│ }
//│ // Prelude
//│ let res;
//│ class TypingUnit {
//│   #Test;
//│   constructor() {
//│   }
//│   get Test() {
//│     const outer = this;
//│     if (this.#Test === undefined) {
//│       class Test {
//│         #n;
//│         get n() { return this.#n; }
//│         constructor(n) {
//│           this.#n = n;
//│         }
//│         get inc() {
//│           const n = this.#n;
//│           return outer.Test(n + 1);
//│         }
//│       };
//│       this.#Test = ((n) => Object.freeze(new Test(n)));
//│       this.#Test.class = Test;
//│     }
//│     return this.#Test;
//│   }
//│ }
//│ const typing_unit = new TypingUnit;
//│ globalThis.Test = typing_unit.Test;
//│ // End of generated code

Test(0).inc.n
//│ Int
//│ res
//│     = 1

class Test2(n: Int) {
  fun inc = Test3.inc(n)
}
module Test3 {
  fun inc(n) = Test2(n + 1)
}
//│ class Test2(n: Int) {
//│   fun inc: Test2
//│ }
//│ module Test3 {
//│   fun inc: Int -> Test2
//│ }

Test2(0).inc.n
//│ Int
//│ res
//│     = 1

class C[A](n: A) {
  fun f = g
  fun g = n
}
//│ class C[A](n: A) {
//│   fun f: A
//│   fun g: A
//│ }

:e
let a = C[Int](42)
a.f
//│ ╔══[ERROR] Type application syntax is not yet supported
//│ ║  l.73: 	let a = C[Int](42)
//│ ╙──      	        ^^^^^^
//│ let a: error
//│ error
//│ a
//│   = C {}
//│ res
//│     = 42


module Foo {
  fun f = C0()
  class C0()
}
//│ module Foo {
//│   class C0()
//│   fun f: C0
//│ }


mixin M0(n: Int) {
  let m = n // this refers to specifically the `n` we had in parameter, not necessarily this.n
  fun bar = m
  fun foo = [n, m, bar] // should this be the same as `[this.n, this.m, this.bar]`?
}
//│ mixin M0(n: Int) {
//│   fun bar: Int
//│   fun foo: (Int, Int, Int,)
//│   let m: Int
//│ }

module M1 extends M0(123) {
  fun n = "n"
  fun m = "m"
  fun bar = "bar"
}
//│ module M1 {
//│   fun bar: "bar"
//│   fun foo: (Int, Int, Int,)
//│   fun m: "m"
//│   fun n: "n"
//│ }

[M1.n, M1.m, M1.bar]
//│ ("n", "m", "bar",)
//│ res
//│     = [ 'n', 'm', 'bar' ]

// FIXME typing/runtime mismatch
M1.foo
//│ (Int, Int, Int,)
//│ res
//│     = [ 123, 'm', 'bar' ]

:e
:js
module M2 {
  let m = 100
  fun foo(y) =
    fun bar(x) = x + y + this.m
    bar(10)
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.135: 	    fun bar(x) = x + y + this.m
//│ ╙──       	                             ^^
//│ module M2 {
//│   fun foo: Int -> Int
//│   let m: 100
//│ }
//│ // Prelude
//│ class TypingUnit11 {
//│   #M2;
//│   constructor() {
//│   }
//│   get M2() {
//│     const outer = this;
//│     if (this.#M2 === undefined) {
//│       class M2 {
//│         #m;
//│         get m() { return this.#m; }
//│         constructor() {
//│           this.#m = 100;
//│           const m = this.#m;
//│         }
//│         foo(y) {
//│           const self = this;
//│           return ((() => {
//│             let bar = (x) => x + y + self.m;
//│             return bar(10);
//│           })());
//│         }
//│       }
//│       this.#M2 = new M2();
//│       this.#M2.class = M2;
//│     }
//│     return this.#M2;
//│   }
//│ }
//│ const typing_unit11 = new TypingUnit11;
//│ globalThis.M2 = typing_unit11.M2;
//│ // End of generated code

M2.foo(1)
//│ Int
//│ res
//│     = 111

