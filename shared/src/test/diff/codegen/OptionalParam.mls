:NewParser
:NewDefs

:js
class A(x: int) {}
//│ class A(x: int)
//│ // Prelude
//│ let res;
//│ class TypingUnit {
//│   #A;
//│   constructor() {
//│   }
//│   get A() {
//│     const outer = this;
//│     if (this.#A === undefined) {
//│       class A {
//│         #x;
//│         get x() { return this.#x; }
//│         constructor(x) {
//│           this.#x = x;
//│         }
//│       };
//│       this.#A = ((x) => Object.freeze(new A(x)));
//│       this.#A.class = A;
//│     }
//│     return this.#A;
//│   }
//│ }
//│ const typing_unit = new TypingUnit;
//│ globalThis.A = typing_unit.A;
//│ // End of generated code

:js
class B {}
//│ class B
//│ // Prelude
//│ class TypingUnit1 {
//│   #B;
//│   constructor() {
//│   }
//│   get B() {
//│     const outer = this;
//│     if (this.#B === undefined) {
//│       class B {};
//│       this.#B = B;
//│     }
//│     return this.#B;
//│   }
//│ }
//│ const typing_unit1 = new TypingUnit1;
//│ globalThis.B = typing_unit1.B;
//│ // End of generated code

:js
class C {
  constructor(x: int)
}
//│ class C
//│ // Prelude
//│ class TypingUnit2 {
//│   #C;
//│   constructor() {
//│   }
//│   get C() {
//│     const outer = this;
//│     if (this.#C === undefined) {
//│       class C {};
//│       this.#C = C;
//│     }
//│     return this.#C;
//│   }
//│ }
//│ const typing_unit2 = new TypingUnit2;
//│ globalThis.C = typing_unit2.C;
//│ // End of generated code

:e // TODO: typing
let c = new C(1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.78: 	let c = new C(1)
//│ ║        	            ^^^^
//│ ╟── argument of type `(1,)` does not match type `()`
//│ ║  l.78: 	let c = new C(1)
//│ ╙──      	             ^^^
//│ let c: C | error
//│ c
//│   = C {}

:js
class D(x: int) {
  constructor(y: int) {
    x = y + 1
  }
  log(x)
}
//│ class D(x: int)
//│ // Prelude
//│ function log(x) {
//│   return console.info(x);
//│ }
//│ class TypingUnit4 {
//│   #D;
//│   constructor() {
//│   }
//│   get D() {
//│     const outer = this;
//│     if (this.#D === undefined) {
//│       class D {
//│         #x;
//│         get x() { return this.#x; }
//│         constructor(y) {
//│           this.#x = y + 1;
//│           const x = this.#x;
//│           log(x);
//│         }
//│       };
//│       this.#D = ((x) => Object.freeze(new D(x)));
//│       this.#D.class = D;
//│     }
//│     return this.#D;
//│   }
//│ }
//│ const typing_unit4 = new TypingUnit4;
//│ globalThis.D = typing_unit4.D;
//│ // End of generated code

let dd = new D(41)
dd.x
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.127: 	let dd = new D(41)
//│ ║         	             ^^^^^
//│ ╟── integer literal of type `41` is not an instance of type `int`
//│ ║  l.127: 	let dd = new D(41)
//│ ║         	               ^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.90: 	class D(x: int) {
//│ ╙──      	           ^^^
//│ let dd: D | error
//│ error | int
//│ dd
//│    = D {}
//│ // Output
//│ 42
//│ res
//│     = 42

:pe
class E {
  constructor(x: int)
  constructor(y: int)
}
//│ ╔══[PARSE ERROR] A class may only have at most one explicit constructor
//│ ║  l.148: 	class E {
//│ ╙──       	^^^^^
//│ class E

:e
constructor(x: int)
//│ ╔══[ERROR] constructor must be in a class.
//│ ║  l.158: 	constructor(x: int)
//│ ╙──       	^^^^^^^^^^^^^^^^^^^
//│ ()
//│ Code generation encountered an error:
//│   unexpected constructor.

:e
:js
class F(x: int) extends C(x + 1) {}
class G extends C(2) {}
class H extends B {}
//│ ╔══[ERROR] class C expects 0 parameter(s); got 1
//│ ║  l.168: 	class F(x: int) extends C(x + 1) {}
//│ ╙──       	                        ^^^^^^^
//│ ╔══[ERROR] class C expects 0 parameter(s); got 1
//│ ║  l.169: 	class G extends C(2) {}
//│ ╙──       	                ^^^
//│ class F(x: int) extends C
//│ class G extends C
//│ class H extends B
//│ // Prelude
//│ class TypingUnit7 {
//│   #F;
//│   #G;
//│   #H;
//│   constructor() {
//│   }
//│   get F() {
//│     const outer = this;
//│     if (this.#F === undefined) {
//│       class F extends C {
//│         #x;
//│         get x() { return this.#x; }
//│         constructor(x) {
//│           super(x + 1);
//│           this.#x = x;
//│         }
//│       };
//│       this.#F = ((x) => Object.freeze(new F(x)));
//│       this.#F.class = F;
//│     }
//│     return this.#F;
//│   }
//│   get G() {
//│     const outer = this;
//│     if (this.#G === undefined) {
//│       class G extends C {
//│         constructor() {
//│           super(2);
//│         }
//│       };
//│       this.#G = G;
//│     }
//│     return this.#G;
//│   }
//│   get H() {
//│     const outer = this;
//│     if (this.#H === undefined) {
//│       class H extends B {
//│         constructor() {
//│           super();
//│         }
//│       };
//│       this.#H = H;
//│     }
//│     return this.#H;
//│   }
//│ }
//│ const typing_unit7 = new TypingUnit7;
//│ globalThis.F = typing_unit7.F;
//│ globalThis.G = typing_unit7.G;
//│ globalThis.H = typing_unit7.H;
//│ // End of generated code

:js
fun f(c) =
  if c is
    F(x) then x
    G() then 2
    _ then 0
//│ fun f: #Object -> (0 | 2 | int)
//│ // Prelude
//│ class TypingUnit8 {}
//│ const typing_unit8 = new TypingUnit8;
//│ // Query 1
//│ globalThis.f = function f(c) {
//│   return ((() => {
//│     let a;
//│     return a = c, a instanceof F.class ? ((x) => x)(c.x) : a instanceof G ? 2 : 0;
//│   })());
//│ };
//│ // End of generated code

f(F(12))
f(new G())
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.253: 	f(F(12))
//│ ║         	  ^^^^^
//│ ╟── integer literal of type `12` is not an instance of type `int`
//│ ║  l.253: 	f(F(12))
//│ ║         	    ^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.168: 	class F(x: int) extends C(x + 1) {}
//│ ╙──       	           ^^^
//│ 0 | 2 | int
//│ res
//│     = 12
//│ res
//│     = 2

:js
:e
module I {
  class J {
    constructor(x: int)
  }
  module K {
    class L extends J(0)
  }
}
//│ ╔══[ERROR] class J expects 0 parameter(s); got 1
//│ ║  l.277: 	    class L extends J(0)
//│ ╙──       	                    ^^^
//│ module I {
//│   class J
//│   module K {
//│     class L extends J
//│   }
//│ }
//│ // Prelude
//│ class TypingUnit10 {
//│   #I;
//│   constructor() {
//│   }
//│   get I() {
//│     const outer = this;
//│     if (this.#I === undefined) {
//│       class I {
//│         #J;
//│         #K;
//│         constructor() {
//│         }
//│         get K() {
//│           const outer1 = this;
//│           if (this.#K === undefined) {
//│             class K {
//│               #L;
//│               constructor() {
//│               }
//│               get L() {
//│                 const outer2 = this;
//│                 if (this.#L === undefined) {
//│                   class L extends outer1.J {
//│                     constructor() {
//│                       super(0);
//│                     }
//│                   };
//│                   this.#L = L;
//│                 }
//│                 return this.#L;
//│               }
//│             }
//│             this.#K = new K();
//│             this.#K.class = K;
//│           }
//│           return this.#K;
//│         }
//│         get J() {
//│           const outer1 = this;
//│           if (this.#J === undefined) {
//│             class J {};
//│             this.#J = J;
//│           }
//│           return this.#J;
//│         }
//│       }
//│       this.#I = new I();
//│       this.#I.class = I;
//│     }
//│     return this.#I;
//│   }
//│ }
//│ const typing_unit10 = new TypingUnit10;
//│ globalThis.I = typing_unit10.I;
//│ // End of generated code

:js
fun g(x: int) =
  class L(y: int) {
    constructor(z: int) {
      y = z + 1
    }
    fun ll = x + y
  }
  L
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.352: 	    fun ll = x + y
//│ ║         	             ^^^
//│ ╟── type `int` is not an instance of type `Int`
//│ ║  l.347: 	fun g(x: int) =
//│ ║         	         ^^^
//│ ╟── but it flows into reference with expected type `Int`
//│ ║  l.352: 	    fun ll = x + y
//│ ╙──       	             ^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.352: 	    fun ll = x + y
//│ ║         	             ^^^^^
//│ ╟── type `int` is not an instance of type `Int`
//│ ║  l.348: 	  class L(y: int) {
//│ ║         	             ^^^
//│ ╟── but it flows into reference with expected type `Int`
//│ ║  l.352: 	    fun ll = x + y
//│ ╙──       	                 ^
//│ fun g: (x: int,) -> (y: int,) -> L
//│ // Prelude
//│ class TypingUnit11 {}
//│ const typing_unit11 = new TypingUnit11;
//│ // Query 1
//│ globalThis.g = function g(x) {
//│   return ((() => {
//│     const L = (() => {
//│       class L {
//│         #y;
//│         get y() { return this.#y; }
//│         constructor(z) {
//│           this.#y = z + 1;
//│           const y = this.#y;
//│         }
//│         get ll() {
//│           const y = this.#y;
//│           return x + y;
//│         }
//│       }
//│       let ctor;
//│       ctor = ((y) => new L(y));
//│       ctor.class = L;
//│       return ctor;
//│     })();
//│     return L;
//│   })());
//│ };
//│ // End of generated code

:js
let m = g(1)
let n = m(2)
n.ll
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.404: 	let m = g(1)
//│ ║         	        ^^^^
//│ ╟── integer literal of type `1` is not an instance of type `int`
//│ ║  l.404: 	let m = g(1)
//│ ║         	          ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.347: 	fun g(x: int) =
//│ ╙──       	         ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.405: 	let n = m(2)
//│ ║         	        ^^^^
//│ ╟── integer literal of type `2` is not an instance of type `int`
//│ ║  l.405: 	let n = m(2)
//│ ║         	          ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.348: 	  class L(y: int) {
//│ ╙──       	             ^^^
//│ let m: (y: int,) -> L | error
//│ let n: L | error
//│ Int | error
//│ // Prelude
//│ class TypingUnit12 {}
//│ const typing_unit12 = new TypingUnit12;
//│ // Query 1
//│ globalThis.m = g(1);
//│ // Query 2
//│ globalThis.n = m(2);
//│ // Query 3
//│ res = n.ll;
//│ // End of generated code
//│ m
//│   = [Function: ctor] { class: [class L] }
//│ n
//│   = L {}
//│ res
//│     = 4

class M()
//│ class M()

:js
let mm = new M()
//│ let mm: M
//│ // Prelude
//│ class TypingUnit14 {}
//│ const typing_unit14 = new TypingUnit14;
//│ // Query 1
//│ globalThis.mm = new M.class();
//│ // End of generated code
//│ mm
//│    = M {}

fun h(z: int) =
  class N {
    constructor(x: int) {
      log(x + z)
    }
  }
  N
//│ fun h: (z: int,) -> () -> N

:e // TODO: typing
let hh = h(1)
new hh(1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.470: 	let hh = h(1)
//│ ║         	         ^^^^
//│ ╟── integer literal of type `1` is not an instance of type `int`
//│ ║  l.470: 	let hh = h(1)
//│ ║         	           ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.460: 	fun h(z: int) =
//│ ╙──       	         ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.471: 	new hh(1)
//│ ║         	    ^^^^^
//│ ╟── argument of type `(1,)` does not match type `()`
//│ ║  l.471: 	new hh(1)
//│ ╙──       	      ^^^
//│ let hh: () -> N | error
//│ N | error
//│ hh
//│    = [class N]
//│ res
//│     = N {}
//│ // Output
//│ 2

:e
module O {
  constructor(x: int)
}
mixin P {
  constructor(x: int)
}
//│ ╔══[ERROR] Explicit module constructors are not supported
//│ ║  l.498: 	  constructor(x: int)
//│ ╙──       	  ^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Explicit mixin constructors are not supported
//│ ║  l.501: 	  constructor(x: int)
//│ ╙──       	  ^^^^^^^^^^^^^^^^^^^
//│ module O
//│ mixin P()
