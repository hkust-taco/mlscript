

() with {}
//│ res: ()
//│    = []

:js
n = 42 with { x = 1 }
n + n.x
//│ // Query 1
//│ globalThis.n = withConstruct(42, { x: 1 });
//│ // Query 2
//│ res = n + n.x;
//│ // End of generated code
//│ n: 42 & {x: 1}
//│  = [Number: 42] { x: 1 }
//│ res: int
//│    = 43


// * Note that `with` works on arrays:

:js
a = (1,2,3) with {}
//│ // Query 1
//│ globalThis.a = withConstruct([
//│   1,
//│   2,
//│   3
//│ ], {});
//│ // End of generated code
//│ a: (1, 2, 3,)
//│  = [ 1, 2, 3 ]

a : Array[int]
//│ res: Array[int]
//│    = [ 1, 2, 3 ]

a[0]
//│ res: 1 | 2 | 3 | undefined
//│    = 1

:escape
def a: nothing // unsound escape hatch
//│ a: nothing
//│  = <missing implementation>

a.length
a.map(fun x -> x + 1)
//│ res: nothing
//│    = 3
//│ res: nothing
//│    = [ 2, 3, 4 ]

:js
ax = (1,2,3) with {x = 4}
//│ // Query 1
//│ globalThis.ax = withConstruct([
//│   1,
//│   2,
//│   3
//│ ], { x: 4 });
//│ // End of generated code
//│ ax: (1, 2, 3,) & {x: 4}
//│   = [ 1, 2, 3, x: 4 ]

ax.x + 1
//│ res: int
//│    = 5

ax[0]
//│ res: 1 | 2 | 3 | undefined
//│    = 1

:escape
def ax: nothing // unsound escape hatch
//│ ax: nothing
//│   = <missing implementation>

ax.length
ax.map(fun x -> x + 1)
//│ res: nothing
//│    = 3
//│ res: nothing
//│    = [ 2, 3, 4 ]


// * Note that `with` currently doesn work on functions:

f = fun x -> x + 1
g = f with { a = 123 }
//│ f: int -> int
//│  = [Function: f]
//│ g: int -> int & {a: 123}
//│  = Function { a: 123 }

g.a
//│ res: 123
//│    = 123

:re // FIXME
g 0
g g.a
//│ res: int
//│ Runtime error:
//│   TypeError: g is not a function
//│ res: int
//│ Runtime error:
//│   TypeError: g is not a function



def f x = x with { a = x.a + 1 }
//│ f: ({a: int} & 'a) -> ('a\a & {a: int})
//│  = [Function: f1]

f { a = 12; b = 34 }
//│ res: {a: int, b: 34}
//│    = { a: 13, b: 34 }

:e
f { a = "oops"; b = 34 }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.122: 	f { a = "oops"; b = 34 }
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"oops"` is not an instance of type `int`
//│ ║  l.122: 	f { a = "oops"; b = 34 }
//│ ║         	        ^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.113: 	def f x = x with { a = x.a + 1 }
//│ ╙──       	                       ^^^
//│ res: error | {a: int, b: 34}
//│    = { a: 'oops1', b: 34 }



class A
//│ Defined class A

A{} with { x = 1 }
//│ res: A & {x: 1}
//│    = A { x: 1 }

class A2: { x: string }
//│ Defined class A2

a2 = A2{x="a"}
r = a2 with { x = 1 }
//│ a2: A2 & {x: "a"}
//│   = A2 { x: 'a' }
//│ r: A2 with {x: 1}
//│  = A2 { x: 1 }

// * Field removal is not supported in negative positions!
// * (When it appears in such positions, it means somethign different.)
// * TODO reject such uses this in the typer
:e
r : (A2 \ x) & {x: 1}
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.158: 	r : (A2 \ x) & {x: 1}
//│ ║         	^
//│ ╟── application of type `A2` does not match type `{x: string}`
//│ ║  l.147: 	a2 = A2{x="a"}
//│ ║         	     ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{x: string}`
//│ ║  l.158: 	r : (A2 \ x) & {x: 1}
//│ ║         	^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.144: 	class A2: { x: string }
//│ ║         	          ^^^^^^^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.158: 	r : (A2 \ x) & {x: 1}
//│ ╙──       	    ^^^^^^^^^^^^^^^^^
//│ res: A2\x & {x: 1}
//│    = A2 { x: 1 }

:e // * Field removal in negative position (see above)
r2 = r : (A2 \ y) & {x: 1}
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.178: 	r2 = r : (A2 \ y) & {x: 1}
//│ ║         	     ^
//│ ╟── integer literal of type `1` is not an instance of type `string`
//│ ║  l.148: 	r = a2 with { x = 1 }
//│ ║         	                  ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.144: 	class A2: { x: string }
//│ ╙──       	               ^^^^^^
//│ r2: A2\y & {x: 1}
//│   = A2 { x: 1 }

r2.x
//│ res: nothing
//│    = 1


test a = case a of
  A2 -> a.x
//│ test: (A2 with {x: 'x}) -> 'x
//│     = [Function: test]

test a2
//│ res: "a"
//│    = 'a'

test r
//│ res: 1
//│    = 1

test r2
//│ res: nothing
//│    = 1


f = (fun x -> x) with {a = 0}
//│ f: 'a -> 'a & {a: 0}
//│  = Function { a: 0 }

f.a
//│ res: 0
//│    = 0

:re // `with` is currently broken with functions
f(0)
//│ res: 0
//│ Runtime error:
//│   TypeError: f2 is not a function


