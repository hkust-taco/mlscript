
// To generate the prelude without printing it in the next test case
() with { x = add 1 }
//│ res: () & {x: int -> int}
//│    = [ x: [Function (anonymous)] ]

:js
def f = 0
//│ // Query 1
//│ globalThis.f = function f() {
//│   return 0;
//│ };
//│ // End of generated code
//│ f: 0
//│  = [Function: f]

:js
f
//│ // Query 1
//│ res = f();
//│ // End of generated code
//│ res: 0
//│    = 0

:js
class Box[T]: { inner: T }
  method Map: (T -> 'a) -> Box['a]
  method Map f = Box { inner = f this.inner }
  method Get = this.inner
  method Get2 () = this.inner
  method Foo () = 0
//│ Defined class Box[+T]
//│ Declared Box.Map: Box['T] -> ('T -> 'a) -> Box['a]
//│ Defined Box.Map: Box['T] -> ('T -> 'inner) -> Box['inner]
//│ Defined Box.Get: Box['T] -> 'T
//│ Defined Box.Get2: Box['T] -> () -> 'T
//│ Defined Box.Foo: Box[?] -> () -> 0
//│ // Prelude
//│ class Box {
//│   constructor(fields) {
//│     this.inner = fields.inner;
//│   }
//│   Map(f) {
//│     const self = this;
//│     return new Box({ inner: f(self.inner) });
//│   }
//│   get Get() {
//│     const self = this;
//│     return self.inner;
//│   }
//│   Get2() {
//│     const self = this;
//│     return self.inner;
//│   }
//│   Foo() {
//│     return 0;
//│   }
//│ }
//│ // End of generated code

:js
def Box value = Box { inner = value }
//│ // Query 1
//│ globalThis.Box1 = function Box1(value) {
//│   return new Box({ inner: value });
//│ };
//│ // End of generated code
//│ Box: 'inner -> Box['inner]
//│    = [Function: Box1]

:js
def box1 = Box 1
def box2 = box1.Map (fun x -> add x 1)
//│ // Query 1
//│ globalThis.box1 = function box1() {
//│   return Box1(1);
//│ };
//│ // Query 2
//│ globalThis.box2 = function box2() {
//│   return box1().Map((x) => add(x)(1));
//│ };
//│ // End of generated code
//│ box1: Box[1]
//│     = [Function: box1]
//│ box2: Box[int]
//│     = [Function: box2]

:js
box2.inner + box2.Get
//│ // Query 1
//│ res = box2().inner + box2().Get;
//│ // End of generated code
//│ res: int
//│    = 4

:js
class MyBox: Box[int] & { info: string }
  method Map f = Box (f this.inner) with { info = this.info }
  method Inc = MyBox { inner = this.inner + 1; info = this.info }
def MyBox inner info = MyBox { inner; info }
//│ Defined class MyBox
//│ Defined MyBox.Map: MyBox -> (int -> 'inner) -> (Box['inner] & {info: string})
//│ Defined MyBox.Inc: MyBox -> MyBox
//│ // Prelude
//│ class MyBox extends Box {
//│   constructor(fields) {
//│     super(fields);
//│     this.info = fields.info;
//│   }
//│   Map(f) {
//│     const self = this;
//│     return withConstruct(Box1(f(self.inner)), { info: self.info });
//│   }
//│   get Inc() {
//│     const self = this;
//│     return (new MyBox({
//│       inner: self.inner + 1,
//│       info: self.info
//│     }));
//│   }
//│ }
//│ // Query 1
//│ globalThis.MyBox1 = function MyBox1(inner) {
//│   return ((info) => new MyBox({
//│     inner: inner,
//│     info: info
//│   }));
//│ };
//│ // End of generated code
//│ MyBox: (int & 'inner) -> (string & 'info) -> (MyBox with {info: 'info, inner: 'inner})
//│      = [Function: MyBox1]

:js
mb = MyBox 1 "hello"
mb = mb.Inc
mb.Get
mb2 = mb.Map (fun x -> x * 3)
mb2.Get
//│ // Query 1
//│ globalThis.mb = MyBox1(1)("hello");
//│ // Query 2
//│ globalThis.mb1 = mb.Inc;
//│ // Query 3
//│ res = mb1.Get;
//│ // Query 4
//│ globalThis.mb2 = mb1.Map((x) => x * 3);
//│ // Query 5
//│ res = mb2.Get;
//│ // End of generated code
//│ mb: MyBox & {info: "hello", inner: 1}
//│   = MyBox { inner: 1, info: 'hello' }
//│ mb: MyBox
//│   = MyBox { inner: 2, info: 'hello' }
//│ res: int
//│    = 2
//│ mb2: Box[int]
//│    = Box { inner: 6, info: 'hello' }
//│ res: int
//│    = 6

// FIXME
:js
mb.(MyBox.Map) (fun x -> x * 3)
MyBox.Map mb (fun x -> x * 3)
//│ // Query 1
//│ res = mb1["MyBox.Map"]((x) => x * 3);
//│ // Query 2
//│ res = MyBox1.Map(mb1)((x) => x * 3);
//│ // End of generated code
//│ res: Box[int] & {info: string}
//│ Runtime error:
//│   TypeError: mb1.MyBox.Map is not a function
//│ res: Box[int] & {info: string}
//│ Runtime error:
//│   TypeError: MyBox1.Map is not a function



// Note that there is currently an inconsistency with wildcards:
//  The type simplifier uses `?` to denote a class type argument wildcard,
//    meaning there are no constraints on the corresponding class parameter in that type application,
//    while user-written `?` in type signatures is handled like a definition-wide existential,
//    which is NOT the same:

def f0 (x: Box['_]) = 42
//│ f0: Box[?] -> 42
//│   = [Function: f0]

f0(Box{})
//│ res: 42
//│    = 42

// i.e., def f: exists T. Box[T] -> int
def f: Box[?] -> int
//│ f: Box[nothing] -> int
//│  = <missing implementation>

:e
f(Box{})
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.199: 	f(Box{})
//│ ║         	^^^^^^^^
//│ ╟── record literal of type `anything` does not match type `nothing`
//│ ║  l.199: 	f(Box{})
//│ ║         	     ^^
//│ ╟── but it flows into application with expected type `nothing`
//│ ║  l.199: 	f(Box{})
//│ ║         	  ^^^^^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.194: 	def f: Box[?] -> int
//│ ║         	           ^
//│ ╟── from applied type reference:
//│ ║  l.194: 	def f: Box[?] -> int
//│ ╙──       	       ^^^^^^
//│ res: error | int
//│    = <no result>
//│      f is not implemented

f = f0
//│ Box[?] -> 42
//│   <:  f:
//│ Box[nothing] -> int
//│  = [Function: f0]


// The following test ensures `const self = this` is generated correctly.

:js
class Point: { x: int; y: int }
  method Zero = 0
  method Move (dx: int, dy: int) =
    Point { x = this.x + dx; y = this.y + dy }
  method Sum self =
    Point { x = this.x + self.x; y = this.y + self.y }
  method Shadow this = Point { x = this.x + 1; y = this.y + 1 }
  method Shadow2 ((this,)) = Point { x = this.x + 1; y = this.y + 1 }
  method Shadow3 { this } = Point { x = this.x + 1; y = this.y + 1 }
//│ Defined class Point
//│ Defined Point.Zero: Point -> 0
//│ Defined Point.Move: Point -> (int, int,) -> Point
//│ Defined Point.Sum: Point -> {x: int, y: int} -> Point
//│ Defined Point.Shadow: Point -> {x: int, y: int} -> Point
//│ Defined Point.Shadow2: Point -> {x: int, y: int} -> Point
//│ Defined Point.Shadow3: Point -> {this: {x: int, y: int}} -> Point
//│ // Prelude
//│ class Point {
//│   constructor(fields) {
//│     this.x = fields.x;
//│     this.y = fields.y;
//│   }
//│   get Zero() {
//│     return 0;
//│   }
//│   Move(dx, dy) {
//│     const self = this;
//│     return (new Point({
//│       x: self.x + dx,
//│       y: self.y + dy
//│     }));
//│   }
//│   Sum(self1) {
//│     const self = this;
//│     return (new Point({
//│       x: self.x + self1.x,
//│       y: self.y + self1.y
//│     }));
//│   }
//│   Shadow(this$) {
//│     return (new Point({
//│       x: this$.x + 1,
//│       y: this$.y + 1
//│     }));
//│   }
//│   Shadow2([this$]) {
//│     return (new Point({
//│       x: this$.x + 1,
//│       y: this$.y + 1
//│     }));
//│   }
//│   Shadow3({ "this": this$ }) {
//│     return (new Point({
//│       x: this$.x + 1,
//│       y: this$.y + 1
//│     }));
//│   }
//│ }
//│ // End of generated code

//  Some simplification tests:

:NoJS

error : 2 & int
//│ res: 2

error : 2 | int
//│ res: int

error : Box[int] & ~box
//│ res: Box[int] & ~#Box

error : Box[?] | Box[?] & {x: '_}
//│ res: Box[?]

error : ((Box[?] | Box[?] & {x: 'a -> int}) & 'a) -> 'a
//│ res: (Box[nothing] & 'a) -> 'a

error: "" | string
//│ res: string


