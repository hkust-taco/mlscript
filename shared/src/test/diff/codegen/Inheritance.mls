:js
trait X: { x: int }
class Y: X
  method MX = this.x
//│ Defined trait X
//│ Defined class Y
//│ Defined Y.MX: (Y & x) -> int
//│ // Prelude
//│ let res;
//│ const X = function () {
//│   const tag = Object();
//│   return ({
//│     implement: function implement(instance) {
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(instance) {
//│       return typeof instance === "object" && tag in instance && typeof instance[tag] === "object";
//│     }
//│   });
//│ }();
//│ class Y {
//│   constructor(fields) {
//│     this.x = fields.x;
//│   }
//│   get MX() {
//│     return this.x;
//│   }
//│ }
//│ // End of generated code

:js
(Y {x = 1}).x
//│ // Query 1
//│ res = new Y({ x: 1 }).x;
//│ // End of generated code
//│ res: 1
//│    = 1

:js
trait A: { a: int }
trait B: { b: int } & A
class C: B & { c: int }
//│ Defined trait A
//│ Defined trait B
//│ Defined class C
//│ // Prelude
//│ const A = function () {
//│   const tag = Object();
//│   return ({
//│     implement: function implement(instance) {
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(instance) {
//│       return typeof instance === "object" && tag in instance && typeof instance[tag] === "object";
//│     }
//│   });
//│ }();
//│ const B = function () {
//│   const tag = Object();
//│   return ({
//│     implement: function implement(instance) {
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(instance) {
//│       return typeof instance === "object" && tag in instance && typeof instance[tag] === "object";
//│     }
//│   });
//│ }();
//│ class C {
//│   constructor(fields) {
//│     this.c = fields.c;
//│     this.b = fields.b;
//│     this.a = fields.a;
//│   }
//│ }
//│ // End of generated code

:js
class P: Q & { p: int }
trait Q: R & { q: int }
trait R: S & { r: int }
trait S: { s: int }
//│ Defined class P
//│ Defined trait Q
//│ Defined trait R
//│ Defined trait S
//│ // Prelude
//│ const Q = function () {
//│   const tag = Object();
//│   return ({
//│     implement: function implement(instance) {
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(instance) {
//│       return typeof instance === "object" && tag in instance && typeof instance[tag] === "object";
//│     }
//│   });
//│ }();
//│ const R = function () {
//│   const tag = Object();
//│   return ({
//│     implement: function implement(instance) {
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(instance) {
//│       return typeof instance === "object" && tag in instance && typeof instance[tag] === "object";
//│     }
//│   });
//│ }();
//│ const S = function () {
//│   const tag = Object();
//│   return ({
//│     implement: function implement(instance) {
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(instance) {
//│       return typeof instance === "object" && tag in instance && typeof instance[tag] === "object";
//│     }
//│   });
//│ }();
//│ class P {
//│   constructor(fields) {
//│     this.p = fields.p;
//│     this.q = fields.q;
//│     this.r = fields.r;
//│     this.s = fields.s;
//│   }
//│ }
//│ // End of generated code
