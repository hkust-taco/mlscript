:js
trait X: { x: int }
class Y: X
  method MX = this.x
//│ Defined trait X
//│ Defined class Y
//│ Defined Y.MX: Y -> int
//│ // Prelude
//│ let res;
//│ const X = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ class Y {
//│   constructor(fields) {
//│     X.implement(this);
//│     this.x = fields.x;
//│   }
//│   get MX() {
//│     const self = this;
//│     return self.x;
//│   }
//│ }
//│ // End of generated code

:js
(Y {x = 1}).x
//│ // Query 1
//│ res = new Y({ x: 1 }).x;
//│ // End of generated code
//│ res: 1
//│    = 1

:js
trait A: { a: int }
trait B: { b: int } & A
class C: B & { c: int }
//│ Defined trait A
//│ Defined trait B
//│ Defined class C
//│ // Prelude
//│ const A = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ const B = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│       A.implement(instance);
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ class C {
//│   constructor(fields) {
//│     B.implement(this);
//│     this.c = fields.c;
//│     this.b = fields.b;
//│     this.a = fields.a;
//│   }
//│ }
//│ // End of generated code

:js
class P: Q & { p: int }
trait Q: R & { q: int }
trait R: S & { r: int }
trait S: { s: int }
//│ Defined class P
//│ Defined trait Q
//│ Defined trait R
//│ Defined trait S
//│ // Prelude
//│ const Q = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│       R.implement(instance);
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ const R = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│       S.implement(instance);
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ const S = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ class P {
//│   constructor(fields) {
//│     Q.implement(this);
//│     this.p = fields.p;
//│     this.q = fields.q;
//│     this.r = fields.r;
//│     this.s = fields.s;
//│   }
//│ }
//│ // End of generated code

def checkS x = case x of
  { S -> true
  | _ -> false
  }
def checkR x = case x of
  { R -> true
  | _ -> false
  }
def checkQ x = case x of
  { Q -> true
  | _ -> false
  }
def checkP x = case x of
  { P -> true
  | _ -> false
  }
//│ checkS: anything -> bool
//│       = [Function: checkS]
//│ checkR: anything -> bool
//│       = [Function: checkR]
//│ checkQ: anything -> bool
//│       = [Function: checkQ]
//│ checkP: anything -> bool
//│       = [Function: checkP]

// Should pass all checks.
:js
p = P { s = 0; q = 0; r = 0; p = 0 }
checkS p && checkR p && checkQ p && checkP p
//│ // Query 1
//│ globalThis.p = new P({
//│   s: 0,
//│   q: 0,
//│   r: 0,
//│   p: 0
//│ });
//│ // Query 2
//│ res = checkS(p) && checkR(p) && checkQ(p) && checkP(p);
//│ // End of generated code
//│ p: P & {p: 0, q: 0, r: 0, s: 0}
//│  = P { p: 0, q: 0, r: 0, s: 0 }
//│ res: bool
//│    = true

trait Foo
  method Foo = 1
//│ Defined trait Foo
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)

class Bar: Foo
//│ Defined class Bar
//│ Code generation encountered an error:
//│   undeclared type name Foo when resolving base classes

// `Foo` should not appear.
bar = Bar{}
//│ bar: Bar
//│ Runtime error:
//│   ReferenceError: Bar is not defined

// But it is actually there.
bar.Foo
//│ res: 1
//│ Runtime error:
//│   ReferenceError: bar is not defined
