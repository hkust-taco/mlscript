
:js
class A: {}
A
A = 2
//│ Defined class A
//│ // Prelude
//│ let res;
//│ class A {}
//│ // Query 1
//│ res = ((x) => new A(x));
//│ // Query 2
//│ globalThis.A1 = 2;
//│ res = A1;
//│ // End of generated code
//│ res: anything -> A
//│    = [Function: res]
//│ A: 2
//│  = 2

A
//│ res: 2
//│    = 2

:e
:js
class add
//│ ╔══[ERROR] Type names must start with a capital letter
//│ ║  l.27: 	class add
//│ ╙──      	      ^^^
//│ // Prelude
//│ class add1 {}
//│ // End of generated code

add
//│ res: int -> int -> int
//│    = [Function: res]

add = 2
//│ add: 2
//│    = 2

add
//│ res: 2
//│    = 2


Test = 1
//│ Test: 1
//│     = 1

class Test
//│ Defined class Test

:js
x = Test
//│ // Query 1
//│ globalThis.x = function x(x) {
//│   return new Test1(x);
//│ };
//│ res = x;
//│ // End of generated code
//│ x: anything -> Test
//│  = [Function: x]

x 1
//│ res: Test
//│    = Test1 {}



class Test2
//│ Defined class Test2

:js
x = Test2
//│ // Query 1
//│ globalThis.x1 = function x1(x) {
//│   return new Test2(x);
//│ };
//│ res = x1;
//│ // End of generated code
//│ x: anything -> Test2
//│  = [Function: x1]

:js
type B = Test2
//│ Defined type alias B
//│ // End of generated code

:e
:js
class C: B
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.93: 	class C: B
//│ ╙──      	      ^^^^
//│ Code generation encountered an error:
//│   cannot inherit from type alias B

:js
B = 1
//│ // Query 1
//│ globalThis.B = 1;
//│ res = B;
//│ // End of generated code
//│ B: 1
//│  = 1



:js
def f: int
// def f = 1
//│ // Query 1 is empty
//│ // End of generated code
//│ f: int
//│  = <missing implementation>

:js
def f = 2
def f = 3
//│ // Query 1
//│ globalThis.f = 2;
//│ res = f;
//│ // Query 2
//│ globalThis.f1 = 3;
//│ res = f1;
//│ // End of generated code
//│ 2
//│   <:  f:
//│ int
//│  = 2
//│ 3
//│   <:  f:
//│ int
//│  = 3

f
//│ res: int
//│    = 3

g = 1
//│ g: 1
//│  = 1

h = g
//│ h: 1
//│  = 1

def g: string
//│ g: string
//│  = <missing implementation>

:js
g = "a"
//│ // Query 1
//│ globalThis.g1 = "a";
//│ res = g1;
//│ // End of generated code
//│ "a"
//│   <:  g:
//│ string
//│  = 'a'

def h: int
//│ h: int
//│  = <missing implementation>

h
//│ res: int
//│    = <no result>
//│      h is not implemented

:js
i = 1
def i: string
i = "a"
//│ // Query 1
//│ globalThis.i = 1;
//│ res = i;
//│ // Query 2 is empty
//│ // Query 3
//│ globalThis.i1 = "a";
//│ res = i1;
//│ // End of generated code
//│ i: 1
//│  = 1
//│ i: string
//│  = <missing implementation>
//│ "a"
//│   <:  i:
//│ string
//│  = 'a'

i
//│ res: string
//│    = 'a'


class C1
//│ Defined class C1

:js
C1 = "a"
//│ // Query 1
//│ globalThis.C11 = "a";
//│ res = C11;
//│ // End of generated code
//│ C1: "a"
//│   = 'a'

:js
class C2: C1
//│ Defined class C2
//│ // Prelude
//│ class C2 extends C1 {
//│   constructor(fields) {
//│     super(fields);
//│   }
//│ }
//│ // End of generated code



type Lol = 1
//│ Defined type alias Lol

:e
:js
Lol
//│ ╔══[ERROR] identifier not found: Lol
//│ ║  l.230: 	Lol
//│ ╙──       	^^^
//│ res: error
//│ Code generation encountered an error:
//│   type alias Lol is not a valid expression


