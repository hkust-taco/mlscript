:NewParser
:NewDefs

:js
:ShowRepl
class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: int)
//│ // Prelude
//│ let res;
//│ class TypingUnit {
//│   #Add;
//│   #Lit;
//│   constructor() {
//│   }
//│   get Add() {
//│     const outer = this;
//│     if (this.#Add === undefined) {
//│       class Add {
//│         #lhs;
//│         #rhs;
//│         get lhs() { return this.#lhs; }
//│         get rhs() { return this.#rhs; }
//│         constructor(lhs, rhs) {
//│           this.#lhs = lhs;
//│           this.#rhs = rhs;
//│         }
//│       };
//│       this.#Add = ((lhs, rhs) => new Add(lhs, rhs));
//│       this.#Add.class = Add;
//│     }
//│     return this.#Add;
//│   }
//│   get Lit() {
//│     const outer = this;
//│     if (this.#Lit === undefined) {
//│       class Lit {
//│         #n;
//│         get n() { return this.#n; }
//│         constructor(n) {
//│           this.#n = n;
//│         }
//│       };
//│       this.#Lit = ((n) => new Lit(n));
//│       this.#Lit.class = Lit;
//│     }
//│     return this.#Lit;
//│   }
//│ }
//│ const typing_unit = new TypingUnit;
//│ globalThis.Add = typing_unit.Add;
//│ globalThis.Lit = typing_unit.Lit;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:6
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let res;
//│ │ │   class TypingUnit {
//│ │ │     #Add;
//│ │ │     #Lit;
//│ │ │     constructor() {
//│ │ │     }
//│ │ │     get Add() {
//│ │ │       const outer = this;
//│ │ │       if (this.#Add === undefined) {
//│ │ │         class Add {
//│ │ │           #lhs;
//│ │ │           #rhs;
//│ │ │           get lhs() { return this.#lhs; }
//│ │ │           get rhs() { return this.#rhs; }
//│ │ │           constructor(lhs, rhs) {
//│ │ │             this.#lhs = lhs;
//│ │ │             this.#rhs = rhs;
//│ │ │           }
//│ │ │         };
//│ │ │         this.#Add = ((lhs, rhs) => new Add(lhs, rhs));
//│ │ │         this.#Add.class = Add;
//│ │ │       }
//│ │ │       return this.#Add;
//│ │ │     }
//│ │ │     get Lit() {
//│ │ │       const outer = this;
//│ │ │       if (this.#Lit === undefined) {
//│ │ │         class Lit {
//│ │ │           #n;
//│ │ │           get n() { return this.#n; }
//│ │ │           constructor(n) {
//│ │ │             this.#n = n;
//│ │ │           }
//│ │ │         };
//│ │ │         this.#Lit = ((n) => new Lit(n));
//│ │ │         this.#Lit.class = Lit;
//│ │ │       }
//│ │ │       return this.#Lit;
//│ │ │     }
//│ │ │   }
//│ │ │   const typing_unit = new TypingUnit;
//│ │ │   globalThis.Add = typing_unit.Add;
//│ │ │   globalThis.Lit = typing_unit.Lit;
//│ │ └── Reply
//│ │     [Function (anonymous)] { class: [class Lit] }
//│ └── No queries

:js
:ShowRepl
mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: 'lhs -> int}
//│   fun eval: (Add['lhs] | Lit) -> int
//│ }
//│ // Prelude
//│ class TypingUnit1 {
//│   constructor() {
//│   }
//│   EvalBase(base) {
//│     const outer = this;
//│     return (class EvalBase extends base {
//│       constructor(...rest) {
//│         super(...rest);
//│       }
//│       eval(e) {
//│         const self = this;
//│         return ((() => {
//│           let a;
//│           return (a = e, a instanceof Lit.class ? ((n) => n)(e.n) : a instanceof Add.class ? ((l) => ((r) => self.eval(l) + self.eval(r))(e.rhs))(e.lhs) : (() => {
//│             throw new Error("non-exhaustive case expression");
//│           })());
//│         })());
//│       }
//│     });
//│   }
//│ }
//│ const typing_unit1 = new TypingUnit1;
//│ globalThis.EvalBase = typing_unit1.EvalBase;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:107
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   class TypingUnit1 {
//│ │ │     constructor() {
//│ │ │     }
//│ │ │     EvalBase(base) {
//│ │ │       const outer = this;
//│ │ │       return (class EvalBase extends base {
//│ │ │         constructor(...rest) {
//│ │ │           super(...rest);
//│ │ │         }
//│ │ │         eval(e) {
//│ │ │           const self = this;
//│ │ │           return ((() => {
//│ │ │             let a;
//│ │ │             return (a = e, a instanceof Lit.class ? ((n) => n)(e.n) : a instanceof Add.class ? ((l) => ((r) => self.eval(l) + self.eval(r))(e.rhs))(e.lhs) : (() => {
//│ │ │               throw new Error("non-exhaustive case expression");
//│ │ │             })());
//│ │ │           })());
//│ │ │         }
//│ │ │       });
//│ │ │     }
//│ │ │   }
//│ │ │   const typing_unit1 = new TypingUnit1;
//│ │ │   globalThis.EvalBase = typing_unit1.EvalBase;
//│ │ └── Reply
//│ │     [Function: EvalBase]
//│ └── No queries

:js
:ShowRepl
class Neg<A>(expr: A)
//│ class Neg[A](expr: A)
//│ // Prelude
//│ class TypingUnit2 {
//│   #Neg;
//│   constructor() {
//│   }
//│   get Neg() {
//│     const outer = this;
//│     if (this.#Neg === undefined) {
//│       class Neg {
//│         #expr;
//│         get expr() { return this.#expr; }
//│         constructor(expr) {
//│           this.#expr = expr;
//│         }
//│       };
//│       this.#Neg = ((expr) => new Neg(expr));
//│       this.#Neg.class = Neg;
//│     }
//│     return this.#Neg;
//│   }
//│ }
//│ const typing_unit2 = new TypingUnit2;
//│ globalThis.Neg = typing_unit2.Neg;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:174
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   class TypingUnit2 {
//│ │ │     #Neg;
//│ │ │     constructor() {
//│ │ │     }
//│ │ │     get Neg() {
//│ │ │       const outer = this;
//│ │ │       if (this.#Neg === undefined) {
//│ │ │         class Neg {
//│ │ │           #expr;
//│ │ │           get expr() { return this.#expr; }
//│ │ │           constructor(expr) {
//│ │ │             this.#expr = expr;
//│ │ │           }
//│ │ │         };
//│ │ │         this.#Neg = ((expr) => new Neg(expr));
//│ │ │         this.#Neg.class = Neg;
//│ │ │       }
//│ │ │       return this.#Neg;
//│ │ │     }
//│ │ │   }
//│ │ │   const typing_unit2 = new TypingUnit2;
//│ │ │   globalThis.Neg = typing_unit2.Neg;
//│ │ └── Reply
//│ │     [Function (anonymous)] { class: [class Neg] }
//│ └── No queries

:js
:ShowRepl
mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: 'expr -> int}
//│   fun eval: (Neg['expr] | Object & 'a & ~#Neg) -> (int | 'b)
//│ }
//│ // Prelude
//│ class TypingUnit3 {
//│   constructor() {
//│   }
//│   EvalNeg(base) {
//│     const outer = this;
//│     return (class EvalNeg extends base {
//│       constructor(...rest) {
//│         super(...rest);
//│       }
//│       eval(e) {
//│         const self = this;
//│         return ((() => {
//│           return e instanceof Neg.class ? ((d) => 0 - self.eval(d))(e.expr) : super.eval(e);
//│         })());
//│       }
//│     });
//│   }
//│ }
//│ const typing_unit3 = new TypingUnit3;
//│ globalThis.EvalNeg = typing_unit3.EvalNeg;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:231
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   class TypingUnit3 {
//│ │ │     constructor() {
//│ │ │     }
//│ │ │     EvalNeg(base) {
//│ │ │       const outer = this;
//│ │ │       return (class EvalNeg extends base {
//│ │ │         constructor(...rest) {
//│ │ │           super(...rest);
//│ │ │         }
//│ │ │         eval(e) {
//│ │ │           const self = this;
//│ │ │           return ((() => {
//│ │ │             return e instanceof Neg.class ? ((d) => 0 - self.eval(d))(e.expr) : super.eval(e);
//│ │ │           })());
//│ │ │         }
//│ │ │       });
//│ │ │     }
//│ │ │   }
//│ │ │   const typing_unit3 = new TypingUnit3;
//│ │ │   globalThis.EvalNeg = typing_unit3.EvalNeg;
//│ │ └── Reply
//│ │     [Function: EvalNeg]
//│ └── No queries

:js
:ShowRepl
mixin EvalNegNeg {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNegNeg() {
//│   super: {eval: (Neg['A] | 'a) -> 'b}
//│   this: {eval: 'expr -> 'b}
//│   fun eval: (Neg['A & (Neg['expr] | Object & ~#Neg)] | Object & 'a & ~#Neg) -> 'b
//│ }
//│ // Prelude
//│ class TypingUnit4 {
//│   constructor() {
//│   }
//│   EvalNegNeg(base) {
//│     const outer = this;
//│     return (class EvalNegNeg extends base {
//│       constructor(...rest) {
//│         super(...rest);
//│       }
//│       eval(e) {
//│         const self = this;
//│         return ((() => {
//│           return e instanceof Neg.class ? ((tmp0) => tmp0 instanceof Neg.class ? ((d) => self.eval(d))(tmp0.expr) : super.eval(e))(e.expr) : super.eval(e);
//│         })());
//│       }
//│     });
//│   }
//│ }
//│ const typing_unit4 = new TypingUnit4;
//│ globalThis.EvalNegNeg = typing_unit4.EvalNegNeg;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:292
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   class TypingUnit4 {
//│ │ │     constructor() {
//│ │ │     }
//│ │ │     EvalNegNeg(base) {
//│ │ │       const outer = this;
//│ │ │       return (class EvalNegNeg extends base {
//│ │ │         constructor(...rest) {
//│ │ │           super(...rest);
//│ │ │         }
//│ │ │         eval(e) {
//│ │ │           const self = this;
//│ │ │           return ((() => {
//│ │ │             return e instanceof Neg.class ? ((tmp0) => tmp0 instanceof Neg.class ? ((d) => self.eval(d))(tmp0.expr) : super.eval(e))(e.expr) : super.eval(e);
//│ │ │           })());
//│ │ │         }
//│ │ │       });
//│ │ │     }
//│ │ │   }
//│ │ │   const typing_unit4 = new TypingUnit4;
//│ │ │   globalThis.EvalNegNeg = typing_unit4.EvalNegNeg;
//│ │ └── Reply
//│ │     [Function: EvalNegNeg]
//│ └── No queries

:js
:ShowRepl
module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ module TestLang() {
//│   fun eval: 'a -> int
//│ }
//│ where
//│   'a <: Neg['A] | Object & 'b & ~#Neg
//│   'A <: Neg['a & 'A] | Neg['A] & ~#Neg | Object & 'b & ~#Neg
//│   'b <: Add['a] | Lit | Neg['a]
//│ // Prelude
//│ class TypingUnit5 {
//│   #TestLang;
//│   constructor() {
//│   }
//│   get TestLang() {
//│     const outer = this;
//│     if (this.#TestLang === undefined) {
//│       class TestLang extends EvalNegNeg(EvalNeg(EvalBase(Object))) {
//│         constructor() {
//│           super();
//│         }
//│       }
//│       this.#TestLang = new TestLang();
//│       this.#TestLang.class = TestLang;
//│     }
//│     return this.#TestLang;
//│   }
//│ }
//│ const typing_unit5 = new TypingUnit5;
//│ globalThis.TestLang = typing_unit5.TestLang;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:353
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   class TypingUnit5 {
//│ │ │     #TestLang;
//│ │ │     constructor() {
//│ │ │     }
//│ │ │     get TestLang() {
//│ │ │       const outer = this;
//│ │ │       if (this.#TestLang === undefined) {
//│ │ │         class TestLang extends EvalNegNeg(EvalNeg(EvalBase(Object))) {
//│ │ │           constructor() {
//│ │ │             super();
//│ │ │           }
//│ │ │         }
//│ │ │         this.#TestLang = new TestLang();
//│ │ │         this.#TestLang.class = TestLang;
//│ │ │       }
//│ │ │       return this.#TestLang;
//│ │ │     }
//│ │ │   }
//│ │ │   const typing_unit5 = new TypingUnit5;
//│ │ │   globalThis.TestLang = typing_unit5.TestLang;
//│ │ └── Reply
//│ │     TestLang { class: [Function: TestLang] }
//│ └── No queries

:js
:ShowRepl
fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
TestLang.eval(mk(0))
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.412: 	fun mk(n) = if n is
//│ ║         	               ^^^^
//│ ║  l.413: 	  0 then Lit(0)
//│ ║         	^^^^^^^^^^^^^^^^
//│ ║  l.414: 	  1 then Neg(mk(n))
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.415: 	  _ then Add(mk(n), mk(n))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `bool` is not an instance of type `Object`
//│ ║  l.412: 	fun mk(n) = if n is
//│ ║         	               ^^^^
//│ ║  l.413: 	  0 then Lit(0)
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.412: 	fun mk(n) = if n is
//│ ║         	               ^^^^
//│ ║  l.413: 	  0 then Lit(0)
//│ ║         	^^^^^^^^^^^^^^^^
//│ ║  l.414: 	  1 then Neg(mk(n))
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.415: 	  _ then Add(mk(n), mk(n))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `bool` is not an instance of type `Object`
//│ ║  l.412: 	fun mk(n) = if n is
//│ ║         	               ^^^^
//│ ║  l.413: 	  0 then Lit(0)
//│ ║         	^^^^^^^^^^^^^^^^
//│ ║  l.414: 	  1 then Neg(mk(n))
//│ ╙──       	^^^
//│ fun mk: forall 'E. number -> 'E
//│ int
//│ where
//│   'E :> Add['E] | Lit | Neg['E]
//│ // Prelude
//│ class TypingUnit6 {}
//│ const typing_unit6 = new TypingUnit6;
//│ // Query 1
//│ globalThis.mk = function mk(n) {
//│   return n == 0 === true ? Lit(0) : n == 1 === true ? Neg(mk(n)) : Add(mk(n), mk(n));
//│ };
//│ // Query 2
//│ res = TestLang.eval(mk(0));
//│ // End of generated code
//│ ┌ Block at Mixin.mls:412
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   class TypingUnit6 {}
//│ │ │   const typing_unit6 = new TypingUnit6;
//│ │ └── Reply
//│ │     undefined
//│ ├─┬ Query 1/2
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   globalThis.mk = function mk(n) {
//│ │ ├──     return n == 0 === true ? Lit(0) : n == 1 === true ? Neg(mk(n)) : Add(mk(n), mk(n));
//│ │ ├──   };
//│ │ ├── Intermediate: [Function: mk]
//│ │ └── Reply: [success] [Function: mk]
//│ └─┬ Query 2/2
//│   ├── Prelude: <empty>
//│   ├── Code:
//│   ├──   res = TestLang.eval(mk(0));
//│   ├── Intermediate: 0
//│   └── Reply: [success] 0
//│ res
//│     = [Function: mk]


class Foo(x: int)
//│ class Foo(x: int)


:e
class Bar(x: int, y: int) extends Foo(x + y)
//│ ╔══[ERROR] Class inheritance is not supported yet (use mixins)
//│ ║  l.491: 	class Bar(x: int, y: int) extends Foo(x + y)
//│ ╙──       	                                  ^^^^^^^^^^
//│ class Bar(x: int, y: int)


mixin AA(a: int) {
}
//│ mixin AA(a: int)

mixin BB {}
//│ mixin BB()


class C(x: int) extends BB
//│ class C(x: int)

class D(x: int) extends AA(x)
//│ class D(x: int)

class E(x: int) extends BB, AA(x)
//│ class E(x: int)

:js
mixin Fooo(x: int) { fun f = [x, this.x] }
//│ mixin Fooo(x: int) {
//│   this: {x: 'x}
//│   fun f: (int, 'x,)
//│ }
//│ // Prelude
//│ class TypingUnit14 {
//│   constructor() {
//│   }
//│   Fooo(base) {
//│     const outer = this;
//│     return (class Fooo extends base {
//│       #x;
//│       get x() { return this.#x; }
//│       constructor(x, ...rest) {
//│         super(...rest);
//│         this.#x = x;
//│       }
//│       get f() {
//│         const x = this.#x;
//│         const self = this;
//│         return ([
//│           x,
//│           self.x
//│         ]);
//│       }
//│     });
//│   }
//│ }
//│ const typing_unit14 = new TypingUnit14;
//│ globalThis.Fooo = typing_unit14.Fooo;
//│ // End of generated code

:js
mixin Bazz(y: int)
//│ mixin Bazz(y: int)
//│ // Prelude
//│ class TypingUnit15 {
//│   constructor() {
//│   }
//│   Bazz(base) {
//│     const outer = this;
//│     return (class Bazz extends base {
//│       #y;
//│       get y() { return this.#y; }
//│       constructor(y, ...rest) {
//│         super(...rest);
//│         this.#y = y;
//│       }
//│     });
//│   }
//│ }
//│ const typing_unit15 = new TypingUnit15;
//│ globalThis.Bazz = typing_unit15.Bazz;
//│ // End of generated code

:js
module Barr extends Fooo(0), Bazz(1)
//│ module Barr() {
//│   fun f: (int, 0,)
//│ }
//│ // Prelude
//│ class TypingUnit16 {
//│   #Barr;
//│   constructor() {
//│   }
//│   get Barr() {
//│     const outer = this;
//│     if (this.#Barr === undefined) {
//│       class Barr extends Bazz(Fooo(Object)) {
//│         constructor() {
//│           super(1, 0);
//│         }
//│       }
//│       this.#Barr = new Barr();
//│       this.#Barr.class = Barr;
//│     }
//│     return this.#Barr;
//│   }
//│ }
//│ const typing_unit16 = new TypingUnit16;
//│ globalThis.Barr = typing_unit16.Barr;
//│ // End of generated code

Barr.x
//│ 0
//│ res
//│     = 0

Barr.y
//│ 1
//│ res
//│     = 1

:e
:ge
mixin Base {
  fun x = y
}
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.613: 	  fun x = y
//│ ╙──       	          ^
//│ mixin Base() {
//│   fun x: error
//│ }
//│ Code generation encountered an error:
//│   unresolved symbol y


:re
module Test extends Base
//│ module Test() {
//│   fun x: error
//│ }
//│ Runtime error:
//│   ReferenceError: Base is not defined


mixin MA(a: int)
mixin MB(b1: int, b2: int)
mixin MC(c: int)
//│ mixin MA(a: int)
//│ mixin MB(b1: int, b2: int)
//│ mixin MC(c: int)

:js
module MM extends MA(1), MB(2, 3), MC(4)
//│ module MM()
//│ // Prelude
//│ class TypingUnit22 {
//│   #MM;
//│   constructor() {
//│   }
//│   get MM() {
//│     const outer = this;
//│     if (this.#MM === undefined) {
//│       class MM extends MC(MB(MA(Object))) {
//│         constructor() {
//│           super(4, 2, 3, 1);
//│         }
//│       }
//│       this.#MM = new MM();
//│       this.#MM.class = MM;
//│     }
//│     return this.#MM;
//│   }
//│ }
//│ const typing_unit22 = new TypingUnit22;
//│ globalThis.MM = typing_unit22.MM;
//│ // End of generated code

MM.a
MM.b1
MM.b2
MM.c
//│ 4
//│ res
//│     = 1
//│ res
//│     = 2
//│ res
//│     = 3
//│ res
//│     = 4

