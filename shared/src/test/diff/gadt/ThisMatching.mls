:NewDefs


:e
:re
module Dummy {
  log(if this is Dummy then "duh!" else "huh?")
}
//│ ╔══[ERROR] Cannot access `this` during object initialization
//│ ║  l.7: 	  log(if this is Dummy then "duh!" else "huh?")
//│ ╙──     	         ^^^^
//│ module Dummy
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

module Dummy {
  fun introspect =
    if this is Dummy then "duh!" else "huh?"
}
//│ module Dummy {
//│   fun introspect: "duh!" | "huh?"
//│ }

Dummy.introspect
//│ "duh!" | "huh?"
//│ res
//│     = 'duh!'


abstract class Funny: Int { fun test = this + 1 }
//│ abstract class Funny: Int {
//│   fun test: Int
//│ }

:e
class Unfunny { fun test = this + 1 }
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.36: 	class Unfunny { fun test = this + 1 }
//│ ║        	                           ^^^^^^^^
//│ ╟── reference of type `#Unfunny` is not an instance of type `Int`
//│ ║  l.36: 	class Unfunny { fun test = this + 1 }
//│ ╙──      	                           ^^^^
//│ class Unfunny {
//│   constructor()
//│   fun test: Int | error
//│ }


abstract class Exp: (Pair | Lit) {
  fun test = if this is
    Lit then 0
    Pair then 1
}
class Lit(n: Int) extends Exp
class Pair(lhs: Exp, rhs: Exp) extends Exp
//│ abstract class Exp: Lit | Pair {
//│   fun test: 0 | 1
//│ }
//│ class Lit(n: Int) extends Exp {
//│   fun test: 0 | 1
//│ }
//│ class Pair(lhs: Exp, rhs: Exp) extends Exp {
//│   fun test: 0 | 1
//│ }


abstract class Exp: (() | Lit) {
  fun test = if this is
    Lit then 0
    () then 1
}
class Lit(n: Int) extends Exp
//│ abstract class Exp: Lit | () {
//│   fun test: 0 | 1
//│ }
//│ class Lit(n: Int) extends Exp {
//│   fun test: 0 | 1
//│ }

// * TODO fix this by requiring a type annotation on `test` and delaying its body's type checking until all the involed classes are completed
// * Currently we try to complete Exp ->{type checking defn body} complete test ->{type checking pattern} find Wrap's typed fields ->{get Wrap's typed parents} complete Exp
:e
abstract class Exp: (() | Wrap) {
  fun test = if this is
    Wrap(a) then 0
    () then 1
}
class Wrap(n: Exp) extends Exp
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.83: 	abstract class Exp: (() | Wrap) {
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	  fun test = if this is
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.85: 	    Wrap(a) then 0
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.86: 	    () then 1
//│ ║        	^^^^^^^^^^^^^
//│ ║  l.87: 	}
//│ ╙──      	^
//│ abstract class Exp: Wrap | () {
//│   fun test: 0 | 1
//│ }
//│ class Wrap(n: Exp) extends Exp

// * TODO (same as above)
:e
abstract class Exp: (Pair | Lit) {
  fun test: Int
  fun test = if this is
    Lit then 0
    Pair(l, r) then 1
}
class Lit(n: Int) extends Exp
class Pair(lhs: Exp, rhs: Exp) extends Exp
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.107: 	abstract class Exp: (Pair | Lit) {
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.108: 	  fun test: Int
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.109: 	  fun test = if this is
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.110: 	    Lit then 0
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.111: 	    Pair(l, r) then 1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.112: 	}
//│ ╙──       	^
//│ abstract class Exp: Lit | Pair {
//│   fun test: Int
//│ }
//│ class Lit(n: Int) extends Exp {
//│   fun test: Int
//│ }
//│ class Pair(lhs: Exp, rhs: Exp) extends Exp

:e // TODO
Pair(Lit(1), Lit(2)).test
//│ ╔══[ERROR] Type `Pair` does not contain member `test`
//│ ║  l.137: 	Pair(Lit(1), Lit(2)).test
//│ ╙──       	                    ^^^^^
//│ error
//│ res
//│     = 1


:e // TODO can we support this?
abstract class Exp: (Pair | Lit) {
  fun test = if this is
    Lit then 0
    Pair(l, r) then l.test + r.test
}
class Lit(n: Int) extends Exp
class Pair(lhs: Exp, rhs: Exp) extends Exp
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.147: 	abstract class Exp: (Pair | Lit) {
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.148: 	  fun test = if this is
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.149: 	    Lit then 0
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.150: 	    Pair(l, r) then l.test + r.test
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.151: 	}
//│ ╙──       	^
//│ ╔══[ERROR] Indirectly-recursive member should have a type signature
//│ ║  l.150: 	    Pair(l, r) then l.test + r.test
//│ ╙──       	                     ^^^^^
//│ abstract class Exp: Lit | Pair {
//│   fun test: Int | error
//│ }
//│ class Lit(n: Int) extends Exp {
//│   fun test: Int | error
//│ }
//│ class Pair(lhs: Exp, rhs: Exp) extends Exp


:e // TODO
abstract class Exp: (Pair | Lit) {
  fun test : Int
  fun test = if this is
    Lit then 0
    Pair(l, r) then l.test + r.test
}
class Lit(n: Int) extends Exp
class Pair(lhs: Exp, rhs: Exp) extends Exp
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.178: 	abstract class Exp: (Pair | Lit) {
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.179: 	  fun test : Int
//│ ║         	^^^^^^^^^^^^^^^^
//│ ║  l.180: 	  fun test = if this is
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.181: 	    Lit then 0
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.182: 	    Pair(l, r) then l.test + r.test
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.183: 	}
//│ ╙──       	^
//│ abstract class Exp: Lit | Pair {
//│   fun test: Int
//│ }
//│ class Lit(n: Int) extends Exp {
//│   fun test: Int
//│ }
//│ class Pair(lhs: Exp, rhs: Exp) extends Exp


:e // TODO support – this requires implementing type member lookup without forced completion (we get constraints like Pair<Exp> <: Pair#L)
abstract class Exp[A]: (Pair | Lit) {
  fun test = if this is
    Lit then 0
    Pair then 1
}
class Lit(n: Int) extends Exp[Int]
class Pair[L, R](lhs: L, rhs: R) extends Exp[[L, R]]
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.209: 	abstract class Exp[A]: (Pair | Lit) {
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.210: 	  fun test = if this is
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.211: 	    Lit then 0
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.212: 	    Pair then 1
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.213: 	}
//│ ╙──       	^
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.210: 	  fun test = if this is
//│ ║         	                ^^^^^^^
//│ ║  l.211: 	    Lit then 0
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.212: 	    Pair then 1
//│ ║         	^^^^^^^^^^^^^^^
//│ ╟── type variable `L` leaks out of its scope
//│ ║  l.215: 	class Pair[L, R](lhs: L, rhs: R) extends Exp[[L, R]]
//│ ╙──       	           ^
//│ abstract class Exp[A]: Lit | Pair[anything, anything] {
//│   fun test: 0 | 1
//│ }
//│ class Lit(n: Int) extends Exp {
//│   fun test: 0 | 1
//│ }
//│ class Pair[L, R](lhs: L, rhs: R) extends Exp

Lit(0).test
//│ 0 | 1
//│ res
//│     = 0


