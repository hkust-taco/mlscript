:NewDefs


:e
:re
module Dummy {
  log(if this is Dummy then "duh!" else "huh?")
}
//│ ╔══[ERROR] Cannot access `this` during object initialization
//│ ║  l.7: 	  log(if this is Dummy then "duh!" else "huh?")
//│ ╙──     	         ^^^^
//│ module Dummy
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

module Dummy {
  fun introspect =
    if this is Dummy then "duh!" else "huh?"
}
//│ module Dummy {
//│   fun introspect: "duh!" | "huh?"
//│ }

Dummy.introspect
//│ "duh!" | "huh?"
//│ res
//│     = 'duh!'


// * TODO: simplify `forall 'a. Int | 'a` – seems it's not because it shares a var...
abstract class Funny: Int { fun test = this + 1 }
//│ abstract class Funny: Int | 'a {
//│   fun test: forall 'a. Int | 'a
//│ }

:e
class Unfunny { fun test = this + 1 }
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.37: 	class Unfunny { fun test = this + 1 }
//│ ║        	                           ^^^^^^^^
//│ ╟── reference of type `#Unfunny` is not an instance of type `Int`
//│ ║  l.37: 	class Unfunny { fun test = this + 1 }
//│ ╙──      	                           ^^^^
//│ class Unfunny {
//│   constructor()
//│   fun test: Int | error
//│ }


abstract class Exp: Pair | Lit {
  fun test = if this is
    Lit then 0
    Pair then 1
}
class Lit(n: Int) extends Exp
class Pair(lhs: Exp, rhs: Exp) extends Exp
//│ abstract class Exp: Lit | Pair {
//│   fun test: 0 | 1
//│ }
//│ class Lit(n: Int) extends Exp {
//│   fun test: 0 | 1
//│ }
//│ class Pair(lhs: Exp, rhs: Exp) extends Exp {
//│   fun test: 0 | 1
//│ }


abstract class Exp: Pair | Lit {
  fun test = if this is
    Lit then 0
    Pair(l, r) then 1
}
class Lit(n: Int) extends Exp
class Pair(lhs: Exp, rhs: Exp) extends Exp
//│ abstract class Exp: Lit | Pair {
//│   fun test: 0 | 1
//│ }
//│ class Lit(n: Int) extends Exp {
//│   fun test: 0 | 1
//│ }
//│ class Pair(lhs: Exp, rhs: Exp) extends Exp {
//│   fun test: 0 | 1
//│ }

Pair(Lit(1), Lit(2)).test
//│ 0 | 1
//│ res
//│     = 1


:e // TODO can we support this?
class Exp: Pair | Lit {
  fun test = if this is
    Lit then 0
    Pair(l, r) then l.test + r.test
}
class Lit(n: Int) extends Exp
class Pair(lhs: Exp, rhs: Exp) extends Exp
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.92: 	class Exp: Pair | Lit {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	  fun test = if this is
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.94: 	    Lit then 0
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.95: 	    Pair(l, r) then l.test + r.test
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.96: 	}
//│ ║        	^
//│ ╟── expression of type `#Exp` does not match type `Lit | Pair`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.92: 	class Exp: Pair | Lit {
//│ ╙──      	           ^^^^^^^^^^
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.95: 	    Pair(l, r) then l.test + r.test
//│ ╙──      	                     ^^^^^
//│ class Exp: Lit | Pair {
//│   constructor()
//│   fun test: Int | error
//│ }
//│ class Lit(n: Int) extends Exp {
//│   fun test: Int | error
//│ }
//│ class Pair(lhs: Exp, rhs: Exp) extends Exp {
//│   fun test: Int | error
//│ }


abstract class Exp: Pair | Lit {
  fun test : Int
  fun test = if this is
    Lit then 0
    Pair(l, r) then l.test + r.test
}
class Lit(n: Int) extends Exp
class Pair(lhs: Exp, rhs: Exp) extends Exp
//│ abstract class Exp: Lit | Pair {
//│   fun test: Int
//│ }
//│ class Lit(n: Int) extends Exp {
//│   fun test: Int
//│ }
//│ class Pair(lhs: Exp, rhs: Exp) extends Exp {
//│   fun test: Int
//│ }


:e // TODO support – this requires implementing type member lookup without forced completion (we get constraints like Pair<Exp> <: Pair#L)
abstract class Exp[A]: Pair | Lit {
  fun test = if this is
    Lit then 0
    Pair then 1
}
class Lit(n: Int) extends Exp[Int]
class Pair[L, R](lhs: L, rhs: R) extends Exp[(L, R)]
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.149: 	abstract class Exp[A]: Pair | Lit {
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.150: 	  fun test = if this is
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.151: 	    Lit then 0
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.152: 	    Pair then 1
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.153: 	}
//│ ╙──       	^
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.150: 	  fun test = if this is
//│ ║         	                ^^^^^^^
//│ ║  l.151: 	    Lit then 0
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.152: 	    Pair then 1
//│ ║         	^^^^^^^^^^^^^^^
//│ ╟── type variable `L` leaks out of its scope
//│ ║  l.155: 	class Pair[L, R](lhs: L, rhs: R) extends Exp[(L, R)]
//│ ╙──       	           ^
//│ abstract class Exp[A]: Lit | Pair[anything, anything] {
//│   fun test: 0 | 1
//│ }
//│ class Lit(n: Int) extends Exp {
//│   fun test: 0 | 1
//│ }
//│ class Pair[L, R](lhs: L, rhs: R) extends Exp

Lit(0).test
//│ 0 | 1
//│ res
//│     = 0


