:NewDefs
:DontDistributeForalls

:NoJS



class Z 
class S[type P]
//│ class Z {
//│   constructor()
//│ }
//│ class S[P] {
//│   constructor()
//│ }



(x: S) => x as S[?]
//│ (x: S[?]) -> S[?]


class Foo[type A](val foo: Foo[A])
//│ class Foo[A](foo: Foo[A])


(x: Foo[?]) => x as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

(x: Foo) => x as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

(x: Foo[?]) => x as Foo
//│ (x: Foo[?]) -> Foo[?]

(x: Foo[?]) => x.foo as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

(x: Foo) => x.foo as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

:e
(x: Foo) => x.foo as x.A
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.43: 	(x: Foo) => x.foo as x.A
//│ ║        	            ^^^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.23: 	class Foo[type A](val foo: Foo[A])
//│ ╙──      	                           ^^^^^^
//│ (x: Foo[?]) -> ??A

:e
(x: Foo[?]) => x.foo as x.A
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.53: 	(x: Foo[?]) => x.foo as x.A
//│ ║        	               ^^^^^
//│ ╟── type `Foo[?]` does not match type `nothing`
//│ ║  l.23: 	class Foo[type A](val foo: Foo[A])
//│ ║        	                           ^^^^^^
//│ ╟── but it flows into field selection with expected type `nothing`
//│ ║  l.53: 	(x: Foo[?]) => x.foo as x.A
//│ ║        	               ^^^^^
//│ ╟── Note: constraint arises from type selection:
//│ ║  l.53: 	(x: Foo[?]) => x.foo as x.A
//│ ╙──      	                         ^^
//│ (x: Foo[?]) -> anything

:e
(x: Foo) => if x is
  Foo then
    x.foo as x.A
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.69: 	(x: Foo) => if x is
//│ ║        	               ^^^^
//│ ║  l.70: 	  Foo then
//│ ║        	^^^^^^^^^^
//│ ║  l.71: 	    x.foo as x.A
//│ ║        	^^^^^^^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.23: 	class Foo[type A](val foo: Foo[A])
//│ ╙──      	               ^
//│ (x: Foo[?]) -> anything

:e
(x: Foo[?]) => if x is
  Foo then
    x.foo as x.A
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.85: 	(x: Foo[?]) => if x is
//│ ║        	                  ^^^^
//│ ║  l.86: 	  Foo then
//│ ║        	^^^^^^^^^^
//│ ║  l.87: 	    x.foo as x.A
//│ ║        	^^^^^^^^^
//│ ╙── expression of type `Foo[in ?A out ??A & ?A0] & ~??A0` does not match type `nothing`
//│ (x: Foo[?]) -> anything



fun fz(l) =
  if l is Foo(ea) and 0 is 0 then
    ea : Foo[ea.A]
//│ fun fz: forall 'A 'A0. Foo[in 'A out 'A0] -> Foo[in 'A & 'A0 out ??A & 'A0]











// abstract class K[type T]: KZ | KS[?]
abstract class K[type T]: KS[?]
// class KZ() extends K[Z]
class KS[type A](ev: K[A]) extends K[S[A]]
//│ abstract class K[T]: KS[?]
//│ class KS[A](ev: K[A]) extends K

:d

fun fz(l) =
  if l is KS(ea) then
    ea : K[ea.T]
//│ fun fz: forall 'A 'A0. KS[in 'A out 'A0] -> K[in S[?] | 'A & 'A0 out ??A & 'A0 & S[?]]


// :d
fun fz(l) =
  if l is KS(ea) then
    () => ea : K[ea.T]
//│ fun fz: forall 'A 'A0. KS[in 'A out 'A0] -> () -> K[in S[in anything out nothing] | 'A & 'A0 out S[?] & ??A & 'A0]

// :d
fun fz(l) =
  if l is KS(ea) and 0 is 0 then
    ea : K[ea.T]
//│ fun fz: forall 'A 'A0. KS[in 'A out 'A0] -> K[in S[in anything out nothing] | 'A & 'A0 out S[?] & ??A & 'A0]



fun fz[L](l: K[L], r: K[L]) =
  if l is KS(ea) and r is KS(eb) then
    let zt: K[ea.T] = ea ; 0
  else 0
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> 0


// fun fr: (K['L], K['L]) -> Int

:e
fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K[L]
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.154: 	fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K[L]
//│ ║         	                        ^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `L | ~??A`
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.118: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ fun fr: forall 'L. (l: K['L]) -> (K['L] | error)

:e
fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K[S['X]]
//│ ╔══[ERROR] Type `??A` does not contain member `P`
//│ ║  l.9: 	class S[type P]
//│ ╙──     	             ^
//│ fun fr: forall 'L. (l: K['L]) -> (K[S[error]] | error)

// :d
fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K['X]
//│ fun fr: forall 'L. (l: K['L]) -> K[?]




fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then [(e1 as K['X]), e2 as K['X]] else 0
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> (0 | [K[?], K[out ??A]])



// MIN

fun sig: (K['L], K['L]) -> Int
//│ fun sig: forall 'L. (K['L], K['L]) -> Int

// FIXME
:d
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then sig(e1, e2)
//│ 0. Typing TypingUnit(List(NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(sig),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),None))))))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(sig),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),None))))))
//│ | Completing fun fr = (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)}
//│ | | Type params (TypeName(L),L542',TypeParamInfo(None,false,None,None))
//│ | | Params 
//│ | | Type fr polymorphically? true && (0 === 0 || false || false
//│ | | 1. Typing term (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)}
//│ | | | 1. Typing pattern [l: K‹L›, r: K‹L›,]
//│ | | | | 1. Typing pattern l : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L542') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L542'
//│ | | | | | | => K[‘L542']
//│ | | | | | => K[‘L542'] ——— 
//│ | | | | 1. : K[‘L542']
//│ | | | | 1. Typing pattern r : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L542') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L542'
//│ | | | | | | => K[‘L542']
//│ | | | | | => K[‘L542'] ——— 
//│ | | | | 1. : K[‘L542']
//│ | | | 1. : (l: K[‘L542'], r: K[‘L542'],)
//│ | | | 1. Typing term {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)}
//│ | | | | 1. Typing term if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(l); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))
//│ | | | | | [Desugarer.destructPattern] Result: «l is Var(KS)»
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(r); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e2))))))
//│ | | | | | [Desugarer.destructPattern] Result: «r is Var(KS)»
//│ | | | | | Desugared term: case l of { KS => let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) } }
//│ | | | | | 1. Typing term case l of { KS => let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) } }
//│ | | | | | | 1. Typing term l
//│ | | | | | | 1. : K[‘L542']
//│ | | | | | | CONSTRAIN K[‘L542'] <! Object
//│ | | | | | |   where 
//│ | | | | | | 1. C K[‘L542'] <! Object    (0)
//│ | | | | | | | Assigning T :: T172' := ‘L542' where 
//│ | | | | | | | Set T172_543' ~> T172'
//│ | | | | | | | Assigned Some(‘L542')
//│ | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L542'..‘L542'}) <! #Object<>    (2)
//│ | | | | | | | | Already a subtype by <:<
//│ | | | | | | Match arm KS: #KS<Object,K> & {A: mut A175_544'..A175_545'} intl {A: mut (A175_544' | ‘A546'')..(A175_545' & ‘A546'')}
//│ | | | | | | var rfn: l :: K[‘L542'] & #KS<Object,K> & {A: mut (A175_544' | ‘A546'')..(A175_545' & ‘A546'')}
//│ | | | | | | 2. Typing term let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) }
//│ | | | | | | | 2. Typing term (KS).unapply(l,)
//│ | | | | | | | | 2. Typing term (KS).unapply
//│ | | | | | | | | | 2. Typing term (x::14,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | 3. Typing pattern [x::14,]
//│ | | | | | | | | | | | 3. Typing pattern x::14
//│ | | | | | | | | | | | 3. : x548'''
//│ | | | | | | | | | | 3. : (x548''',)
//│ | | | | | | | | | | 3. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | 3. Typing term x : KS
//│ | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | 3. : x548'''
//│ | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | vars=Map(L -> ‘L542') newDefsInfo=Map()
//│ | | | | | | | | | | | | | 3. type TypeName(KS)
//│ | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | CONSTRAIN x548''' <! #KS<Object,K>
//│ | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | 3. C x548''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | NEW x548''' UB (0)
//│ | | | | | | | | | | | 3. : #KS<Object,K>
//│ | | | | | | | | | | | 3. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | 3. Typing term (x).#ev
//│ | | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | | 3. : x548'''
//│ | | | | | | | | | | | | | CONSTRAIN x548''' <! {#ev: #ev549'''}
//│ | | | | | | | | | | | | |   where 
//│ 		x548''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | 3. C x548''' <! {#ev: #ev549'''}    (0)
//│ | | | | | | | | | | | | | | NEW x548''' UB (3)
//│ | | | | | | | | | | | | 3. : #ev549'''
//│ | | | | | | | | | | | 3. : (#ev549''',)
//│ | | | | | | | | | | 3. : (#ev549''',)
//│ | | | | | | | | | | Inferred poly constr: (x548''' -> (#ev549''',))  —— where 
//│ 		x548''' <: {#ev: #ev549'''} & #KS<Object,K>
//│ | | | | | | | | | 2. : ‹∀ 2. (x548''' -> (#ev549''',))›
//│ | | | | | | | | 2. : ‹∀ 2. (x548''' -> (#ev549''',))›
//│ | | | | | | | | 2. Typing term l
//│ | | | | | | | | 2. : ((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_544' | ‘A546'')..(A175_545' & ‘A546'')})
//│ | | | | | | | | CONSTRAIN ‹∀ 2. (x548''' -> (#ev549''',))› <! (((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_544' | ‘A546'')..(A175_545' & ‘A546'')}) -> α550'')
//│ | | | | | | | |   where 
//│ 		A175_544' <: A175_545'
//│ 		x548''' <: {#ev: #ev549'''} & #KS<Object,K>
//│ | | | | | | | | 2. C ‹∀ 2. (x548''' -> (#ev549''',))› <! (((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_544' | ‘A546'')..(A175_545' & ‘A546'')}) -> α550'')    (0)
//│ | | | | | | | | | INST [2]   ‹∀ 2. (x548''' -> (#ev549''',))›
//│ | | | | | | | | |   where  
//│ 		x548''' <: {#ev: #ev549'''} & #KS<Object,K>
//│ | | | | | | | | | TO [2] ~>  (x548_551'' -> (#ev549_552'',))
//│ | | | | | | | | |   where  
//│ 		x548_551'' <: {#ev: #ev549_552''} & #KS<Object,K>
//│ | | | | | | | | | 2. C (x548_551'' -> (#ev549_552'',)) <! (((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_544' | ‘A546'')..(A175_545' & ‘A546'')}) -> α550'')    (2)
//│ | | | | | | | | | | 2. C (((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_544' | ‘A546'')..(A175_545' & ‘A546'')}),) <! (x548_551'',)    (2)
//│ | | | | | | | | | | | 2. C ((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_544' | ‘A546'')..(A175_545' & ‘A546'')}) <! x548_551''    (3)
//│ | | | | | | | | | | | | NEW x548_551'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_544' | ‘A546'')..(A175_545' & ‘A546'')}) <! {#ev: #ev549_552''}    (6)
//│ | | | | | | | | | | | | | Assigning T :: T172' := ‘L542' where 
//│ | | | | | | | | | | | | | Set T172_553' ~> T172'
//│ | | | | | | | | | | | | | Assigned Some(‘L542')
//│ | | | | | | | | | | | | | Assigning A :: A175' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | Set A175_554 ~> A175'
//│ | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | 2. ARGH  DNF(2, #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut (A175_544' | ‘A546'')..(‘A546'' & A175_545')})  <!  DNF(2, {#ev: #ev549_552''})
//│ | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut (A175_544' | ‘A546'')..(‘A546'' & A175_545')} <: DNF(2, {#ev: #ev549_552''})
//│ | | | | | | | | | | | | | | Possible: List({#ev: #ev549_552''})
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut (A175_544' | ‘A546'')..(‘A546'' & A175_545')}  %  List()  <!  List({#ev: #ev549_552''})  %  ⊥
//│ | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut (A175_544' | ‘A546'')..(‘A546'' & A175_545')}  %  List()  <!  List()  %  {#ev:#ev549_552''}
//│ | | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut (A175_544' | ‘A546'')..(‘A546'' & A175_545')}  %  List()  <!  List()  %  |{#ev:#ev549_552''}
//│ | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A175']) where 
//│ | | | | | | | | | | | | | | | | | | Lookup: Found mut (A175_544' | ‘A546'')..(‘A546'' & A175_545')
//│ | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A175_544' | ‘A546'')..(‘A546'' & A175_545')]) where Some(
//│ 		A175_544' <: A175_545')
//│ | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | 2. C K[(A175_544' | ‘A546'')..(‘A546'' & A175_545')] <! #ev549_552''    (5)
//│ | | | | | | | | | | | | | | | | | | NEW #ev549_552'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_544' | ‘A546'')..(A175_545' & ‘A546'')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | 2. C (#ev549_552'',) <! α550''    (2)
//│ | | | | | | | | | | | NEW α550'' LB (2)
//│ | | | | | | | 2. : α550''
//│ | | | | | | | 2. Typing term let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) }
//│ | | | | | | | | 2. Typing term ($unapp).0
//│ | | | | | | | | | 2. Typing term $unapp
//│ | | | | | | | | | 2. : α550''
//│ | | | | | | | | | CONSTRAIN α550'' <! {0: α555''}
//│ | | | | | | | | |   where 
//│ 		A175_544' <: A175_545'
//│ 		α550'' :> (#ev549_552'',)
//│ 		#ev549_552'' :> K[(A175_544' | ‘A546'')..(‘A546'' & A175_545')]
//│ | | | | | | | | | 2. C α550'' <! {0: α555''}    (0)
//│ | | | | | | | | | | NEW α550'' UB (2)
//│ | | | | | | | | | | 2. C (#ev549_552'',) <! {0: α555''}    (2)
//│ | | | | | | | | | | | 2. C {0: #ev549_552''} <! {0: α555''}    (4)
//│ | | | | | | | | | | | | 2. C #ev549_552'' <! α555''    (3)
//│ | | | | | | | | | | | | | NEW #ev549_552'' UB (2)
//│ | | | | | | | | | | | | | 2. C K[(A175_544' | ‘A546'')..(‘A546'' & A175_545')] <! α555''    (5)
//│ | | | | | | | | | | | | | | NEW α555'' LB (2)
//│ | | | | | | | | 2. : α555''
//│ | | | | | | | | 2. Typing term case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) }
//│ | | | | | | | | | 2. Typing term r
//│ | | | | | | | | | 2. : K[‘L542']
//│ | | | | | | | | | CONSTRAIN K[‘L542'] <! Object
//│ | | | | | | | | |   where 
//│ | | | | | | | | | 2. C K[‘L542'] <! Object    (0)
//│ | | | | | | | | | | Assigning T :: T172' := ‘L542' where 
//│ | | | | | | | | | | Set T172_556' ~> T172'
//│ | | | | | | | | | | Assigned Some(‘L542')
//│ | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L542'..‘L542'}) <! #Object<>    (2)
//│ | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | Match arm KS: #KS<Object,K> & {A: mut A175_557''..A175_558''} intl {A: mut (A175_557'' | ‘A559''')..(A175_558'' & ‘A559''')}
//│ | | | | | | | | | var rfn: r :: K[‘L542'] & #KS<Object,K> & {A: mut (A175_557'' | ‘A559''')..(A175_558'' & ‘A559''')}
//│ | | | | | | | | | 3. Typing term let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,)
//│ | | | | | | | | | | 3. Typing term (KS).unapply(r,)
//│ | | | | | | | | | | | 3. Typing term (KS).unapply
//│ | | | | | | | | | | | | 3. Typing term (x::15,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | | | | 4. Typing pattern [x::15,]
//│ | | | | | | | | | | | | | | 4. Typing pattern x::15
//│ | | | | | | | | | | | | | | 4. : x561''''
//│ | | | | | | | | | | | | | 4. : (x561'''',)
//│ | | | | | | | | | | | | | 4. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | | 4. Typing term x : KS
//│ | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | 4. : x561''''
//│ | | | | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | | | | vars=Map(L -> ‘L542') newDefsInfo=Map()
//│ | | | | | | | | | | | | | | | | 4. type TypeName(KS)
//│ | | | | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | | | | CONSTRAIN x561'''' <! #KS<Object,K>
//│ | | | | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | | | | 4. C x561'''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | | | | NEW x561'''' UB (0)
//│ | | | | | | | | | | | | | | 4. : #KS<Object,K>
//│ | | | | | | | | | | | | | | 4. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | | | | 4. Typing term (x).#ev
//│ | | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | | 4. : x561''''
//│ | | | | | | | | | | | | | | | | CONSTRAIN x561'''' <! {#ev: #ev562''''}
//│ | | | | | | | | | | | | | | | |   where 
//│ 		x561'''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | | | | 4. C x561'''' <! {#ev: #ev562''''}    (0)
//│ | | | | | | | | | | | | | | | | | NEW x561'''' UB (4)
//│ | | | | | | | | | | | | | | | 4. : #ev562''''
//│ | | | | | | | | | | | | | | 4. : (#ev562'''',)
//│ | | | | | | | | | | | | | 4. : (#ev562'''',)
//│ | | | | | | | | | | | | | Inferred poly constr: (x561'''' -> (#ev562'''',))  —— where 
//│ 		x561'''' <: {#ev: #ev562''''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. : ‹∀ 3. (x561'''' -> (#ev562'''',))›
//│ | | | | | | | | | | | 3. : ‹∀ 3. (x561'''' -> (#ev562'''',))›
//│ | | | | | | | | | | | 3. Typing term r
//│ | | | | | | | | | | | 3. : ((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_557'' | ‘A559''')..(A175_558'' & ‘A559''')})
//│ | | | | | | | | | | | CONSTRAIN ‹∀ 3. (x561'''' -> (#ev562'''',))› <! (((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_557'' | ‘A559''')..(A175_558'' & ‘A559''')}) -> α563''')
//│ | | | | | | | | | | |   where 
//│ 		A175_557'' <: A175_558''
//│ 		x561'''' <: {#ev: #ev562''''} & #KS<Object,K>
//│ | | | | | | | | | | | 3. C ‹∀ 3. (x561'''' -> (#ev562'''',))› <! (((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_557'' | ‘A559''')..(A175_558'' & ‘A559''')}) -> α563''')    (0)
//│ | | | | | | | | | | | | INST [3]   ‹∀ 3. (x561'''' -> (#ev562'''',))›
//│ | | | | | | | | | | | |   where  
//│ 		x561'''' <: {#ev: #ev562''''} & #KS<Object,K>
//│ | | | | | | | | | | | | TO [3] ~>  (x561_564''' -> (#ev562_565''',))
//│ | | | | | | | | | | | |   where  
//│ 		x561_564''' <: {#ev: #ev562_565'''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. C (x561_564''' -> (#ev562_565''',)) <! (((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_557'' | ‘A559''')..(A175_558'' & ‘A559''')}) -> α563''')    (2)
//│ | | | | | | | | | | | | | 3. C (((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_557'' | ‘A559''')..(A175_558'' & ‘A559''')}),) <! (x561_564''',)    (2)
//│ | | | | | | | | | | | | | | 3. C ((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_557'' | ‘A559''')..(A175_558'' & ‘A559''')}) <! x561_564'''    (3)
//│ | | | | | | | | | | | | | | | NEW x561_564''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_557'' | ‘A559''')..(A175_558'' & ‘A559''')}) <! {#ev: #ev562_565'''}    (6)
//│ | | | | | | | | | | | | | | | | Assigning T :: T172' := ‘L542' where 
//│ | | | | | | | | | | | | | | | | Set T172_566' ~> T172'
//│ | | | | | | | | | | | | | | | | Assigned Some(‘L542')
//│ | | | | | | | | | | | | | | | | Assigning A :: A175' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | | | | Set A175_567 ~> A175'
//│ | | | | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | | | | 3. ARGH  DNF(3, #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut (A175_557'' | ‘A559''')..(‘A559''' & A175_558'')})  <!  DNF(3, {#ev: #ev562_565'''})
//│ | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut (A175_557'' | ‘A559''')..(‘A559''' & A175_558'')} <: DNF(3, {#ev: #ev562_565'''})
//│ | | | | | | | | | | | | | | | | | Possible: List({#ev: #ev562_565'''})
//│ | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut (A175_557'' | ‘A559''')..(‘A559''' & A175_558'')}  %  List()  <!  List({#ev: #ev562_565'''})  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut (A175_557'' | ‘A559''')..(‘A559''' & A175_558'')}  %  List()  <!  List()  %  {#ev:#ev562_565'''}
//│ | | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut (A175_557'' | ‘A559''')..(‘A559''' & A175_558'')}  %  List()  <!  List()  %  |{#ev:#ev562_565'''}
//│ | | | | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A175']) where 
//│ | | | | | | | | | | | | | | | | | | | | | Lookup: Found mut (A175_557'' | ‘A559''')..(‘A559''' & A175_558'')
//│ | | | | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A175_557'' | ‘A559''')..(‘A559''' & A175_558'')]) where Some(
//│ 		A175_557'' <: A175_558'')
//│ | | | | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | | | | 3. C K[(A175_557'' | ‘A559''')..(‘A559''' & A175_558'')] <! #ev562_565'''    (5)
//│ | | | | | | | | | | | | | | | | | | | | | NEW #ev562_565''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L542'] & #KS<Object,K>) & {A: mut (A175_557'' | ‘A559''')..(A175_558'' & ‘A559''')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | 3. C (#ev562_565''',) <! α563'''    (2)
//│ | | | | | | | | | | | | | | NEW α563''' LB (3)
//│ | | | | | | | | | | 3. : α563'''
//│ | | | | | | | | | | 3. Typing term let e2 = ($unapp).0 in sig(e1, e2,)
//│ | | | | | | | | | | | 3. Typing term ($unapp).0
//│ | | | | | | | | | | | | 3. Typing term $unapp
//│ | | | | | | | | | | | | 3. : α563'''
//│ | | | | | | | | | | | | CONSTRAIN α563''' <! {0: α568'''}
//│ | | | | | | | | | | | |   where 
//│ 		A175_557'' <: A175_558''
//│ 		α563''' :> (#ev562_565''',)
//│ 		#ev562_565''' :> K[(A175_557'' | ‘A559''')..(‘A559''' & A175_558'')]
//│ | | | | | | | | | | | | 3. C α563''' <! {0: α568'''}    (0)
//│ | | | | | | | | | | | | | NEW α563''' UB (3)
//│ | | | | | | | | | | | | | 3. C (#ev562_565''',) <! {0: α568'''}    (2)
//│ | | | | | | | | | | | | | | 3. C {0: #ev562_565'''} <! {0: α568'''}    (4)
//│ | | | | | | | | | | | | | | | 3. C #ev562_565''' <! α568'''    (3)
//│ | | | | | | | | | | | | | | | | NEW #ev562_565''' UB (3)
//│ | | | | | | | | | | | | | | | | 3. C K[(A175_557'' | ‘A559''')..(‘A559''' & A175_558'')] <! α568'''    (5)
//│ | | | | | | | | | | | | | | | | | NEW α568''' LB (3)
//│ | | | | | | | | | | | 3. : α568'''
//│ | | | | | | | | | | | 3. Typing term sig(e1, e2,)
//│ | | | | | | | | | | | | 3. Typing term sig
//│ | | | | | | | | | | | | 3. : ‹∀ 0. ‹∀ 0. ((K['L537'], K['L537'],) -> Int)››
//│ | | | | | | | | | | | | 3. Typing term e1
//│ | | | | | | | | | | | | 3. : α555''
//│ | | | | | | | | | | | | 3. Typing term e2
//│ | | | | | | | | | | | | 3. : α568'''
//│ | | | | | | | | | | | | CONSTRAIN ‹∀ 0. ‹∀ 0. ((K['L537'], K['L537'],) -> Int)›› <! ((α555'', α568''',) -> α569''')
//│ | | | | | | | | | | | |   where 
//│ 		A175_544' <: A175_545'
//│ 		α555'' :> K[(A175_544' | ‘A546'')..(‘A546'' & A175_545')]
//│ 		A175_557'' <: A175_558''
//│ 		α568''' :> K[(A175_557'' | ‘A559''')..(‘A559''' & A175_558'')]
//│ | | | | | | | | | | | | 3. C ‹∀ 0. ‹∀ 0. ((K['L537'], K['L537'],) -> Int)›› <! ((α555'', α568''',) -> α569''')    (0)
//│ | | | | | | | | | | | | | 3. C ‹∀ 0. ((K['L537'], K['L537'],) -> Int)› <! ((α555'', α568''',) -> α569''')    (2)
//│ | | | | | | | | | | | | | | INST [0]   ‹∀ 0. ((K['L537'], K['L537'],) -> Int)›
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | TO [3] ~>  ((K['L537_570'''], K['L537_570'''],) -> Int)
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | 3. C ((K['L537_570'''], K['L537_570'''],) -> Int) <! ((α555'', α568''',) -> α569''')    (4)
//│ | | | | | | | | | | | | | | | 3. C (α555'', α568''',) <! (K['L537_570'''], K['L537_570'''],)    (3)
//│ | | | | | | | | | | | | | | | | 3. C α555'' <! K['L537_570''']    (4)
//│ | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | EXTR[-] K['L537_570'''] || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | EXTR[+] 'L537_570''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | EXTR[+] 'L537_570''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | => 'L537_571''
//│ | | | | | | | | | | | | | | | | | | => 'L537_571''
//│ | | | | | | | | | | | | | | | | | | EXTR[-] 'L537_570''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | EXTR[-] 'L537_570''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | EXTR[-] 'L537_571'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | => 'L537_571''
//│ | | | | | | | | | | | | | | | | | | | => 'L537_572''
//│ | | | | | | | | | | | | | | | | | | => 'L537_572''
//│ | | | | | | | | | | | | | | | | | => K[? :> 'L537_571'' <: 'L537_572'']
//│ | | | | | | | | | | | | | | | | | RECONSTRAINING TVs
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L537_571''
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L537_572''
//│ | | | | | | | | | | | | | | | | | EXTR RHS  ~>  K[? :> 'L537_571'' <: 'L537_572'']  to 2
//│ | | | | | | | | | | | | | | | | |  where 
//│ 		'L537_572'' <: 'L537_571''
//│ | | | | | | | | | | | | | | | | | 3. C α555'' <! K[? :> 'L537_571'' <: 'L537_572'']    (4)
//│ | | | | | | | | | | | | | | | | | | NEW α555'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 3. C K[(A175_544' | ‘A546'')..(‘A546'' & A175_545')] <! K[? :> 'L537_571'' <: 'L537_572'']    (7)
//│ | | | | | | | | | | | | | | | | | | | 3. C 'L537_571'' <! (A175_544' | ‘A546'')..(‘A546'' & A175_545')    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C 'L537_571'' <! (A175_544' | ‘A546'')    (6)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C 'L537_571'' <! (A175_544' | ‘A546'')    (6)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L537_571'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | 3. C (A175_544' | ‘A546'')..(‘A546'' & A175_545') <! 'L537_572''    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A546'' & A175_545') <! 'L537_572''    (6)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A546'' & A175_545') <! 'L537_572''    (6)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L537_572'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A546'' & A175_545') <! 'L537_571''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'L537_571'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A546'' & A175_545') <! (A175_544' | ‘A546'')    (10)
//│ | | | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | 3. C α568''' <! K['L537_570''']    (4)
//│ | | | | | | | | | | | | | | | | | NEW α568''' UB (3)
//│ | | | | | | | | | | | | | | | | | 3. C K[(A175_557'' | ‘A559''')..(‘A559''' & A175_558'')] <! K['L537_570''']    (7)
//│ | | | | | | | | | | | | | | | | | | 3. C (A175_557'' | ‘A559''')..(‘A559''' & A175_558'') <! 'L537_570'''    (6)
//│ | | | | | | | | | | | | | | | | | | | 3. C (‘A559''' & A175_558'') <! 'L537_570'''    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A559''' & A175_558'') <! 'L537_570'''    (6)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L537_570''' LB (3)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A559''' & A175_558'') <! 'L537_571''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[+] (A175_558'' & ‘A559''') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] A175_558'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | | | => A175_558''
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A559''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A559''')
//│ | | | | | | | | | | | | | | | | | | | | | | => (A175_558'' & ⊤(‘A559'''))
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (A175_558'' & ⊤(‘A559'''))  to 2
//│ | | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (A175_558'' & ⊤(‘A559''')) <! 'L537_571''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'L537_571'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. C (A175_558'' & ⊤(‘A559''')) <! (A175_544' | ‘A546'')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧⊤(‘A559''')∧A175_558'')  <!  DNF(2, A175_544' | {}∧‘A546'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 3. C A175_558'' <! ((A175_544' | ‘A546'') | ~(⊤(‘A559''')))    (14)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A175_558'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 3. C 'L537_570''' <! (A175_557'' | ‘A559''')..(‘A559''' & A175_558'')    (6)
//│ | | | | | | | | | | | | | | | | | | | 3. C 'L537_570''' <! (A175_557'' | ‘A559''')    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C 'L537_570''' <! (A175_557'' | ‘A559''')    (6)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L537_570''' UB (3)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A559''' & A175_558'') <! (A175_557'' | ‘A559''')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | | | | | | 3. C 'L537_572'' <! (A175_557'' | ‘A559''')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[-] (‘A559''' | A175_557'') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A559''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A559''')
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] A175_557'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | | | => A175_557''
//│ | | | | | | | | | | | | | | | | | | | | | | => (⊥(‘A559''') | A175_557'')
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  (⊥(‘A559''') | A175_557'')  to 2
//│ | | | | | | | | | | | | | | | | | | | | | |  where 
//│ 		A175_544' <: A175_545'
//│ 		A175_557'' <: A175_558''
//│ 		A175_558'' <: ((A175_544' | ‘A546'') | ~(⊤(‘A559''')))
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C 'L537_572'' <! (⊥(‘A559''') | A175_557'')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'L537_572'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A546'' & A175_545') <! (⊥(‘A559''') | A175_557'')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧‘A546''∧A175_545')  <!  DNF(2, A175_557'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 3. C A175_545' <! (A175_557'' | ~(‘A546''))    (14)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A546'' & A175_545') <! A175_557''    (14)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A175_557'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A546'' & A175_545') <! A175_558''    (16)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A175_558'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A546'' & A175_545') <! ((A175_544' | ‘A546'') | ~(⊤(‘A559''')))    (18)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | 3. C Int <! α569'''    (3)
//│ | | | | | | | | | | | | | | | | NEW α569''' LB (0)
//│ | | | | | | | | | | | 3. : α569'''
//│ | | | | | | | | | | 3. : α569'''
//│ | | | | | | | | | 3. : α569'''
//│ | | | | | | | | | CONSTRAIN α569''' <! α560''
//│ | | | | | | | | |   where 
//│ 		α569''' :> Int
//│ | | | | | | | | | 3. C α569''' <! α560''    (0)
//│ | | | | | | | | | | NEW α569''' UB (2)
//│ | | | | | | | | | | 3. C Int <! α560''    (2)
//│ | | | | | | | | | | | NEW α560'' LB (0)
//│ | | | | | | | | | finishing branch: [(#KS<Object,K>,{A: mut A175_557''..A175_558''})] + List() and [α560''] | ⊥
//│ | | | | | | | | | finishing case K[‘L542'] <: (#KS<Object,K> & {A: mut A175_557''..A175_558''})
//│ | | | | | | | | | CONSTRAIN K[‘L542'] <! (#KS<Object,K> & {A: mut A175_557''..A175_558''})
//│ | | | | | | | | |   where 
//│ 		A175_544' <: A175_545'
//│ 		A175_557'' :> (‘A546'' & A175_545') <: A175_558''
//│ 		A175_558'' :> (‘A546'' & A175_545') <: ((A175_544' | ‘A546'') | ~(⊤(‘A559''')))
//│ | | | | | | | | | 2. C K[‘L542'] <! (#KS<Object,K> & {A: mut A175_557''..A175_558''})    (0)
//│ | | | | | | | | | | 2. C K[‘L542'] <! #KS<Object,K>    (2)
//│ | | | | | | | | | | | Assigning T :: T172' := ‘L542' where 
//│ | | | | | | | | | | | Set T172_573' ~> T172'
//│ | | | | | | | | | | | Assigned Some(‘L542')
//│ | | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L542'..‘L542'}) <! #KS<Object,K>    (4)
//│ | | | | | | | | | | | | Assigning A :: A175' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | Set A175_574 ~> A175'
//│ | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | 2. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤})  <!  DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤} <: DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | | | | OK  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤} <: #KS<Object,K>{}
//│ | | | | | | | | | | 2. C K[‘L542'] <! {A: mut A175_557''..A175_558''}    (2)
//│ | | | | | | | | | | | Assigning T :: T172' := ‘L542' where 
//│ | | | | | | | | | | | Set T172_575' ~> T172'
//│ | | | | | | | | | | | Assigned Some(‘L542')
//│ | | | | | | | | | | | Assigning A :: A175' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | Set A175_576 ~> A175'
//│ | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | 2. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤})  <!  DNF(2, {A: mut A175_557''..A175_558''})
//│ | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤} <: DNF(2, {A: mut A175_557''..A175_558''})
//│ | | | | | | | | | | | | Possible: List({A: mut A175_557''..A175_558''})
//│ | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤}  %  List()  <!  List({A: mut A175_557''..A175_558''})  %  ⊥
//│ | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤}  %  List()  <!  List()  %  {A:mut A175_557''..A175_558''}
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤}  %  List()  <!  List()  %  |{A:mut A175_557''..A175_558''}
//│ | | | | | | | | | | | | | | | Looking up field A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | Lookup KS.A : Some(mut A175'..A175') where 
//│ | | | | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | | | | Fresh[0] KS.A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | | | | 2. C ⊥..⊤ <! A175_558''    (2)
//│ | | | | | | | | | | | | | | | | 2. C ⊤ <! A175_558''    (4)
//│ | | | | | | | | | | | | | | | | | NEW A175_558'' LB (0)
//│ | | | | | | | | | | | | | | | | | 2. C ⊤ <! ((A175_544' | ‘A546'') | ~(⊤(‘A559''')))    (6)
//│ | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, )  <!  DNF(2, A175_544' | {}∧‘A546'' | ~(⊤(‘A559''')))
//│ | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(2, A175_544' | {}∧‘A546'' | ~(⊤(‘A559''')))
//│ | | | | | | | | | | | | | | | | | | | Possible: List(A175_544', {}∧‘A546'', ~(⊤(‘A559''')))
//│ | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(A175_544', ‘A546'', ~(⊤(‘A559''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(‘A546'', ~(⊤(‘A559''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(~(⊤(‘A559''')))  %  ‘A546''
//│ | | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List(⊤(‘A559'''))  <!  List()  %  ‘A546''
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A559''')  %  List()  <!  List()  %  ‘A546''
//│ | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A559''') & ~(‘A546'')) <! A175_544'    (5)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] (⊤(‘A559''') & ~(‘A546'')) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ⊤(‘A559''') || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A559''')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ~(‘A546'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A546'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A546'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | => ~(⊥(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | => (⊤(‘A559''') & ~(⊥(‘A546'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (⊤(‘A559''') & ~(⊥(‘A546'')))  to 1
//│ | | | | | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A559''') & ~(⊥(‘A546''))) <! A175_544'    (5)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A175_544' LB (0)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A559''') & ~(⊥(‘A546''))) <! A175_545'    (7)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A175_545' LB (0)
//│ | | | | | | | | | | | | | | | 2. C A175_557'' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | | | | 2. C A175_557'' <! ⊥    (4)
//│ | | | | | | | | | | | | | | | | | NEW A175_557'' UB (0)
//│ | | | | | | | | | | | | | | | | | 2. C (‘A546'' & A175_545') <! ⊥    (6)
//│ | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(2, {}∧‘A546''∧A175_545')  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | 2. C A175_545' <! ~(‘A546'')    (8)
//│ | | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | | EXTR[-] ~(‘A546'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A546'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A546'')
//│ | | | | | | | | | | | | | | | | | | | | => ~(⊤(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  ~(⊤(‘A546''))  to 1
//│ | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | 2. C A175_545' <! ~(⊤(‘A546''))    (8)
//│ | | | | | | | | | | | | | | | | | | | | | NEW A175_545' UB (0)
//│ | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A559''') & ~(⊥(‘A546''))) <! ~(⊤(‘A546''))    (10)
//│ | | | | | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, {}∧⊤(‘A559''')∧~(⊥(‘A546'')))  <!  DNF(0, ~(⊤(‘A546'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | Consider {}∧⊤(‘A559''') <: DNF(0, ~(⊤(‘A546'')) | {}∧⊥(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | | | | | Possible: List(~(⊤(‘A546'')), {}∧⊥(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A559''')  %  List()  <!  List(~(⊤(‘A546'')), ⊥(‘A546''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A559''')  %  List(⊤(‘A546''))  <!  List(⊥(‘A546''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A546'')∧⊤(‘A559''')  %  List()  <!  List(⊥(‘A546''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A546'')∧⊤(‘A559''')  %  List()  <!  List()  %  ⊥(‘A546'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A546''), ⊤(‘A559''')) List(⊥(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (⊤(‘A559''') & ~(⊥(‘A546''))) <: ~(⊤(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | normLike[-] ~(⊤(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] ~(⊤(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, ~(⊤(‘A546'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤(‘A546'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> ⊤(‘A546'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> ~(⊤(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | normLike[+] (⊤(‘A559''') & ~(⊥(‘A546'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] (⊤(‘A559''') & ~(⊥(‘A546'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A559''')∧~(⊥(‘A546'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> (⊤(‘A559''') & ~(⊥(‘A546'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | CONSTRAIN #error<> <! α560''
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | |   where 
//│ 		α560'' :> Int
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C #error<> <! α560''    (0)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW α560'' LB (0)
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.192: 	  if l is KS(e1) and r is KS(e2) then sig(e1, e2)
//│ ║         	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `??A & ~??A0` does not match type `~??A1`
//│ | | | | | | | | 2. : α560''
//│ | | | | | | | 2. : α560''
//│ | | | | | | 2. : α560''
//│ | | | | | | CONSTRAIN α560'' <! α547'
//│ | | | | | |   where 
//│ 		α560'' :> #error<> | Int
//│ | | | | | | 2. C α560'' <! α547'    (0)
//│ | | | | | | | NEW α560'' UB (1)
//│ | | | | | | | 2. C #error<> <! α547'    (2)
//│ | | | | | | | | NEW α547' LB (0)
//│ | | | | | | | 2. C Int <! α547'    (2)
//│ | | | | | | | | NEW α547' LB (0)
//│ | | | | | | finishing branch: [(#KS<Object,K>,{A: mut A175_544'..A175_545'})] + List() and [α547'] | ⊥
//│ | | | | | | finishing case K[‘L542'] <: (#KS<Object,K> & {A: mut A175_544'..A175_545'})
//│ | | | | | | CONSTRAIN K[‘L542'] <! (#KS<Object,K> & {A: mut A175_544'..A175_545'})
//│ | | | | | |   where 
//│ 		A175_544' :> (⊤(‘A559''') & ~(⊥(‘A546''))) <: A175_545'
//│ 		A175_545' :> (⊤(‘A559''') & ~(⊥(‘A546''))) <: ~(⊤(‘A546''))
//│ | | | | | | 1. C K[‘L542'] <! (#KS<Object,K> & {A: mut A175_544'..A175_545'})    (0)
//│ | | | | | | | 1. C K[‘L542'] <! #KS<Object,K>    (2)
//│ | | | | | | | | Assigning T :: T172' := ‘L542' where 
//│ | | | | | | | | Set T172_581' ~> T172'
//│ | | | | | | | | Assigned Some(‘L542')
//│ | | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L542'..‘L542'}) <! #KS<Object,K>    (4)
//│ | | | | | | | | | Assigning A :: A175' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | Set A175_582 ~> A175'
//│ | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | 1. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤})  <!  DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤} <: DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | OK  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤} <: #KS<Object,K>{}
//│ | | | | | | | 1. C K[‘L542'] <! {A: mut A175_544'..A175_545'}    (2)
//│ | | | | | | | | Assigning T :: T172' := ‘L542' where 
//│ | | | | | | | | Set T172_583' ~> T172'
//│ | | | | | | | | Assigned Some(‘L542')
//│ | | | | | | | | Assigning A :: A175' := ? :> ⊥ <: ⊤
//│ | | | | | | | | Set A175_584 ~> A175'
//│ | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | 1. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤})  <!  DNF(1, {A: mut A175_544'..A175_545'})
//│ | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤} <: DNF(1, {A: mut A175_544'..A175_545'})
//│ | | | | | | | | | Possible: List({A: mut A175_544'..A175_545'})
//│ | | | | | | | | | 1. A  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤}  %  List()  <!  List({A: mut A175_544'..A175_545'})  %  ⊥
//│ | | | | | | | | | | 1. A  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤}  %  List()  <!  List()  %  {A:mut A175_544'..A175_545'}
//│ | | | | | | | | | | | 1. A  #KS<Object,K>{T: mut ‘L542'..‘L542', A: mut ..⊤}  %  List()  <!  List()  %  |{A:mut A175_544'..A175_545'}
//│ | | | | | | | | | | | | Looking up field A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | Lookup KS.A : Some(mut A175'..A175') where 
//│ | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | Fresh[0] KS.A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | 1. C ⊥..⊤ <! A175_545'    (2)
//│ | | | | | | | | | | | | | 1. C ⊤ <! A175_545'    (4)
//│ | | | | | | | | | | | | | | NEW A175_545' LB (0)
//│ | | | | | | | | | | | | | | 1. C ⊤ <! ~(⊤(‘A546''))    (6)
//│ | | | | | | | | | | | | | | | 1. ARGH  DNF(0, )  <!  DNF(0, ~(⊤(‘A546'')))
//│ | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(0, ~(⊤(‘A546'')))
//│ | | | | | | | | | | | | | | | | Possible: List(~(⊤(‘A546'')))
//│ | | | | | | | | | | | | | | | | 1. A  ⊤  %  List()  <!  List(~(⊤(‘A546'')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | 1. A  ⊤  %  List(⊤(‘A546''))  <!  List()  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A546'')  %  List()  <!  List()  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: ⊤ <: ~(⊤(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | normLike[-] ~(⊤(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | | norm[-] ~(⊤(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, ~(⊤(‘A546'')))
//│ | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤(‘A546'')
//│ | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | | | ~> ⊤(‘A546'')
//│ | | | | | | | | | | | | | | | | | | | | ~> ~(⊤(‘A546''))
//│ | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | normLike[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | norm[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | | ~> ⊤
//│ | | | | | | | | | | | | | | | | | | | CONSTRAIN #error<> <! α547'
//│ | | | | | | | | | | | | | | | | | | |   where 
//│ 		α547' :> Int | #error<>
//│ | | | | | | | | | | | | | | | | | | | 1. C #error<> <! α547'    (0)
//│ | | | | | | | | | | | | | | | | | | | | NEW α547' LB (0)
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.192: 	  if l is KS(e1) and r is KS(e2) then sig(e1, e2)
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `~??A`
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.118: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ | | | | | | | | | | | | 1. C A175_544' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | 1. C A175_544' <! ⊥    (4)
//│ | | | | | | | | | | | | | | NEW A175_544' UB (0)
//│ | | | | | | | | | | | | | | 1. C (⊤(‘A559''') & ~(⊥(‘A546''))) <! ⊥    (6)
//│ | | | | | | | | | | | | | | | 1. ARGH  DNF(0, {}∧⊤(‘A559''')∧~(⊥(‘A546'')))  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | Consider {}∧⊤(‘A559''') <: DNF(0, {}∧⊥(‘A546''))
//│ | | | | | | | | | | | | | | | | Possible: List({}∧⊥(‘A546''))
//│ | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A559''')  %  List()  <!  List(⊥(‘A546''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A559''')  %  List()  <!  List()  %  ⊥(‘A546'')
//│ | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A559''')) List(⊥(‘A546''))
//│ | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (⊤(‘A559''') & ~(⊥(‘A546''))) <: ⊥
//│ | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | normLike[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | normLike[+] (⊤(‘A559''') & ~(⊥(‘A546'')))
//│ | | | | | | | | | | | | | | | | | | | norm[+] (⊤(‘A559''') & ~(⊥(‘A546'')))
//│ | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A559''')∧~(⊥(‘A546'')))
//│ | | | | | | | | | | | | | | | | | | | ~> (⊤(‘A559''') & ~(⊥(‘A546'')))
//│ | | | | | 1. : α547'
//│ | | | | 1. : α547'
//│ | | | 1. : α547'
//│ | | 1. : ((l: K[‘L542'], r: K[‘L542'],) -> α547')
//│ | | CONSTRAIN ((l: K[‘L542'], r: K[‘L542'],) -> α547') <! fr585'
//│ | |   where 
//│ 		α547' :> #error<> | Int | #error<>
//│ | | 1. C ((l: K[‘L542'], r: K[‘L542'],) -> α547') <! fr585'    (0)
//│ | | | NEW fr585' LB (1)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(sig),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),None)))))),((l: K[‘L542'], r: K[‘L542'],) -> α547')) where 
//│ 		α547' :> #error<> | Int | #error<>
//│ | Typing unit statements
//│ | : None
//│ ======== TYPED ========
//│ fun fr: ‹∀ 0. ((l: K[‘L542'], r: K[‘L542'],) -> α547')› where 
//│ |		α547' :> #error<> | Int | #error<>
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> (Int | error)




// :e
// fun fr[L](l: K[L], r: K[L]) =
//   if l is KS(e1) and r is KS(e2) then [e1, e2] : [K[L], K[L]] else 0










// * TODO investigate: 'L0 :> ??A <: ??A0 bad bounds?
// :d
// :e
fun fr[L](l: K[L]) = if l is KS(e1) then () => (e1 as K['X])
//│ fun fr: forall 'L. (l: K['L]) -> () -> K[?]

// Doesn't happen here:
fun fr[L](l: K[L]) = if l is KS(e1) then (e1 as K['X])
//│ fun fr: forall 'L. (l: K['L]) -> K[?]

// ~~Doesn't happen~~ happens here:
// :e
fun fr[L](l: K[L]) = if l is KS(e1) then () => (e1 as K[l.A])
//│ fun fr: forall 'L. (l: K['L]) -> () -> K[out ??A]




// :d
:e
fun fr[L](l: K[L]) = if l is KS(e1) then (e1 as K[S['X]])
//│ ╔══[ERROR] Type `??A` does not contain member `P`
//│ ║  l.9: 	class S[type P]
//│ ╙──     	             ^
//│ fun fr: forall 'L. (l: K['L]) -> (K[S[error]] | error)

fun fr[L](l: K[L]) = if l is KS(e1) then (e1 as K[l.A])
//│ fun fr: forall 'L. (l: K['L]) -> K[out ??A]




