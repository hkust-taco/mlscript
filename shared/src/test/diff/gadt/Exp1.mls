:NewDefs


class Exp[A]: Pair | Lit
class Lit(n: Int) extends Exp[Int]
class Pair[L, R](lhs: L, rhs: R) extends Exp[(L, R)]
//│ class Exp[A]: Lit | Pair[anything, anything]
//│ class Lit(n: Int) extends Exp
//│ class Pair[L, R](lhs: L, rhs: R) extends Exp


fun f(p: Pair['a, 'b]) = p.lhs
//│ fun f: forall 'a 'b. (p: Pair['a, 'b],) -> 'a


fun f(e) = if e is
  Pair(l, r) then [l, r]
//│ fun f: forall 'lhs 'rhs. Pair['lhs, 'rhs] -> ('lhs, 'rhs,)
// f: (Exp['a] & Pair) -> 0


fun f(e) = if e is
  Pair(l, r) then [l, r]
  Lit(n) then n
//│ fun f: forall 'lhs 'rhs. (Lit | Pair['lhs, 'rhs]) -> (('lhs, 'rhs,) | Int)

(e: Exp['X]) => f(e)
//│ (e: Exp['X],) -> ((??L, ??R,) | Int)
//│ res
//│     = [Function: res]


:e // TODO support
fun f(e) = if e is
  Pair['a, 'b](l, r) then [l, r]
//│ ╔══[ERROR] illegal pattern
//│ ║  l.35: 	  Pair['a, 'b](l, r) then [l, r]
//│ ╙──      	  ^^^^^^^^^^^^^^^^^^
//│ fun f: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared


:e // TODO support
fun f(e) = if e is
  Pair(l: a, r) then
    fun f(x: a) = x
    f(l)
//│ ╔══[ERROR] type identifier not found: a
//│ ║  l.47: 	    fun f(x: a) = x
//│ ╙──      	             ^
//│ ╔══[ERROR] identifier not found: l
//│ ║  l.48: 	    f(l)
//│ ╙──      	      ^
//│ fun f: Pair[anything, anything] -> error
//│ Code generation encountered an error:
//│   unresolved symbol l
// fun f: forall 'lhs 'rhs. Pair['lhs, 'rhs] -> ('lhs, 'rhs,)



