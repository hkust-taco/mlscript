:NewDefs


abstract class Exp[A]: Pair | Lit
class Lit(n: Int) extends Exp[Int]
class Pair[L, R](val lhs: L, val rhs: R) extends Exp[[L, R]]
//│ abstract class Exp[A]: Lit | Pair[anything, anything]
//│ class Lit(n: Int) extends Exp
//│ class Pair[L, R](lhs: L, rhs: R) extends Exp


fun f(p: Pair['a, 'b]) = p.lhs
//│ fun f: forall 'a 'b. (p: Pair['a, 'b]) -> 'a


fun f(e) = if e is
  Pair(l, r) then [l, r]
//│ fun f: forall 'L 'R. Pair['L, 'R] -> [??L & 'L, ??R & 'R]
// f: (Exp['a] & Pair) -> 0


fun f(e) = if e is
  Pair(l, r) then [l, r]
  Lit(n) then n
//│ fun f: forall 'L 'R. (Lit | Pair['L, 'R]) -> (Int | [??L & 'L, ??R & 'R])

(e: Exp['X]) => f(e)
//│ forall 'X. (e: Exp['X]) -> (Int | [??L & ??L0, ??R & ??R0])
//│ res
//│     = [Function: res]


:e // TODO support
fun f(e) = if e is
  Pair['a, 'b](l, r) then [l, r]
//│ ╔══[ERROR] illegal pattern
//│ ║  l.35: 	  Pair['a, 'b](l, r) then [l, r]
//│ ╙──      	  ^^^^^^^^^^^^^^^^^^
//│ fun f: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared


:e // TODO support
fun f(e) = if e is
  Pair(l: a, r) then
    let f(x: a) = x
    f(l)
//│ ╔══[ERROR] identifier not found: l
//│ ║  l.48: 	    f(l)
//│ ╙──      	      ^
//│ fun f: forall 'L. Pair['L, anything] -> (error | ??L & 'L)
//│ Code generation encountered an error:
//│   unresolved symbol l
// fun f: forall 'lhs 'rhs. Pair['lhs, 'rhs] -> ('lhs, 'rhs,)



