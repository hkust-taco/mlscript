:NewDefs



// * Variant:

abstract class Exp[out A]: Pair | Lit
class Lit(val n: Int) extends Exp[Int]
class Pair[out L, out R](val lhs: Exp[L], val rhs: Exp[R]) extends Exp[[L, R]]
//│ abstract class Exp[A]: Lit | Pair[anything, anything]
//│ class Lit(n: Int) extends Exp
//│ class Pair[L, R](lhs: Exp[L], rhs: Exp[R]) extends Exp


fun f(p: Pair['a, 'b]) = p.lhs
//│ fun f: forall 'a. (p: Pair['a, anything]) -> Exp['a]

fun f(e) = if e is
  Pair(l, r) then [l, r]
//│ fun f: forall 'L 'R. Pair['L, 'R] -> [Exp[??L & 'L], Exp[??R & 'R]]
// f: (Exp['a] & Pair) -> 0

fun f(e) = if e is
  Pair(l, r) then [l, r]
  Lit(n) then n
//│ fun f: forall 'L 'R. (Lit | Pair['L, 'R]) -> (Int | [Exp[??L & 'L], Exp[??R & 'R]])

(e: Exp['X]) => f(e)
//│ (e: Exp[anything]) -> (Int | [Exp[??L & ??L0], Exp[??R & ??R0]])
//│ res
//│     = [Function: res]

fun f(e) = if e is
  Pair(l, r) then f(l) + f(r)
  Lit(n) then n
//│ fun f: (Lit | Pair[anything, anything]) -> Int


// * Invariant:

abstract class Exp[A]: Pair[?, ?] | Lit
class Lit(val n: Int) extends Exp[Int]
class Pair[L, R](val lhs: Exp[L], val rhs: Exp[R]) extends Exp[[L, R]]
//│ abstract class Exp[A]: Lit | Pair[?, ?]
//│ class Lit(n: Int) extends Exp
//│ class Pair[L, R](lhs: Exp[L], rhs: Exp[R]) extends Exp


fun f(p: Pair['a, 'b]) = p.lhs
//│ fun f: forall 'a 'b. (p: Pair['a, 'b]) -> Exp['a]

fun f(e) = if e is
  Pair(l, r) then [l, r]
//│ fun f: forall 'L 'L0 'R 'R0. Pair[in 'L out 'L0, in 'R out 'R0] -> [Exp[in 'L & 'L0 out ??L & 'L0], Exp[in 'R & 'R0 out ??R & 'R0]]
// f: (Exp['a] & Pair) -> 0

fun f(e) = if e is
  Pair(l, r) then [l, r]
  Lit(n) then n
//│ fun f: forall 'L 'L0 'R 'R0. (Lit | Pair[in 'L out 'L0, in 'R out 'R0]) -> (Int | [Exp[in 'L & 'L0 out ??L & 'L0], Exp[in 'R & 'R0 out ??R & 'R0]])

// :e
(e: Exp['X]) => f(e)
//│ forall 'X. (e: Exp['X]) -> (Int | [Exp[out ??L], Exp[out ??R]])
//│ res
//│     = [Function: res]

fun f(e) = if e is
  Pair(l, r) then f(l) + f(r)
  Lit(n) then n
//│ fun f: (Lit | Pair[?, ?]) -> Int

f(Pair(Pair(Lit(1), Lit(2)), Lit(3)))
//│ Int
//│ res
//│     = 6
