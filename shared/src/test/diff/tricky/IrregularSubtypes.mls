:IrregularTypes


type Foo[A] = A -> Foo[Foo[A]]
//│ Defined type alias Foo[=A]

type Bar[A] = A -> Bar[Bar[A]]
//│ Defined type alias Bar[=A]


:e
error: Foo[int]: Bar[int]
//│ ╔══[ERROR] Subtyping constraint of the form `Foo[int] <: Bar[int]` exceeded recursion depth limit (250)
//│ ║  l.12: 	error: Foo[int]: Bar[int]
//│ ║        	^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: Bar[int]
//│    Runtime error:
//│      Error: an error was thrown


// * Interestingly, this is caught by the cycle checker when rectypes are disabled:
:NoRecursiveTypes

:e
error: Foo[int]: Bar[int]
//│ ╔══[ERROR] Cyclic-looking constraint while typing type ascription; a type annotation may be required
//│ ║  l.26: 	error: Foo[int]: Bar[int]
//│ ║        	^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: Bar[int]
//│    Runtime error:
//│      Error: an error was thrown


