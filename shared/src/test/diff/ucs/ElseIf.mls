:NewParser
:NewDefs



fun f(x, y) = if x ==
    0 then true
    1 then false
  else if y ==
    0 then true
    1 then false
  else false
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.6: 	fun f(x, y) = if x ==
//│ ║       	                 ^^^^
//│ ║  l.7: 	    0 then true
//│ ║       	^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `number`
//│ ║  l.7: 	    0 then true
//│ ╙──     	    ^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.6: 	fun f(x, y) = if x ==
//│ ║       	                 ^^^^
//│ ║  l.7: 	    0 then true
//│ ║       	^^^^^^^^^^^^^^^
//│ ║  l.8: 	    1 then false
//│ ║       	^^^^^^^^^^^^^^^^
//│ ║  l.9: 	  else if y ==
//│ ║       	^^^^^^^^^^^^^^
//│ ║  l.10: 	    0 then true
//│ ║        	^^^^^^^^^^^^^^^
//│ ║  l.11: 	    1 then false
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.12: 	  else false
//│ ║        	^^^^^^^^^^^^
//│ ╟── operator application of type `bool` is not an instance of type `Object`
//│ ║  l.6: 	fun f(x, y) = if x ==
//│ ║       	                 ^^^^
//│ ║  l.7: 	    0 then true
//│ ╙──     	^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.6: 	fun f(x, y) = if x ==
//│ ║       	                 ^^^^
//│ ║  l.7: 	    0 then true
//│ ║       	^^^^^^^^^^^^^^^
//│ ║  l.8: 	    1 then false
//│ ║       	^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `number`
//│ ║  l.8: 	    1 then false
//│ ╙──     	    ^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.6: 	fun f(x, y) = if x ==
//│ ║       	                 ^^^^
//│ ║  l.7: 	    0 then true
//│ ║       	^^^^^^^^^^^^^^^
//│ ║  l.8: 	    1 then false
//│ ║       	^^^^^^^^^^^^^^^^
//│ ║  l.9: 	  else if y ==
//│ ║       	^^^^^^^^^^^^^^
//│ ║  l.10: 	    0 then true
//│ ║        	^^^^^^^^^^^^^^^
//│ ║  l.11: 	    1 then false
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.12: 	  else false
//│ ║        	^^^^^^^^^^^^
//│ ╟── operator application of type `bool` is not an instance of type `Object`
//│ ║  l.6: 	fun f(x, y) = if x ==
//│ ║       	                 ^^^^
//│ ║  l.7: 	    0 then true
//│ ║       	^^^^^^^^^^^^^^^
//│ ║  l.8: 	    1 then false
//│ ╙──     	^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.9: 	  else if y ==
//│ ║       	          ^^^^
//│ ║  l.10: 	    0 then true
//│ ║        	^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `number`
//│ ║  l.10: 	    0 then true
//│ ╙──      	    ^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.9: 	  else if y ==
//│ ║       	          ^^^^
//│ ║  l.10: 	    0 then true
//│ ║        	^^^^^^^^^^^^^^^
//│ ║  l.11: 	    1 then false
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.12: 	  else false
//│ ║        	^^^^^^^^^^^^
//│ ╟── operator application of type `bool` is not an instance of type `Object`
//│ ║  l.9: 	  else if y ==
//│ ║       	          ^^^^
//│ ║  l.10: 	    0 then true
//│ ╙──      	^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.9: 	  else if y ==
//│ ║       	          ^^^^
//│ ║  l.10: 	    0 then true
//│ ║        	^^^^^^^^^^^^^^^
//│ ║  l.11: 	    1 then false
//│ ║        	^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `number`
//│ ║  l.11: 	    1 then false
//│ ╙──      	    ^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.9: 	  else if y ==
//│ ║       	          ^^^^
//│ ║  l.10: 	    0 then true
//│ ║        	^^^^^^^^^^^^^^^
//│ ║  l.11: 	    1 then false
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.12: 	  else false
//│ ║        	^^^^^^^^^^^^
//│ ╟── operator application of type `bool` is not an instance of type `Object`
//│ ║  l.9: 	  else if y ==
//│ ║       	          ^^^^
//│ ║  l.10: 	    0 then true
//│ ║        	^^^^^^^^^^^^^^^
//│ ║  l.11: 	    1 then false
//│ ╙──      	^^^^^
//│ fun f: (number, number,) -> bool

fun f(x, y) = if x ==
    0 then true
    1 then false
  else if y ==
    0 then true
    _ then false
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.123: 	fun f(x, y) = if x ==
//│ ║         	                 ^^^^
//│ ║  l.124: 	    0 then true
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `number`
//│ ║  l.124: 	    0 then true
//│ ╙──       	    ^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.123: 	fun f(x, y) = if x ==
//│ ║         	                 ^^^^
//│ ║  l.124: 	    0 then true
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.125: 	    1 then false
//│ ║         	^^^^^^^^^^^^^^^^
//│ ║  l.126: 	  else if y ==
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.127: 	    0 then true
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.128: 	    _ then false
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `bool` is not an instance of type `Object`
//│ ║  l.123: 	fun f(x, y) = if x ==
//│ ║         	                 ^^^^
//│ ║  l.124: 	    0 then true
//│ ╙──       	^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.123: 	fun f(x, y) = if x ==
//│ ║         	                 ^^^^
//│ ║  l.124: 	    0 then true
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.125: 	    1 then false
//│ ║         	^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `number`
//│ ║  l.125: 	    1 then false
//│ ╙──       	    ^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.123: 	fun f(x, y) = if x ==
//│ ║         	                 ^^^^
//│ ║  l.124: 	    0 then true
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.125: 	    1 then false
//│ ║         	^^^^^^^^^^^^^^^^
//│ ║  l.126: 	  else if y ==
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.127: 	    0 then true
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.128: 	    _ then false
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `bool` is not an instance of type `Object`
//│ ║  l.123: 	fun f(x, y) = if x ==
//│ ║         	                 ^^^^
//│ ║  l.124: 	    0 then true
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.125: 	    1 then false
//│ ╙──       	^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.126: 	  else if y ==
//│ ║         	          ^^^^
//│ ║  l.127: 	    0 then true
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `number`
//│ ║  l.127: 	    0 then true
//│ ╙──       	    ^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.126: 	  else if y ==
//│ ║         	          ^^^^
//│ ║  l.127: 	    0 then true
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.128: 	    _ then false
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `bool` is not an instance of type `Object`
//│ ║  l.126: 	  else if y ==
//│ ║         	          ^^^^
//│ ║  l.127: 	    0 then true
//│ ╙──       	^^^^^
//│ fun f: (number, number,) -> bool



// TODO use real booleans
module True
module False
//│ module True()
//│ module False()


:e
:ge
fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.219: 	    True and y is True then true
//│ ║         	             ^^^^^^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.219: 	    True and y is True then true
//│ ║         	             ^
//│ ╙── [Missing Case 1/1] `False`
//│ fun f: (anything, anything,) -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
    True and y is False then true
    False and y is True then true
//│ fun f: (False | True, False | True,) -> bool

// FIXME
fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
    _ and y is
      True then true
      False then false
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.241: 	    True and y is True then true
//│ ║         	             ^^^^^^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.241: 	    True and y is True then true
//│ ║         	             ^
//│ ╙── [Missing Case 1/1] `False`
//│ fun f: (anything, anything,) -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

// TODO support `else if`
fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
  else if y is
    True then true
    False then false
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.259: 	    True and y is True then true
//│ ║         	             ^^^^^^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.259: 	    True and y is True then true
//│ ║         	             ^
//│ ╙── [Missing Case 1/1] `False`
//│ fun f: (anything, anything,) -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

// TODO support `else if`
fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
  else if y is
    True and x is False then true
    False and x is True then false
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.277: 	    True and y is True then true
//│ ║         	             ^^^^^^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.277: 	    True and y is True then true
//│ ║         	             ^
//│ ╙── [Missing Case 1/1] `False`
//│ fun f: (anything, anything,) -> error
//│ Code generation encountered an error:
//│   if expression was not desugared



