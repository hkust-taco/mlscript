:NewParser
:NewDefs



fun f(x, y) = if x ==
    0 then true
    1 then false
  else if y ==
    0 then true
    1 then false
  else false
//│ fun f: (#Num, #Num,) -> (False | True)

fun f(x, y) = if x ==
    0 then true
    1 then false
  else if y ==
    0 then true
    _ then false
//│ fun f: (#Num, #Num,) -> (False | True)

module True
module False
//│ module True
//│ module False

:e
:ge
fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.31: 	    True and y is True then true
//│ ║        	             ^^^^^^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.31: 	    True and y is True then true
//│ ║        	             ^
//│ ╟── [Missing Case 1/1] `False`
//│ ╟── It first appears here.
//│ ║  l.32: 	    False and y is False then false
//│ ╙──      	                   ^^^^^
//│ fun f: (anything, anything,) -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

// The base case.
fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
    True and y is False then true
    False and y is True then true
//│ fun f: (False | True, False | True,) -> (False | True)

// Replace the `x is False` with `_`
fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
    _ and y is
      True then true
      False then false
//│ fun f: (#Object, False | True,) -> (False | True)

f(True, True)
f(True, False)
f(False, True)
f(False, False)
//│ False | True
//│ res
//│     = true
//│ res
//│     = false
//│ res
//│     = true
//│ res
//│     = false

// Test with real booleans
fun g(x, y) = if x is
  true and y is true then true
  false and y is false then false
  _ and y is
    true then true
    false then false
//│ fun g: (#Object, nothing,) -> (False | True)

// Chained UCS terms
fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
  else if y is
    True then true
    False then false
//│ fun f: (#Object, False | True,) -> (False | True)

fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
  else if y is
    True and x is False then true
    False and x is True then false
//│ fun f: (False | True, False | True,) -> (False | True)

fun h(x, y, p) = if
  x and p(x) then 0
  y is
    True then 1
    False then 2
//│ fun h: (#Object, False | True, true -> #Object,) -> (0 | 1 | 2)
