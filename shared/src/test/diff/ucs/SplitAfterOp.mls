:NewParser

:e
:ge
fun f(x, b) =
  if x == 
    0 and b then 0
//│ ╔══[ERROR] The case when this is false is not handled: == (x,) (0,)
//│ ║  l.6: 	  if x == 
//│ ║       	     ^^^^^
//│ ║  l.7: 	    0 and b then 0
//│ ╙──     	^^^^^^
//│ f: (anything, anything,) -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

:e
:ge
if x == y +
  5 then 0
  7 then 0
//│ ╔══[ERROR] The case when this is false is not handled: + (== (x,) (y,),) (7,)
//│ ║  l.19: 	if x == y +
//│ ║        	   ^^^^^^^^
//│ ║  l.20: 	  5 then 0
//│ ║        	^^^^^^^^^^
//│ ║  l.21: 	  7 then 0
//│ ╙──      	^^^^
//│ res: error
//│ Code generation encountered an error:
//│   if expression was not desugared

:e
:ge
if x == y *
  5 then 0
  6 + 7 then 0
//│ ╔══[ERROR] The case when this is false is not handled: * (== (x,) (y,),) (+ (6,) (7,),)
//│ ║  l.35: 	if x == y *
//│ ║        	   ^^^^^^^^
//│ ║  l.36: 	  5 then 0
//│ ║        	^^^^^^^^^^
//│ ║  l.37: 	  6 + 7 then 0
//│ ╙──      	^^^^^^^
//│ res: error
//│ Code generation encountered an error:
//│   if expression was not desugared

:e
:ge
if x ==
  y +
    5 then 0
    7 then 0
//│ ╔══[ERROR] The case when this is false is not handled: + (== (x,) (y,),) (7,)
//│ ║  l.51: 	if x ==
//│ ║        	   ^^^^
//│ ║  l.52: 	  y +
//│ ║        	^^^^^
//│ ║  l.53: 	    5 then 0
//│ ║        	^^^^^^^^^^^^
//│ ║  l.54: 	    7 then 0
//│ ╙──      	^^^^^
//│ res: error
//│ Code generation encountered an error:
//│   if expression was not desugared

:e
:ge
if x ==
  1 and b then 0
//│ ╔══[ERROR] The case when this is false is not handled: == (x,) (1,)
//│ ║  l.70: 	if x ==
//│ ║        	   ^^^^
//│ ║  l.71: 	  1 and b then 0
//│ ╙──      	^^^^
//│ res: error
//│ Code generation encountered an error:
//│   if expression was not desugared


:e
:ge
fun toEnglish(x) =
  if x ==
    true then "t"
    0 then "z"
//│ ╔══[ERROR] The case when this is false is not handled: == (x,) (0,)
//│ ║  l.85: 	  if x ==
//│ ║        	     ^^^^
//│ ║  l.86: 	    true then "t"
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.87: 	    0 then "z"
//│ ╙──      	^^^^^^
//│ toEnglish: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

:e
:ge
fun toEnglish(x) =
  if x ==
    0 then "z"
    true then "t"
//│ ╔══[ERROR] The case when this is false is not handled: == (x,) (true,)
//│ ║  l.102: 	  if x ==
//│ ║         	     ^^^^
//│ ║  l.103: 	    0 then "z"
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.104: 	    true then "t"
//│ ╙──       	^^^^^^^^
//│ toEnglish: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

:e
:ge
fun toEnglish(x) =
  if x ==
    1 then "o"
    0 then "z"
//│ ╔══[ERROR] The case when this is false is not handled: == (x,) (0,)
//│ ║  l.119: 	  if x ==
//│ ║         	     ^^^^
//│ ║  l.120: 	    1 then "o"
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.121: 	    0 then "z"
//│ ╙──       	^^^^^^
//│ toEnglish: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

fun toEnglish(x) =
  if x ==
    0 then 1
    else 1
//│ toEnglish: number -> 1
//│          = [Function: toEnglish3]

:pe
:e
:ge
fun toEnglish(x) =
  if x ==
    else 1
//│ ╔══[PARSE ERROR] Unexpected indented block in expression position
//│ ║  l.145: 	    else 1
//│ ╙──       	^^^^
//│ ╔══[PARSE ERROR] Unexpected end of indented block; an expression was expected here
//│ ║  l.145: 	    else 1
//│ ╙──       	    ^
//│ ╔══[PARSE ERROR] Expected 'then'/'else' clause; found operator application instead
//│ ║  l.144: 	  if x ==
//│ ║         	     ^^^^
//│ ║  l.145: 	    else 1
//│ ║         	^^^^
//│ ╟── Note: 'if' expression started here:
//│ ║  l.144: 	  if x ==
//│ ╙──       	  ^^
//│ ╔══[ERROR] The case when this is false is not handled: == (x,) (undefined,)
//│ ║  l.144: 	  if x ==
//│ ║         	     ^^^^
//│ ║  l.145: 	    else 1
//│ ╙──       	^^^^
//│ toEnglish: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

