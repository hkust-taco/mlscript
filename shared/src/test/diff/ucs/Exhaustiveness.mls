:NewDefs
:NoJS

class A()
class B()
class C()
//│ class A()
//│ class B()
//│ class C()

:e
fun f(x, y) =
  if
    y is A and
      x is
        A then 0
        B then 1
        C then 2
    y is B and
      x is
        A then 4
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.20: 	      x is
//│ ║        	      ^^^^
//│ ╟── The scrutinee at this position misses 2 cases.
//│ ║  l.20: 	      x is
//│ ║        	      ^
//│ ╟── [Missing Case 1/2] `B`
//│ ╟── It first appears here.
//│ ║  l.17: 	        B then 1
//│ ║        	        ^
//│ ╟── [Missing Case 2/2] `C`
//│ ╟── It first appears here.
//│ ║  l.18: 	        C then 2
//│ ╙──      	        ^
//│ fun f: (anything, anything) -> error

:e
// These operators are uninterpreted. So, it's impossible to reason the
// exhaustiveness without SMT solvers.
type Tree[A] = Node[A] | Empty
module Empty {
  fun contains(wanted) = false
}
class Node[A](value: int, left: Tree[A], right: Tree[A]) {
  fun contains(wanted) = if wanted
    <= value then left.find(wanted)
    >= value then right.find(wanted)
    == value then true
}
//│ ╔══[ERROR] The case when this is false is not handled: ==(wanted, value,)
//│ ║  l.46: 	  fun contains(wanted) = if wanted
//│ ║        	                            ^^^^^^
//│ ║  l.47: 	    <= value then left.find(wanted)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.48: 	    >= value then right.find(wanted)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.49: 	    == value then true
//│ ╙──      	^^^^^^^^^^^^
//│ type Tree[A] = Empty | Node[A]
//│ module Empty {
//│   fun contains: anything -> false
//│ }
//│ class Node[A](value: int, left: Tree[A], right: Tree[A]) {
//│   fun contains: anything -> error
//│ }
