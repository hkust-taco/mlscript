:NewDefs

abstract class Option[A]: Some[A] | None
class Some[A](value: A) extends Option[A]
module None extends Option
//│ abstract class Option[A]: None | Some[A]
//│ class Some[A](value: A) extends Option
//│ module None extends Option

abstract class Either[out A, out B]: Left[A] | Right[B]
class Left[A](leftValue: A) extends Either[A, nothing]
class Right[B](rightValue: B) extends Either[nothing, B]
//│ abstract class Either[A, B]: Left[A] | Right[B]
//│ class Left[A](leftValue: A) extends Either
//│ class Right[B](rightValue: B) extends Either

:e
fun f(x, y) =
  if x is
    Left(xv) and y is Left(yv) then xv + yv
    Right(xv) and y is Right(yv) then xv * yv
    None and y is None then 0
//│ ╔══[ERROR] when `x` is `Left`
//│ ║  l.20: 	    Left(xv) and y is Left(yv) then xv + yv
//│ ║        	    ^^^^
//│ ╟── `y` has 2 missing cases
//│ ║  l.20: 	    Left(xv) and y is Left(yv) then xv + yv
//│ ║        	                 ^
//│ ╟── it can be module `None`
//│ ║  l.22: 	    None and y is None then 0
//│ ║        	                  ^^^^
//│ ╟── it can be class `Right`
//│ ║  l.21: 	    Right(xv) and y is Right(yv) then xv * yv
//│ ╙──      	                       ^^^^^
//│ ╔══[ERROR] when `x` is `Right`
//│ ║  l.21: 	    Right(xv) and y is Right(yv) then xv * yv
//│ ║        	    ^^^^^
//│ ╟── `y` has 2 missing cases
//│ ║  l.21: 	    Right(xv) and y is Right(yv) then xv * yv
//│ ║        	                  ^
//│ ╟── it can be class `Left`
//│ ║  l.20: 	    Left(xv) and y is Left(yv) then xv + yv
//│ ║        	                      ^^^^
//│ ╟── it can be module `None`
//│ ║  l.22: 	    None and y is None then 0
//│ ╙──      	                  ^^^^
//│ ╔══[ERROR] when `x` is `None`
//│ ║  l.22: 	    None and y is None then 0
//│ ║        	    ^^^^
//│ ╟── `y` has 2 missing cases
//│ ║  l.22: 	    None and y is None then 0
//│ ║        	             ^
//│ ╟── it can be class `Left`
//│ ║  l.20: 	    Left(xv) and y is Left(yv) then xv + yv
//│ ║        	                      ^^^^
//│ ╟── it can be class `Right`
//│ ║  l.21: 	    Right(xv) and y is Right(yv) then xv * yv
//│ ╙──      	                       ^^^^^
//│ fun f: (Left[Int] | None | Right[Int], nothing) -> Int

fun f(x, y) =
  if x is
    Left(xv) and y is Left(yv) then xv + yv
    None then 0
//│ fun f: (Left[Int] | None, Left[Int]) -> Int

fun f(x, y) =
  if x is
    Left(xv) and y is
      Left(yv) then xv + yv
      Right(yv) then xv * yv
    None then 0
//│ fun f: (Left[Int] | None, Left[Int] | Right[Int]) -> Int

fun f(x) =
  if x is
    Some(v) and
      v < 0 then "negative"
      v > 0 then "positive"
      _     then "zero"
    None then "nothing"
//│ fun f: (None | Some[Num]) -> ("negative" | "nothing" | "positive" | "zero")

fun f(x, y) =
  if x is
    Some(x) and y is
      Some(y) then 0
//│ fun f: (Some[anything], Some[anything]) -> 0

class A[T](value: T)
class B[T](value: T)
//│ class A[T](value: T)
//│ class B[T](value: T)

fun f(x, y, u, v) =
  if x is
    A(a) and y ==
      u then 0
      v then 1
    A(a) and y is
      B(0) then 0
      B(1) then 1
    A(_) then 99
//│ fun f: (A[anything], Num, Num, Num) -> (0 | 1 | 99)

fun f(x) =
  if x is
    A(_) then "A"
    B(_) then "B"
//│ fun f: (A[anything] | B[anything]) -> ("A" | "B")

:e
fun f(x, y) =
  if x is
    Some(xv) and y is Some(yv) then xv + yv
    None and y is None then 0
//│ ╔══[ERROR] when `x` is `Some`
//│ ║  l.115: 	    Some(xv) and y is Some(yv) then xv + yv
//│ ║         	    ^^^^
//│ ╟── `y` has 1 missing case
//│ ║  l.115: 	    Some(xv) and y is Some(yv) then xv + yv
//│ ║         	                 ^
//│ ╟── it can be module `None`
//│ ║  l.116: 	    None and y is None then 0
//│ ╙──       	                  ^^^^
//│ ╔══[ERROR] when `x` is `None`
//│ ║  l.116: 	    None and y is None then 0
//│ ║         	    ^^^^
//│ ╟── `y` has 1 missing case
//│ ║  l.116: 	    None and y is None then 0
//│ ║         	             ^
//│ ╟── it can be class `Some`
//│ ║  l.115: 	    Some(xv) and y is Some(yv) then xv + yv
//│ ╙──       	                      ^^^^
//│ fun f: (None | Some[Int], nothing) -> Int

:e
fun f(x, y) =
  if x is
    Some(xv) and y is
      Some(yv) then xv + yv
      None then xv * 2
    None and y is
      Some(yv) then yv * 3
//│ ╔══[ERROR] when `x` is `None`
//│ ║  l.143: 	    None and y is
//│ ║         	    ^^^^
//│ ╟── `y` has 1 missing case
//│ ║  l.143: 	    None and y is
//│ ║         	             ^
//│ ╟── it can be module `None`
//│ ║  l.142: 	      None then xv * 2
//│ ╙──       	      ^^^^
//│ fun f: (None | Some[Int], Some[Int]) -> Int

fun f(x, y) =
  if x is
    A and y is
      B then "bruh"
//│ fun f: (A[anything], B[anything]) -> "bruh"

fun f(x, y, z) =
  if x is
    A and z == 0 and y == 0 and y is
      B then "bruh"
    A then "oui"
//│ fun f: (A[anything], Num, Num) -> ("bruh" | "oui")

// We do need a syntax to specify default branch in IfOpsApp...
:e
fun f(x, y) =
  if x is
    Some(x) and y
      >  0 then "gt"
      <  0 then "le"
      == 0 then "eq"
//│ ╔══[ERROR] missing else branch
//│ ║  l.176: 	      == 0 then "eq"
//│ ╙──       	                ^^^^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.176: 	      == 0 then "eq"
//│ ║         	                ^^^^
//│ ╙── expression of type `Bool` is not an instance of type `true`
//│ fun f: (Some[anything], Num) -> ("eq" | "gt" | "le")

fun isValid(x) = if x then false else true
//│ fun isValid: Bool -> Bool

fun f(x, allowNone) =
  if x is
    Some(x) and isValid(x) then "good"
    None and allowNone then "okay"
    else "bad"
//│ fun f: (Object & ~#Some | Some[Bool], Bool) -> ("bad" | "good" | "okay")

fun f(x) =
  if x is
    None then "bruh"
    Some(x) then "roll"
    _ and x == 0 then 0
    _ then "rock"
//│ fun f: (None | Num | Some[anything]) -> ("bruh" | "rock" | "roll" | 0)

fun f(x, a, b) =
  if x is
    A(aa) and a then aa
    B(bb) and b then bb
    _           then 0
//│ fun f: forall 'a. (A['a] | B['a] | Object & ~#A & ~#B, Bool, Bool) -> (0 | 'a)

fun f(x, y, b) =
  if x is
    Some(xv) and y
      is Some(yv) then "bruh"
      is None then "bruh"
    Some(xv) and b then xv + b
    _ then "roll"
//│ fun f: (Object & ~#Some | Some[Int], Object & ~#Some | Some[anything], nothing) -> ("bruh" | "roll" | Int)

fun g(x, y, b) =
  if x is
    Some(xv) and y
      is Some(yv) then yv
      is None then "bruh"
    Some(xv) and b then xv + b
    _ then "roll"
//│ fun g: forall 'a. (Object & ~#Some | Some[Int], Object & ~#Some | Some['a], nothing) -> ("bruh" | "roll" | Int | 'a)

fun foo(x, y, z) =
  if x - y > 0 then Some(x + y + z) else None
//│ fun foo: forall 'A. (Int, Int, Int) -> (None | Some['A])
//│   where
//│     'A :> Int

// Uncomment this block to make the following block work.
// fun foo(x, y, z) =
//   if x - y > 0 then Some(
//     if x % 2 == 0 then Left(x) else Right(x)
//   ) else None

:e
fun f(u, v, w) =
  if foo(u, v, w) is
    Some(x) and x is
      Left(_) then "left-defined"
      Right(_) then "right-defined"
    None then "undefined"
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.244: 	    Some(x) and x is
//│ ║         	    ^^^^^^^^^^^^^^^^
//│ ║  l.245: 	      Left(_) then "left-defined"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.246: 	      Right(_) then "right-defined"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.247: 	    None then "undefined"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `Int` does not match type `Left[?A] | Right[?B]`
//│ ║  l.230: 	  if x - y > 0 then Some(x + y + z) else None
//│ ║         	                         ^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.244: 	    Some(x) and x is
//│ ║         	                ^
//│ ╟── from field selection:
//│ ║  l.4: 	class Some[A](value: A) extends Option[A]
//│ ║       	              ^^^^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.4: 	class Some[A](value: A) extends Option[A]
//│ ╙──     	           ^
//│ fun f: (Int, Int, Int) -> ("left-defined" | "right-defined" | "undefined")

fun p(x) = if x >= 0 then Right(x) else Left(x)
//│ fun p: forall 'B 'A. (Num & 'B & 'A) -> (Left['A] | Right['B])

fun g(a, b) =
  if p(a) is
    Left(x) and b is
      Some(y) then x + y
      None    then x * a
    Right(x) and b is
      Some(y) then x * y
      None    then x
//│ fun g: (Int, None | Some[Int]) -> Int

g(5, None)
g(5, Some(7))
g(0 - 5, None)
g(0 - 5, Some(9))
//│ Int
//│ res
//│     = 5
//│ res
//│     = 35
//│ res
//│     = 25
//│ res
//│     = 4

class Var(name: Str)
abstract class ValBase: (IntVal | BoolVal)
class IntVal(value: Int) extends ValBase
class BoolVal(value: Bool) extends ValBase
class Lit(value: ValBase)
//│ class Var(name: Str)
//│ abstract class ValBase: BoolVal | IntVal
//│ class IntVal(value: Int) extends ValBase
//│ class BoolVal(value: Bool) extends ValBase
//│ class Lit(value: ValBase)

fun p(e, context) =
  if e is
    Var(x) and context.get(x) is
      Some(IntVal(v)) then Left(v)
      Some(BoolVal(v)) then Right(v)
    Lit(IntVal(v)) then Left(v)
    Lit(BoolVal(v)) then Right(v)
//│ fun p: forall 'A 'B. (Lit | Var, {get: Str -> Some[BoolVal | IntVal]}) -> (Left[in 'A out Int | 'A] | Right[in 'B out Bool | 'B])

class Nil()
//│ class Nil()

// Support operator constructor like ::
:e
fun f(x) =
  if x is
    0 ::
      Nil() then "oh"
//│ ╔══[ERROR] Syntactic split of patterns are not supported
//│ ║  l.325: 	    0 ::
//│ ╙──       	      ^^
//│ fun f: anything -> nothing

fun f(x) =
  if x == 0 and x is
    A(_) then "A"
    B(_) then "B"
  else "bruh"
//│ fun f: Num -> ("A" | "B" | "bruh")

fun helper(x) =
  if x == 0 then None else Some(x)
//│ fun helper: forall 'A. (Num & 'A) -> (None | Some['A])

fun g(x, y) =
  if x == 0 and helper(x) is
    Some(a) and helper(y) is
      Some(b) then a + b
      None then a + 1
    None and helper(y) is
      Some(b) then 2 + b
      None then 1
  else
    0
//│ fun g: (Int, Int) -> Int


fun test(x) = if x then 0 else "oops"
//│ fun test: Bool -> ("oops" | 0)

test(true)
test(false)
//│ "oops" | 0
//│ res
//│     = 0
//│ res
//│     = 'oops'

:e
test(0)
test(1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.368: 	test(0)
//│ ║         	^^^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `Bool`
//│ ║  l.368: 	test(0)
//│ ║         	     ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.356: 	fun test(x) = if x then 0 else "oops"
//│ ╙──       	                 ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.369: 	test(1)
//│ ║         	^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `Bool`
//│ ║  l.369: 	test(1)
//│ ║         	     ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.356: 	fun test(x) = if x then 0 else "oops"
//│ ╙──       	                 ^
//│ "oops" | 0 | error
//│ res
//│     = 'oops'
//│ res
//│     = 'oops'


