:NewParser
:NoJS

class Option
class Some(value): Option
class None: Option
//│ Defined class Option
//│ Defined class Some
//│ Defined class None
//│ Option: () -> Option
//│ Some: 'value -> (Some & {value: 'value})
//│ None: () -> None

class Either
class Left(leftValue): Either
class Right(rightValue): Either
//│ Defined class Either
//│ Defined class Left
//│ Defined class Right
//│ Either: () -> Either
//│ Left: 'leftValue -> (Left & {leftValue: 'leftValue})
//│ Right: 'rightValue -> (Right & {rightValue: 'rightValue})

fun compute(v) =
  if v is
    Left(Some(x)) then x * 5
    Left(None()) then 1
    Right(Some(x)) then x * 3
    Right(None()) then 0
//│ compute: (Left & {leftValue: None | Some & {value: int}} | Right & {rightValue: None | Some & {value: int}}) -> int

fun crazy(v) =
  if v is
    Some(Some(Some(Some(Some(Some(None())))))) then "bruh!"
    _ then "lol"
//│ crazy: anything -> ("bruh!" | "lol")


// * TODO(@chengluyu) fix these missing locations

:e
fun f(x) =
  if x is
    (0, 0) then "zeros"
    (1, 1) then "ones"
    _      then "bruh"
//│ ╔══[ERROR] type identifier not found: Tuple#2
//│ ╙──
//│ f: error -> error

:e
fun f(x) =
  if x is
    (0, 0) then "zeros"
    (1, 1) then "ones"
    (y, 1) then x
    _      then "que?"
//│ ╔══[ERROR] type identifier not found: Tuple#2
//│ ╙──
//│ f: error -> error

:e
fun f(p) =
  if p is
    Some((x, y)) then x + y
    None()       then 0
//│ ╔══[ERROR] type identifier not found: Tuple#2
//│ ╙──
//│ f: (None | Some) -> (0 | error)

class Union(a, b)
//│ Defined class Union
//│ Union: ('a, 'b,) -> (Union & {a: 'a, b: 'b})

// Name conflict between the scrutinee and the positionals.
// Desugar result: let tmp13 = x in case tmp13 of { Union => let x = (tmp13).a in let y = (tmp13).b in x }
fun hmm(x) =
  if x is Union(x, y) then x
//│ hmm: (Union & {a: 'a}) -> 'a

hmm(Union(1, 2))
//│ res: 1

