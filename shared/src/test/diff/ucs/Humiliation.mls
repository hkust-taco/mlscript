:NewParser


class Foo(x)
//│ Defined class Foo
//│ Foo: 'x -> (Foo with {x: 'x})
//│    = [Function: Foo1]

if 1 is 1 then 1 else 0
//│ res: 0 | 1
//│    = 1

fun test(x) = if x is 1 then 0 else 1
//│ test: number -> (0 | 1)
//│     = [Function: test]

// It should report duplicated branches.
:w
fun testF(x) = if x is
  Foo(a) then a
  Foo(a) then a
//│ ╔══[WARNING] duplicated branch
//│ ╙──
//│ testF: (Foo with {x: 'x}) -> 'x
//│      = [Function: testF]

class Bar(y, z)
//│ Defined class Bar
//│ Bar: ('y, 'z,) -> (Bar with {y: 'y, z: 'z})
//│    = [Function: Bar1]

fun test(f) = if f is
  Foo(a) then a
  Bar(b, c) then b + c
//│ test: (Bar & {y: int, z: int} | (Foo with {x: 'x})) -> (int | 'x)
//│     = [Function: test1]


class Pair(fst, snd)
//│ Defined class Pair
//│ Pair: ('fst, 'snd,) -> (Pair with {fst: 'fst, snd: 'snd})
//│     = [Function: Pair1]

fun f(x) =
  if x is
    Pair(0, 0) then "zeros"
    Pair(1, 1) then "ones"
    Pair(y, 1) then x
    _          then "nah"
//│ f: (Pair & {fst: number, snd: number} & 'a | ~Pair) -> ("nah" | "ones" | "zeros" | 'a)
//│  = [Function: f]

class Z()
class O()
//│ Defined class Z
//│ Defined class O
//│ Z: () -> Z
//│  = [Function: Z1]
//│ O: () -> O
//│  = [Function: O1]

// This is not exhaustive.
:e
:ge
fun foo(x) = if x is
  Pair(Z(), Z()) then "zeros"
  Pair(O(), O()) then "ones"
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.65: 	fun foo(x) = if x is
//│ ║        	                ^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.66: 	  Pair(Z(), Z()) then "zeros"
//│ ║        	            ^^^
//│ ╟── [Missing Case 1/1] `O`
//│ ╟── It first appears here.
//│ ║  l.67: 	  Pair(O(), O()) then "ones"
//│ ╙──      	            ^^^
//│ foo: anything -> error
//│ Code generation encountered an error:
//│   if expression has not been desugared

// Change `Pair` to a real pair.
:e
:ge
fun foo(x) = if x is
  (Z(), Z()) then "zeros"
  (O(), O()) then "ones"
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.85: 	fun foo(x) = if x is
//│ ║        	                ^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.86: 	  (Z(), Z()) then "zeros"
//│ ║        	        ^^^
//│ ╟── [Missing Case 1/1] `O`
//│ ╟── It first appears here.
//│ ║  l.87: 	  (O(), O()) then "ones"
//│ ╙──      	        ^^^
//│ foo: anything -> error
//│ Code generation encountered an error:
//│   if expression has not been desugared

fun foo(x) = if x is
  Pair(a, b) then if a is
    Z() then if b is
      Z() then "zeros"
    O() then if b is
      O() then "ones"
//│ foo: (Pair & {fst: O | Z, snd: nothing}) -> ("ones" | "zeros")
//│    = [Function: foo2]

fun foo(x) = if x is
  Pair(a, b) then if a is
    Z() then if b is
      Z() then "zeros"
      else "???"
    O() then if b is
      O() then "ones"
//│ foo: (Pair & {fst: O | Z, snd: O}) -> ("???" | "ones" | "zeros")
//│    = [Function: foo3]

fun foo(x) = if x is
  Pair(a, b) then if a is
    Z() then if b is
      Z() then "zeros"
      else "???"
    O() then if b is
      O() then "zeros"
      else "???"
//│ foo: (Pair & {fst: O | Z}) -> ("???" | "zeros")
//│    = [Function: foo4]

class S(pred)
//│ Defined class S
//│ S: 'pred -> (S with {pred: 'pred})
//│  = [Function: S1]

// TODO: Cannot check exhaustiveness of nested UCS yet.
fun foo(x) = if x is
  Pair(a, b) then if a is
    Z() then if b is
      S(x) then x
      else "???"
    O() then if b is
      O() then "zeros"
      else "???"
//│ foo: (Pair & {fst: O | Z, snd: (S with {pred: 'pred}) | ~S}) -> ("???" | "zeros" | 'pred)
//│    = [Function: foo5]

:re
foo(Pair(Z(), Z()))
//│ res: "???" | "zeros"
//│    = '???'

:e
:ge
fun foo(x) = if x is
  Pair(Z(), Z()) then "zeros"
  Pair(O(), O()) then "ones"
  Pair(y, O()) then x
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.156: 	fun foo(x) = if x is
//│ ║         	                ^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.157: 	  Pair(Z(), Z()) then "zeros"
//│ ║         	            ^^^
//│ ╟── [Missing Case 1/1] `Z`
//│ ╟── It first appears here.
//│ ║  l.157: 	  Pair(Z(), Z()) then "zeros"
//│ ╙──       	            ^^^
//│ foo: anything -> error
//│ Code generation encountered an error:
//│   if expression has not been desugared

fun foo(x, y) = if x is Z() and y is O() then 0 else 1
//│ foo: (anything, anything,) -> (0 | 1)
//│    = [Function: foo7]

:pe
fun foo(x, y) = if x is
  Z() and y is O() then 0 else 1
//│ ╔══[PARSE ERROR] Unexpected 'else' keyword here
//│ ║  l.180: 	  Z() and y is O() then 0 else 1
//│ ╙──       	                          ^^^^
//│ foo: (Z, O,) -> 0
//│    = [Function: foo8]

fun foo(x, y) =
  if x is
    Z() and y is O() then 0
    else 1
//│ foo: (anything, anything,) -> (0 | 1)
//│    = [Function: foo9]
