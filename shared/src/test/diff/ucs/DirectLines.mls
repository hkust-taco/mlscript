:NewParser

fun f(x, y) =
  if
    x == 0 then "x"
    y == 0 then "y"
    _      then "nah"
//│ f: (number, number,) -> ("nah" | "x" | "y")
//│  = [Function: f]

class Option
class Some(value): Option
class None: Option
//│ Defined class Option
//│ Defined class Some
//│ Defined class None
//│ Option: () -> Option
//│       = [Function: Option1]
//│ Some: 'value -> (Some & {value: 'value})
//│     = [Function: Some1]
//│ None: () -> None
//│     = [Function: None1]

fun isValid(x) = if x then false else true
//│ isValid: anything -> Bool
//│        = [Function: isValid]

fun f(x, allowNone) =
  if x
    is Some(x) and isValid(x) then "good"
    is None() and allowNone then "okay"
    is _ then "bad"
//│ f: (anything, anything,) -> ("bad" | "good" | "okay")
//│  = [Function: f1]

fun f(x, y, z) =
  if
    x == 0 then "x"
    y ==
      1 then "y = 1"
      2 and z ==
        0 then "z = 0"
        9 then "z = 9"
        _ then "bruh"
      3 then "y = 3"
      _ then "bruh"
//│ f: (number, number, number,) -> ("bruh" | "x" | "y = 1" | "y = 3" | "z = 0" | "z = 9")
//│  = [Function: f2]

:w
fun f(a, b) =
  if
    a == 0 then 0
    b ==
      1 then 1
      2 then 2
      _ then 7
    else 3
//│ ╔══[WARNING] Found a redundant else branch
//│ ║  l.58: 	    else 3
//│ ╙──      	         ^
//│ f: (number, number,) -> (0 | 1 | 2 | 7)
//│  = [Function: f3]
