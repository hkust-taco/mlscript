:NewDefs

module A
//│ module A

// This one is easy to fix but what about the next one?
// The following example can better reveal the essence of the problem.
fun test(x: 0 | A) = if x is
  0 then 0
  A then A
//│ fun test: (x: 0 | A,) -> (0 | A)

:e
// case === (x,) (0,) of { true => 0; _ => case x of { A => A } }
fun test(x: 0 | A) =
  if
    x === 0 then 0
    x is A then A
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.18: 	    x is A then A
//│ ║        	    ^^^^^^^^^^^^^
//│ ╟── type `0` is not an instance of type `A`
//│ ║  l.15: 	fun test(x: 0 | A) =
//│ ║        	            ^
//│ ╟── but it flows into reference with expected type `A`
//│ ║  l.18: 	    x is A then A
//│ ║        	    ^
//│ ╟── Note: constraint arises from class pattern:
//│ ║  l.18: 	    x is A then A
//│ ╙──      	         ^
//│ fun test: (x: 0 | A,) -> (0 | A)

fun test2(x) =
  if
    x === 0 then 0
    x is A then A
//│ fun test2: (A & Eql[0]) -> (0 | A)

:e
test2(0)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.40: 	test2(0)
//│ ║        	^^^^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `A`
//│ ║  l.40: 	test2(0)
//│ ║        	      ^
//│ ╟── Note: constraint arises from class pattern:
//│ ║  l.36: 	    x is A then A
//│ ║        	         ^
//│ ╟── from reference:
//│ ║  l.36: 	    x is A then A
//│ ╙──      	    ^
//│ 0 | A | error
//│ res
//│     = 0

test2(A)
//│ 0 | A
//│ res
//│     = A { class: [class A] }
