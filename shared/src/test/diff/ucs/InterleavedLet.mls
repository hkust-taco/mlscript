:NewDefs

fun f(x) =
  if x ==
    let v = 0
    v then v
    else 0
//│ fun f: Num -> 0

abstract class Option[A]: Some[A] | None
class Some[A](value: A) extends Option[A]
module None extends Option
//│ abstract class Option[A]: None | Some[A]
//│ class Some[A](value: A) extends Option
//│ module None extends Option

abstract class Either[out A, out B]: Left[A] | Right[B]
class Left[A](leftValue: A) extends Either[A, nothing]
class Right[B](rightValue: B) extends Either[nothing, B]
//│ abstract class Either[A, B]: Left[A] | Right[B]
//│ class Left[A](leftValue: A) extends Either
//│ class Right[B](rightValue: B) extends Either

:ducs:normalize.result
fun q(x) =
  if
    x is Some and x is Some and x is Some then 0
//│ Normalized UCS term:
//│ case x*‡ of
//│   Some*◊ -> 0
//│ fun q: Some[anything] -> 0

:e
// FIXME: Unexpected empty split.
fun p(x, y) =
  if
    x is Some and y is None then 0
    y is Some and x is Some then 1
    x is Some and y is Some then 0
//│ ╔══[WARNING] found a duplicated case
//│ ║  l.39: 	    x is Some and y is Some then 0
//│ ║        	                       ^^^^
//│ ╟── there is an identical pattern Some
//│ ║  l.38: 	    y is Some and x is Some then 1
//│ ╙──      	         ^^^^
//│ ╔══[ERROR] `y` has 1 missing case
//│ ║  l.38: 	    y is Some and x is Some then 1
//│ ║        	    ^
//│ ╟── it can be module `None`
//│ ║  l.37: 	    x is Some and y is None then 0
//│ ╙──      	                       ^^^^
//│ fun p: (Object & ~#Some | Some[anything], Some[anything]) -> (0 | 1)

fun h(x, y) =
  if x is
    None then y
    let y_square = y * y
    Some(z) then z + y_square
//│ fun h: (None | Some[Int], Int) -> Int

h(Some(5), 6)
//│ Int
//│ res
//│     = 41

fun h(x, y) =
  if x is
    None then y
    let y_square = y * y
    Some(y_square) then 0
//│ fun h: forall 'a. (None | Some[anything], Int & 'a) -> (0 | 'a)

:e
fun f(a, y) =
  if a is
    Some(v) and v is
      Left(x) then x
      let y = v + 1
      Right(x) then x + y
    else 0
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.78: 	      let y = v + 1
//│ ║        	              ^^^^^
//│ ╟── reference of type `Right[?B]` is not an instance of type `Int`
//│ ║  l.78: 	      let y = v + 1
//│ ╙──      	              ^
//│ fun f: forall 'a. (Object & ~#Some | Some[Int | Left['a] | Right[Int]], anything) -> (Int | 'a)

:pe
fun q(a) =
  if a is
    Left(x) then x
    let y = a + 1
    then y
//│ ╔══[PARSE ERROR] Expected an expression; found a 'then'/'else' clause instead
//│ ║  l.93: 	    let y = a + 1
//│ ║        	            ^^^^^
//│ ║  l.94: 	    then y
//│ ╙──      	^^^^^^^^^^
//│ fun q: forall 'a. (Left['a] | Object & ~#Left) -> (() | 'a)

class A()
class B()
//│ class A()
//│ class B()

:e
fun w() =
  if
    A then "A"
    let y = 0
    B then "B"
    else "?"
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.110: 	    A then "A"
//│ ║         	    ^
//│ ╙── reference of type `() -> A` is not an instance of type `Bool`
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.112: 	    B then "B"
//│ ║         	    ^
//│ ╙── reference of type `() -> B` is not an instance of type `Bool`
//│ fun w: () -> ("?" | "A" | "B")

w()
//│ "?" | "A" | "B"
//│ res
//│     = '?'

fun i(x) =
  if x is
    A() then "A"
    let y = 0
    B() then "B"
//│ fun i: (A | B) -> ("A" | "B")

fun inc(x) = x + 1
//│ fun inc: Int -> Int

fun qq(x, z) =
  if x ==
    let y = inc(z)
    y * y then 0
    else 0
//│ fun qq: (Num, Int) -> 0

fun bruh(x) =
  if
    x == 0 then 0
    let y = 1
    else y
//│ fun bruh: Num -> (0 | 1)

fun f1(x) = x + 1
fun f2(x, y) = x + y
//│ fun f1: Int -> Int
//│ fun f2: (Int, Int) -> Int

fun ff(x) =
  if
    x == 0 then 0
    let y = f1(x)
    let z = f2(x, y)
    z == 1 then 1
    z == 2 then 2
    else 0
//│ fun ff: Int -> (0 | 1 | 2)

:e
// FIXME: Should warn missing else branches.
fun ip(y) =
  if q(y) and
    let z = inc(y)
    y == z * z then "bruh"
  else "rocks"
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.171: 	  if q(y) and
//│ ║         	     ^^^^
//│ ╟── undefined literal of type `()` is not an instance of type `Bool`
//│ ║  l.94: 	    then y
//│ ║        	          ^
//│ ╟── but it flows into application with expected type `Bool`
//│ ║  l.171: 	  if q(y) and
//│ ╙──       	     ^^^^
//│ fun ip: Int -> ("bruh" | "rocks")

fun tr(x) =
  if x is
    Some(v) then v
    let tmp = 1
    None then tmp
//│ fun tr: forall 'a. (None | Some['a]) -> (1 | 'a)

class Pair[A, B](val fst: A, val snd: B)
abstract class List[out A]: Nil | Cons[A]
module Nil extends List[nothing]
class Cons[out A](head: A, tail: List[A]) extends List[A]
//│ class Pair[A, B](fst: A, snd: B)
//│ abstract class List[A]: Cons[A] | Nil
//│ module Nil extends List
//│ class Cons[A](head: A, tail: List[A]) extends List

fun (::) cons(h, t) = Cons(h, t)
fun (++) strcat(a, b) = concat(a)(b)
//│ fun (::) cons: forall 'A. ('A, List['A]) -> Cons['A]
//│ fun (++) strcat: (Str, Str) -> Str

fun showList(xs) =
  if xs is
    Nil              then ""
    Cons(head, Nil)  then toString(head)
    Cons(head, tail) then toString(head) ++ ", " ++ showList(tail)
//│ fun showList: (Cons[anything] | Nil) -> Str

let zeroToThree = 0 :: 1 :: 2 :: 3 :: Nil
//│ let zeroToThree: Cons[0 | 1 | 2 | 3]
//│ zeroToThree
//│             = Cons {}

showList(zeroToThree)
//│ Str
//│ res
//│     = '0, 1, 2, 3'

fun evenness(x) = if x % 2 is 0 then Left(x) else Right(x)
//│ fun evenness: forall 'A 'B. (Int & 'A & 'B) -> (Left['A] | Right['B])

fun mapPartition(f, xs) =
  if xs is
    Nil then Pair(Nil, Nil)
    Cons(x, xs) and mapPartition(f, xs) is Pair(l, r) and f(x) is
      Left(v) then Pair(Cons(v, l), r)
      Right(v) then Pair(l, Cons(v, r))
//│ fun mapPartition: forall 'a 'A 'A0 'A1 'A2 'B 'B0. ('a -> (Left['A] | Right['A0]), Cons['a] | Nil) -> Pair[in 'A1 & 'A2 out 'A2, in 'B & 'B0 out 'B0 | Cons['A0]]
//│   where
//│     'B <: List['A0] & 'B0
//│     'B0 :> Cons['A0] | Nil
//│         <: 'B
//│     'A1 <: List['A] & 'A2
//│     'A2 :> Cons['A] | Nil
//│         <: 'A1

mapPartition(x => (if x % 2 == 0 then Left(x) else Right(x)), zeroToThree)
//│ forall 'A 'A0 'B 'B0. Pair[in 'A & 'A0 out 'A0, in 'B & 'B0 out 'B0 | Cons[0 | 1 | 2 | 3 | 'A1]]
//│   where
//│     'B <: List['A1] & 'B0
//│     'B0 :> Cons[0 | 1 | 2 | 3 | 'A1] | Nil
//│         <: 'B
//│     'A <: List['A2] & 'A0
//│     'A0 :> Cons[0 | 1 | 2 | 3 | 'A2] | Nil
//│         <: 'A
//│ res
//│     = Pair {}

// This should be the desugaring of the above:
fun mapPartition'(f, xs) =
  if xs is
    Nil then Pair(Nil, Nil)
    Cons(x, xs) and mapPartition(f, xs) is res and res.fst is l and res.snd is r and f(x) is
      Left(v)  then Pair(Cons(v, l), r)
      Right(v) then Pair(l, Cons(v, r))
//│ fun mapPartition': forall 'a 'A 'A0 'A1 'A2 'A3 'B. ('a -> (Left['A & 'A0] | Right['A1 & 'A2]), Cons['a] | Nil) -> Pair[in 'A3 out Cons['A] | Nil | 'A3 | Cons['A0], in 'B out Cons['A2] | 'B | Cons['A1] | Nil]

mapPartition'(x => (if x % 2 == 0 then Left(x) else Right(x)), zeroToThree)
//│ forall 'A 'B. Pair[in 'A out Cons[0 | 1 | 2 | 3] | Nil | 'A, in 'B out Cons[0 | 1 | 2 | 3] | 'B | Nil]
//│ res
//│     = Pair {}

// This is a very interesting side-effect example!

fun mn(a) =
  if a is
    Some(x) and x is
      Left(b) and b is
        0 then "b is 1"
        let _ = log(b)
        1 then "b is 2"
        2 then "b is 3"
      Right(b) then "right-defined"
    None       then "undefined"
//│ fun mn: (None | Some[Left[0 | 1 | 2] | Right[anything]]) -> ("b is 1" | "b is 2" | "b is 3" | "right-defined" | "undefined")

mn of None
mn of Some of Left of 0
mn of Some of Left of 1
mn of Some of Left of 2
mn of Some of Right of ()
//│ "b is 1" | "b is 2" | "b is 3" | "right-defined" | "undefined"
//│ res
//│     = 'undefined'
//│ res
//│     = 'b is 1'
//│ res
//│     = 'b is 2'
//│ // Output
//│ 1
//│ res
//│     = 'b is 3'
//│ // Output
//│ 2
//│ res
//│     = 'right-defined'
