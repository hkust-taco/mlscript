:NewDefs

fun (~~>) expect(a, b) = if a === b then () else error
//│ fun (~~>) expect: forall 'a. (Eql['a], 'a) -> ()

type Option[out T] = None | Some[T]
module None
class Some[out T](val value: T)
//│ type Option[T] = None | Some[T]
//│ module None
//│ class Some[T](value: T)

type Either[A, B] = Left[A] | Right[B]
class Left[A](val leftValue: A)
class Right[B](val rightValue: B)
//│ type Either[A, B] = Left[A] | Right[B]
//│ class Left[A](leftValue: A)
//│ class Right[B](rightValue: B)

type List[out A] = Nil | Cons[A]
module Nil
class Cons[out A](head: A, tail: List[A])
//│ type List[A] = Cons[A] | Nil
//│ module Nil
//│ class Cons[A](head: A, tail: List[A])

fun justTrue(_) = true
fun justFalse(_) = false
//│ fun justTrue: anything -> true
//│ fun justFalse: anything -> false

fun h0(a) =
  if
    a is Some(Left(y)) then y
    a is Some(Right(z)) then z
    a is None then 0
//│ fun h0: forall 'a. (None | Some[Left['a] | Right['a]]) -> (0 | 'a)

// If a class parameter is bound to the same variable in different branches,
// the bindings can be merged and can be typed and coverage checked. See the
// desugared version below.
:ducs:postprocess.result
fun h0'(a) =
  if
    a is Some(x) and x is Left(y) then y
    a is Some(x) and x is Right(z) then z
    a is None then 0
//│ Post-processed UCS term:
//│ case a*‡ of
//│   Some*◊ ->
//│     let ucs$args_a$Some*† = (Some).unapply(a,)
//│     let x*‡ = (ucs$args_a$Some).0
//│     case x*‡ of
//│       Left*◊ ->
//│         let ucs$args_x$Left*† = (Left).unapply(x,)
//│         let y*‡ = (ucs$args_x$Left).0
//│         y
//│       Right*◊ ->
//│         let ucs$args_x$Right*† = (Right).unapply(x,)
//│         let z*‡ = (ucs$args_x$Right).0
//│         z
//│   None*† -> 0
//│ fun h0': forall 'a. (None | Some[Left['a] | Right['a]]) -> (0 | 'a)

// However, if the class parameter is bound to different variables in different
// branches, the bindings cannot be merged and the type will miss the latter
// branch. See the desugared version below.
fun h1(a) =
  if
    a is Some(x) and x is Left(y) then y
    a is Some(y) and y is Right(z) then z
    a is None then 0
//│ fun h1: forall 'a. (None | Some[Right[anything] & {#rightValue: 'a}]) -> (0 | 'a)

// FIXME
h1(Some(Left(0)))
//│ ╔══[ERROR] Type `Left[?A]` does not contain member `rightValue`
//│ ║  l.15: 	class Right[B](val rightValue: B)
//│ ╙──      	                   ^^^^^^^^^^
//│ 0 | error
//│ res
//│     = 0

// FIXME: It is also impossible to merge bindings of different variables if one
// of them is bound via a let binding.
fun h2(a) =
  if
    a is Some(x) and x is x' and x' is Left(y) then y
    a is Some(y) and
      let y' = y
      y' is Right(z) then z
    a is None then 0
//│ fun h2: forall 'a. (None | Some[Left['a]]) -> (0 | 'a)

:ducs:postprocess.result
:w
fun h3(x, y, f, p) =
  if x is
    _ and f(x) is y and p(x) then y
    None then y
    _ then "anyway"
//│ Post-processed UCS term:
//│ let ucs$scrut$0*‡ = f(x,)
//│ let ucs$shadow$0 = y
//│ let y*‡ = ucs$scrut$0
//│ let ucs$test$0*† = p(x,) : Bool
//│ case ucs$test$0*† of
//│   true*† -> y
//│   _ ->
//│     let y*‡ = ucs$shadow$0
//│     case x*‡ of
//│       None*† -> y
//│       _ -> "anyway"
//│ ╔══[WARNING] the outer binding `y`
//│ ║  l.97: 	fun h3(x, y, f, p) =
//│ ║        	          ^
//│ ╟── is shadowed by name pattern `y`
//│ ║  l.99: 	    _ and f(x) is y and p(x) then y
//│ ╙──      	                  ^
//│ fun h3: forall 'a 'b. (Object & 'a, 'b, 'a -> 'b, 'a -> Bool) -> ("anyway" | 'b)


h3("anything", "not me", _ => "should be me", _ => true) ~~> "should be me"
h3(None, "should be me", _ => "not me", _ => false) ~~> "should be me"
h3("anything", "anything", _ => "not me", _ => false) ~~> "anyway"
//│ ()
//│ res
//│     = undefined
//│ res
//│     = undefined
//│ res
//│     = undefined


:ducs:postprocess.result
:w
fun h4(x, y, p) =
  if x is
    y and p(x) then y
    None then y
    _ then "default"
//│ Post-processed UCS term:
//│ let ucs$shadow$0 = y
//│ let y*‡ = x
//│ let ucs$test$0*† = p(x,) : Bool
//│ case ucs$test$0*† of
//│   true*† -> y
//│   _ ->
//│     let y*‡ = ucs$shadow$0
//│     case x*‡ of
//│       None*† -> y
//│       _ -> "default"
//│ ╔══[WARNING] the outer binding `y`
//│ ║  l.137: 	fun h4(x, y, p) =
//│ ║         	          ^
//│ ╟── is shadowed by name pattern `y`
//│ ║  l.139: 	    y and p(x) then y
//│ ╙──       	    ^
//│ fun h4: forall 'a 'b. (Object & 'a, 'b, 'a -> Bool) -> ("default" | 'a | 'b)

h4("should be me", "not me", _ => true)
h4(None, "not me", _ => true)
h4(None, "should be me", _ => false)
h4("anything", "not me", _ => false)
//│ "anything" | "default" | "not me"
//│ res
//│     = 'should be me'
//│ res
//│     = None { class: [class None] }
//│ res
//│     = 'should be me'
//│ res
//│     = 'default'

:ducs:postprocess.result
fun h5(x, y, p) =
  if x is
    Some(y) and p(x) then y
    None then y
    _ then y
//│ Post-processed UCS term:
//│ case x*‡ of
//│   Some*◊ ->
//│     let ucs$args_x$Some*† = (Some).unapply(x,)
//│     let ucs$shadow$0 = y
//│     let y*‡ = (ucs$args_x$Some).0
//│     let ucs$test$0*† = p(x,) : Bool
//│     case ucs$test$0*† of
//│       true*† -> y
//│       _ ->
//│         let y*‡ = ucs$shadow$0
//│         y
//│   None*† -> y
//│   _ -> y
//│ fun h5: forall 'a. (Object & ~#Some | Some['a], 'a, Some[nothing] -> Bool) -> 'a

h5(Some(1), 2, justTrue) ~~> 1
h5(Some(1), 2, justFalse) ~~> 2
h5(None, 0, justTrue) ~~> 0
h5(None, 0, justFalse) ~~> 0
h5("foo", 42, justTrue) ~~> 42
h5("foo", 42, justFalse) ~~> 42
//│ ()
//│ res
//│     = undefined
//│ res
//│     = undefined
//│ res
//│     = undefined
//│ res
//│     = undefined
//│ res
//│     = undefined
//│ res
//│     = undefined
