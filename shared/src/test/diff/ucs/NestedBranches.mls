:NewParser
:NewDefs


class Some[A](val value: A)
module None
class Left[A](val leftValue: A)
class Right[A](val rightValue: A)
module Nil
class Cons[A](val head: A, val tail: Cons[A] | Nil)
class Pair[A, B](val fst: A, val snd: B)
//│ class Some[A](value: A)
//│ module None
//│ class Left[A](leftValue: A)
//│ class Right[A](rightValue: A)
//│ module Nil
//│ class Cons[A](head: A, tail: Cons[A] | Nil)
//│ class Pair[A, B](fst: A, snd: B)


fun optionApply(x, y, f) =
  if x is
    Some(xv) and y is
      Some(yv) then Some(f(xv, yv))
      None then None
    None then None
//│ fun optionApply: forall 'a 'b 'A. (None | Some['a], None | Some['b], ('a, 'b) -> 'A) -> (None | Some['A])

let zeroToThree = Cons(0, Cons(1, Cons(2, Cons(3, Nil))))
//│ let zeroToThree: Cons['A]
//│   where
//│     'A :> 0 | 1 | 2 | 3
//│ zeroToThree
//│             = Cons {}

fun f(x) = if x % 2 == 0 then Left(x) else Right(x)
//│ fun f: forall 'A 'A0. (Int & 'A & 'A0) -> (Left['A] | Right['A0])

fun mapPartition(f, xs) = if xs is
  Nil then Pair(Nil, Nil)
  Cons(x, xs) and mapPartition(f, xs) is Pair(l, r) and f(x) is
    Left(v)  then Pair(Cons(v, l), r)
    Right(v) then Pair(l, Cons(v, r))
//│ fun mapPartition: forall 'A 'B 'A0 'A1 'A2 'A3 'B0. ('A0 -> (Left['A] | Right['A3]), Cons['A0] | Nil) -> Pair[in 'A1 & 'A2 out 'A2 | Cons['A], in 'B0 & 'B out 'B | Cons['A3]]
//│   where
//│     'B0 <: 'B & (Cons['A3] | Nil)
//│     'B :> Cons['A3] | Nil
//│        <: 'B0
//│     'A1 <: 'A2 & (Cons['A] | Nil)
//│     'A2 :> Cons['A] | Nil
//│         <: 'A1

mapPartition(x => Left(x + 1), zeroToThree)
//│ forall 'B 'B0 'A 'A0. Pair[in 'A & 'A0 out 'A0 | Cons['A1], in 'B & 'B0 out 'B0 | Cons['A2]]
//│   where
//│     'B <: 'B0 & (Cons['A2] | Nil)
//│     'B0 :> Cons['A2] | Nil
//│         <: 'B
//│     'A <: 'A0 & (Cons['A1] | Nil)
//│     'A0 :> Cons['A1] | Nil
//│         <: 'A
//│     'A1 :> Int
//│ res
//│     = Pair {}

mapPartition(f, zeroToThree)
//│ forall 'B 'A 'A0 'B0. Pair[in 'A & 'A0 out 'A0 | Cons['A1], in 'B0 & 'B out 'B | Cons['A2]]
//│   where
//│     'B0 <: 'B & (Cons['A2] | Nil)
//│     'B :> Cons['A2] | Nil
//│        <: 'B0
//│     'A2 :> 0 | 1 | 2 | 3
//│     'A <: 'A0 & (Cons['A1] | Nil)
//│     'A0 :> Cons['A1] | Nil
//│         <: 'A
//│     'A1 :> 0 | 1 | 2 | 3
//│ res
//│     = Pair {}


fun mapPartition(f, xs) = if xs is
  Nil then Pair(Nil, Nil)
  Cons(x, xs) and
    mapPartition(f, xs) is Pair(l, r) and f(x) is
      Left(v)  then Pair(Cons(v, l), r)
      Right(v) then Pair(l, Cons(v, r))
//│ fun mapPartition: forall 'A 'A0 'A1 'B 'A2 'B0 'A3. ('A0 -> (Left['A2] | Right['A3]), Cons['A0] | Nil) -> Pair[in 'A1 & 'A out 'A | Cons['A2], in 'B0 & 'B out 'B | Cons['A3]]
//│   where
//│     'B0 <: 'B & (Cons['A3] | Nil)
//│     'B :> Cons['A3] | Nil
//│        <: 'B0
//│     'A1 <: 'A & (Cons['A2] | Nil)
//│     'A :> Cons['A2] | Nil
//│        <: 'A1

mapPartition(f, zeroToThree)
//│ forall 'A 'A0 'B 'B0. Pair[in 'A & 'A0 out 'A0 | Cons['A1], in 'B & 'B0 out 'B0 | Cons['A2]]
//│   where
//│     'B <: 'B0 & (Cons['A2] | Nil)
//│     'B0 :> Cons['A2] | Nil
//│         <: 'B
//│     'A2 :> 0 | 1 | 2 | 3
//│     'A <: 'A0 & (Cons['A1] | Nil)
//│     'A0 :> Cons['A1] | Nil
//│         <: 'A
//│     'A1 :> 0 | 1 | 2 | 3
//│ res
//│     = Pair {}


fun mapPartition(f, xs) = if xs is
  Nil then
    Pair(Nil, Nil)
  Cons(x, xs) and
    mapPartition(f, xs) is
      Pair(l, r) and
        f(x) is
          Left(v)  then
            Pair(Cons(v, l), r)
          Right(v) then
            Pair(l, Cons(v, r))
//│ fun mapPartition: forall 'B 'B0 'A 'A0 'A1 'A2 'A3. ('A2 -> (Left['A3] | Right['A]), Cons['A2] | Nil) -> Pair[in 'A0 & 'A1 out 'A1 | Cons['A3], in 'B & 'B0 out 'B0 | Cons['A]]
//│   where
//│     'B <: 'B0 & (Cons['A] | Nil)
//│     'B0 :> Cons['A] | Nil
//│         <: 'B
//│     'A0 <: 'A1 & (Cons['A3] | Nil)
//│     'A1 :> Cons['A3] | Nil
//│         <: 'A0

mapPartition(f, zeroToThree)
//│ forall 'A 'A0 'B 'B0. Pair[in 'A & 'A0 out 'A0 | Cons['A1], in 'B & 'B0 out 'B0 | Cons['A2]]
//│   where
//│     'B <: 'B0 & (Cons['A2] | Nil)
//│     'B0 :> Cons['A2] | Nil
//│         <: 'B
//│     'A2 :> 0 | 1 | 2 | 3
//│     'A <: 'A0 & (Cons['A1] | Nil)
//│     'A0 :> Cons['A1] | Nil
//│         <: 'A
//│     'A1 :> 0 | 1 | 2 | 3
//│ res
//│     = Pair {}

:e // TODO make this one work (needs tuple support)
fun mapPartition(f, xs) = if xs is
  Nil then [Nil, Nil]
  Cons(x, xs) and mapPartition(f, xs) is [l, r] and f(x) is
    Left(v)  then [Cons(v, l), r]
    Right(v) then [l, Cons(v, r)]
//│ ╔══[ERROR] type identifier not found: Tuple#2
//│ ╙──
//│ ╔══[ERROR] Type mismatch in definition:
//│ ║  l.146: 	fun mapPartition(f, xs) = if xs is
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.147: 	  Nil then [Nil, Nil]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.148: 	  Cons(x, xs) and mapPartition(f, xs) is [l, r] and f(x) is
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.149: 	    Left(v)  then [Cons(v, l), r]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.150: 	    Right(v) then [l, Cons(v, r)]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `[Nil, Nil]` is not an instance of type `Object`
//│ ║  l.147: 	  Nil then [Nil, Nil]
//│ ║         	           ^^^^^^^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.148: 	  Cons(x, xs) and mapPartition(f, xs) is [l, r] and f(x) is
//│ ║         	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.149: 	    Left(v)  then [Cons(v, l), r]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.150: 	    Right(v) then [l, Cons(v, r)]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.148: 	  Cons(x, xs) and mapPartition(f, xs) is [l, r] and f(x) is
//│ ╙──       	                  ^^^^^^^^^^^^^^^^^^^
//│ fun mapPartition: forall 'A. (anything, Cons['A] | Nil) -> (error | [Nil, Nil])
//│ Code generation encountered an error:
//│   unknown match case: Tuple#2

:re // TODO
mapPartition(f, zeroToThree)
//│ error | [Nil, Nil]
//│ res
//│ Runtime error:
//│   ReferenceError: mapPartition3 is not defined


// * Vertical alignment is not allowed! (good)
:pe
:w
:e
:ge
fun mapPartition(f, xs) = if xs is
  Nil then [Nil, Nil]
  Cons(x, xs) and mapPartition(f, xs) is [l, r]
          and f(x) is Left(v)  then [Cons(v, l), r]
                      Right(v) then [l, Cons(v, r)]
//│ ╔══[PARSE ERROR] Unexpected 'then' keyword here
//│ ║  l.198: 	                      Right(v) then [l, Cons(v, r)]
//│ ╙──       	                               ^^^^
//│ ╔══[WARNING] Paren-less applications should use the 'of' keyword
//│ ║  l.197: 	          and f(x) is Left(v)  then [Cons(v, l), r]
//│ ║         	                                    ^^^^^^^^^^^^^^^
//│ ║  l.198: 	                      Right(v) then [l, Cons(v, r)]
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Tuple#2
//│ ╙──
//│ ╔══[ERROR] Type mismatch in definition:
//│ ║  l.194: 	fun mapPartition(f, xs) = if xs is
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.195: 	  Nil then [Nil, Nil]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.196: 	  Cons(x, xs) and mapPartition(f, xs) is [l, r]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.197: 	          and f(x) is Left(v)  then [Cons(v, l), r]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.198: 	                      Right(v) then [l, Cons(v, r)]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `[Nil, Nil]` is not an instance of type `Object`
//│ ║  l.195: 	  Nil then [Nil, Nil]
//│ ║         	           ^^^^^^^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.196: 	  Cons(x, xs) and mapPartition(f, xs) is [l, r]
//│ ║         	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.197: 	          and f(x) is Left(v)  then [Cons(v, l), r]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.198: 	                      Right(v) then [l, Cons(v, r)]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.196: 	  Cons(x, xs) and mapPartition(f, xs) is [l, r]
//│ ╙──       	                  ^^^^^^^^^^^^^^^^^^^
//│ fun mapPartition: forall 'A. (anything, Cons['A] | Nil) -> (error | [Nil, Nil])
//│ Code generation encountered an error:
//│   unknown match case: Tuple#2

