:NewParser
:NewDefs

class Some[A](value: A)
module None
class Left[A](leftValue: A)
class Right[A](rightValue: A)
module Nil
class Cons[A](head: A, tail: Cons[A] | Nil)
class Pair[A, B](fst: A, snd: B)
//│ class Some[A](value: A)
//│ module None
//│ class Left[A](leftValue: A)
//│ class Right[A](rightValue: A)
//│ module Nil
//│ class Cons[A](head: A, tail: Cons[A] | Nil)
//│ class Pair[A, B](fst: A, snd: B)

fun optionApply(x, y, f) =
  if x is
    Some(xv) and y is
      Some(yv) then Some(f(xv, yv))
      None then None
    None then None
//│ fun optionApply: forall 'value 'value0 'A. (None | Some['value], None | Some['value0], ('value, 'value0,) -> 'A,) -> (None | Some['A])

let zeroToThree = Cons(0, Cons(1, Cons(2, Cons(3, Nil))))
//│ let zeroToThree: Cons['A]
//│   where
//│     'A :> 0 | 1 | 2 | 3
//│ zeroToThree
//│             = Cons {}

fun f(x) = if x % 2 == 0 then Left(x) else Right(x)
//│ fun f: forall 'A. (Int & 'A) -> (Left['A] | Right['A])

fun mapPartition(f, xs) = if xs is
  Nil then Pair(Nil, Nil)
  Cons(x, xs) and mapPartition(f, xs) is Pair(l, r) and f(x) is
    Left(v)  then Pair(Cons(v, l), r)
    Right(v) then Pair(l, Cons(v, r))
//│ fun mapPartition: forall 'head 'A 'A0. ('head -> (Left['A] | Right['A0]), Cons['head] | Nil,) -> Pair[Cons['A] | Nil, Cons['A0] | Nil]

mapPartition(x => Left(x + 1), zeroToThree)
//│ Pair[Cons['A] | Nil, Cons['A0] | Nil]
//│   where
//│     'A :> Int
//│ res
//│     = Pair {}

mapPartition(f, zeroToThree)
//│ Pair[Cons['A] | Nil, Cons['A0] | Nil]
//│   where
//│     'A0 :> 0 | 1 | 2 | 3
//│     'A :> 0 | 1 | 2 | 3
//│ res
//│     = Pair {}


fun mapPartition(f, xs) = if xs is
  Nil then Pair(Nil, Nil)
  Cons(x, xs) and
    mapPartition(f, xs) is Pair(l, r) and f(x) is
      Left(v)  then Pair(Cons(v, l), r)
      Right(v) then Pair(l, Cons(v, r))
//│ fun mapPartition: forall 'A 'head 'A0. ('head -> (Left['A0] | Right['A]), Cons['head] | Nil,) -> Pair[Cons['A0] | Nil, Cons['A] | Nil]

mapPartition(f, zeroToThree)
//│ Pair[Cons['A] | Nil, Cons['A0] | Nil]
//│   where
//│     'A0 :> 0 | 1 | 2 | 3
//│     'A :> 0 | 1 | 2 | 3
//│ res
//│     = Pair {}


fun mapPartition(f, xs) = if xs is
  Nil then
    Pair(Nil, Nil)
  Cons(x, xs) and
    mapPartition(f, xs) is
      Pair(l, r) and
        f(x) is
          Left(v)  then
            Pair(Cons(v, l), r)
          Right(v) then
            Pair(l, Cons(v, r))
//│ fun mapPartition: forall 'head 'A 'A0. ('head -> (Left['A] | Right['A0]), Cons['head] | Nil,) -> Pair[Cons['A] | Nil, Cons['A0] | Nil]

mapPartition(f, zeroToThree)
//│ Pair[Cons['A] | Nil, Cons['A0] | Nil]
//│   where
//│     'A0 :> 0 | 1 | 2 | 3
//│     'A :> 0 | 1 | 2 | 3
//│ res
//│     = Pair {}

// TODO make this one work (needs tuple support)
fun mapPartition(f, xs) = if xs is
  Nil then (Nil, Nil)
  Cons(x, xs) and mapPartition(f, xs) is (l, r) and f(x) is
    Left(v)  then (Cons(v, l), r)
    Right(v) then (l, Cons(v, r))
//│ ╔══[ERROR] The case when this is false is not handled: is (mapPartition (f, xs,),) (l, r,)
//│ ║  l.101: 	  Cons(x, xs) and mapPartition(f, xs) is (l, r) and f(x) is
//│ ╙──       	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ fun mapPartition: (anything, anything,) -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

// TODO
mapPartition(f, zeroToThree)
//│ error
//│ res
//│ Runtime error:
//│   ReferenceError: mapPartition3 is not defined


// * Vertical alignment is not allowed! (good)
:pe
:w
:e
:ge
fun mapPartition(f, xs) = if xs is
  Nil then (Nil, Nil)
  Cons(x, xs) and mapPartition(f, xs) is (l, r)
          and f(x) is Left(v)  then (Cons(v, l), r)
                      Right(v) then (l, Cons(v, r))
//│ ╔══[PARSE ERROR] Unexpected 'then' keyword here
//│ ║  l.128: 	                      Right(v) then (l, Cons(v, r))
//│ ╙──       	                               ^^^^
//│ ╔══[WARNING] Paren-less applications should use the 'of' keyword
//│ ║  l.127: 	          and f(x) is Left(v)  then (Cons(v, l), r)
//│ ║         	                                    ^^^^^^^^^^^^^^^
//│ ║  l.128: 	                      Right(v) then (l, Cons(v, r))
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Tuple#2
//│ ╙──
//│ ╔══[ERROR] Type mismatch in definition:
//│ ║  l.124: 	fun mapPartition(f, xs) = if xs is
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.125: 	  Nil then (Nil, Nil)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.126: 	  Cons(x, xs) and mapPartition(f, xs) is (l, r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.127: 	          and f(x) is Left(v)  then (Cons(v, l), r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.128: 	                      Right(v) then (l, Cons(v, r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `(Nil, Nil,)` is not an instance of type `Object`
//│ ║  l.125: 	  Nil then (Nil, Nil)
//│ ║         	            ^^^^^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.126: 	  Cons(x, xs) and mapPartition(f, xs) is (l, r)
//│ ║         	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.127: 	          and f(x) is Left(v)  then (Cons(v, l), r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.128: 	                      Right(v) then (l, Cons(v, r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.126: 	  Cons(x, xs) and mapPartition(f, xs) is (l, r)
//│ ╙──       	                  ^^^^^^^^^^^^^^^^^^^
//│ fun mapPartition: forall 'A. (anything, Cons['A] | Nil,) -> ((Nil, Nil,) | error)
//│ Code generation encountered an error:
//│   unknown match case: Tuple#2
