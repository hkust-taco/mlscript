:NewParser
:NewDefs

:escape
// We need to use some native methods on `String`.
val String: nothing
val asNativeString: anything => { length: Int, charCodeAt: Int => Int, charAt: Int => Str, slice: Int => Str } = String
val StringInstance: { fromCharCode: Int => Str } = String
// We will validate our implementation with the built-in `JSON.parse`.
val JSON: { parse: Str => anything, stringify: anything => Str }
//│ val asNativeString: anything -> {charAt: Int -> Str, charCodeAt: Int -> Int, length: Int, slice: Int -> Str}
//│ val StringInstance: {fromCharCode: Int -> Str}
//│ val JSON: {parse: Str -> anything, stringify: anything -> Str}
//│ val String: nothing
//│ String
//│        = <missing implementation>
//│ asNativeString
//│                = [Function: String]
//│ StringInstance
//│                = [Function: String]
//│ JSON
//│      = <missing implementation>

JSON.parse("{ \"xs\": [1, 2, 3], \"yes\": true, \"no\": false, \"insane\": null }")
//│ anything
//│ res
//│     = { xs: [ 1, 2, 3 ], yes: true, no: false, insane: null }

let getStringOf = toString
fun fromCharCode(n) = StringInstance.fromCharCode(n)
fun firstCharCode(s) = asNativeString(s).charCodeAt(0)
fun getCharAtIndex(s, i) = asNativeString(s).charAt(i)
fun strlen(s) = asNativeString(s).length
fun stringHead(s) = asNativeString(s).charAt(0)
fun stringTail(s) = asNativeString(s).slice(1)
//│ let getStringOf: anything -> Str
//│ fun fromCharCode: Int -> Str
//│ fun firstCharCode: anything -> Int
//│ fun getCharAtIndex: (anything, Int) -> Str
//│ fun strlen: anything -> Int
//│ fun stringHead: anything -> Str
//│ fun stringTail: anything -> Str
//│ getStringOf
//│             = [Function: toString]

fun isWhiteSpace(ch) =
  if (firstCharCode of ch) ==
    9 then true // horizontal tab
    10 then true // linefeed
    32 then true // space
    _ then false
//│ fun isWhiteSpace: anything -> Bool

fun isDigit(ch) =
  let n = firstCharCode of ch
  if 48 <= n and n <= 57 then true else false
//│ fun isDigit: anything -> Bool

fun isAlphabet(ch) =
  let n = firstCharCode of ch
  if n <=
    90  and n >= 65 then true
    122 and n >= 97 then true
    else false
//│ fun isAlphabet: anything -> Bool

fun concat2(a, b) = concat(a)(b)
fun concat3(a, b, c) = concat2(a, concat2(b, c))
fun concat4(a, b, c, d) = concat2(a, concat3(b, c, d))
fun concat5(a, b, c, d, e) = concat2(a, concat4(b, c, d, e))
fun concat6(a, b, c, d, e, f) = concat2(a, concat5(b, c, d, e, f))
fun concat7(a, b, c, d, e, f, g) = concat2(a, concat6(b, c, d, e, f, g))
fun concat8(a, b, c, d, e, f, g, h) = concat2(a, concat7(b, c, d, e, f, g, h))
fun par(a) = concat3("(", a, ")")
//│ fun concat2: (Str, Str) -> Str
//│ fun concat3: (Str, Str, Str) -> Str
//│ fun concat4: (Str, Str, Str, Str) -> Str
//│ fun concat5: (Str, Str, Str, Str, Str) -> Str
//│ fun concat6: (Str, Str, Str, Str, Str, Str) -> Str
//│ fun concat7: (Str, Str, Str, Str, Str, Str, Str) -> Str
//│ fun concat8: (Str, Str, Str, Str, Str, Str, Str, Str) -> Str
//│ fun par: Str -> Str

type Option[A] = Some[A] | None
module None
class Some[A](value: A)
//│ type Option[A] = None | Some[A]
//│ module None
//│ class Some[A](value: A)

type List[A] = Cons[A] | Nil
module Nil
class Cons[A](head: A, tail: List[A])
fun listConcat(xs, ys) =
  if xs is
    Nil then ys
    Cons(x, xs') then Cons(x, listConcat(xs', ys))
fun listJoin(xs, sep) =
  if xs is
    Nil then ""
    Cons(x, xs') and xs' is
      Nil then toString(x)
      _ then concat3(toString(x), sep, listJoin(xs', sep))
//│ type List[A] = Cons[A] | Nil
//│ module Nil
//│ class Cons[A](head: A, tail: List[A])
//│ fun listConcat: forall 'A 'A0 'a. (Cons[out 'A & ('A0 | ~??A)] | Nil, List['A0] & 'a) -> (Cons['A0] | 'a)
//│ fun listJoin: (Cons[?] | Nil, Str) -> Str
//│ where
//│   'A0 :> ??A & 'A

type TreeMap[out A] = Node[A] | Empty
module Empty
class Node[out A](key: Str, value: A, left: TreeMap[A], right: TreeMap[A])
fun insert(t, k, v) =
  if t is
    Node(k', _, l, r) and
      slt(k, k') then Node(k', v, insert(l, k, v), r)
      sgt(k, k') then Node(k', v, l, insert(r, k, v))
      _ then Node(k, v, l, r)
    Empty then Node(k, v, Empty, Empty)
fun find(t, k) =
  if t is
    Node(k', v, l, r) and
      slt(k, k') then find(l, k)
      sgt(k, k') then find(r, k)
      _ then Some(v)
    Empty then None
fun traverse(t, f) =
  if t is
    Empty then Nil
    Node(key, value, left, right) then
      listConcat(traverse(left, f), Cons(f(key, value), traverse(right, f)))
//│ type TreeMap[A] = Empty | Node[A]
//│ module Empty
//│ class Node[A](key: Str, value: A, left: TreeMap[A], right: TreeMap[A])
//│ fun insert: forall 'a. (Empty | Node[anything], Str, 'a) -> Node['a]
//│ fun find: forall 'A 'A0. (Empty | Node['A], Str) -> (None | Some[??A & 'A | 'A0])
//│ fun traverse: forall 'A1 'A2 'A3 'A4 'A5 'A6 'A7. (Empty | Node['A1], (Str, ??A0 & 'A1) -> ('A2 & 'A4 & 'A7 & (~??A1 | 'A6 | ~'A2))) -> (Cons[in 'A7 out 'A2 & 'A5] | Nil)
//│ where
//│   'A2 :> ??A1 & 'A3 | 'A4 | 'A5
//│       <: 'A4 & 'A7
//│   'A3 :> 'A2 & 'A4 | 'A5
//│   'A4 :> ??A1 & 'A3 | 'A2 | 'A5
//│       <: 'A2 & 'A7 & (~??A1 | 'A6 | ~'A2)
//│   'A5 :> ??A1 & 'A3 | 'A6
//│   'A6 :> 'A5 | 'A4 | 'A2
//│       <: 'A2 & 'A4 & 'A7
//│   'A7 <: 'A2 & 'A4

type JsonValue = JsonNull | JsonNumber | JsonString | JsonBoolean | JsonObject | JsonArray
module JsonNull {
  fun toString() = "null"
}
class JsonBoolean(value: Bool) {
  fun toString() = getStringOf(value)
}
class JsonNumber(value: Num) {
  fun toString() = getStringOf(value)
}
class JsonString(value: Str) {
  fun toString() = JSON.stringify(value)
}
class JsonObject(entries: TreeMap[JsonValue]) {
  fun toString() =
    if entries is Empty then "{}"
      else concat3("{ ", listJoin(traverse(entries, (k, v) => concat3(k, ": ", getStringOf(v))), ", "), " }")
}
class JsonArray(elements: List[JsonValue]) {
  fun toString() = concat3("[", listJoin(elements, ", "), "]")
}
//│ type JsonValue = JsonArray | JsonBoolean | JsonNull | JsonNumber | JsonObject | JsonString
//│ module JsonNull {
//│   fun toString: () -> "null"
//│ }
//│ class JsonBoolean(value: Bool) {
//│   fun toString: () -> Str
//│ }
//│ class JsonNumber(value: Num) {
//│   fun toString: () -> Str
//│ }
//│ class JsonString(value: Str) {
//│   fun toString: () -> Str
//│ }
//│ class JsonObject(entries: TreeMap[JsonValue]) {
//│   fun toString: () -> Str
//│ }
//│ class JsonArray(elements: List[JsonValue]) {
//│   fun toString: () -> Str
//│ }

toString of JsonNull
toString of JsonBoolean(true)
toString of JsonBoolean(false)
toString of JsonNumber(42)
toString of JsonArray of Nil
toString of JsonArray of Cons(JsonNumber(0), Cons(JsonNull, Cons(JsonNumber(1), Nil)))
toString of JsonObject of Empty
toString of JsonObject of insert(Empty, "hello", JsonString("world"))
//│ Str
//│ res
//│     = 'null'
//│ res
//│     = 'true'
//│ res
//│     = 'false'
//│ res
//│     = '42'
//│ res
//│     = '[]'
//│ res
//│     = '[0, null, 1]'
//│ res
//│     = '{}'
//│ res
//│     = '{ hello: "world" }'

class Scanner(source: Str, val at: Int) {
  fun peek: Option[Str] =
    if at < strlen(source) then Some(getCharAtIndex(source, at)) else None
  fun advance: Scanner =
    if at < strlen(source) then Scanner(source, at + 1) else this
}
fun scan(source) = Scanner(source, 0)
fun skipWhiteSpace(s: Scanner) =
  if s.peek is Some(ch) and isWhiteSpace(ch) then
    skipWhiteSpace(s.advance)
  else
    s
//│ class Scanner(source: Str, at: Int) {
//│   fun advance: Scanner
//│   fun peek: Option[Str]
//│ }
//│ fun scan: Str -> Scanner
//│ fun skipWhiteSpace: (s: Scanner) -> Scanner

type ParseResult[T] = ParseSuccess[T] | ParseFailure
class ParseSuccess[T](value: T, scanner: Scanner) {
  fun toString() = concat2("Success: ", getStringOf(value))
}
class ParseFailure(message: Str, scanner: Scanner) {
  fun toString() = concat4("Failure at ", getStringOf(scanner.at), ": ", message)
}
//│ type ParseResult[T] = ParseFailure | ParseSuccess[T]
//│ class ParseSuccess[T](value: T, scanner: Scanner) {
//│   fun toString: () -> Str
//│ }
//│ class ParseFailure(message: Str, scanner: Scanner) {
//│   fun toString: () -> Str
//│ }

fun expect(scanner, ch) =
  if skipWhiteSpace(scanner).peek is
    Some(ch') and
      eq(ch)(ch') then ParseSuccess((), scanner.advance)
      else ParseFailure(concat4("expect '", ch, "' but found ", ch'), scanner)
    None then ParseFailure(concat3("expect '", ch, "' but found EOF"), scanner)
//│ fun expect: forall 'T. (Scanner & {advance: Scanner}, Str) -> (ParseFailure | ParseSuccess[() | 'T])

fun expectWord(scanner, word, result) =
  if
    strlen(word) > 0 and
      let head = stringHead(word)
      let tail = stringTail(word)
      expect(scanner, head) is
        ParseSuccess(_, scanner) then expectWord(scanner, tail, result)
        ParseFailure(m, s) then ParseFailure(m, s)
    scanner.peek is
      Some(ch) and isAlphabet(ch) then
        ParseFailure(concat3("there should not be other alphabets after\"", word, "\""), scanner)
      else
        ParseSuccess(result, scanner)
//│ fun expectWord: forall 'a 'T 'T0 'T1 'T2. (Scanner & {peek: Object & ~#Some | Some[anything], advance: Scanner}, Str, 'a & 'T & 'T0) -> (ParseFailure | ParseSuccess['T & 'T0 & ('a | 'T1 & 'T2)])

// If we put this function together with the next block, there will be type
// mismatch errors.
fun parseMatched(scanner, closingSymbol, parse, fn) =
  if parse(scanner.advance) is
    ParseSuccess(outcome, scanner) and expect(scanner, closingSymbol) is
      ParseSuccess(_, scanner) then ParseSuccess(fn(outcome), scanner)
      ParseFailure(message, scanner) then ParseFailure(message, scanner)
    ParseFailure(message, scanner) then ParseFailure(message, scanner)
//│ fun parseMatched: forall 'advance 'T 'T0. ({advance: 'advance}, Str, 'advance -> (ParseFailure | ParseSuccess['T]), (??T & 'T) -> 'T0) -> (ParseFailure | ParseSuccess['T0])

:ng
fun parseEntries(scanner): ParseResult[TreeMap[JsonValue]] = error
fun parseElements(scanner): ParseResult[List[JsonValue]] =
  let scanner' = skipWhiteSpace(scanner)
  if scanner'.peek is
    Some(ch) and
      eq(ch)("]") then ParseSuccess(Nil, scanner')
      parse(scanner') is
        ParseSuccess(head, scanner') and scanner'.peek is
          Some(ch) and eq(ch)(",") and parseElements(scanner'.advance) is
            ParseSuccess(tail, scanner') then ParseSuccess(Cons(head, tail), scanner')
            ParseFailure(m, s) then ParseFailure(m, s)
          _ then ParseFailure("expect ']' or ',' instead of EOF", scanner')
        ParseFailure(m, s) then ParseFailure(m, s)
    None then ParseFailure("unexpected EOF", scanner)
fun parseStringContent(scanner): ParseResult[Str] = error
fun parseNumber(scanner): ParseResult[JsonNumber] = error
fun parse(scanner) =
  let scanner' = skipWhiteSpace(scanner)
  if scanner'.peek is
    None then ParseFailure("expect a JSON value instead of EOF", scanner')
    Some(ch) and
      eq(ch)("{") then parseMatched(scanner', "}", parseEntries, JsonObject)
      eq(ch)("[") then parseMatched(scanner', "]", parseElements, JsonArray)
      eq(ch)("\"") then parseMatched(scanner', "\"", parseStringContent, JsonString)
      eq(ch)("-") then parseNumber(scanner')
      eq(ch)("t") then expectWord(scanner', "true", JsonBoolean(true))
      eq(ch)("f") then expectWord(scanner', "false", JsonBoolean(false))
      eq(ch)("n") then expectWord(scanner', "null", JsonNull)
      else
        ParseFailure(concat3("unrecognized character '", ch, "'"), scanner)
//│ fun parseEntries: anything -> ParseResult[TreeMap[JsonValue]]
//│ fun parseElements: Scanner -> ParseResult[List[JsonValue]]
//│ fun parseStringContent: anything -> ParseResult[Str]
//│ fun parseNumber: anything -> ParseResult[JsonNumber]
//│ fun parse: forall 'T 'T0 'T1 'T2 'T3 'T4 'T5 'T6 'T7 'T8 'T9 'T10 'T11 'T12 'T13. Scanner -> (ParseFailure | ParseSuccess[JsonObject & 'T & 'T0 & 'T1 & 'T2 & 'T3 & 'T4 & 'T5 & 'T6 & 'T7 & 'T8 & 'T9 & 'T10 & 'T11 & 'T12 | 'T13 & (JsonString & 'T & 'T1 & 'T2 & 'T3 & 'T4 & 'T5 & 'T6 & 'T7 & 'T8 & 'T9 & 'T10 & 'T11 & 'T12 | 'T0 & (JsonBoolean & 'T & 'T9 & 'T10 & 'T11 & 'T12 | 'T1 & 'T2 & 'T3 & 'T4 & 'T5 & 'T6 & 'T7 & 'T8 & (JsonNull & 'T | 'T9 & 'T10 & 'T11 & 'T12 & (JsonArray | 'T))))] | ParseResult[JsonNumber])

:ng
toString of parse of scan of "    true"
toString of parse of scan of "  false"
toString of parse of scan of "  null"
toString of parse of scan of "[null]"
//│ Str
