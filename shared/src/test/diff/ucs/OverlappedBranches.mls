:NewParser

class Base
class Derived1 extends Base
class Derived2 extends Base
class Derived3 extends Derived2
//│ Defined class Base
//│ Defined class Derived1
//│ Defined class Derived2
//│ Defined class Derived3
//│ Base: () -> Base
//│     = [Function: Base1]
//│ Derived1: () -> Derived1
//│         = [Function: Derived11]
//│ Derived2: () -> Derived2
//│         = [Function: Derived21]
//│ Derived3: () -> Derived3
//│         = [Function: Derived31]

// The very basic case.
:w
fun f1(x) = if x is
  Base then "b"
  Derived1 then "d1"
  Derived2 then "d2"
//│ ╔══[WARNING] Found a duplicated branch
//│ ╟── This branch
//│ ║  l.24: 	  Derived1 then "d1"
//│ ║        	                ^^^^
//│ ╟── is subsumed by the branch here.
//│ ║  l.23: 	  Base then "b"
//│ ╙──      	            ^^^
//│ ╔══[WARNING] Found a duplicated branch
//│ ╟── This branch
//│ ║  l.25: 	  Derived2 then "d2"
//│ ║        	                ^^^^
//│ ╟── is subsumed by the branch here.
//│ ║  l.23: 	  Base then "b"
//│ ╙──      	            ^^^
//│ f1: Base -> "b"
//│   = [Function: f1]

f1(Base())
f1(Derived1())
f1(Derived2())
//│ res: "b"
//│    = 'b'
//│ res: "b"
//│    = 'b'
//│ res: "b"
//│    = 'b'

// Decision paths:
// + «x is Base» and «p (x,)» => "b and p"
// + «x is Derived1» => "d1"
// + «x is Derived2» => "d2"
// +  => "otherwise"
// The case tree:
//    «x» match
//      case Base =>
//        if «p (x,)»
//          «"b and p"»
//        else
//          «x» match
//            case Derived1 =>
//              «"d1"»
//            case Derived2 =>
//              «"d2"»
//            default
//              «"otherwise"»
//      default
//        «"otherwise"»
fun f2(x, p) = if x is
  Base and p(x) then "b and p"
  Derived1 then "d1"
  Derived2 then "d2"
  else "otherwise"
//│ f2: (Base & 'a | ~Base, 'a -> anything,) -> ("b and p" | "d1" | "d2" | "otherwise")
//│   = [Function: f2]

f2(Base(), _ => true) // => b and p
f2(Base(), _ => false) // otherwise
//│ res: "b and p" | "d1" | "d2" | "otherwise"
//│    = 'b and p'
//│ res: "b and p" | "d1" | "d2" | "otherwise"
//│    = 'otherwise'

f2(Derived1(), _ => true) // => b and p
f2(Derived2(), _ => true) // => b and p
//│ res: "b and p" | "d1" | "d2" | "otherwise"
//│    = 'b and p'
//│ res: "b and p" | "d1" | "d2" | "otherwise"
//│    = 'b and p'

f2(Derived1(), _ => false) // => d1
f2(Derived2(), _ => false) // => d2
//│ res: "b and p" | "d1" | "d2" | "otherwise"
//│    = 'd1'
//│ res: "b and p" | "d1" | "d2" | "otherwise"
//│    = 'd2'
