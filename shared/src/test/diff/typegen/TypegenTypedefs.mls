:NoJS
:ts
type G[T] = { a : T }
type H = int | ~string
class Box[T]: { length: T }
class RectangleBox[T]: Box[T] & { breadth: T }
class StackedRectangleBoxes[T, N]: RectangleBox[T] & { size: N }
//│ Defined type alias G
//│ Defined type alias H
//│ Defined class Box
//│ Defined class RectangleBox
//│ Defined class StackedRectangleBoxes
//│ // start ts
//│ export type G = {a: T}
//│ type Neg<NegatedType, FromType> = FromType extends NegatedType ? never: FromType
//│ export type H = int | Neg<string, a>
//│ export declare class Box<T> {
//│     length: T
//│     constructor(fields: {length: T})
//│ }
//│ export declare class RectangleBox<T> extends Box<T> {
//│     breadth: T
//│     constructor(fields: {breadth: T, length: T})
//│ }
//│ export declare class StackedRectangleBoxes<N, T> extends RectangleBox<T> {
//│     size: N
//│     constructor(fields: {size: N, breadth: T, length: T})
//│ }
//│ // end ts


:ts
class Lock[T]: { pins: T }
  method Map: (T -> 'a) -> Lock['a]
  method Map f = Lock { pins = f this.pins }
def Lock pins = Lock { pins = pins }
class Bank: { lock: Lock[int]; cash: int }
  method Potential: int
  method Potential = this.cash / this.lock.pins
  method Better: Bank -> bool
  method Better other = this.Potential > other.Potential
def Bank lock cash = Bank { lock = lock; cash = cash }
let lockA = Lock 20 in let lockB = Lock 30 in (Bank lockA 2000).Better(Bank lockB 30000)
//│ Defined class Lock
//│ Declared Lock.Map: Lock['T] -> ('T -> 'a) -> Lock['a]
//│ Defined Lock.Map: Lock['T] -> ('T -> ('T0 & 'a)) -> (Lock['T0] with {pins: 'a})
//│ Defined class Bank
//│ Declared Bank.Potential: (Bank with {lock: Lock[int]}) -> int
//│ Declared Bank.Better: (Bank with {lock: Lock[int]}) -> (Bank with {lock: Lock[int]}) -> bool
//│ Defined Bank.Potential: (Bank with {lock: Lock[int]}) -> int
//│ Defined Bank.Better: (Bank with {lock: Lock[int]}) -> (Bank with {lock: Lock[int]}) -> bool
//│ Lock: ('pins & 'T) -> (Lock['T] with {pins: 'pins})
//│ Bank: (Lock[int] & 'lock) -> (int & 'cash) -> (Bank with {cash: 'cash, lock: 'lock})
//│ res: bool
//│ // start ts
//│ export declare class Lock<T> {
//│     pins: T
//│     constructor(fields: {pins: T})
//│     Map<a>(arg: (arg1: T) => a): Lock<a>
//│ }
//│ export declare class Bank {
//│     lock: Lock<int>
//│     cash: int
//│     constructor(fields: {lock: Lock<int>, cash: int})
//│     readonly Potential: int
//│     Better(arg: Omit<Bank, "lock"> & {lock: Lock<int>}): bool
//│ }
//│ export declare const Lock<T, pins>: (arg: pins & T) => Omit<Lock<T>, "pins"> & {pins: pins}
//│ export declare const Bank<cash, lock>: (arg: Lock<int> & lock) => (arg1: int & cash) => Omit<Bank, "cash" | "lock"> & {cash: cash, lock: lock}
//│ export declare const res: bool
//│ // end ts


:ts
class None: {}
class Some[T]: { value: T }
type Option[T] = Some[T] | None
class LinkedList[T]: { head: T; tail: Option[LinkedList[T]] }
  method Append: T -> LinkedList[T]
  method Append elem = LinkedList { head = elem; tail = Some { value = this } }
def None = None {}
def Some v = Some { value = v }
//│ Defined class None
//│ Defined class Some
//│ Defined type alias Option
//│ Defined class LinkedList
//│ Declared LinkedList.Append: ((LinkedList['T] with {tail: None | (Some['b .. 'c] with {value: 'a})}) as 'a) -> 'T -> ((LinkedList['T] with {tail: None | (Some[(LinkedList['T] with {tail: None | (Some['b .. 'c] with {value: 'a})}) as 'a .. 'd] with {value: 'd})}) as 'd)
//│ Defined LinkedList.Append: ((LinkedList['T] with {tail: None | (Some['b .. 'c] with {value: 'a})}) as 'a) -> ('T & 'd & 'e) -> (LinkedList['T & 'e .. 'T | 'e] with {head: 'd, tail: Some[((LinkedList['T | 'e .. 'T & 'e] with {tail: 'g & (None | (Some['h .. LinkedList['T | 'e .. 'T & 'e] with {tail: 'g}] with {value: 'f}))}) as 'f) & 'i .. ((LinkedList['T & 'e .. 'T | 'e] with {tail: None | (Some[(LinkedList['T | 'e .. 'T & 'e] with {tail: 'g & (None | (Some['h .. LinkedList['T | 'e .. 'T & 'e] with {tail: 'g}] with {value: 'f}))}) as 'f .. 'j] with {value: 'j})}) as 'j) | (LinkedList['T] with {tail: None | (Some[?] with {value: (LinkedList['T] with {tail: None | (Some[(LinkedList['T] with {tail: None | (Some['b .. 'c] with {value: 'a})}) as 'a .. 'k] with {value: 'k})}) as 'k})}) | 'i] with {value: LinkedList['T] with {tail: None | (Some[?] with {value: (LinkedList['T] with {tail: None | (Some[(LinkedList['T] with {tail: None | (Some['b .. 'c] with {value: 'a})}) as 'a .. 'k] with {value: 'k})}) as 'k})}}})
//│ None: None
//│ Some: ('value & 'T) -> (Some['T] with {value: 'value})
//│ // start ts
//│ export declare class None {
//│     constructor(fields: {})
//│ }
//│ export declare class Some<T> {
//│     value: T
//│     constructor(fields: {value: T})
//│ }
//│ export type Option = Some<T> | None
//│ export type a<d, c, T> = Omit<LinkedList<T>, "tail"> & {tail: None | Omit<Some<a<d, c, T>>, "value"> & {value: a<d, c, T>}}
//│ export declare class LinkedList<T> {
//│     head: T
//│     tail: Option<LinkedList<T>>
//│     constructor(fields: {head: T, tail: Option<LinkedList<T>>})
//│     Append<d, c>(arg: T): a<d, c, T>
//│ }
//│ export declare const None: None
//│ export declare const Some<T, value>: (arg: value & T) => Omit<Some<T>, "value"> & {value: value}
//│ // end ts
