:NoJS
:ts
type G[T] = { a : T }
type H = int | ~string
class Box[T]: { length: T }
class RectangleBox[T]: Box[T] & { breadth: T }
class StackedRectangleBoxes[T, N]: RectangleBox[T] & { size: N }
//│ Defined type alias G[+T]
//│ Defined type alias H
//│ Defined class Box[+T]
//│ Defined class RectangleBox[+T]
//│ Defined class StackedRectangleBoxes[+T, +N]
//│ // start ts
//│ export type G = {readonly a: T}
//│ type Neg<NegatedType, FromType> = FromType extends NegatedType ? never: FromType
//│ export type H = int | Neg<string, a>
//│ export declare class Box<T> {
//│     length: T
//│     constructor(fields: {length: T})
//│ }
//│ export declare class RectangleBox<T> extends Box<T> {
//│     breadth: T
//│     constructor(fields: {breadth: T, length: T})
//│ }
//│ export declare class StackedRectangleBoxes<N, T> extends RectangleBox<T> {
//│     size: N
//│     constructor(fields: {size: N, breadth: T, length: T})
//│ }
//│ // end ts


:ts
class Lock[T]: { pins: T }
  method Map: (T -> 'a) -> Lock['a]
  method Map f = Lock { pins = f this.pins }
def Lock pins = Lock { pins = pins }
class Bank: { lock: Lock[int]; cash: int }
  method Potential: int
  method Potential = this.cash / this.lock.pins
  method Better: Bank -> bool
  method Better other = this.Potential > other.Potential
def Bank lock cash = Bank { lock = lock; cash = cash }
let lockA = Lock 20 in let lockB = Lock 30 in (Bank lockA 2000).Better(Bank lockB 30000)
//│ Defined class Lock[+T]
//│ Declared Lock.Map: Lock['T] -> ('T -> 'a) -> Lock['a]
//│ Defined Lock.Map: Lock['T] -> ('T -> ('T0 & 'pins)) -> (Lock['T0] with {pins: 'pins})
//│ Defined class Bank
//│ Declared Bank.Potential: (Bank with {lock: Lock[int]}) -> int
//│ Declared Bank.Better: (Bank with {lock: Lock[int]}) -> (Bank with {lock: Lock[int]}) -> bool
//│ Defined Bank.Potential: (Bank with {lock: Lock[int]}) -> int
//│ Defined Bank.Better: (Bank with {lock: Lock[int]}) -> (Bank with {lock: Lock[int]}) -> bool
//│ Lock: ('pins & 'T) -> (Lock['T] with {pins: 'pins})
//│ Bank: (Lock[int] & 'lock) -> (int & 'cash) -> (Bank with {cash: 'cash, lock: 'lock})
//│ res: bool
//│ // start ts
//│ export declare class Lock<T> {
//│     pins: T
//│     constructor(fields: {pins: T})
//│     Map<a>(arg: (arg1: T) => a): Lock<a>
//│ }
//│ export declare class Bank {
//│     lock: Lock<int>
//│     cash: int
//│     constructor(fields: {lock: Lock<int>, cash: int})
//│     readonly Potential: int
//│     Better(arg: Omit<Bank, "lock"> & {readonly lock: Lock<int>}): bool
//│ }
//│ export declare const Lock<pins, T>: (arg: pins & T) => Omit<Lock<T>, "pins"> & {readonly pins: pins}
//│ export declare const Bank<lock, cash>: (arg: Lock<int> & lock) => (arg1: int & cash) => Omit<Bank, "cash" | "lock"> & {readonly cash: cash, readonly lock: lock}
//│ export declare const res: bool
//│ // end ts


:ts
// FIXME
class None: {}
class Some[T]: { value: T }
type Option[T] = Some[T] | None
class LinkedList[T]: { head: T; tail: Option[LinkedList[T]] }
  method Append: T -> LinkedList[T]
  method Append elem = LinkedList { head = elem; tail = Some { value = this } }
def None = None {}
def Some v = Some { value = v }
//│ Defined class None
//│ Defined class Some[+T]
//│ Defined type alias Option[+T]
//│ Defined class LinkedList[=T]
//│ Declared LinkedList.Append: ((LinkedList['T] with {tail: None | (Some['b .. LinkedList['T] with {tail: 'c}] with {value: 'a})}) as 'a) -> 'T -> ((LinkedList['T] with {tail: None | (Some[(LinkedList['T] with {tail: None | (Some['b .. LinkedList['T] with {tail: 'c}] with {value: 'a})}) as 'a .. 'd] with {value: 'd})}) as 'd)
//│ Defined LinkedList.Append: (((LinkedList['T] with {tail: None | (Some['b .. LinkedList['T] with {tail: 'c}] with {value: 'a})}) as 'a) & 'this) -> ('T & 'head & 'T0) -> (LinkedList['T & 'T0 .. 'T | 'T0] with {head: 'head, tail: Some[((LinkedList['T | 'T0 .. 'T & 'T0] with {tail: None | (Some['e .. LinkedList['T | 'T0 .. 'T & 'T0] with {tail: 'f}] with {value: 'd})}) as 'd) & 'T1 .. 'T1 | (LinkedList['T & 'T0 .. 'T | 'T0] with {tail: None | (Some[(LinkedList['T | 'T0 .. 'T & 'T0] with {tail: None | (Some['e .. LinkedList['T | 'T0 .. 'T & 'T0] with {tail: 'f}] with {value: 'd})}) as 'd .. (LinkedList['T & 'T0 .. 'T | 'T0] with {tail: None | (Some[(LinkedList['T | 'T0 .. 'T & 'T0] with {tail: None | (Some['e .. LinkedList['T | 'T0 .. 'T & 'T0] with {tail: 'f}] with {value: 'd})}) as 'd .. 'g] with {value: 'g})}) as 'g] with {value: (LinkedList['T & 'T0 .. 'T | 'T0] with {tail: None | (Some[(LinkedList['T | 'T0 .. 'T & 'T0] with {tail: None | (Some['e .. LinkedList['T | 'T0 .. 'T & 'T0] with {tail: 'f}] with {value: 'd})}) as 'd .. 'g] with {value: 'g})}) as 'g})}) | (LinkedList['T] with {tail: None | (Some[(LinkedList['T] with {tail: None | (Some['b .. LinkedList['T] with {tail: 'c}] with {value: 'a})}) as 'a .. (LinkedList['T] with {tail: None | (Some[(LinkedList['T] with {tail: None | (Some['b .. LinkedList['T] with {tail: 'c}] with {value: 'a})}) as 'a .. 'h] with {value: 'h})}) as 'h] with {value: (LinkedList['T] with {tail: None | (Some[(LinkedList['T] with {tail: None | (Some['b .. LinkedList['T] with {tail: 'c}] with {value: 'a})}) as 'a .. 'h] with {value: 'h})}) as 'h})}) & 'this] with {value: (LinkedList['T] with {tail: None | (Some[(LinkedList['T] with {tail: None | (Some['b .. LinkedList['T] with {tail: 'c}] with {value: 'a})}) as 'a .. (LinkedList['T] with {tail: None | (Some[(LinkedList['T] with {tail: None | (Some['b .. LinkedList['T] with {tail: 'c}] with {value: 'a})}) as 'a .. 'h] with {value: 'h})}) as 'h] with {value: (LinkedList['T] with {tail: None | (Some[(LinkedList['T] with {tail: None | (Some['b .. LinkedList['T] with {tail: 'c}] with {value: 'a})}) as 'a .. 'h] with {value: 'h})}) as 'h})}) & 'this}})
//│ /!!!\ Uncaught error: mlscript.codegen.CodeGenError: Cannot generate type for invariant type Bounds(Recursive(α221,WithExtension(AppliedType(TypeName(LinkedList),List(α216)),Record(List((tail,Field(None,Union(TypeName(None),WithExtension(AppliedType(TypeName(Some),List(Bounds(α220,WithExtension(AppliedType(TypeName(LinkedList),List(α216)),Record(List((tail,Field(None,α219)))))))),Record(List((value,Field(None,α221)))))))))))),α222)
//│ 	at: mlscript.codegen.typescript.TsTypegenCodeBuilder.toTsType(TsTypegen.scala:561)
//│ 	at: mlscript.codegen.typescript.TsTypegenCodeBuilder.$anonfun$toTsType$20(TsTypegen.scala:522)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.codegen.typescript.TsTypegenCodeBuilder.toTsType(TsTypegen.scala:522)
//│ 	at: mlscript.codegen.typescript.TsTypegenCodeBuilder.toTsType(TsTypegen.scala:550)
//│ 	at: mlscript.codegen.typescript.TsTypegenCodeBuilder.toTsType(TsTypegen.scala:402)
//│ 	at: mlscript.codegen.typescript.TsTypegenCodeBuilder.toTsType(TsTypegen.scala:392)
//│ 	at: mlscript.codegen.typescript.TsTypegenCodeBuilder.$anonfun$toTsType$5(TsTypegen.scala:417)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.codegen.typescript.TsTypegenCodeBuilder.toTsType(TsTypegen.scala:413)

:ts
trait A: { x: int }
trait B: { y: string } & A
class C: { x: 0 | 1 }
//│ Defined trait A
//│ Defined trait B
//│ Defined class C
//│ // start ts
//│ export interface A {
//│     x: int
//│ }
//│ export interface B extends A {
//│     y: string
//│ }
//│ export declare class C {
//│     x: 0 | 1
//│     constructor(fields: {x: 0 | 1})
//│ }
//│ // end ts

:ts
class LL[T]: { head: T; tail: LL[T] -> int }
  method Append: T -> LL[T]
//│ Defined class LL[=T]
//│ Declared LL.Append: ((LL['T] with {tail: (LL['T] with {tail: 'a -> int}) -> int},) as 'a) -> 'T -> ((LL['T] with {tail: ((LL['T] with {tail: 'b -> int},) as 'a) -> int}) as 'b)
//│ // start ts
//│ export type b<T> = readonly [Omit<LL<T>, "tail"> & {readonly tail: (arg: a<T>) => int}]
//│ export type a<T> = Omit<LL<T>, "tail"> & {readonly tail: (...arg: b<T>) => int}
//│ export declare class LL<T> {
//│     head: T
//│     tail: (arg: LL<T>) => int
//│     constructor(fields: {head: T, tail: (arg: LL<T>) => int})
//│     Append(arg: T): a<T>
//│ }
//│ // end ts

:ts
trait A1: { x: int -> int }
trait B2: { y: int }
trait D3: { y: int }
class E: { x: "hello"; y: int } & A1 & B2 & D3
//│ Defined trait A1
//│ Defined trait B2
//│ Defined trait D3
//│ Defined class E
//│ // start ts
//│ export interface A1 {
//│     x: (arg: int) => int
//│ }
//│ export interface B2 {
//│     y: int
//│ }
//│ export interface D3 {
//│     y: int
//│ }
//│ export declare class E {
//│     y: int
//│     x: "hello" & ((arg: int) => int)
//│     constructor(fields: {y: int, x: "hello" & ((arg: int) => int)})
//│ }
//│ // end ts

:ts
type VarArg[T] = (T, T)
class Program[T]
  method Run: VarArg[T] -> number
//│ Defined type alias VarArg[+T]
//│ Defined class Program[-T]
//│ Declared Program.Run: Program['T] -> ('T, 'T,) -> number
//│ // start ts
//│ export type VarArg = readonly [T, T]
//│ export declare class Program<T> {
//│     constructor(fields: {})
//│     Run(arg: readonly [T, T]): number
//│ }
//│ // end ts

:ts
:e
:w
class Arg[T]: (T, T)
class Prog[T]
  method Run: Arg[T] -> number
//│ ╔══[ERROR] cannot inherit from a tuple type
//│ ║  l.182: 	class Arg[T]: (T, T)
//│ ╙──       	      ^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Arg
//│ ║  l.184: 	  method Run: Arg[T] -> number
//│ ╙──       	              ^^^^^^
//│ Defined class Prog[±T]
//│ Declared Prog.Run: Prog['T] -> error -> number
//│ ╔══[WARNING] Type definition Prog has bivariant type parameters:
//│ ║  l.183: 	class Prog[T]
//│ ║         	      ^^^^
//│ ╟── T is irrelevant and may be removed
//│ ║  l.183: 	class Prog[T]
//│ ╙──       	           ^
//│ // start ts
//│ export declare class Prog<T> {
//│     constructor(fields: {})
//│     Run(arg: error): number
//│ }
//│ // end ts
