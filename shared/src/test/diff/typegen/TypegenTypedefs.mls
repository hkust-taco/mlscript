:NoJS
:ts
type G[T] = { a : T }
type H = int | ~string
class Box[T]: { length: T }
class RectangleBox[T]: Box[T] & { breadth: T }
class StackedRectangleBoxes[T, N]: RectangleBox[T] & { size: N }
//│ Defined type alias G
//│ Defined type alias H
//│ Defined class Box
//│ Defined class RectangleBox
//│ Defined class StackedRectangleBoxes
//│ // start ts
//│ export type G = {readonly a: T}
//│ type Neg<NegatedType, FromType> = FromType extends NegatedType ? never: FromType
//│ export type H = int | Neg<string, a>
//│ export declare class Box<T> {
//│     length: T
//│     constructor(fields: {length: T})
//│ }
//│ export declare class RectangleBox<T> extends Box<T> {
//│     breadth: T
//│     constructor(fields: {breadth: T, length: T})
//│ }
//│ export declare class StackedRectangleBoxes<N, T> extends RectangleBox<T> {
//│     size: N
//│     constructor(fields: {size: N, breadth: T, length: T})
//│ }
//│ // end ts


// FIXME
:ts
class Lock[T]: { pins: T }
  method Map: (T -> 'a) -> Lock['a]
  method Map f = Lock { pins = f this.pins }
def Lock pins = Lock { pins = pins }
class Bank: { lock: Lock[int]; cash: int }
  method Potential: int
  method Potential = this.cash / this.lock.pins
  method Better: Bank -> bool
  method Better other = this.Potential > other.Potential
def Bank lock cash = Bank { lock = lock; cash = cash }
let lockA = Lock 20 in let lockB = Lock 30 in (Bank lockA 2000).Better(Bank lockB 30000)
//│ Defined class Lock
//│ Declared Lock.Map: Lock['T] -> ('T -> 'a) -> Lock['a]
//│ Defined Lock.Map: Lock['T] -> ('T -> 'a) -> (Lock['T0] & {pins: 'a})
//│   where
//│     'a <: 'T0
//│ Defined class Bank
//│ Declared Bank.Potential: Bank -> int
//│ Declared Bank.Better: Bank -> Bank -> bool
//│ Defined Bank.Potential: Bank -> int
//│ Defined Bank.Better: Bank -> Bank -> bool
//│ Lock: 'pins -> (Lock['T] & {pins: 'pins})
//│   where
//│     'pins <: 'T
//│ /!!!\ Uncaught error: scala.MatchError: Constrained(Function(Tuple(List((None,Field(None,α105)))),Inter(AppliedType(TypeName(Lock),List(α106)),Record(List((pins,Field(None,α105)))))),List((α105,Bounds(Bot,α106)))) (of class mlscript.Constrained)
//│ 	at: mlscript.codegen.typescript.TsTypegenCodeBuilder.toTsType(TsTypegen.scala:386)
//│ 	at: mlscript.codegen.typescript.TsTypegenCodeBuilder.addTypeGenTermDefinition(TsTypegen.scala:353)
//│ 	at: mlscript.DiffTests.$anonfun$new$45(DiffTests.scala:506)
//│ 	at: mlscript.DiffTests.$anonfun$new$45$adapted(DiffTests.scala:478)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:478)
//│ 	at: mlscript.DiffTests.$anonfun$new$2(DiffTests.scala:605)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)


// FIXME
:ts
class None: {}
class Some[T]: { value: T }
type Option[T] = Some[T] | None
class LinkedList[T]: { head: T; tail: Option[LinkedList[T]] }
  method Append: T -> LinkedList[T]
  method Append elem = LinkedList { head = elem; tail = Some { value = this } }
def None = None {}
def Some v = Some { value = v }
//│ Defined class None
//│ Defined class Some
//│ Defined type alias Option
//│ Defined class LinkedList
//│ Declared LinkedList.Append: LinkedList['T] -> 'T -> LinkedList['T]
//│ Defined LinkedList.Append: LinkedList['T] -> 'a -> (LinkedList['T] with {head: 'a, tail: Some[LinkedList['T]]})
//│   where
//│     'a <: 'T
//│ None: None
//│ Some: 'value -> (Some['T] & {value: 'value})
//│   where
//│     'value <: 'T
//│ /!!!\ Uncaught error: scala.MatchError: Constrained(Function(Tuple(List((None,Field(None,α176)))),Inter(AppliedType(TypeName(Some),List(α177)),Record(List((value,Field(None,α176)))))),List((α176,Bounds(Bot,α177)))) (of class mlscript.Constrained)
//│ 	at: mlscript.codegen.typescript.TsTypegenCodeBuilder.toTsType(TsTypegen.scala:386)
//│ 	at: mlscript.codegen.typescript.TsTypegenCodeBuilder.addTypeGenTermDefinition(TsTypegen.scala:353)
//│ 	at: mlscript.DiffTests.$anonfun$new$45(DiffTests.scala:506)
//│ 	at: mlscript.DiffTests.$anonfun$new$45$adapted(DiffTests.scala:478)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:478)
//│ 	at: mlscript.DiffTests.$anonfun$new$2(DiffTests.scala:605)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)

:ts
trait A: { x: int }
trait B: { y: string } & A
class C: { x: 0 | 1 }
//│ Defined trait A
//│ Defined trait B
//│ Defined class C
//│ // start ts
//│ export interface A {
//│     x: int
//│ }
//│ export interface B extends A {
//│     y: string
//│ }
//│ export declare class C {
//│     x: 0 | 1
//│     constructor(fields: {x: 0 | 1})
//│ }
//│ // end ts

:ts
class LL[T]: { head: T; tail: LL[T] -> int }
  method Append: T -> LL[T]
//│ Defined class LL
//│ Declared LL.Append: LL['T] -> 'T -> LL['T]
//│ // start ts
//│ export declare class LL<T> {
//│     head: T
//│     tail: (arg: LL<T>) => int
//│     constructor(fields: {head: T, tail: (arg: LL<T>) => int})
//│     Append(arg: T): LL<T>
//│ }
//│ // end ts

:ts
trait A1: { x: int -> int }
trait B2: { y: int }
trait D3: { y: int }
class E: { x: "hello"; y: int } & A1 & B2 & D3
//│ Defined trait A1
//│ Defined trait B2
//│ Defined trait D3
//│ Defined class E
//│ // start ts
//│ export interface A1 {
//│     x: (arg: int) => int
//│ }
//│ export interface B2 {
//│     y: int
//│ }
//│ export interface D3 {
//│     y: int
//│ }
//│ export declare class E {
//│     y: int
//│     x: "hello" & ((arg: int) => int)
//│     constructor(fields: {y: int, x: "hello" & ((arg: int) => int)})
//│ }
//│ // end ts

:ts
type VarArg[T] = (T, T)
class Program[T]
  method Run: VarArg[T] -> number
//│ Defined type alias VarArg
//│ Defined class Program
//│ Declared Program.Run: Program['T] -> VarArg['T] -> number
//│ // start ts
//│ export type VarArg = readonly [T, T]
//│ export declare class Program<T> {
//│     constructor(fields: {})
//│     Run(arg: VarArg<T>): number
//│ }
//│ // end ts

:ts
:e
class Arg[T]: (T, T)
class Prog[T]
  method Run: Arg[T] -> number
//│ ╔══[ERROR] cannot inherit from a tuple type
//│ ║  l.182: 	class Arg[T]: (T, T)
//│ ╙──       	      ^^^^^^^^^^^^^^
//│ ╔══[ERROR] type identifier not found: Arg
//│ ║  l.184: 	  method Run: Arg[T] -> number
//│ ╙──       	              ^^^^^^
//│ Defined class Prog
//│ Declared Prog.Run: Prog['T] -> error -> number
//│ // start ts
//│ export declare class Prog<T> {
//│     constructor(fields: {})
//│     Run(arg: error): number
//│ }
//│ // end ts
