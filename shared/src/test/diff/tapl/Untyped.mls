:NewParser

fun concat2(a, b) = concat(a)(b)
fun concat3(a, b, c) = concat2(a, concat2(b, c))
fun concat4(a, b, c, d) = concat2(a, concat3(b, c, d))
fun concat5(a, b, c, d, e) = concat2(a, concat4(b, c, d, e))
fun concat6(a, b, c, d, e, f) = concat2(a, concat5(b, c, d, e, f))
fun concat7(a, b, c, d, e, f, g) = concat2(a, concat6(b, c, d, e, f, g))
fun concat8(a, b, c, d, e, f, g, h) = concat2(a, concat7(b, c, d, e, f, g, h))
fun par(a) = concat3("(", a, ")")
//│ concat2: (string, string,) -> string
//│        = [Function: concat2]
//│ concat3: (string, string, string,) -> string
//│        = [Function: concat3]
//│ concat4: (string, string, string, string,) -> string
//│        = [Function: concat4]
//│ concat5: (string, string, string, string, string,) -> string
//│        = [Function: concat5]
//│ concat6: (string, string, string, string, string, string,) -> string
//│        = [Function: concat6]
//│ concat7: (string, string, string, string, string, string, string,) -> string
//│        = [Function: concat7]
//│ concat8: (string, string, string, string, string, string, string, string,) -> string
//│        = [Function: concat8]
//│ par: string -> string
//│    = [Function: par]

:escape
let String: nothing
let makeString: anything => { length: int, charCodeAt: int => int } = String
let StringInstance: { fromCharCode: int => string } = String
//│ String: nothing
//│       = <missing implementation>
//│ makeString: anything -> {charCodeAt: int -> int, length: int}
//│           = [Function: String]
//│ StringInstance: {fromCharCode: int -> string}
//│               = [Function: String]

fun fromCharCode(n) = StringInstance.fromCharCode(n)
fun stringCharCodeAt(s, i) = makeString(s).charCodeAt(i)
fun stringLength(s) = makeString(s).length
//│ fromCharCode: int -> string
//│             = [Function: fromCharCode]
//│ stringCharCodeAt: (anything, int,) -> int
//│                 = [Function: stringCharCodeAt]
//│ stringLength: anything -> int
//│             = [Function: stringLength]

class Option
class Some(value): Option
class None(): Option
//│ Defined class Option
//│ Defined class Some
//│ Defined class None
//│ Option: () -> Option
//│       = [Function: Option1]
//│ Some: 'value -> (Some & {value: 'value})
//│     = [Function: Some1]
//│ None: () -> None
//│     = [Function: None1]

class List
class Cons(head, tail): List
class Nil(): List
//│ Defined class List
//│ Defined class Cons
//│ Defined class Nil
//│ List: () -> List
//│     = [Function: List1]
//│ Cons: ('head, 'tail,) -> (Cons & {head: 'head, tail: 'tail})
//│     = [Function: Cons1]
//│ Nil: () -> Nil
//│    = [Function: Nil1]

fun list1(x) = Cons(x, Nil())
fun list2(x, y) = Cons(x, list1(y))
fun list3(x, y, z) = Cons(x, list2(y, z))
fun list4(x, y, z, w) = Cons(x, list3(y, z, w))
fun list5(x, y, z, w, v) = Cons(x, list4(y, z, w, v))
fun list6(x, y, z, w, v, u) = Cons(x, list5(y, z, w, v, u))
fun list7(x, y, z, w, v, u, t) = Cons(x, list6(y, z, w, v, u, t))
fun list8(x, y, z, w, v, u, t, s) = Cons(x, list7(y, z, w, v, u, t, s))
//│ list1: 'head -> (Cons & {head: 'head, tail: Nil})
//│      = [Function: list1]
//│ list2: ('head, 'head0,) -> (Cons & {head: 'head, tail: Cons & {head: 'head0, tail: Nil}})
//│      = [Function: list2]
//│ list3: ('head, 'head0, 'head1,) -> (Cons & {head: 'head, tail: Cons & {head: 'head0, tail: Cons & {head: 'head1, tail: Nil}}})
//│      = [Function: list3]
//│ list4: ('head, 'head0, 'head1, 'head2,) -> (Cons & {
//│   head: 'head,
//│   tail: Cons & {head: 'head0, tail: Cons & {head: 'head1, tail: Cons & {head: 'head2, tail: Nil}}}
//│ })
//│      = [Function: list4]
//│ list5: ('head, 'head0, 'head1, 'head2, 'head3,) -> (Cons & {
//│   head: 'head,
//│   tail: Cons & {
//│     head: 'head0,
//│     tail: Cons & {head: 'head1, tail: Cons & {head: 'head2, tail: Cons & {head: 'head3, tail: Nil}}}
//│   }
//│ })
//│      = [Function: list5]
//│ list6: ('head, 'head0, 'head1, 'head2, 'head3, 'head4,) -> (Cons & {
//│   head: 'head,
//│   tail: Cons & {
//│     head: 'head0,
//│     tail: Cons & {
//│       head: 'head1,
//│       tail: Cons & {head: 'head2, tail: Cons & {head: 'head3, tail: Cons & {head: 'head4, tail: Nil}}}
//│     }
//│   }
//│ })
//│      = [Function: list6]
//│ list7: ('head, 'head0, 'head1, 'head2, 'head3, 'head4, 'head5,) -> (Cons & {
//│   head: 'head,
//│   tail: Cons & {
//│     head: 'head0,
//│     tail: Cons & {
//│       head: 'head1,
//│       tail: Cons & {
//│         head: 'head2,
//│         tail: Cons & {head: 'head3, tail: Cons & {head: 'head4, tail: Cons & {head: 'head5, tail: Nil}}}
//│       }
//│     }
//│   }
//│ })
//│      = [Function: list7]
//│ list8: ('head, 'head0, 'head1, 'head2, 'head3, 'head4, 'head5, 'head6,) -> (Cons & {
//│   head: 'head,
//│   tail: Cons & {
//│     head: 'head0,
//│     tail: Cons & {
//│       head: 'head1,
//│       tail: Cons & {
//│         head: 'head2,
//│         tail: Cons & {
//│           head: 'head3,
//│           tail: Cons & {head: 'head4, tail: Cons & {head: 'head5, tail: Cons & {head: 'head6, tail: Nil}}}
//│         }
//│       }
//│     }
//│   }
//│ })
//│      = [Function: list8]

fun listConcat(xs, ys) =
  if xs is
    Nil() then ys
    Cons(x, xs') then Cons(x, listConcat(xs', ys))
//│ listConcat: (Nil | Cons & 'a, 'b,) -> 'b
//│   where
//│     'b :> Cons & {head: 'head, tail: 'b}
//│     'a <: {head: 'head, tail: Nil | Cons & 'a}
//│           = [Function: listConcat]

fun listContains(xs, x) =
  if xs is
    Nil() then false
    Cons(x', xs') and
      eq(x)(x') then true
      _ then listContains(xs', x)
//│ listContains: (Nil | Cons & 'a, anything,) -> Bool
//│   where
//│     'a <: {head: anything, tail: Nil | Cons & 'a}
//│             = [Function: listContains]

// Remove all occurrences of x from xs.
fun listWithout(xs, x) =
  if xs is
    Nil() then Nil()
    Cons(x', xs') and
      eq(x)(x') then listWithout(xs', x)
      _ then Cons(x', listWithout(xs', x))
//│ listWithout: (Nil | Cons & 'a, anything,) -> 'b
//│   where
//│     'b :> Nil | Cons & {head: 'head, tail: 'b}
//│     'a <: {head: 'head, tail: Nil | Cons & 'a}
//│            = [Function: listWithout]

fun listJoin(xs, sep) =
  if xs is
    Nil() then ""
    Cons(x, Nil()) then toString(x)
    Cons(x, xs') then concat3(toString(x), sep, listJoin(xs', sep))
//│ listJoin: (Nil | Cons & 'a, string,) -> string
//│   where
//│     'a <: {head: anything, tail: Nil | Cons & 'a}
//│         = [Function: listJoin]

listJoin(list3("x", "y", "z"), ", ")
//│ res: string
//│    = 'x, y, z'

class Term
class Var(name): Term
class Abs(lhs, rhs): Term
class App(lhs, rhs): Term
//│ Defined class Term
//│ Defined class Var
//│ Defined class Abs
//│ Defined class App
//│ Term: () -> Term
//│     = [Function: Term1]
//│ Var: 'name -> (Var & {name: 'name})
//│    = [Function: Var2]
//│ Abs: ('lhs, 'rhs,) -> (Abs & {lhs: 'lhs, rhs: 'rhs})
//│    = [Function: Abs1]
//│ App: ('lhs, 'rhs,) -> (App & {lhs: 'lhs, rhs: 'rhs})
//│    = [Function: App2]

fun showTerm(t) =
  if t is
    Var(name) then toString(name)
    Abs(lhs, rhs) then concat4("&", showTerm(lhs), ". ", showTerm(rhs))
    App(Abs(lhs0, lhs1), rhs) then
      concat8("((", "&", showTerm(lhs0), ". ", showTerm(lhs1), ") ", showTerm(rhs), ")")
    App(lhs, rhs) then par(concat3(showTerm(lhs), " ", showTerm(rhs)))
//│ showTerm: (Var | Abs & 'a | App & 'b) -> string
//│   where
//│     'a <: {lhs: Var | Abs & 'a | App & 'b, rhs: Var | Abs & 'a | App & 'b}
//│     'b <: {
//│       lhs: Var | App & 'b | 'a & (Abs & 'a | Abs & ~#Abs),
//│       rhs: Var | Abs & 'a | App & 'b
//│     }
//│         = [Function: showTerm]

showTerm(Var("x"))
showTerm(Abs(Var("x"), Var("y")))
showTerm(App(Var("x"), Var("y")))
showTerm(App(Abs(Var("x"), Var("y")), Var("z")))
//│ res: string
//│    = 'x'
//│ res: string
//│    = '&x. y'
//│ res: string
//│    = '(x y)'
//│ res: string
//│    = '((&x. y) z)'

fun isValue(t) =
  if t is
    Var then true
    Abs then true
    App then false
//│ isValue: (Var | Abs | App) -> Bool
//│        = [Function: isValue]

isValue(Var("x"))
isValue(Abs(Var("x"), Var("y")))
isValue(App(Var("x"), Var("y")))
//│ res: Bool
//│    = true
//│ res: Bool
//│    = true
//│ res: Bool
//│    = false

fun hasFree(t, n) =
  if t is
    // let __ = debug(concat3(showTerm(t), ", ", n))
    Var(na) then eq(n)(na)
    Abs(Var(name), body) and eq(name)(n) then false
    Abs(Var(name), body) then hasFree(body, n)
    App(lhs, rhs) then hasFree(lhs, n) || hasFree(rhs, n)
    _ then false
//│ hasFree: (Var | Abs & 'a | App & 'b | ~Var & ~Abs & ~App, anything,) -> bool
//│   where
//│     'a <: {lhs: anything, rhs: Var | Abs & 'a | App & 'b | ~Var & ~Abs & ~App}
//│     'b <: {
//│       lhs: Var | Abs & 'a | App & 'b | ~Var & ~Abs & ~App,
//│       rhs: Var | Abs & 'a | App & 'b | ~Var & ~Abs & ~App
//│     }
//│        = [Function: hasFree]

fun showHasFree(t, n) =
  concat4(showTerm(t), (if hasFree(t, n) then " has " else " DOES NOT have "), "free variable ", n)
//│ showHasFree: (Var | Abs & 'a & 'b | App & 'c & 'd, string,) -> string
//│   where
//│     'b <: {lhs: anything, rhs: Var | Abs & 'b | App & 'd | ~Var & ~Abs & ~App}
//│     'd <: {
//│       lhs: Var | Abs & 'b | App & 'd | ~Var & ~Abs & ~App,
//│       rhs: Var | Abs & 'b | App & 'd | ~Var & ~Abs & ~App
//│     }
//│     'a <: {lhs: Var | Abs & 'a | App & 'c, rhs: Var | Abs & 'a | App & 'c}
//│     'c <: {
//│       lhs: Var | App & 'c | 'a & (Abs & 'a | Abs & ~#Abs),
//│       rhs: Var | Abs & 'a | App & 'c
//│     }
//│            = [Function: showHasFree]

showHasFree(Var("x"), "x")
showHasFree(Var("x"), "y")
showHasFree(Abs(Var("x"), Var("x")), "x")
showHasFree(Abs(Var("x"), Var("x")), "y")
showHasFree(Abs(Var("x"), Var("y")), "x")
showHasFree(Abs(Var("x"), Var("y")), "y")
showHasFree(App(Var("x"), Var("y")), "x")
showHasFree(App(Var("x"), Var("y")), "y")
showHasFree(App(Abs(Var("x"), Var("x")), Var("x")), "x")
showHasFree(App(Abs(Var("x"), Var("x")), Var("x")), "y")
showHasFree(App(Abs(Var("x"), Var("x")), Var("y")), "y")
showHasFree(App(Abs(Var("x"), Var("x")), Var("x")), "y")
//│ res: string
//│    = 'x has free variable x'
//│ res: string
//│    = 'x DOES NOT have free variable y'
//│ res: string
//│    = '&x. x DOES NOT have free variable x'
//│ res: string
//│    = '&x. x DOES NOT have free variable y'
//│ res: string
//│    = '&x. y DOES NOT have free variable x'
//│ res: string
//│    = '&x. y has free variable y'
//│ res: string
//│    = '(x y) has free variable x'
//│ res: string
//│    = '(x y) has free variable y'
//│ res: string
//│    = '((&x. x) x) has free variable x'
//│ res: string
//│    = '((&x. x) x) DOES NOT have free variable y'
//│ res: string
//│    = '((&x. x) y) has free variable y'
//│ res: string
//│    = '((&x. x) x) DOES NOT have free variable y'

fun fv(t) =
  if t is
    Var(name) then list1(name)
    Abs(Var(name), body) then listWithout(fv(body), name)
    App(lhs, rhs) then listConcat(fv(lhs), fv(rhs))
//│ fv: (Var & {name: 'name} | Abs & 'a | App & 'b) -> (Cons & {head: 'name, tail: Nil} | 'c | 'd)
//│   where
//│     'd :> forall 'e. 'f | 'e
//│     'e :> Cons & {head: forall 'head. 'head, tail: 'f | 'e}
//│     'f :> forall 'g. Cons & {head: 'name, tail: Nil} | 'g | 'd
//│     'g :> Nil | Cons & {head: forall 'head0. 'head0, tail: 'g}
//│     'c :> Nil | Cons & {head: forall 'head0. 'head0, tail: 'c}
//│     'head0 :> forall 'head. 'name | 'head
//│     'head :> forall 'head0. 'name | 'head0
//│     'a <: {lhs: Var, rhs: Var & {name: 'name} | Abs & 'a | App & 'b}
//│     'b <: {
//│       lhs: Var & {name: 'name} | Abs & 'a | App & 'b,
//│       rhs: Var & {name: 'name} | Abs & 'a | App & 'b
//│     }
//│   = [Function: fv]

fun showFv(t) =
  concat2(showTerm(t), if fv(t) is
    Nil then " DOES NOT have free variables"
    _ then concat2(" has free variables: ", listJoin(fv(t), ", "))
  )
//│ showFv: (Var | Abs & 'a & 'b & 'c | App & 'd & 'e & 'f) -> string
//│   where
//│     'c <: {lhs: Var, rhs: Var | Abs & 'c | App & 'f}
//│     'f <: {lhs: Var | Abs & 'c | App & 'f, rhs: Var | Abs & 'c | App & 'f}
//│     'b <: {lhs: Var, rhs: Var | Abs & 'b | App & 'e}
//│     'e <: {lhs: Var | Abs & 'b | App & 'e, rhs: Var | Abs & 'b | App & 'e}
//│     'a <: {lhs: Var | Abs & 'a | App & 'd, rhs: Var | Abs & 'a | App & 'd}
//│     'd <: {
//│       lhs: Var | App & 'd | 'a & (Abs & 'a | Abs & ~#Abs),
//│       rhs: Var | Abs & 'a | App & 'd
//│     }
//│       = [Function: showFv]

showFv(Var("x"))
showFv(Abs(Var("x"), Var("x")))
showFv(Abs(Var("x"), Var("y")))
showFv(App(Var("x"), Var("y")))
showFv(App(Abs(Var("x"), Var("x")), Var("x")))
//│ res: string
//│    = 'x has free variables: x'
//│ res: string
//│    = '&x. x DOES NOT have free variables'
//│ res: string
//│    = '&x. y has free variables: y'
//│ res: string
//│    = '(x y) has free variables: x, y'
//│ res: string
//│    = '((&x. x) x) has free variables: x'

fun tryNextAlphabet(initialCode, currentCode, freeNames) =
  if
    currentCode
      > 122 then tryNextAlphabet(initialCode, 97, freeNames)
      == initialCode then None()
    let name = fromCharCode(currentCode)
    listContains(freeNames, name) then tryNextAlphabet(initialCode, currentCode + 1, freeNames)
    _ then Some(name)
//│ tryNextAlphabet: (number, int, Nil | Cons & 'a,) -> (None | Some & {value: string})
//│   where
//│     'a <: {head: anything, tail: Nil | Cons & 'a}
//│                = [Function: tryNextAlphabet]

tryNextAlphabet(97, 97, list1("a"))
tryNextAlphabet(97, 98, list1("a"))
tryNextAlphabet(97, 98, list2("a", "b"))
tryNextAlphabet(121, 122, list1("y"))
tryNextAlphabet(121, 122, list2("y", "z"))
//│ res: None | Some & {value: string}
//│    = None {}
//│ res: None | Some & {value: string}
//│    = Some { value: 'b' }
//│ res: None | Some & {value: string}
//│    = Some { value: 'c' }
//│ res: None | Some & {value: string}
//│    = Some { value: 'z' }
//│ res: None | Some & {value: string}
//│    = Some { value: 'a' }

fun tryAppendDigits(name, index, freeNames) =
  if
    let currentName = concat2(name, toString(index))
    listContains(freeNames, currentName) then
      tryAppendDigits(name, index + 1, freeNames)
    _ then currentName
//│ tryAppendDigits: (string, int, Nil | Cons & 'a,) -> string
//│   where
//│     'a <: {head: anything, tail: Nil | Cons & 'a}
//│                = [Function: tryAppendDigits]

// Note: some weird behavior here... Just try the commented code.
fun findFreshName(name, freeNames) =
  if
    stringLength(name) == 1 and
      let charCode = stringCharCodeAt(name, 0)
      tryNextAlphabet(charCode, charCode + 1, freeNames) is
        Some(newName) then newName
    _ then tryAppendDigits(name, 0, freeNames)
//│ findFreshName: (string, Nil | Cons & 'a & 'b & 'c,) -> string
//│   where
//│     'c <: {head: anything, tail: Nil | Cons & 'c}
//│     'b <: {head: anything, tail: Nil | Cons & 'b}
//│     'a <: {head: anything, tail: Nil | Cons & 'a}
//│              = [Function: findFreshName]

// Find a fresh name to replace `name` that does not conflict with any bound
// variables in the `body`.
fun freshName(name, body) = findFreshName(name, fv(body))
//│ freshName: (string, Var | Abs & 'a | App & 'b,) -> string
//│   where
//│     'a <: {lhs: Var, rhs: Var | Abs & 'a | App & 'b}
//│     'b <: {lhs: Var | Abs & 'a | App & 'b, rhs: Var | Abs & 'a | App & 'b}
//│          = [Function: freshName]

fun subst(t, n, v) =
  if t is
    Var(name) and eq(name)(n) then v
    Abs(Var(name), body) and ne(name)(n) and
      hasFree(v, name) and freshName(name, body) is newName then
        subst(Abs(Var(newName), subst(body, name, Var(newName))), n, v)
      _ then Abs(Var(name), subst(body, n, v))
    App(lhs, rhs) then App(subst(lhs, n, v), subst(rhs, n, v))
    _ then t
//│ subst: (Var & 'a | Abs & 'b | App & 'c | 'd & ~#Abs & ~#App & ~#Var, anything, 'e & (Var & 'a | 'c & 'f & (App & 'g | App & ~#App) | 'b & 'h & (Abs & 'i | Abs & ~#Abs) | 'd & (Var & ~#Var | Abs & 'h & ~#Abs | App & 'f & ~#App)),) -> (Var & {name: string} | 'e | 'a | 'b | 'd)
//│   where
//│     'g <: {
//│       lhs: Var | Abs & 'i | App & 'g | ~Var & ~Abs & ~App,
//│       rhs: Var | Abs & 'i | App & 'g | ~Var & ~Abs & ~App
//│     }
//│     'i <: {lhs: anything, rhs: Var | Abs & 'i | App & 'g | ~Var & ~Abs & ~App}
//│     'a :> Var & {name: string}
//│        <: Var | 'f & (App & {name: anything} & 'c | App & {name: anything} & 'd & ~#App) | 'h & (Abs & {name: anything} & 'b | Abs & {name: anything} & 'd & ~#Abs)
//│     'c <: {
//│       lhs: Var & 'a | Abs & 'b | App & 'c | 'd & ~#Abs & ~#App & ~#Var,
//│       rhs: Var & 'a | Abs & 'b | App & 'c | 'd & ~#Abs & ~#App & ~#Var
//│     }
//│     'b :> Abs & {lhs: Var & {name: string}, rhs: Var & {name: string} | 'e | 'a | 'b | 'd | 'rhs}
//│        <: Var & {lhs: Var & {name: string} | ~Var, rhs: Var & 'a | Abs & 'b & 'h | App & 'c & 'f} & 'a | Abs & {lhs: Var & {name: string} | ~Var, rhs: Var & 'a | Abs & 'b & 'h | App & 'c & 'f} & 'h | App & {lhs: Var & {name: string} | ~Var, rhs: Var & 'a | Abs & 'b & 'h | App & 'c & 'f} & 'c & 'f | 'd & (Var & {lhs: Var & {name: string} | ~Var, rhs: Var & 'a | Abs & 'b & 'h | App & 'c & 'f} & ~#Var | App & {lhs: Var & {name: string} | ~Var, rhs: Var & 'a | Abs & 'b & 'h | App & 'c & 'f} & 'f & ~#App)
//│     'e :> Var & {name: string} | 'a | 'b | 'd | Abs & {lhs: Var & {name: string}, rhs: 'rhs} | App & {
//│       lhs: Var & {name: string} | 'e | 'a | 'b | 'd,
//│       rhs: Var & {name: string} | 'e | 'a | 'b | 'd
//│     }
//│     'rhs :> Var & {name: string} | 'e | 'a | 'b | 'd
//│     'd <: Var & 'a | Var & ~#Var | 'f & (App & 'c | App & ~#App) | 'h & (Abs & 'b | Abs & ~#Abs)
//│     'f <: {lhs: Var | Abs & 'h | App & 'f, rhs: Var | Abs & 'h | App & 'f}
//│     'h <: {lhs: Var, rhs: Var | Abs & 'h | App & 'f}
//│      = [Function: subst]

fun showSubst(t, n, v) =
  concat8(showTerm(t), " [", n, " / ", showTerm(v), "]", " => ", showTerm(subst(t, n, v)))
//│ showSubst: (Var & 'a | Abs & 'b & 'c | App & 'd & 'e, string, Abs & 'c & 'f & 'g & 'h & 'i | Var & 'a | App & 'j & 'e & 'k & 'l & 'm,) -> string
//│   where
//│     'i <: {lhs: anything, rhs: Var | Abs & 'i | App & 'm | ~Var & ~Abs & ~App}
//│     'm <: {
//│       lhs: Var | Abs & 'i | App & 'm | ~Var & ~Abs & ~App,
//│       rhs: Var | Abs & 'i | App & 'm | ~Var & ~Abs & ~App
//│     }
//│     'h <: {lhs: Var | Abs & 'h | App & 'l, rhs: Var | Abs & 'h | App & 'l}
//│     'l <: {
//│       lhs: Var | App & 'l | 'h & (Abs & 'h | Abs & ~#Abs),
//│       rhs: Var | Abs & 'h | App & 'l
//│     }
//│     'b <: {lhs: Var | Abs & 'b | App & 'd, rhs: Var | Abs & 'b | App & 'd}
//│     'd <: {
//│       lhs: Var | App & 'd | 'b & (Abs & 'b | Abs & ~#Abs),
//│       rhs: Var | Abs & 'b | App & 'd
//│     }
//│     'a <: Var | 'j & 'k & (App & {name: anything} & 'e | App & {name: anything} & 'n & ~#App) | 'f & 'g & (Abs & {name: anything} & 'c | Abs & {name: anything} & 'n & ~#Abs)
//│     'e <: {
//│       lhs: Var & 'a | Abs & 'c | App & 'e | 'n & ~#Abs & ~#App & ~#Var,
//│       rhs: Var & 'a | Abs & 'c | App & 'e | 'n & ~#Abs & ~#App & ~#Var
//│     }
//│     'c <: Abs & {lhs: Var & {name: string} | ~Var, rhs: Var & 'a | Abs & 'c & 'f | App & 'j & 'e} & 'f & 'g | Var & {lhs: Var & {name: string} | ~Var, rhs: Var & 'a | Abs & 'c & 'f | App & 'j & 'e} & 'a | App & {lhs: Var & {name: string} | ~Var, rhs: Var & 'a | Abs & 'c & 'f | App & 'j & 'e} & 'j & 'e & 'k | 'n & (Var & {lhs: Var & {name: string} | ~Var, rhs: Var & 'a | Abs & 'c & 'f | App & 'j & 'e} & ~#Var | App & {lhs: Var & {name: string} | ~Var, rhs: Var & 'a | Abs & 'c & 'f | App & 'j & 'e} & 'j & 'k & ~#App)
//│     'n <: Var & 'a | Var & ~#Var | 'j & 'k & (App & 'e | App & ~#App) | 'f & 'g & (Abs & 'c | Abs & ~#Abs)
//│     'k <: {
//│       lhs: Var | App & 'k | 'g & (Abs & 'g | Abs & ~#Abs),
//│       rhs: Var | Abs & 'g | App & 'k
//│     }
//│     'g <: {lhs: Var | Abs & 'g | App & 'k, rhs: Var | Abs & 'g | App & 'k}
//│     'j <: {lhs: Var | Abs & 'f | App & 'j, rhs: Var | Abs & 'f | App & 'j}
//│     'f <: {lhs: Var, rhs: Var | Abs & 'f | App & 'j}
//│          = [Function: showSubst]

showSubst(Var("x"), "x", Var("y"))
showSubst(Abs(Var("x"), Var("x")), "x", Var("z"))
showSubst(App(Var("x"), Var("y")), "x", Abs(Var("x"), Var("x")))
showSubst(App(Abs(Var("x"), Var("x")), Var("x")), "x", Abs(Var("y"), Var("y")))
showSubst(Abs(Var("x"), App(Var("x"), Var("y"))), "y", Var("x"))
//│ res: string
//│    = 'x [x / y] => y'
//│ res: string
//│    = '&x. x [x / z] => &x. x'
//│ res: string
//│    = '(x y) [x / &x. x] => ((&x. x) y)'
//│ res: string
//│    = '((&x. x) x) [x / &y. y] => ((&x. x) &y. y)'
//│ res: string
//│    = '&x. (x y) [y / x] => &z. (z x)'

fun stepByValue(t) =
  if t is
    Var then None()
    Abs then None()
    App(lhs, rhs) and stepByValue(lhs) is
      Some(lhs) then Some(App(lhs, rhs))
      None and stepByValue(rhs) is
        Some(rhs) then Some(App(lhs, rhs))
        None and lhs is
          Abs(Var(name), body) then Some(subst(body, name, rhs))
          _ then None()
//│ stepByValue: (Var | Abs | App & 'a) -> (None | Some & {
//│   value: App & {
//│     lhs: App & {lhs: 'lhs, rhs: Var & {name: string} | 'rhs | 'b | 'c | 'd | 'e} | Var & {name: string} | 'rhs | 'b | 'c | 'd | 'e,
//│     rhs: 'rhs
//│   } | App & {lhs: 'lhs, rhs: Var & {name: string} | 'rhs | 'b | 'c | 'd | 'e} | Var & {name: string} | 'rhs | 'b | 'c | 'd | 'e
//│ })
//│ where
//│   'a <: {lhs: 'lhs, rhs: 'rhs}
//│   'lhs <: Var | Abs & {rhs: Var & 'b | Abs & 'd | App & 'f | 'e & ~#Abs & ~#App & ~#Var} | Abs & ~#Abs | App & 'a
//│   'b :> Var & {name: string}
//│      <: Var | 'g & (App & {name: anything} & 'f | App & {name: anything} & 'e & ~#App) | 'h & (Abs & {name: anything} & 'd | Abs & {name: anything} & 'e & ~#Abs)
//│   'f <: {
//│     lhs: Var & 'b | Abs & 'd | App & 'f | 'e & ~#Abs & ~#App & ~#Var,
//│     rhs: Var & 'b | Abs & 'd | App & 'f | 'e & ~#Abs & ~#App & ~#Var
//│   }
//│   'd :> Abs & {
//│     lhs: Var & {name: string},
//│     rhs: Var & {name: string} | 'rhs | 'b | 'c | 'd | 'e | 'rhs0
//│   }
//│      <: Var & {lhs: Var & {name: string} | ~Var, rhs: Var & 'b | Abs & 'd & 'h | App & 'g & 'f} & 'b | Abs & {lhs: Var & {name: string} | ~Var, rhs: Var & 'b | Abs & 'd & 'h | App & 'g & 'f} & 'h | App & {lhs: Var & {name: string} | ~Var, rhs: Var & 'b | Abs & 'd & 'h | App & 'g & 'f} & 'g & 'f | 'e & (Var & {lhs: Var & {name: string} | ~Var, rhs: Var & 'b | Abs & 'd & 'h | App & 'g & 'f} & ~#Var | App & {lhs: Var & {name: string} | ~Var, rhs: Var & 'b | Abs & 'd & 'h | App & 'g & 'f} & 'g & ~#App)
//│   'c :> Var & {name: string} | 'rhs | 'b | 'd | 'e | Abs & {lhs: Var & {name: string}, rhs: 'rhs0} | App & {
//│     lhs: Var & {name: string} | 'rhs | 'b | 'c | 'd | 'e,
//│     rhs: Var & {name: string} | 'rhs | 'b | 'c | 'd | 'e
//│   }
//│   'rhs0 :> Var & {name: string} | 'rhs | 'b | 'c | 'd | 'e
//│   'e <: Var & 'b | Var & ~#Var | 'g & (App & 'f | App & ~#App) | 'h & (Abs & 'd | Abs & ~#Abs)
//│   'rhs <: Var & 'b | Abs & 'd & 'h & 'i | App & 'a & 'g & 'f & 'j
//│   'i <: {lhs: anything, rhs: Var | Abs & 'i | App & 'j | ~Var & ~Abs & ~App}
//│   'j <: {
//│     lhs: Var | Abs & 'i | App & 'j | ~Var & ~Abs & ~App,
//│     rhs: Var | Abs & 'i | App & 'j | ~Var & ~Abs & ~App
//│   }
//│   'g <: {lhs: Var | Abs & 'h | App & 'g, rhs: Var | Abs & 'h | App & 'g}
//│   'h <: {lhs: Var, rhs: Var | Abs & 'h | App & 'g}
//│            = [Function: stepByValue]

fun showStepByValue(t) =
  concat3(showTerm(t), " => ", if stepByValue(t) is
    Some(t) then showTerm(t)
    None then "stuck"
  )
//│ showStepByValue: (Var | Abs & 'a | App & 'b & 'c) -> string
//│   where
//│     'c <: {
//│       lhs: Var | App & 'c & 'd | 'e & (Abs & {rhs: Var & 'f | Abs & 'g | App & 'h | 'i & ~#Abs & ~#App & ~#Var} | Abs & ~#Abs),
//│       rhs: Abs & 'g & 'j & 'e & 'k | Var & 'f | App & 'c & 'l & 'h & 'd & 'm
//│     }
//│     'k <: {lhs: anything, rhs: Var | Abs & 'k | App & 'm | ~Var & ~Abs & ~App}
//│     'm <: {
//│       lhs: Var | Abs & 'k | App & 'm | ~Var & ~Abs & ~App,
//│       rhs: Var | Abs & 'k | App & 'm | ~Var & ~Abs & ~App
//│     }
//│     'f <: Var | 'l & 'd & (App & {name: anything} & 'h | App & {name: anything} & 'i & ~#App) | 'j & 'e & (Abs & {name: anything} & 'g | Abs & {name: anything} & 'i & ~#Abs)
//│     'h <: {
//│       lhs: Var & 'f | Abs & 'g | App & 'h | 'i & ~#Abs & ~#App & ~#Var,
//│       rhs: Var & 'f | Abs & 'g | App & 'h | 'i & ~#Abs & ~#App & ~#Var
//│     }
//│     'g <: Abs & {lhs: Var & {name: string} | ~Var, rhs: Var & 'f | Abs & 'g & 'j | App & 'l & 'h} & 'j & 'e | Var & {lhs: Var & {name: string} | ~Var, rhs: Var & 'f | Abs & 'g & 'j | App & 'l & 'h} & 'f | App & {lhs: Var & {name: string} | ~Var, rhs: Var & 'f | Abs & 'g & 'j | App & 'l & 'h} & 'l & 'h & 'd | 'i & (Var & {lhs: Var & {name: string} | ~Var, rhs: Var & 'f | Abs & 'g & 'j | App & 'l & 'h} & ~#Var | App & {lhs: Var & {name: string} | ~Var, rhs: Var & 'f | Abs & 'g & 'j | App & 'l & 'h} & 'l & 'd & ~#App)
//│     'i <: Var & 'f | Var & ~#Var | 'l & 'd & (App & 'h | App & ~#App) | 'j & 'e & (Abs & 'g | Abs & ~#Abs)
//│     'l <: {lhs: Var | Abs & 'j | App & 'l, rhs: Var | Abs & 'j | App & 'l}
//│     'j <: {lhs: Var, rhs: Var | Abs & 'j | App & 'l}
//│     'd <: {
//│       lhs: Var | App & 'd | 'e & (Abs & 'e | Abs & ~#Abs),
//│       rhs: Var | Abs & 'e | App & 'd
//│     }
//│     'e <: {lhs: Var | Abs & 'e | App & 'd, rhs: Var | Abs & 'e | App & 'd}
//│     'a <: {lhs: Var | Abs & 'a | App & 'b, rhs: Var | Abs & 'a | App & 'b}
//│     'b <: {
//│       lhs: Var | App & 'b | 'a & (Abs & 'a | Abs & ~#Abs),
//│       rhs: Var | Abs & 'a | App & 'b
//│     }
//│                = [Function: showStepByValue]

showStepByValue(Var("x"))
showStepByValue(Abs(Var("x"), Var("y")))
showStepByValue(App(Var("x"), Var("y")))
showStepByValue(App(Abs(Var("x"), Var("x")), Var("y")))
//│ res: string
//│    = 'x => stuck'
//│ res: string
//│    = '&x. y => stuck'
//│ res: string
//│    = '(x y) => stuck'
//│ res: string
//│    = '((&x. x) y) => y'

fun equalTerm(a, b) =
  if a is
    Var(na) and b is Var(nb) then eq(na)(nb)
    Abs(la, ra) and b is Abs(lb, rb) then equalTerm(la, lb) && equalTerm(ra, rb)
    App(la, ra) and b is App(lb, rb) then equalTerm(la, lb) && equalTerm(ra, rb)
    _ then false
//│ equalTerm: (Var | Abs & 'a | App & 'a | ~Var & ~Abs & ~App, App & 'b | Abs & 'b | Var | ~App & ~Abs & ~Var,) -> bool
//│   where
//│     'b <: {
//│       lhs: Var | Abs & 'b | App & 'b | ~Var & ~Abs & ~App,
//│       rhs: Var | Abs & 'b | App & 'b | ~Var & ~Abs & ~App
//│     }
//│     'a <: {
//│       lhs: Var | Abs & 'a | App & 'a | ~Var & ~Abs & ~App,
//│       rhs: Var | Abs & 'a | App & 'a | ~Var & ~Abs & ~App
//│     }
//│          = [Function: equalTerm]
