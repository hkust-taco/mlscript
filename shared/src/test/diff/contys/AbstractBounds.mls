:NoRecursiveTypes
:NoConstrainedTypes
:DontDistributeForalls


:e
class Test[A, B]
  method Foo (a: A) = a: B
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.8: 	  method Foo (a: A) = a: B
//│ ║       	                      ^
//│ ╟── reference of type `A` does not match type `B`
//│ ╟── Note: constraint arises from class type parameter:
//│ ║  l.7: 	class Test[A, B]
//│ ║       	              ^
//│ ╟── Note: class type parameter A is defined at:
//│ ║  l.7: 	class Test[A, B]
//│ ╙──     	           ^
//│ Defined class Test[-A, +B]
//│ Defined Test.Foo: Test['A, 'B] -> 'A -> 'B

fun x -> fun y -> x.Foo y
//│ res: Test['A, 'B] -> 'A -> 'B
//│    = [Function: res]


:GeneralizeCurriedFunctions

:e
class Test2[A, B]
  method Foo2 (a: A) = a: B
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.31: 	  method Foo2 (a: A) = a: B
//│ ║        	                       ^
//│ ╟── reference of type `A` does not match type `B`
//│ ╟── Note: constraint arises from class type parameter:
//│ ║  l.30: 	class Test2[A, B]
//│ ║        	               ^
//│ ╟── Note: class type parameter A is defined at:
//│ ║  l.30: 	class Test2[A, B]
//│ ╙──      	            ^
//│ Defined class Test2[-A, +B]
//│ Defined Test2.Foo2: Test2['A, 'B] -> 'A -> 'B

fun x -> fun y -> x.Foo2 y
//│ res: Test2['A, 'B] -> 'A -> 'B
//│    = [Function: res]


:ConstrainedTypes

:e
class Test3[A, B]
  method Foo3 (a: A) = a: B
  method Bar3 (a: A) = ((fun x -> x) a): B
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.54: 	  method Foo3 (a: A) = a: B
//│ ║        	                       ^
//│ ╟── reference of type `A` does not match type `B`
//│ ╟── Note: constraint arises from class type parameter:
//│ ║  l.53: 	class Test3[A, B]
//│ ║        	               ^
//│ ╟── Note: class type parameter A is defined at:
//│ ║  l.53: 	class Test3[A, B]
//│ ╙──      	            ^
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.55: 	  method Bar3 (a: A) = ((fun x -> x) a): B
//│ ║        	                       ^^^^^^^^^^^^^^^^
//│ ╟── reference of type `A` does not match type `B`
//│ ║  l.55: 	  method Bar3 (a: A) = ((fun x -> x) a): B
//│ ║        	                                     ^
//│ ╟── but it flows into reference with expected type `B`
//│ ║  l.55: 	  method Bar3 (a: A) = ((fun x -> x) a): B
//│ ║        	                                  ^
//│ ╟── Note: constraint arises from class type parameter:
//│ ║  l.53: 	class Test3[A, B]
//│ ║        	               ^
//│ ╟── Note: class type parameter A is defined at:
//│ ║  l.53: 	class Test3[A, B]
//│ ╙──      	            ^
//│ Defined class Test3[-A, +B]
//│ Defined Test3.Foo3: Test3['A, 'B] -> 'A -> 'B
//│ Defined Test3.Bar3: Test3['A, 'B] -> 'A -> 'B

fun x -> fun y -> x.Foo3 y
//│ res: 'a -> (forall 'A 'b. 'A -> 'b
//│   where
//│     'a <: Test3['A, 'b])
//│    = [Function: res]


// * `Baz4` is equivalent to `Foo3`, and yet it is accepted when the other isn't!

class Test4[A, B]
  method Bar4 i (a: A) = i a : B
  method Baz4 = this.Bar4 id
//│ Defined class Test4[=A, =B]
//│ Defined Test4.Bar4: Test4['A, 'B] -> (forall 'a. 'a -> (forall 'a. 'A -> 'B
//│   where
//│     'a <: 'A -> 'B))
//│ Defined Test4.Baz4: Test4['A, 'B] -> ('A -> 'B
//│   where
//│     forall 'a. 'a -> 'a <: 'A -> 'B)

fun x -> fun y -> x.Bar4 y id
//│ res: 'a -> (forall 'A 'B. ('A -> 'B) -> 'B
//│   where
//│     'a <: Test4['A, 'B])
//│ where
//│   'A :> forall 'b. 'b -> 'b
//│    = [Function: res]

fun x -> fun y -> x.Baz4 y
//│ res: 'a -> (forall 'B 'A. ('A & 'B) -> 'B
//│   where
//│     'a <: Test4['A, 'B])
//│ where
//│   'A <: 'B
//│    = [Function: res]


