
:e
type A = A
//│ ╔══[ERROR] illegal cycle involving type A
//│ ║  l.3: 	type A = A
//│ ╙──     	     ^^^^^

:e
"oops": A
//│ ╔══[ERROR] type identifier not found: A
//│ ║  l.9: 	"oops": A
//│ ╙──     	        ^
//│ res: error

res: "oops"
//│ res: "oops"
//│    = undefined

:e
add res 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.20: 	add res 1
//│ ║        	^^^^^^^
//│ ╟── expression of type `"oops"` does not match type `int`
//│ ║  l.20: 	add res 1
//│ ╙──      	    ^^^
//│ res: error | int

:e
type B = Oops
//│ ╔══[ERROR] type identifier not found: Oops
//│ ║  l.30: 	type B = Oops
//│ ╙──      	         ^^^^
//│ Defined type alias B

:e // TODO should probaby not report the error again
42: B
//│ ╔══[ERROR] type identifier not found: Oops
//│ ║  l.30: 	type B = Oops
//│ ╙──      	         ^^^^
//│ res: error

:e
type NonReg[A] = { x: NonReg[NonReg[A]] }
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as NonReg[NonReg['A]], but is defined as NonReg['A]
//│ ║  l.44: 	type NonReg[A] = { x: NonReg[NonReg[A]] }
//│ ╙──      	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:e
type B = NonReg[A]
//│ ╔══[ERROR] Type 'B' is already defined.
//│ ║  l.50: 	type B = NonReg[A]
//│ ╙──      	     ^
//│ ╔══[ERROR] type identifier not found: NonReg
//│ ║  l.50: 	type B = NonReg[A]
//│ ╙──      	         ^^^^^^^^^

:e
type NonReg[A] = { x: NonReg[int] }
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as NonReg[int], but is defined as NonReg['A]
//│ ║  l.59: 	type NonReg[A] = { x: NonReg[int] }
//│ ╙──      	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:e
42: NonReg[int]
//│ ╔══[ERROR] type identifier not found: NonReg
//│ ║  l.65: 	42: NonReg[int]
//│ ╙──      	    ^^^^^^^^^^^
//│ res: error

:e
type NonReg[A] = { x: NonReg[int] }
type RefToNongReg[A] = { x: NonReg[A] }
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as NonReg[int], but is defined as NonReg['A]
//│ ║  l.72: 	type NonReg[A] = { x: NonReg[int] }
//│ ╙──      	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ Defined type alias RefToNongReg


type Reg[A] = Reg[A] -> Reg[A]
//│ Defined type alias Reg


type Id[A] = A
//│ Defined type alias Id

// Our regularity check for now is very syntactic:
:e
type FalseNeg[A] = { x: FalseNeg[Id[A]] }
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as FalseNeg[Id['A]], but is defined as FalseNeg['A]
//│ ║  l.89: 	type FalseNeg[A] = { x: FalseNeg[Id[A]] }
//│ ╙──      	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


:e
42: Id
//│ ╔══[ERROR] Type Id takes parameters
//│ ║  l.96: 	42: Id
//│ ╙──      	    ^^
//│ res: error

42: Id[int]
//│ res: int
//│    = 42

