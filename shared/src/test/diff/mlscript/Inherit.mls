
class Parent: { name: string }
//│ Defined class Parent

class Child: Parent & { age: int }
//│ Defined class Child

def p = Parent{ name = "Bob" }
//│ p: parent & {name: string}

p: Parent
//│ res: Parent

:e
def c = Child(Parent { name = "Bob" })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.15: 	def c = Child(Parent { name = "Bob" })
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `parent & {name: string}` does not match type `{age: int}`
//│ ║  l.15: 	def c = Child(Parent { name = "Bob" })
//│ ║        	              ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.5: 	class Child: Parent & { age: int }
//│ ╙──     	                      ^^^^^^^^^^^^
//│ c: (child & (Parent & {age: int})) | error

def c = Child(Parent { name = "Bob" } with { age = 123 })
//│ c: child & (Parent & {age: int})

c: Parent
//│ res: Parent

c.name
//│ res: string

c: { name: 'a }
//│ res: {name: string}

c: { name: string }
//│ res: {name: string}


def f x = case x of {
  | Parent -> x.name
  }
//│ f: parent & {name: 'a} -> 'a

f c
//│ res: string

f (c: Parent)
//│ res: string


def f x = case x of {
  | Child -> x.name
  }
//│ f: child & {name: 'a} -> 'a

f c
//│ res: string

:e
f (c: Parent)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.64: 	f (c: Parent)
//│ ║        	^^^^
//│ ╟── expression of type `parent & {name: string}` does not match type `child`
//│ ║  l.64: 	f (c: Parent)
//│ ║        	      ^^^^^^
//│ ╟── but it flows into argument with expected type `child`
//│ ║  l.64: 	f (c: Parent)
//│ ║        	   ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.55: 	def f x = case x of {
//│ ╙──      	               ^
//│ res: string | error


def f x = case x of {
  | Parent -> x.name
  | _ -> ""
  }
//│ f: ((parent & {name: 'a}) | (anything & ~parent)) -> 'a | ""

f c
//│ res: string | ""

f (c: Parent)
//│ res: string | ""


def f x = case x of {
  | Parent -> x.name
  | Child -> x.name
  }
//│ f: ((parent & {name: 'a}) | ((child & {name: 'b}) & ~parent)) -> 'a | 'b

f c
//│ res: string | nothing

f (c: Parent)
//│ res: string | nothing

