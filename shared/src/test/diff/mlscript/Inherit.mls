
class Parent: { name: string }
//│ Defined class Parent

class Child: Parent & { age: int }
//│ Defined class Child

def p = Parent{ name = "Bob" }
//│ p: parent & {name: string}

p: Parent
//│ res: Parent

:e
def c = Child(Parent { name = "Bob" })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.15: 	def c = Child(Parent { name = "Bob" })
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `parent & {name: string}` does not match type `{age: int}`
//│ ║  l.15: 	def c = Child(Parent { name = "Bob" })
//│ ║        	              ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.5: 	class Child: Parent & { age: int }
//│ ╙──     	                      ^^^^^^^^^^^^
//│ c: (child & (Parent & {age: int})) | error

def c = Child(Parent { name = "Bob" } with { age = 123 })
//│ /!!!\ Uncaught error: java.lang.StackOverflowError
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$5(ConstraintSolver.scala:130)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)
//│ 	at: mlscript.ConstraintSolver.annoyingImpl$1(ConstraintSolver.scala:128)
//│ 	at: mlscript.ConstraintSolver.annoying$1(ConstraintSolver.scala:125)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$5(ConstraintSolver.scala:158)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)
//│ 	at: mlscript.ConstraintSolver.annoyingImpl$1(ConstraintSolver.scala:128)
//│ 	at: mlscript.ConstraintSolver.annoying$1(ConstraintSolver.scala:125)

c: Parent
//│ res: Parent

c.name
//│ res: error | string

c: { name: 'a }
//│ res: {name: error | string}

c: { name: string }
//│ res: {name: string}


def f x = case x of {
  | Parent -> x.name
  }
//│ f: parent & {name: 'a} -> 'a

f c
//│ res: string | error

f (c: Parent)
//│ res: string


def f x = case x of {
  | Child -> x.name
  }
//│ f: child & {name: 'a} -> 'a

f c
//│ res: string | error

:e
f (c: Parent)
//│ /!!!\ Uncaught error: java.lang.StackOverflowError
//│ 	at: java.lang.StringBuilder.append(StringBuilder.java:136)
//│ 	at: mlscript.ConstraintSolver.annoyingImpl$1(ConstraintSolver.scala:128)
//│ 	at: mlscript.ConstraintSolver.annoying$1(ConstraintSolver.scala:125)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$5(ConstraintSolver.scala:259)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)
//│ 	at: mlscript.ConstraintSolver.annoyingImpl$1(ConstraintSolver.scala:128)
//│ 	at: mlscript.ConstraintSolver.annoying$1(ConstraintSolver.scala:125)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$5(ConstraintSolver.scala:259)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)


def f x = case x of {
  | Parent -> x.name
  | _ -> ""
  }
//│ f: ((parent & {name: 'a}) | (anything & ~parent)) -> 'a | ""

f c
//│ res: string | ""

f (c: Parent)
//│ res: string | ""


def f x = case x of {
  | Parent -> x.name
  | Child -> x.name
  }
//│ f: ((parent & {name: 'a}) | ((child & {name: 'b}) & ~parent)) -> 'a | 'b

f c
//│ res: string | (string & ~nothing) | nothing

f (c: Parent)
//│ res: (string & ~nothing) | string | nothing

