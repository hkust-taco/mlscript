
class Parent: { name: string }
//│ Defined class Parent

class Child: Parent & { age: int }
//│ Defined class Child

def p = Parent{ name = "Bob" }
//│ p: Parent & {name: "Bob"}
//│  = Parent { name: 'Bob' }

p: Parent
//│ res: Parent
//│    = Parent { name: 'Bob' }

:e
def c = Child(Parent { name = "Bob" })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.17: 	def c = Child(Parent { name = "Bob" })
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `Parent & {name: ?name}` does not match type `{name: ?name0, age: ?age}`
//│ ║  l.17: 	def c = Child(Parent { name = "Bob" })
//│ ╙──      	              ^^^^^^^^^^^^^^^^^^^^^^^
//│ c: Child & {age: nothing, name: "Bob"} | error
//│  = Child { name: 'Bob', age: undefined }

def c = Child(Parent { name = "Bob" } with { age = 123 })
//│ c: Child & {age: 123, name: "Bob"}
//│  = Child { name: 'Bob', age: 123 }

c: Parent
//│ res: Parent
//│    = Child { name: 'Bob', age: 123 }

c.name
//│ res: "Bob"
//│    = 'Bob'

c: { name: 'a }
//│ res: {name: "Bob"}
//│    = Child { name: 'Bob', age: 123 }

c: { name: string }
//│ res: {name: string}
//│    = Child { name: 'Bob', age: 123 }


def f x = case x of {
  | Parent -> x.name
  }
//│ f: (Parent with {name: 'a}) -> 'a
//│  = [Function: f]

f c
//│ res: "Bob"
//│    = 'Bob'

f (c: Parent)
//│ res: string
//│    = 'Bob'


def f x = case x of {
  | Child -> x.name
  }
//│ f: (Child\age with {name: 'a}) -> 'a
//│  = [Function: f1]

f c
//│ res: "Bob"
//│    = 'Bob'

:e
f (c: Parent)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.74: 	f (c: Parent)
//│ ║        	^^^^
//│ ╟── expression of type `Parent` does not match type `Child`
//│ ║  l.74: 	f (c: Parent)
//│ ║        	      ^^^^^^
//│ ╟── but it flows into argument with expected type `(?a,)`
//│ ║  l.74: 	f (c: Parent)
//│ ║        	   ^
//│ ╟── Note: constraint arises from class pattern:
//│ ║  l.64: 	  | Child -> x.name
//│ ╙──      	    ^^^^^
//│ res: error | string
//│    = 'Bob'


def f x = case x of {
  | Parent -> x.name
  | _ -> ""
  }
//│ f: ((Parent with {name: 'a}) | ~Parent) -> ("" | 'a)
//│  = [Function: f2]

f c
//│ res: "" | "Bob"
//│    = 'Bob'

f (c: Parent)
//│ res: string
//│    = 'Bob'


def f x = case x of {
  | Parent -> x.name
  | Child -> x.name
  }
//│ f: (Parent with {name: 'a}) -> 'a
//│  = [Function: f3]

f c
//│ res: "Bob"
//│    = 'Bob'

f (c: Parent)
//│ res: string
//│    = 'Bob'

