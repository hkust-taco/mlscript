

def set0: MutArray['a..'b] -> 'a -> ()
//│ set0: MutArray['b] -> 'b -> ()
//│     = <missing implementation>

def set1: MutArray['a..'b] -> 'b -> ()
//│ set1: MutArray['b] -> 'b -> ()
//│     = <missing implementation>

def set2: MutArray[int..number] -> int -> ()
//│ set2: in MutArray[in int out number] -> int -> () out MutArray[in number out int] -> int -> ()
//│     = <missing implementation>

:e
def set3: MutArray[number..int] -> 'b -> ()
//│ ╔══[ERROR] Type mismatch in type bounds:
//│ ║  l.16: 	def set3: MutArray[number..int] -> 'b -> ()
//│ ║        	                   ^^^^^^^^^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.16: 	def set3: MutArray[number..int] -> 'b -> ()
//│ ║        	                   ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.16: 	def set3: MutArray[number..int] -> 'b -> ()
//│ ╙──      	                           ^^^
//│ set3: in MutArray[in number out int] -> anything -> () out MutArray[in int out number] -> anything -> ()
//│     = <missing implementation>


:ns
fun x -> set2 x 0
//│ res: forall 'a 'b. 'a -> 'b
//│   where
//│     'b :> ()
//│     'a <: MutArray[in int out number]
//│    = <no result>
//│      set2 is not implemented

// :ns
fun x -> set0 x 0
fun x -> set1 x 0
//│ res: MutArray[in 0 | 'b out 'b] -> ()
//│    = <no result>
//│      set0 is not implemented
//│ res: MutArray[in 0 | 'b out 'b] -> ()
//│    = <no result>
//│      set1 is not implemented


def foo: MutArray[int..number]
//│ foo: in MutArray[in number out int] out MutArray[in int out number]
//│    = <missing implementation>

:e
:ng
foo = foo
//│ MutArray[in int out number]
//│   <:  foo:
//│ MutArray[in number out int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.56: 	foo = foo
//│ ║        	^^^^^^^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                       ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                  ^^^
//│ ╟── from type bounds:
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ╙──      	                  ^^^^^^^^^^^

:e
foo = (mut 0,)
//│ (mut 'a,)
//│   where
//│     'a :> 0
//│   <:  foo:
//│ MutArray[in number out int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.74: 	foo = (mut 0,)
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                       ^^^^^^
//│ ╟── but it flows into mutable tuple field with expected type `int`
//│ ║  l.74: 	foo = (mut 0,)
//│ ║        	           ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                  ^^^
//│ ╟── from type bounds:
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ╙──      	                  ^^^^^^^^^^^
//│    = [ 0 ]

:e
set0 foo
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.98: 	set0 foo
//│ ║        	^^^^^^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                       ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                  ^^^
//│ ╟── from type bounds:
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ╙──      	                  ^^^^^^^^^^^
//│ res: error | int -> ()
//│    = <no result>
//│      set0 is not implemented

:e
set2 foo
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.116: 	set2 foo
//│ ║         	^^^^^^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                       ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.11: 	def set2: MutArray[int..number] -> int -> ()
//│ ║        	                   ^^^
//│ ╟── from type bounds:
//│ ║  l.11: 	def set2: MutArray[int..number] -> int -> ()
//│ ╙──      	                   ^^^^^^^^^^^
//│ res: error | int -> ()
//│    = <no result>
//│      set2 is not implemented

:e
foo : MutArray['a]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.134: 	foo : MutArray['a]
//│ ║         	^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                       ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                  ^^^
//│ ╟── from type bounds:
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ╙──      	                  ^^^^^^^^^^^
//│ res: MutArray['a]
//│   where
//│     'a :> number
//│        <: int
//│    = [ 0 ]

foo : Array['a]
//│ res: Array[number]
//│    = [ 0 ]

:e
foo[0] <- 1
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.158: 	foo[0] <- 1
//│ ║         	^^^^^^^^^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                       ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                  ^^^
//│ ╟── from assigned array element:
//│ ║  l.158: 	foo[0] <- 1
//│ ╙──       	^^^^^^
//│ = []

foo[0]
//│ res: number | undefined
//│    = 1

res : number | undefined
//│ res: number | undefined
//│    = 1

foo[0]
//│ res: number | undefined
//│    = 1

:e
res : int | undefined
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.186: 	res : int | undefined
//│ ║         	^^^
//│ ╟── type `number` does not match type `int | undefined`
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                       ^^^^^^
//│ ╟── but it flows into reference with expected type `int | undefined`
//│ ║  l.186: 	res : int | undefined
//│ ║         	^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.186: 	res : int | undefined
//│ ╙──       	      ^^^^^^^^^^^^^^^
//│ res: int | undefined
//│    = 1


:e
foo2 = foo : MutArray['a..'b]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.204: 	foo2 = foo : MutArray['a..'b]
//│ ║         	       ^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                       ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                  ^^^
//│ ╟── from type bounds:
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ╙──      	                  ^^^^^^^^^^^
//│ foo2: MutArray[in int & 'b out number | 'b]
//│     = [ 1 ]

foo2[0]
//│ res: number | undefined
//│    = 1

:e
res : undefined
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.225: 	res : undefined
//│ ║         	^^^
//│ ╟── type `number` does not match type `undefined`
//│ ║  l.50: 	def foo: MutArray[int..number]
//│ ║        	                       ^^^^^^
//│ ╟── but it flows into reference with expected type `undefined`
//│ ║  l.225: 	res : undefined
//│ ║         	^^^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.225: 	res : undefined
//│ ╙──       	      ^^^^^^^^^
//│ res: undefined
//│    = 1


:e
def foo: MutArray[number..int]
//│ ╔══[ERROR] Type mismatch in type bounds:
//│ ║  l.243: 	def foo: MutArray[number..int]
//│ ║         	                  ^^^^^^^^^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.243: 	def foo: MutArray[number..int]
//│ ║         	                  ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.243: 	def foo: MutArray[number..int]
//│ ╙──       	                          ^^^
//│ foo: in MutArray[in int out number] out MutArray[in number out int]
//│    = <missing implementation>

foo = (mut 0,)
//│ (mut 'a,)
//│   where
//│     'a :> 0
//│   <:  foo:
//│ MutArray[in int out number]
//│    = [ 0 ]

foo[0]
//│ res: int | undefined
//│    = 0

res : int | undefined
//│ res: int | undefined
//│    = 0

foo[0] <- 1
//│ = []

foo[0] <- (1/2)
//│ = []



:ng
bar = if true then error : MutArray[int] else error : MutArray[number]
//│ bar: MutArray[in int out number]

fun x -> (x : MutArray[int], x : MutArray[number])
//│ res: MutArray[in number out int] -> (MutArray[int], MutArray[number],)
//│    = [Function: res]

fun x -> if true then x : MutArray[int] else x : MutArray[number]
//│ res: MutArray[in number out int] -> MutArray[in int out number]
//│    = [Function: res]



// * FIXME
def maf: MutArray[int..number] -> MutArray[int..number]
//│ maf: in MutArray[in int out number] -> MutArray[in number out int] out MutArray[in number out int] -> MutArray[in int out number]
//│    = <missing implementation>
:ns
maf
//│ res: MutArray[in int out number] -> MutArray[in int out number]
//│    = <no result>
//│      maf is not implemented

// :ds
maf
//│ res: MutArray[in number out int] -> MutArray[in int out number]
//│    = <no result>
//│      maf is not implemented


:e
maf ((mut error,))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.312: 	maf ((mut error,))
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.295: 	def maf: MutArray[int..number] -> MutArray[int..number]
//│ ║         	                       ^^^^^^
//│ ╟── but it flows into mutable tuple field with expected type `int`
//│ ║  l.312: 	maf ((mut error,))
//│ ║         	          ^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.295: 	def maf: MutArray[int..number] -> MutArray[int..number]
//│ ║         	                  ^^^
//│ ╟── from type bounds:
//│ ║  l.295: 	def maf: MutArray[int..number] -> MutArray[int..number]
//│ ╙──       	                  ^^^^^^^^^^^
//│ res: error | MutArray[in int out number]
//│    = <no result>
//│      maf is not implemented

:e
fun x -> maf ((mut x,))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.333: 	fun x -> maf ((mut x,))
//│ ║         	         ^^^^^^^^^^^^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.295: 	def maf: MutArray[int..number] -> MutArray[int..number]
//│ ║         	                       ^^^^^^
//│ ╟── but it flows into mutable tuple field with expected type `int`
//│ ║  l.333: 	fun x -> maf ((mut x,))
//│ ║         	                   ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.295: 	def maf: MutArray[int..number] -> MutArray[int..number]
//│ ║         	                  ^^^
//│ ╟── from type bounds:
//│ ║  l.295: 	def maf: MutArray[int..number] -> MutArray[int..number]
//│ ╙──       	                  ^^^^^^^^^^^
//│ res: int -> (error | MutArray[in int out number])
//│    = <no result>
//│      maf is not implemented

maf error
//│ res: MutArray[in int out number]
//│    = <no result>
//│      maf is not implemented


:e
def maf: MutArray[number..int] -> MutArray[int..number]
//│ ╔══[ERROR] Type mismatch in type bounds:
//│ ║  l.360: 	def maf: MutArray[number..int] -> MutArray[int..number]
//│ ║         	                  ^^^^^^^^^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.360: 	def maf: MutArray[number..int] -> MutArray[int..number]
//│ ║         	                  ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.360: 	def maf: MutArray[number..int] -> MutArray[int..number]
//│ ╙──       	                          ^^^
//│ maf: in MutArray[in number out int] -> MutArray[in number out int] out MutArray[in int out number] -> MutArray[in int out number]
//│    = <missing implementation>

maf ((mut error,))
fun x -> maf ((mut x,))
//│ res: MutArray[in int out number]
//│    = <no result>
//│      maf is not implemented
//│ res: number -> MutArray[in int out number]
//│    = <no result>
//│      maf is not implemented




type R[A] = { get: A; set: A -> () }
//│ Defined type alias R[=A]

def foo: R[int..number]
foo = { get = 0; set = fun n -> () }
//│ foo: R[in int out number]
//│    = <missing implementation>
//│ {get: 0, set: anything -> ()}
//│   <:  foo:
//│ R[in int out number]
//│    = { get: 0, set: [Function: set] }

foo.get
//│ res: number
//│    = 0

:e
foo: R['a]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.402: 	foo: R['a]
//│ ║         	^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	                ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	           ^^^
//│ ╟── from type bounds:
//│ ║  l.388: 	def foo: R[int..number]
//│ ╙──       	           ^^^^^^^^^^^
//│ res: R['a]
//│   where
//│     'a :> number
//│        <: int
//│    = { get: 0, set: [Function: set] }

:e
foo: R['a..'b]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.422: 	foo: R['a..'b]
//│ ║         	^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	                ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	           ^^^
//│ ╟── from type bounds:
//│ ║  l.388: 	def foo: R[int..number]
//│ ╙──       	           ^^^^^^^^^^^
//│ res: R[in int & 'b out number | 'b]
//│    = { get: 0, set: [Function: set] }

// * FIXME
res.get
//│ res: number
//│    = 0

type S[A] = { get: A; set: A -> () }
//│ Defined type alias S[=A]

:e
foo: S['a]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.447: 	foo: S['a]
//│ ║         	^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	                ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	           ^^^
//│ ╟── from type bounds:
//│ ║  l.388: 	def foo: R[int..number]
//│ ╙──       	           ^^^^^^^^^^^
//│ res: S['a]
//│   where
//│     'a :> number
//│        <: int
//│    = { get: 0, set: [Function: set] }

:e
foo: S['a..'b]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.467: 	foo: S['a..'b]
//│ ║         	^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	                ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	           ^^^
//│ ╟── from type bounds:
//│ ║  l.388: 	def foo: R[int..number]
//│ ╙──       	           ^^^^^^^^^^^
//│ res: S[in int & 'b out number | 'b]
//│    = { get: 0, set: [Function: set] }

foo: { get: number; set: int -> () }
//│ res: {get: number, set: int -> ()}
//│    = { get: 0, set: [Function: set] }

:e
foo: { get: int }
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.488: 	foo: { get: int }
//│ ║         	^^^
//│ ╟── type `number` is not an instance of type `int`
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	                ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.488: 	foo: { get: int }
//│ ╙──       	            ^^^
//│ res: {get: int}
//│    = { get: 0, set: [Function: set] }

:e
foo: { set: number -> () }
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.502: 	foo: { set: number -> () }
//│ ║         	^^^
//│ ╟── type `number` is not an instance of type `int`
//│ ║  l.502: 	foo: { set: number -> () }
//│ ║         	            ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	           ^^^
//│ ╟── from type bounds:
//│ ║  l.388: 	def foo: R[int..number]
//│ ╙──       	           ^^^^^^^^^^^
//│ res: {set: number -> ()}
//│    = { get: 0, set: [Function: set] }

foo2 = foo: { get: 'a; set: 'b -> () }
//│ foo2: {get: number, set: int -> ()}
//│     = { get: 0, set: [Function: set] }

:e
foo2: S['a]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.523: 	foo2: S['a]
//│ ║         	^^^^
//│ ╟── type `number` is not an instance of type `int`
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	                ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	           ^^^
//│ ╟── from type variable:
//│ ║  l.518: 	foo2 = foo: { get: 'a; set: 'b -> () }
//│ ╙──       	                            ^^
//│ res: S['a]
//│   where
//│     'a :> number
//│        <: int
//│    = { get: 0, set: [Function: set] }

:e
foo2: S['a..'b]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.543: 	foo2: S['a..'b]
//│ ║         	^^^^
//│ ╟── type `number` is not an instance of type `int`
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	                ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.388: 	def foo: R[int..number]
//│ ║         	           ^^^
//│ ╟── from type variable:
//│ ║  l.518: 	foo2 = foo: { get: 'a; set: 'b -> () }
//│ ╙──       	                            ^^
//│ res: S[in int & 'b out number | 'b]
//│    = { get: 0, set: [Function: set] }


{ a = 0 } : { a: 'a..'b }
//│ res: {a: 0}
//│    = { a: 0 }


def maf: { get: int..number; set: (int..number) -> () } -> { get: int..number; set: (int..number) -> () }
//│ maf: in {get: number, set: int -> ()} -> {get: int, set: number -> ()} out {get: int, set: number -> ()} -> {get: number, set: int -> ()}
//│    = <missing implementation>



