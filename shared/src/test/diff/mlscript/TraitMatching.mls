
trait MyTrait[A]: { value: A }
//│ Defined trait MyTrait[+A]


def test1 x = case x of { MyTrait -> x.value | _ -> 0 }
//│ test1: ({value: 'value} & #MyTrait | ~#MyTrait) -> (0 | 'value)
//│      = [Function: test1]

:e
test1 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.11: 	test1 1
//│ ║        	^^^^^^^
//│ ╟── integer literal of type `1 & #MyTrait` does not have field 'value'
//│ ║  l.11: 	test1 1
//│ ║        	      ^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.6: 	def test1 x = case x of { MyTrait -> x.value | _ -> 0 }
//│ ║       	                                     ^^^^^^^
//│ ╟── from reference:
//│ ║  l.6: 	def test1 x = case x of { MyTrait -> x.value | _ -> 0 }
//│ ╙──     	                   ^
//│ res: 0 | error
//│    = 0

test1 { value = 1 }
//│ res: 0 | 1
//│    = 0

mt = MyTrait { value = 1 }
//│ mt: {value: 1} & #MyTrait
//│   = { value: 1 }

test1 mt
//│ res: 0 | 1
//│    = 1

class C1: MyTrait[int]
//│ Defined class C1

test1 (C1 { value = 1 })
//│ res: 0 | 1
//│    = 1


def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ test2: ({default: 'value} & ~#MyTrait | {value: 'value} & #MyTrait) -> 'value
//│      = [Function: test2]

:e
test2 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.52: 	test2 1
//│ ║        	^^^^^^^
//│ ╟── expression of type `1 & ~#MyTrait` does not have field 'default'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.47: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ╙──      	                                                    ^^^^^^^^^
//│ res: error
//│    = undefined

:e
test2 { value = 1 }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.64: 	test2 { value = 1 }
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `{value: 1} & ~#MyTrait` does not have field 'default'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.47: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ╙──      	                                                    ^^^^^^^^^
//│ res: 1 | error
//│    = undefined

test2 { value = 1; default = "hi" }
//│ res: "hi" | 1
//│    = 'hi'

test2 mt
//│ res: 1
//│    = 1

test2 (C1 { value = 1 })
//│ res: 1
//│    = 1


// TODO: ability to declare classes as `final` so they can be assumed _not_ to inherit from a trait?
class C2: { default: string }
//│ Defined class C2

:e
test2 (C2 { default = "oops" })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.93: 	test2 (C2 { default = "oops" })
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `C2 & {default: ?default} & #MyTrait` does not have field 'value'
//│ ║  l.93: 	test2 (C2 { default = "oops" })
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.47: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ║        	                                     ^^^^^^^
//│ ╟── from reference:
//│ ║  l.47: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ╙──      	                   ^
//│ res: "oops" | error
//│    = 'oops'

// Note: `value` is unused here; would deserve a warning
c2 = C2 { value = 1; default = "oops" }
//│ c2: C2 & {default: "oops"}
//│   = C2 { default: 'oops' }

:e
test2 c2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.115: 	test2 c2
//│ ║         	^^^^^^^^
//│ ╟── application of type `C2 & {default: ?default} & #MyTrait` does not have field 'value'
//│ ║  l.110: 	c2 = C2 { value = 1; default = "oops" }
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{value: ?value}`
//│ ║  l.115: 	test2 c2
//│ ║         	      ^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.47: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ║        	                                     ^^^^^^^
//│ ╟── from reference:
//│ ║  l.47: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ╙──      	                   ^
//│ res: "oops" | error
//│    = 'oops'

test2 (c2 with { value = 1 })
//│ res: "oops" | 1
//│    = 'oops'


// Note: if we allowed this, we'd have to be careful in the semantics of trait ctors!
:e
class C3: { default: string } & ~myTrait
//│ ╔══[ERROR] cannot inherit from a type negation
//│ ║  l.141: 	class C3: { default: string } & ~myTrait
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:e
class C3: { default: string } & ~MyTrait[anything]
//│ ╔══[ERROR] cannot inherit from a type negation
//│ ║  l.147: 	class C3: { default: string } & ~MyTrait[anything]
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

def strawman: C2 & ~MyTrait[anything]
//│ strawman: C2 & ~MyTrait[?]
//│         = <missing implementation>

test2 strawman
//│ res: string
//│    = <no result>
//│      strawman is not implemented

strawman: C2
//│ res: C2
//│    = <no result>
//│      strawman is not implemented

:e
strawman: ~{ value: anything }
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.167: 	strawman: ~{ value: anything }
//│ ║         	^^^^^^^^
//│ ╟── type `C2 & ~MyTrait[?]` does not match type `~{value: anything}`
//│ ║  l.152: 	def strawman: C2 & ~MyTrait[anything]
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `~{value: anything}`
//│ ║  l.167: 	strawman: ~{ value: anything }
//│ ║         	^^^^^^^^
//│ ╟── Note: constraint arises from type negation:
//│ ║  l.167: 	strawman: ~{ value: anything }
//│ ╙──       	          ^^^^^^^^^^^^^^^^^^^^
//│ res: nothing
//│    = <no result>
//│      strawman is not implemented

