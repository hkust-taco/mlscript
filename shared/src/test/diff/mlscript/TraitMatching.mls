
trait MyTrait[A]: { value: A }
//│ Defined trait MyTrait


def test1 x = case x of { MyTrait -> x.value | _ -> 0 }
//│ test1: {value: 'a} & myTrait | ~myTrait -> 'a | 0

:e
test1 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.10: 	test1 1
//│ ║        	^^^^^^^
//│ ╟── expression of type `1 & ~?a | 1 & myTrait` does not match type `{value: ?b}`
//│ ║  l.10: 	test1 1
//│ ║        	      ^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.6: 	def test1 x = case x of { MyTrait -> x.value | _ -> 0 }
//│ ║       	                                     ^
//│ ╟── from refined scrutinee:
//│ ║  l.6: 	def test1 x = case x of { MyTrait -> x.value | _ -> 0 }
//│ ╙──     	                   ^
//│ res: 0 | error

test1 { value = 1 }
//│ res: 1 | 0

def mt = MyTrait { value = 1 }
//│ mt: {value: 1} & myTrait

test1 mt
//│ res: 1 | 0

class C1: MyTrait[int]
//│ Defined class C1

test1 (C1 { value = 1 })
//│ res: 1 | 0


def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ test2: {value: 'a} & myTrait | {default: 'a} & ~myTrait -> 'a

:e
test2 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.45: 	test2 1
//│ ║        	^^^^^^^
//│ ╟── expression of type `1 & ~myTrait` does not match type `{default: ?a}`
//│ ║  l.45: 	test2 1
//│ ║        	      ^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.41: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ║        	                                                    ^
//│ ╟── from reference:
//│ ║  l.41: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ╙──      	                   ^
//│ res: error

:e
test2 { value = 1 }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.61: 	test2 { value = 1 }
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `{value: 1} & ~myTrait` does not match type `{default: ?a}`
//│ ║  l.61: 	test2 { value = 1 }
//│ ║        	      ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.41: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ║        	                                                    ^
//│ ╟── from reference:
//│ ║  l.41: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ╙──      	                   ^
//│ res: 1 | error

test2 { value = 1; default = "hi" }
//│ res: 1 | "hi"

test2 mt
//│ res: 1

test2 (C1 { value = 1 })
//│ res: 1


// TODO: ability to declare classes as `final` so they can be assumed _not_ to inherit from a trait?
class C2: { default: string }
//│ Defined class C2

:e
test2 (C2 { default = "oops" })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.91: 	test2 (C2 { default = "oops" })
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `c2 & {default: ?a | "oops"} & ~?b | c2 & {default: ?a | "oops"} & myTrait` does not match type `{value: ?c}`
//│ ║  l.91: 	test2 (C2 { default = "oops" })
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.41: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ║        	                                     ^
//│ ╟── from refined scrutinee:
//│ ║  l.41: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ╙──      	                   ^
//│ res: "oops" | error

// Note: `value` is unused here; would deserve a warning
def c2 = C2 { value = 1; default = "oops" }
//│ c2: c2 & {default: "oops"}

:e
test2 c2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.111: 	test2 c2
//│ ║         	^^^^^^^^
//│ ╟── expression of type `c2 & {default: ?a | "oops"} & ~?b | c2 & {default: ?a | "oops"} & myTrait` does not match type `{value: ?c}`
//│ ║  l.107: 	def c2 = C2 { value = 1; default = "oops" }
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{value: ?d} & myTrait & ?e | {default: ?f} & ?g & ~myTrait`
//│ ║  l.111: 	test2 c2
//│ ║         	      ^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.41: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ║        	                                     ^
//│ ╟── from refined scrutinee:
//│ ║  l.41: 	def test2 x = case x of { MyTrait -> x.value | _ -> x.default }
//│ ╙──      	                   ^
//│ res: "oops" | error

test2 (c2 with { value = 1 })
//│ res: 1 | "oops"


// Note: if we allowed this, we'd have to be careful in the semantics of trait ctors!
:e
class C3: { default: string } & ~MyTrait[anything]
//│ ╔══[ERROR] cannot inherit from a type negation
//│ ║  l.135: 	class C3: { default: string } & ~MyTrait[anything]
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

def strawman: C2 & ~MyTrait[anything]
//│ strawman: c2 & {default: string} & ~myTrait

test2 strawman
//│ res: string

strawman: C2
//│ res: c2 & {default: string}

:e
strawman: ~{ value: anything }
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.150: 	strawman: ~{ value: anything }
//│ ║         	^^^^^^^^
//│ ╟── expression of type `c2 & {default: string} & ~myTrait` does not match type `~{value: anything}`
//│ ║  l.140: 	def strawman: C2 & ~MyTrait[anything]
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `~{value: anything}`
//│ ║  l.150: 	strawman: ~{ value: anything }
//│ ║         	^^^^^^^^
//│ ╟── Note: constraint arises from type negation:
//│ ║  l.150: 	strawman: ~{ value: anything }
//│ ╙──       	          ^^^^^^^^^^^^^^^^^^^^
//│ res: nothing

