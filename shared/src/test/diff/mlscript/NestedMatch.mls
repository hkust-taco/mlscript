
def f x = case x of {
  | 0 -> 0
  | _ -> case x of {
    | 1 -> 1
    | 2 -> 2
    }
  }
//│ f: (0 | 1 | 2) -> (0 | 1 | 2)
//│  = [Function: f]

def f x = case x of {
  | 0 -> 0
  | _ -> case x of {
    | 1 -> 1
    | _ -> 2
    }
  }
//│ f: anything -> (0 | 1 | 2)
//│  = [Function: f1]

def f x = case x of {
  | 0 -> 0
  | _ -> case x of {
    | 1 -> 1
    | _ -> x
    }
  }
//│ f: (0 | 1 | 'a & ~0 & ~1) -> (0 | 1 | 'a)
//│  = [Function: f2]

def f x = case x of {
  | 0 -> x
  | _ -> case x of {
    | 1 -> 1
    | _ -> x
    }
  }
//│ f: (1 | 'a & (0 | ~0 & ~1)) -> (1 | 'a)
//│  = [Function: f3]

