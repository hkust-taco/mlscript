
class List[A]
  method Fold: (() -> 'b, (A, List[A]) -> 'b) -> 'b
class Nil[A]: List[A]
  method Fold(f, _) = f()
class Cons[A]: List[A] & { head: A; tail: List[A] }
  method Fold(_, f) = f(this.head, this.tail)
//│ Defined class List[+A]
//│ Declared List.Fold: List['A] -> (() -> 'b, ('A, List['A],) -> 'b,) -> 'b
//│ Defined class Nil[+A]
//│ Defined Nil.Fold: Nil[?] -> (() -> 'a, anything,) -> 'a
//│ Defined class Cons[+A]
//│ Defined Cons.Fold: Cons['A] -> (anything, ('A, List['A],) -> 'a,) -> 'a

def nil = Nil {} : List['a]
def cons(head, tail) = Cons { head; tail } : List['a]
//│ nil: List[nothing]
//│    = [Function: nil]
//│ cons: ('a, List['a],) -> List['a]
//│     = [Function: cons]

rec def find(table, key) =
  table.Fold(
    fun () -> undefined,
    fun (h, t) -> if eq h.key key then h.val else find(t, key))
//│ find: (List[{key: anything, val: 'a}], anything,) -> (undefined | 'a)
//│     = [Function: find]

ls = cons({key="I"; val=id}, cons({key="omega"; val=fun x -> x x}, nil))
//│ ls: List[{key: "I" | "omega", val: forall 'a 'b 'c. ('a -> 'b & 'c & 'a) -> ('c | 'b)}]
//│   = Cons {
//│       head: { key: 'I', val: [Function: id] },
//│       tail: Cons { head: { key: 'omega', val: [Function: val] }, tail: Nil {} }
//│     }

res = find(ls, "omega")
//│ res: undefined | ('a -> 'b & 'b & 'a) -> 'b
//│    = [Function: val]

case res of undefined -> "???", _ -> res id "!"
//│ res: "!" | "???"
//│    = '!'

find(ls, "oops")
//│ res: undefined | ('a -> 'b & 'c & 'a) -> ('c | 'b)
//│    = undefined

