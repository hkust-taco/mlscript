
// TODO have a way of specifying the variance explicitly,
//    because it would be too expensive to infer it when it's needed in method implementations
//    (we'd have to re-type-check methods at every iteration of the fixed point)

// class Covar[out A]

:e
:w
class Covar[A]
  method CovarMtd =
    let tmp = (error : Covar[{ x: int }]) : Covar[{}]
    in ()
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.12: 	    let tmp = (error : Covar[{ x: int }]) : Covar[{}]
//│ ║        	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not have field 'x'
//│ ║  l.12: 	    let tmp = (error : Covar[{ x: int }]) : Covar[{}]
//│ ║        	                                                  ^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.12: 	    let tmp = (error : Covar[{ x: int }]) : Covar[{}]
//│ ╙──      	                             ^^^^^^^^^^
//│ Defined class Covar[±A]
//│ Defined Covar.CovarMtd: Covar[anything] -> ()
//│ ╔══[WARNING] Type definition Covar has bivariant type parameters:
//│ ║  l.10: 	class Covar[A]
//│ ║        	      ^^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.10: 	class Covar[A]
//│ ╙──      	            ^

:re
(error : Covar[{ x: int }]) : Covar[{}]
//│ res: Covar[anything]
//│ Runtime error:
//│   Error: unexpected runtime error

