
:p
2 + 2
//│ Parsed: +(2,)(2,);
//│ Desugared: +(2,)(2,)
//│ AST: App(App(Var(+),Tup(List((None,Fld(_,IntLit(2)))))),Tup(List((None,Fld(_,IntLit(2))))))
//│ res: int
//│    = 4

:p
1 + 2 * 2 + 3
//│ Parsed: +(+(1,)(*(2,)(2,),),)(3,);
//│ Desugared: +(+(1,)(*(2,)(2,),),)(3,)
//│ AST: App(App(Var(+),Tup(List((None,Fld(_,App(App(Var(+),Tup(List((None,Fld(_,IntLit(1)))))),Tup(List((None,Fld(_,App(App(Var(*),Tup(List((None,Fld(_,IntLit(2)))))),Tup(List((None,Fld(_,IntLit(2)))))))))))))))),Tup(List((None,Fld(_,IntLit(3))))))
//│ res: int
//│    = 8

:e
:p
1 + 2 / 2 + 3
//│ Parsed: +(+(1,)(/(2,)(2,),),)(3,);
//│ Desugared: +(+(1,)(/(2,)(2,),),)(3,)
//│ AST: App(App(Var(+),Tup(List((None,Fld(_,App(App(Var(+),Tup(List((None,Fld(_,IntLit(1)))))),Tup(List((None,Fld(_,App(App(Var(/),Tup(List((None,Fld(_,IntLit(2)))))),Tup(List((None,Fld(_,IntLit(2)))))))))))))))),Tup(List((None,Fld(_,IntLit(3))))))
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.20: 	1 + 2 / 2 + 3
//│ ║        	^^^^^^^^^
//│ ╟── operator application of type `number` is not an instance of type `int`
//│ ║  l.20: 	1 + 2 / 2 + 3
//│ ╙──      	    ^^^^^
//│ res: int
//│    = 5

:e
:ge
:p
1 |> 2 || 3
//│ Parsed: ||(|>(1,)(2,),)(3,);
//│ Desugared: ||(|>(1,)(2,),)(3,)
//│ AST: App(App(Var(||),Tup(List((None,Fld(_,App(App(Var(|>),Tup(List((None,Fld(_,IntLit(1)))))),Tup(List((None,Fld(_,IntLit(2))))))))))),Tup(List((None,Fld(_,IntLit(3))))))
//│ ╔══[ERROR] identifier not found: |>
//│ ║  l.36: 	1 |> 2 || 3
//│ ╙──      	  ^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.36: 	1 |> 2 || 3
//│ ║        	^^^^^^^^^^^
//│ ╟── integer literal of type `3` is not an instance of type `bool`
//│ ║  l.36: 	1 |> 2 || 3
//│ ╙──      	          ^
//│ res: bool | error
//│ Code generation encountered an error:
//│   unresolved symbol |>

:p
true || false && true || false
//│ Parsed: ||(||(true,)(&&(false,)(true,),),)(false,);
//│ Desugared: ||(||(true,)(&&(false,)(true,),),)(false,)
//│ AST: App(App(Var(||),Tup(List((None,Fld(_,App(App(Var(||),Tup(List((None,Fld(_,Var(true)))))),Tup(List((None,Fld(_,App(App(Var(&&),Tup(List((None,Fld(_,Var(false)))))),Tup(List((None,Fld(_,Var(true)))))))))))))))),Tup(List((None,Fld(_,Var(false))))))
//│ res: bool
//│    = true


// Infix operators not yet supported:

:pe
-1
//│ /!\ Parse error: Expected end-of-input:1:1, found "-1;" at l.65:1: -1

:pe
- 1
//│ /!\ Parse error: Expected end-of-input:1:1, found "- 1;" at l.69:1: - 1
