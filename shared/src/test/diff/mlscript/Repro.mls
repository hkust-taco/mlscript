
class C
//│ Defined class C

:p
def n: C{}
//│ Parsed: rec def n: [] -> C; {};
//│ Desugared: rec def n: [] -> C
//│ Desugared: {}
//│ n: C
//│  = <missing implementation>
//│ res: anything
//│    = {}


// class G[A]: { a: G[A] & A & G[A] }
class G[A]: { a: G[A] }
//│ Defined class G

def g: G['a] & {a: 'a} as 'a
//│ g: 'a
//│   where
//│     'a := G['a] & {a: 'a}
//│  = <missing implementation>

:NoJS

// rec def g2 a = G { a }
// :re
// :ds
rec def g2 = G { a = g2 }
//│ g2: G['A] with {a: 'a}
//│   where
//│     'a :> G['A] with {a: 'a}

// g = g2
// :d
// :re
g = g
//│ 'a
//│   where
//│     'a := G['a] & {a: 'a}
//│   <:  g:
//│ 'a
//│   where
//│     'a := G['a] & {a: 'a}


def manual: 'a -> nothing as 'a
//│ manual: 'a
//│   where
//│     'a := 'a -> nothing

:e
manual id
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.55: 	manual id
//│ ║        	^^^^^^^^^
//│ ╟── type `?a -> nothing` does not match type `nothing`
//│ ║  l.49: 	def manual: 'a -> nothing as 'a
//│ ║        	            ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.49: 	def manual: 'a -> nothing as 'a
//│ ╙──      	                  ^^^^^^^
//│ res: ('a & 'b) -> 'b | error
//│   where
//│     'a :> ('a & 'b) -> 'b
//│        <: ('a | 'b -> 'b) -> nothing & 'b
//│     'b :> ('a & 'b) -> 'b
//│        <: nothing

// :ds
def manual: 'a -> anything as 'a
//│ manual: 'a
//│   where
//│     'a := 'a -> anything

manual id
//│ res: anything


def f: { mut x: int }
//│ f: {mut x: int}

f: { mut x: int }
//│ res: {mut x: int}

f = { mut x = 1 }
//│ {mut x: 'a}
//│   where
//│     'a :> 1
//│   <:  f:
//│ {mut x: int}




