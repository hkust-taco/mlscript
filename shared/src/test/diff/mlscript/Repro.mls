
id
//│ res: 'a -> 'a
//│    = [Function: id]

id 1
//│ res: 1
//│    = 1

class C: { x: int }
//│ Defined class C

:d
:ns
C
//│ 0. Typing term C
//│ 0. : [((None..{x: None..x0},) -> (c<> & {x: None..x0}))]
//│ Typed as: [((None..{x: None..x0},) -> (c<> & {x: None..x0}))]
//│  where: x0 <: Int
//│ res: {x: int} -> (c & {x: 'x})
//│    = [Function: res]

C
//│ res: {x: int & 'x} -> (C with {x: 'x})
//│    = [Function: res]

C { x = 1 }
//│ res: C & {x: 1}
//│    = C { x: 1 }


def r: { x: int }
//│ r: {x: int}
//│  = <missing implementation>

:re
r
//│ res: {x: int}
//│    = <no result>
//│      r is not implemented

:re
r: { x: 'a }
//│ res: {x: int}
//│    = <no result>
//│      r is not implemented




