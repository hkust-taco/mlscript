:ShowRelativeLineNums


:e
class oops: { x: int }
//│ ╔══[ERROR] Type names must start with a capital letter
//│ ║  l.+1: 	class oops: { x: int }
//│ ╙──      	      ^^^^

:e
type oops = int
//│ ╔══[ERROR] Type names must start with a capital letter
//│ ║  l.+1: 	type oops = int
//│ ╙──      	     ^^^^
//│ ╔══[ERROR] Type 'Oops' is already defined.
//│ ║  l.+1: 	type oops = int
//│ ╙──      	     ^^^^

class Oops2
//│ Defined class Oops2

:e
class oops2
//│ ╔══[ERROR] Type names must start with a capital letter
//│ ║  l.+1: 	class oops2
//│ ╙──      	      ^^^^^
//│ ╔══[ERROR] Type 'Oops2' is already defined.
//│ ║  l.+1: 	class oops2
//│ ╙──      	      ^^^^^


type Hello = int
//│ Defined type alias Hello

42: Hello
//│ res: int
//│    = 42

:e
42: hello
//│ ╔══[ERROR] Type alias Hello cannot be used as a type tag
//│ ║  l.+1: 	42: hello
//│ ╙──      	    ^^^^^
//│ res: error
//│    = 42


:e
aa = { a = 1; a = "oops" }
//│ ╔══[ERROR] Multiple declarations of field name a in record literal
//│ ║  l.+1: 	aa = { a = 1; a = "oops" }
//│ ║        	     ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Declared at
//│ ║  l.+1: 	aa = { a = 1; a = "oops" }
//│ ║        	       ^
//│ ╟── Declared at
//│ ║  l.+1: 	aa = { a = 1; a = "oops" }
//│ ╙──      	              ^
//│ aa: {a: 1, a: "oops"}
//│   = { a: 'oops' }

:e
aa: { a: int; a: string }
//│ ╔══[ERROR] Multiple declarations of field name a in record type
//│ ║  l.+1: 	aa: { a: int; a: string }
//│ ║        	    ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Declared at
//│ ║  l.+1: 	aa: { a: int; a: string }
//│ ║        	      ^
//│ ╟── Declared at
//│ ║  l.+1: 	aa: { a: int; a: string }
//│ ╙──      	              ^
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.+1: 	aa: { a: int; a: string }
//│ ║        	^^
//│ ╟── integer literal of type `1` does not match type `string`
//│ ║  l.49: 	aa = { a = 1; a = "oops" }
//│ ║        	           ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.+1: 	aa: { a: int; a: string }
//│ ╙──      	                 ^^^^^^
//│ res: {a: int, a: string}
//│    = { a: 'oops' }

aa.a
//│ res: 1
//│    = 'oops'

aa: { a: 'a }
//│ res: {a: 1}
//│    = { a: 'oops' }




// It is not sound to allow free type variables in type definitions


type Bad = { x: 'a }
//│ Defined type alias Bad

{x = 123}: Bad
//│ res: {x: nothing}
//│    = { x: 123 }


type BadRec = { x: 'a; y: BadRec }
//│ Defined type alias BadRec

def someRec: { y: 'a } as 'a
//│ someRec: {y: 'a} as 'a

// FIXME: causes SOF
// someRec: BadRec
// //│ ╔══[ERROR] Type mismatch in type ascription:
// //│ ║  l.97: 	someRec: BadRec
// //│ ║        	^^^^^^^
// //│ ╟── expression of type `{y: ?a}` does not have field 'x'
// //│ ║  l.93: 	def someRec: { y: 'a } as 'a
// //│ ║        	             ^^^^^^^^^
// //│ ╟── but it flows into reference with expected type `BadRec`
// //│ ║  l.97: 	someRec: BadRec
// //│ ║        	^^^^^^^
// //│ ╟── Note: constraint arises from record type:
// //│ ║  l.90: 	type BadRec = { x: 'a; y: BadRec }
// //│ ║        	              ^^^^^^^^^^^^^^^^^^^^
// //│ ╟── from type reference:
// //│ ║  l.97: 	someRec: BadRec
// //│ ╙──      	         ^^^^^^
// //│ /!!!\ Uncaught error: java.lang.StackOverflowError
// //│ 	at: mlscript.Typer$$Lambda$23743/1675470327.<init>(Unknown Source)
// //│ 	at: mlscript.Typer$$Lambda$23743/1675470327.get$Lambda(Unknown Source)
// //│ 	at: mlscript.Typer.rec$3(Typer.scala:624)
// //│ 	at: mlscript.Typer.$anonfun$typeType$12(Typer.scala:592)
// //│ 	at: scala.collection.immutable.List.map(List.scala:246)
// //│ 	at: mlscript.Typer.rec$3(Typer.scala:589)
// //│ 	at: mlscript.Typer.typeType(Typer.scala:647)
// //│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:144)
// //│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:142)
// //│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:329)


