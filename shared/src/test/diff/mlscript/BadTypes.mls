:ShowRelativeLineNums


:e
class oops: { x: int }
//│ ╔══[ERROR] Type names must start with a capital letter
//│ ║  l.+1: 	class oops: { x: int }
//│ ╙──      	      ^^^^

:e
type oops = int
//│ ╔══[ERROR] Type names must start with a capital letter
//│ ║  l.+1: 	type oops = int
//│ ╙──      	     ^^^^
//│ ╔══[ERROR] Type 'Oops' is already defined.
//│ ║  l.+1: 	type oops = int
//│ ╙──      	     ^^^^

class Oops2
//│ Defined class Oops2

:e
class oops2
//│ ╔══[ERROR] Type names must start with a capital letter
//│ ║  l.+1: 	class oops2
//│ ╙──      	      ^^^^^
//│ ╔══[ERROR] Type 'Oops2' is already defined.
//│ ║  l.+1: 	class oops2
//│ ╙──      	      ^^^^^


type Hello = int
//│ Defined type alias Hello

42: Hello
//│ res: Hello
//│    = 42

:e
42: hello
//│ ╔══[ERROR] Type alias Hello cannot be used as a type tag
//│ ║  l.+1: 	42: hello
//│ ╙──      	    ^^^^^
//│ res: error
//│    = 42


:e
aa = { a = 1; a = "oops" }
//│ ╔══[ERROR] Multiple declarations of field name a in record literal
//│ ║  l.+1: 	aa = { a = 1; a = "oops" }
//│ ║        	     ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Declared at
//│ ║  l.+1: 	aa = { a = 1; a = "oops" }
//│ ║        	       ^
//│ ╟── Declared at
//│ ║  l.+1: 	aa = { a = 1; a = "oops" }
//│ ╙──      	              ^
//│ aa: {a: 1, a: "oops"}
//│   = { a: 'oops' }

:e
aa: { a: int; a: string }
//│ ╔══[ERROR] Multiple declarations of field name a in record type
//│ ║  l.+1: 	aa: { a: int; a: string }
//│ ║        	    ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Declared at
//│ ║  l.+1: 	aa: { a: int; a: string }
//│ ║        	      ^
//│ ╟── Declared at
//│ ║  l.+1: 	aa: { a: int; a: string }
//│ ╙──      	              ^
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.+1: 	aa: { a: int; a: string }
//│ ║        	^^
//│ ╟── integer literal of type `1` does not match type `string`
//│ ║  l.49: 	aa = { a = 1; a = "oops" }
//│ ║        	           ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.+1: 	aa: { a: int; a: string }
//│ ╙──      	                 ^^^^^^
//│ res: {a: int, a: string}
//│    = { a: 'oops' }

aa.a
//│ res: 1
//│    = 'oops'

aa: { a: 'a }
//│ res: {a: 1}
//│    = { a: 'oops' }




// Note that free type variables in type definitions are now treated as global (level 0),
//    i.e., shared between all uses of the data type.
//  It would of course not be sound to refresh them on every expansion of the type definition


type Bad = { x: 'a }
//│ Defined type alias Bad

// :d
{x = 123}: Bad
//│ res: Bad
//│    = { x: 123 }

// Note: we should get {x: 123 | "ah"} here; but there seems to be a TV problem
// :d
{x = "ah"}: Bad
//│ res: Bad
//│    = { x: 'ah' }

:re
error: Bad
//│ res: Bad
//│ Runtime error:
//│   Error: unexpected runtime error

type BadRec = { x: 'a; y: BadRec }
//│ Defined type alias BadRec

:re
(fun (x: BadRec) -> ()) (error: BadRec)
//│ res: ()
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: BadRec
//│ res: BadRec
//│ Runtime error:
//│   Error: unexpected runtime error

def someRec: { y: 'a } as 'a
//│ someRec: 'a
//│   where
//│     'a :> {y: 'a}
//│        = <missing implementation>

:e
someRec: BadRec
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.+1: 	someRec: BadRec
//│ ║        	^^^^^^^
//│ ╟── type `{y: ?a}` does not have field 'x'
//│ ║  l.136: 	def someRec: { y: 'a } as 'a
//│ ║         	             ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{x: ?a0, y: BadRec}`
//│ ║  l.+1: 	someRec: BadRec
//│ ║        	^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.121: 	type BadRec = { x: 'a; y: BadRec }
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.+1: 	someRec: BadRec
//│ ╙──      	         ^^^^^^
//│ res: BadRec
//│    = <no result>
//│      someRec is not implemented

def someRec: { x: 'a; y: 'a } as 'a
//│ someRec: 'a
//│   where
//│     'a :> {x: 'a, y: 'a}
//│        = <missing implementation>

someRec: BadRec
//│ res: BadRec
//│    = <no result>
//│      someRec is not implemented

