
rec def f x = x
//│ f: 'a -> 'a
//│  = [Function: f]

f 1
//│ res: 1
//│    = 1

f 2
//│ res: 2
//│    = 2



rec def f = if true then fun (x: 'a) -> 32 else let tmp = f f + 1 in error
//│ f: anything -> 32
//│  = [Function: f1]


:e
rec def f = forall 'a. (fun (x: 'a) -> 32) : 'a
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.22: 	rec def f = forall 'a. (fun (x: 'a) -> 32) : 'a
//│ ║        	                       ^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `'a -> 32` does not match type `'a`
//│ ║  l.22: 	rec def f = forall 'a. (fun (x: 'a) -> 32) : 'a
//│ ║        	                        ^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from rigid type variable:
//│ ║  l.22: 	rec def f = forall 'a. (fun (x: 'a) -> 32) : 'a
//│ ╙──      	                   ^^
//│ f: nothing
//│  = [Function: f2]


