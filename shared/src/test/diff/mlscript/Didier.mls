

def either x y = if 42 == 6 * 7 then x else y
def fst((a,b)) = a
def snd((a,b)) = b
//│ either: 'a -> 'a -> 'a
//│       = [Function: either]
//│ fst: (('a, anything,),) -> 'a
//│    = [Function: fst]
//│ snd: ((anything, 'a,),) -> 'a
//│    = [Function: snd]

def K : 'A -> 'B -> 'B
K a b = b
type Sid = 'A -> 'A
def id : Sid
id x = x
def auto : Sid -> Sid
auto f = f f
//│ Defined type alias Sid
//│ K: anything -> 'B -> 'B
//│  = <missing implementation>
//│ anything -> 'a -> 'a
//│   <:  K:
//│ anything -> 'B -> 'B
//│  = [Function: K]
//│ id: Sid
//│   = <missing implementation>
//│ 'a -> 'a
//│   <:  id:
//│ Sid
//│   = [Function: id1]
//│ auto: Sid -> Sid
//│     = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto:
//│ Sid -> Sid
//│     = [Function: auto]

def trial =
     fun x ->
        (fun z ->
            K (auto (either x (fst z) : Sid))
              (snd z))
        ((id, id))
        1
//│ trial: Sid -> 1
//│      = [Function: trial]

trial id
//│ res: 1
//│    = 1


// * In a discussion regarding a declarative system using boxes

let px =
    (fun x ->
      let pz =
          (fun z ->
            (let e =  (either x (fst z) : forall 'A. 'A -> 'A) in
              // (** [1] forces x and z to have the same tag,
              //     or to be unboxed with {} marks *)
              K (auto e) e,
              // (** [2] returning e requires to stay boxed, for
              //     implicit use of polymorphism below *)
              snd z))
          ((id, id)) in
      (fst pz
        // (** [3] returns the first component unchanged with x=z1-tag,
        //     still in scope *)
        , snd pz 1
        // (** [4] this requires pz to be tagged, with z2-tag, which is
        //     no longer in scope and can be instantiated *)
        ))
    id
  in
  fst px 0
  // (** the z1=x tag is no more in scope so it can be instantiated *)
//│ res: 0
//│    = 0


