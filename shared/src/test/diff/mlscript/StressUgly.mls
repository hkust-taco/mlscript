
class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
//│ Defined class Lit
//│ Defined class Add



def eval1_ty_ugly: Add['b] | 'a & ~Lit as 'b
//│ eval1_ty_ugly: 'a & ~lit | 'b | (Add['b & ((Add['e .. 'f] with {lhs: 'd, rhs: 'd}) | 'a & (~{val: int} | ~lit)) as 'd .. 'c] with {lhs: 'c, rhs: 'c}) as 'c
//│              = <missing implementation>

// def eval1_ty: Add['b]
def eval1_ty: Add[int] // ~500
// def eval1_ty: Add['b] | 'a // ~800
// def eval1_ty: Add['b]
//│ eval1_ty: Add[int]
//│         = <missing implementation>

// :stdout
// :d
:stats
:e
eval1_ty = eval1_ty_ugly
//│ 'a & ~lit | 'b | (Add['b & ((Add['e .. 'f] with {lhs: 'd, rhs: 'd}) | 'a & (~{val: int} | ~lit)) as 'd .. 'c] with {lhs: 'c, rhs: 'c}) as 'c
//│   <:  eval1_ty:
//│ Add[int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.24: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Add[?b]` does not match type `int`
//│ ║  l.9: 	def eval1_ty_ugly: Add['b] | 'a & ~Lit as 'b
//│ ║       	                   ^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	                  ^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.24: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of type Add
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ║        	              ^^^^^^^^
//│ ╟── from local type binding:
//│ ║  l.9: 	def eval1_ty_ugly: Add['b] | 'a & ~Lit as 'b
//│ ╙──     	                   ^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.24: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a record (expected a record with fields: lhs, rhs)
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.3: 	class Add[E]: { lhs: E; rhs: E }
//│ ║       	              ^^^^^^^^^^^^^^^^^^
//│ ╟── from local type binding:
//│ ║  l.9: 	def eval1_ty_ugly: Add['b] | 'a & ~Lit as 'b
//│ ╙──     	                   ^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.24: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not have field 'Add#E'
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ║        	              ^^^^^^^^
//│ ╟── from local type binding:
//│ ║  l.9: 	def eval1_ty_ugly: Add['b] | 'a & ~Lit as 'b
//│ ╙──     	                   ^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.24: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `Add[?] | Lit`
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── but it flows into reference with expected type `Add[?] | Lit`
//│ ║  l.24: 	eval1_ty = eval1_ty_ugly
//│ ║        	           ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.24: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `Lit | {lhs: int, rhs: int}`
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── but it flows into reference with expected type `Lit | {lhs: int, rhs: int}`
//│ ║  l.24: 	eval1_ty = eval1_ty_ugly
//│ ║        	           ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.3: 	class Add[E]: { lhs: E; rhs: E }
//│ ║       	              ^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.24: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `Lit | {lhs: int, rhs: int}`
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── but it flows into reference with expected type `Lit | {lhs: int, rhs: int}`
//│ ║  l.24: 	eval1_ty = eval1_ty_ugly
//│ ║        	           ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.3: 	class Add[E]: { lhs: E; rhs: E }
//│ ║       	              ^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.24: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `Lit | {Add#E = int}`
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── but it flows into reference with expected type `Lit | {Add#E = int}`
//│ ║  l.24: 	eval1_ty = eval1_ty_ugly
//│ ║        	           ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.14: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	              ^^^^^^^^
//│         = <no result>
//│           eval1_ty_ugly is not implemented
//│ constrain calls  : 62
//│ annoying  calls  : 53
//│ subtyping calls  : 310

