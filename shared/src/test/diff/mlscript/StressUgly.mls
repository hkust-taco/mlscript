
class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
  method In: E -> E
  method In = id
//│ Defined class Lit
//│ Defined class Add[=E]
//│ Declared Add.In: Add['E] -> 'E -> 'E
//│ Defined Add.In: Add['E] -> 'a -> 'a



def eval1_ty_ugly: Add['b] | 'a & ~Lit as 'b
//│ eval1_ty_ugly: 'b
//│   where
//│     'b := 'a & ~Lit | Add['b]
//│              = <missing implementation>

// def eval1_ty: Add['b]
def eval1_ty: Add[int] // ~500
// def eval1_ty: Add['b] | 'a // ~800
// def eval1_ty: Add['b]
//│ eval1_ty: Add[int]
//│         = <missing implementation>

// :stdout
// :d
:stats
:e
eval1_ty = eval1_ty_ugly
//│ 'b
//│   where
//│     'b := 'a & ~Lit | Add['b]
//│   <:  eval1_ty:
//│ Add[int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Add[?b]` is not an instance of `int`
//│ ║  l.13: 	def eval1_ty_ugly: Add['b] | 'a & ~Lit as 'b
//│ ║        	                   ^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	                  ^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of `Add[int]`
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ║        	              ^^^^^^^^
//│ ╟── from local type binding:
//│ ║  l.13: 	def eval1_ty_ugly: Add['b] | 'a & ~Lit as 'b
//│ ╙──      	                   ^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int & {val: int}` does not match type `Add[?] | Lit`
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── but it flows into reference with expected type `Add[?] | Lit`
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	           ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `Add[?] | Lit`
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── but it flows into reference with expected type `Add[?] | Lit`
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	           ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `Lit | {lhs: int, rhs: int}`
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── but it flows into reference with expected type `Lit | {lhs: int, rhs: int}`
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	           ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.3: 	class Add[E]: { lhs: E; rhs: E }
//│ ║       	              ^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `Lit | {lhs: int, rhs: int}`
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── but it flows into reference with expected type `Lit | {lhs: int, rhs: int}`
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	           ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.3: 	class Add[E]: { lhs: E; rhs: E }
//│ ║       	              ^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int & {val: int}` does not match type `Lit | {lhs: int, rhs: int}`
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── but it flows into reference with expected type `Lit | {lhs: int, rhs: int}`
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	           ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.3: 	class Add[E]: { lhs: E; rhs: E }
//│ ║       	              ^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int & {val: int}` does not match type `Lit | {lhs: int, rhs: int}`
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── but it flows into reference with expected type `Lit | {lhs: int, rhs: int}`
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	           ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.3: 	class Add[E]: { lhs: E; rhs: E }
//│ ║       	              ^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `Add[int]`
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── but it flows into reference with expected type `Add[int]`
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	           ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int & {val: int}` does not match type `Add[int]`
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ║        	                  ^^^
//│ ╟── but it flows into reference with expected type `Add[int]`
//│ ║  l.30: 	eval1_ty = eval1_ty_ugly
//│ ║        	           ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.20: 	def eval1_ty: Add[int] // ~500
//│ ╙──      	              ^^^^^^^^
//│         = <no result>
//│           eval1_ty_ugly is not implemented
//│ constrain calls  : 200
//│ annoying  calls  : 81
//│ subtyping calls  : 485

