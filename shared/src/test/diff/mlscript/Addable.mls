
class Addable[A]
  method Add: A -> A
//│ Defined class Addable[=A]
//│ Declared Addable.Add: Addable['A] -> 'A -> 'A

class Numb: Addable[Numb] & { val: int }
  method Add that = Numb { val = this.val + that.val }
//│ Defined class Numb
//│ Defined Numb.Add: Numb -> {val: int} -> Numb

class Stri: Addable[Stri] & { val: string }
  method Add that = Stri { val = concat this.val that.val }
//│ Defined class Stri
//│ Defined Stri.Add: Stri -> {val: string} -> Stri

n = Numb { val = 1 }
//│ n: Numb & {val: 1}
//│  = Numb { val: 1 }

n.Add n
//│ res: Numb
//│    = Numb { val: 2 }

n.Add
//│ res: Numb -> Numb
//│    = [Function: Add]


def addTwo a0 a1 = a0.Add a1
//│ addTwo: Addable['A] -> 'A -> 'A
//│       = [Function: addTwo]


addTwo n n
//│ res: Numb
//│    = Numb { val: 2 }

s = Stri { val = "hey" }
//│ s: Stri & {val: "hey"}
//│  = Stri { val: 'hey' }

s.Add s
//│ res: Stri
//│    = Stri { val: 'heyhey' }

addTwo s s
//│ res: Stri
//│    = Stri { val: 'heyhey' }



def addSame a = a.Add a
//│ addSame: (Addable['A] & 'A) -> 'A
//│        = [Function: addSame]

addSame n
//│ res: Numb
//│    = Numb { val: 2 }


rec def addNTimes a n =
  if n <= 1 then a else a.Add (addNTimes a (n - 1))
//│ addNTimes: (Addable['A] & 'A) -> int -> 'A
//│          = [Function: addNTimes]

addNTimes n 12
//│ res: Numb
//│    = Numb { val: 12 }

addNTimes s 5
//│ res: Stri
//│    = Stri { val: 'heyheyheyheyhey' }




// === === === ERROR CASES === === === //


:ShowRelativeLineNums
:AllowTypeErrors


rec def addNTimes a n =
  if n < 0 then 0 else a.Add (addNTimes a (n - 1))
addNTimes n 12
//│ addNTimes: Addable['A] -> int -> 'A
//│   where
//│     'A :> 0
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+3: 	addNTimes n 12
//│ ║        	^^^^^^^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `Numb`
//│ ║  l.+2: 	  if n < 0 then 0 else a.Add (addNTimes a (n - 1))
//│ ║        	                ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.7: 	class Numb: Addable[Numb] & { val: int }
//│ ╙──     	                    ^^^^
//│ res: error

rec def addNTimes a n =
  if n <= 0 then 0 else a.Add addNTimes a (n - 1)
//│ addNTimes: 'addNTimes
//│   where
//│     'addNTimes :> 'a -> int -> 'b
//│     'a <: Addable['A]
//│     'A :> 'addNTimes
//│        <: 'a -> int -> 'b
//│     'b :> 0

addNTimes n 12
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	addNTimes n 12
//│ ║        	^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b -> ?c` is not an instance of type `Numb`
//│ ║  l.102: 	rec def addNTimes a n =
//│ ║         	                  ^^^^^
//│ ║  l.103: 	  if n <= 0 then 0 else a.Add addNTimes a (n - 1)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.7: 	class Numb: Addable[Numb] & { val: int }
//│ ╙──     	                    ^^^^
//│ res: error

addSame n n
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	addSame n n
//│ ║        	^^^^^^^^^^^
//│ ╟── application of type `Numb & {val: ?val}` is not a function
//│ ║  l.17: 	n = Numb { val = 1 }
//│ ║        	    ^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(forall ?a. ?a) -> ?b`
//│ ║  l.+1: 	addSame n n
//│ ╙──      	        ^
//│ res: error

addTwo s n
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	addTwo s n
//│ ║        	^^^^^^^^^^
//│ ╟── application of type `Numb & {val: ?val}` is not an instance of type `Stri`
//│ ║  l.17: 	n = Numb { val = 1 }
//│ ║        	    ^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Stri`
//│ ║  l.+1: 	addTwo s n
//│ ║        	         ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.12: 	class Stri: Addable[Stri] & { val: string }
//│ ║        	                    ^^^^
//│ ╟── from reference:
//│ ║  l.30: 	def addTwo a0 a1 = a0.Add a1
//│ ╙──      	                          ^^
//│ res: error

class Str_bad_0: Addable[Str_bad_0] & { val: string }
  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.+2: 	  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ║        	                                      ^^^^^^^^^^
//│ ╟── type `string` is not an instance of type `int`
//│ ║  l.+1: 	class Str_bad_0: Addable[Str_bad_0] & { val: string }
//│ ║        	                                             ^^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.+2: 	  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ╙──      	                                      ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+2: 	  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ║        	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `string`
//│ ║  l.+2: 	  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ║        	                                      ^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.+1: 	class Str_bad_0: Addable[Str_bad_0] & { val: string }
//│ ╙──      	                                             ^^^^^^
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.+2: 	  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `string` is not an instance of type `int`
//│ ║  l.+1: 	class Str_bad_0: Addable[Str_bad_0] & { val: string }
//│ ║        	                                             ^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.+2: 	  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ╙──      	                                                 ^^^^^^^^
//│ Defined class Str_bad_0
//│ Defined Str_bad_0.Add: Str_bad_0 -> {val: int} -> ((Str_bad_0 with {val: error | int}) | error)

