

class Foo[A]: { x: A; y: A }
//│ Defined class Foo[+A]

def foo: #Foo
//│ foo: Foo[?]
//│    = <missing implementation>

foo12 = Foo { x = 1; y = 2 }
//│ foo12: Foo[1 | 2] & {x: 1, y: 2}
//│      = Foo { x: 1, y: 2 }

foo = foo12
//│ Foo[1 | 2] & {x: 1, y: 2}
//│   <:  foo:
//│ Foo[?]
//│    = Foo { x: 1, y: 2 }

def test1 f = case f of { Foo -> f }
//│ test1: (Foo[?] & 'a) -> 'a
//│      = [Function: test1]

test1 foo
//│ res: Foo[?]
//│    = Foo { x: 1, y: 2 }

def test2 f = case f of { Foo -> f.x }
//│ test2: (Foo[?] & {x: 'x}) -> 'x
//│      = [Function: test2]

test2 foo12
//│ res: 1
//│    = 1


// * Only has the tag in its type, not the field
:e
test2 foo
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.39: 	test2 foo
//│ ║        	^^^^^^^^^
//│ ╟── reference of type `Foo[?]` does not have field 'x'
//│ ║  l.39: 	test2 foo
//│ ║        	      ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.28: 	def test2 f = case f of { Foo -> f.x }
//│ ║        	                                 ^^^
//│ ╟── from reference:
//│ ║  l.28: 	def test2 f = case f of { Foo -> f.x }
//│ ╙──      	                   ^
//│ res: error
//│    = 1

// * Mistakenly passing the constructor
:e
foo = Foo
//│ {x: 'x & 'A, y: 'A & 'y} -> (Foo['A] with {x: 'x, y: 'y})
//│   <:  foo:
//│ Foo[?]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.57: 	foo = Foo
//│ ║        	^^^^^^^^^
//│ ╟── reference of type `{x: ?x, y: ?y} -> (Foo[?A] & {Foo#A = ?A, x: ?x, y: ?y})` is not an instance of type `Foo`
//│ ║  l.57: 	foo = Foo
//│ ║        	      ^^^
//│ ╟── Note: class constructor Foo is defined at:
//│ ║  l.3: 	class Foo[A]: { x: A; y: A }
//│ ╙──     	      ^^^
//│    = [Function: foo1]



:e
1 : #Eql
//│ ╔══[ERROR] type identifier not found: eql
//│ ╙──
//│ res: error
//│    = 1


