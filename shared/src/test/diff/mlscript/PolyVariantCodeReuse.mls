// Example from Code reuse through polymorphic variants


// * Bad things currently happen without these:
// * TODO: investigate why
:DontDistributeForalls
:DontGeneralizeCurriedFunctions

// * This makes inferred types slightly simpler by approximating constraints like
// * `'a <: (S -> T) & (U -> V)` to `'a <: (S | U) -> (T & V)`.
:ApproximateNegativeFunction


//************************** PRELIMINARIES *************************

class NotFound
class Success: { result: anything }
//│ Defined class NotFound
//│ Defined class Success

def NotFound = NotFound {}
def Success result = Success { result }
//│ NotFound: NotFound
//│         = [Function: NotFound1]
//│ Success: 'result -> (Success with {result: 'result})
//│        = [Function: Success1]

type Tuple[A, B] = (A, B)
//│ Defined type alias Tuple[+A, +B]

def Tuple l r = (l, r)
//│ Tuple: 'a -> 'b -> ('a, 'b,)
//│      = [Function: Tuple]

class Nil
class Cons[A]: { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons[+A]
//│ Defined type alias List[+A]

def Nil = Nil {}
//│ Nil: Nil
//│    = [Function: Nil1]

def Cons head tail = Cons { head; tail }
//│ Cons: ('head & 'A) -> (List['A] & 'tail) -> (Cons['A] with {head: 'head, tail: 'tail})
//│     = [Function: Cons1]

def eq: string -> string -> bool
//│ eq: string -> string -> bool
//│   = <missing implementation>

rec def list_assoc s l = case l of {
  | Cons ->
      if eq l.head.0 s then Success l.head.1
      else list_assoc s l.tail
  | Nil -> NotFound
  }
//│ list_assoc: string -> 'a -> (NotFound | (Success with {result: 'result}))
//│   where
//│     'a <: (Cons[?] with {head: {0: string, 1: 'result}, tail: 'a}) | Nil
//│           = <no result>
//│             eq is not implemented

list_assoc "2" (Cons (Tuple "2" 1) Nil )
//│ res: NotFound | Success & {result: 1}
//│    = <no result>
//│      list_assoc and eq are not implemented

// ***************************** Var *******************************

class Expr
class Lambda
//│ Defined class Expr
//│ Defined class Lambda

class Var: Lambda & { name: string }
//│ Defined class Var

def eval_var sub v = case v of {
  | Var -> let res = list_assoc v.name sub in case res of {
          | NotFound -> v
          | Success -> res.result
          }
  }
//│ eval_var: (Cons[?] & 'a | Nil) -> (Var & 'result) -> 'result
//│   where
//│     'a <: {head: {0: string, 1: 'result}, tail: Cons[?] & 'a | Nil}
//│         = <no result>
//│           list_assoc and eq are not implemented

// *************************** Lambda ********************************

class Abs[a]: Lambda & { name: string; body: a }
class App[a]: Lambda & { lhs: a; rhs: a }
//│ Defined class Abs[+a]
//│ Defined class App[+a]

:js
def incr: {a: int} -> unit
// def incr x = x.a <- x.a + 1
//│ // Query 1 is empty
//│ // End of generated code
//│ incr: {a: int} -> unit
//│     = <missing implementation>

:js
def gensym: () -> (unit, {a: 'a},)
// def gensym = let n = { mut a = 0 } in fun () -> (incr n, n)
//│ // Query 1 is empty
//│ // End of generated code
//│ gensym: () -> (unit, {a: nothing},)
//│       = <missing implementation>

def int_to_string: int -> string
//│ int_to_string: int -> string
//│              = <missing implementation>

def eval_lambda eval_rec subst v = case v of {
  | Var -> eval_var subst v
  | App -> let l2 = eval_rec subst v.lhs in
    let l1 = eval_rec subst v.rhs in
    case l1 of {
    | Abs -> eval_rec (Cons (Tuple l1.name l2) Nil) l1.body
    | _ -> App { lhs = l1; rhs = l2 }
    }
  | Abs -> let new_name = int_to_string ((gensym ()).1.a) in
    Abs { name = new_name;
          body = eval_rec (Cons (Tuple v.name (Var { name = new_name })) subst) v.body }
  }
//│ eval_lambda: (((Cons[('a, Var | 'body,) | 'A] with {head: ('a, Var | 'body,), tail: Nil | 'tail}) | 'tail) -> 'lhs -> ('result & 'body & ((Abs[?] with {body: 'lhs, name: 'a}) | 'lhs0 & ~#Abs))) -> (List['A] & (Cons[?] & 'b | Nil) & 'tail) -> ((Abs[?] with {body: 'lhs, name: 'a}) | App[?] & {lhs: 'lhs, rhs: 'lhs} | Var & 'result) -> (Abs['body] | (App['lhs0 | 'body] with {lhs: 'lhs0, rhs: 'body}) | 'result)
//│   where
//│     'b <: {head: {0: string, 1: 'result}, tail: Cons[?] & 'b | Nil}
//│            = <no result>
//│              eval_var, list_assoc and eq are not implemented

rec def eval1 subst = eval_lambda eval1 subst
//│ eval1: ('tail & (Cons[?] & List[?] & 'b | Nil & List[?])) -> 'c -> 'd
//│   where
//│     'tail <: Cons[?] & 'b | Nil
//│     'b <: {head: {0: string, 1: 'result}, tail: 'tail}
//│     'result :> 'd
//│             <: Abs[?] & 'e & 'f | 'lhs & (Abs[?] & 'f & ~#Abs | App[?] & 'g | Var & 'h)
//│     'd :> 'result | 'i | App['a]\lhs\rhs & {lhs: 'lhs, rhs: 'rhs} | Abs['d]
//│     'i :> Var
//│        <: Abs[?] & 'e & 'f | 'lhs & (Abs[?] & 'f & ~#Abs | App[?] & {name: string} & 'g | Var & 'h)
//│     'lhs :> App['a]\lhs\rhs & {lhs: 'lhs, rhs: 'rhs} | Var
//│          <: 'a & 'c
//│     'a :> App['a]\lhs\rhs & {lhs: 'lhs, rhs: 'rhs} | 'd
//│     'rhs :> 'd
//│     'e <: {body: 'c, name: string}
//│     'c <: Abs[?] & 'f | App[?] & 'g | Var & 'h
//│     'h <: Var & 'i
//│     'g <: {lhs: 'c, rhs: 'c}
//│     'f <: {body: 'c, name: string}
//│      = <no result>
//│        eval_lambda, eval_var, list_assoc and eq are not implemented

// ------------- OCaml's type -------------
// val eval_lambda :
//   ((string *
//     ([> `Abs of string * 'a | `App of 'a * 'a | `Var of string ] as 'a))
//   list -> 'a -> 'a) ->
//   (string * 'a) list ->
//   [< `Abs of string * 'a | `App of 'a * 'a | `Var of string ] -> 'a = <fun>
//
//   val eval1 :
//   (string * ([ `Abs of string * 'a | `App of 'a * 'a | `Var of string ] as 'a))
//   list -> 'a -> 'a = <fun>

// ************************* Expr ******************************

class Numb: Expr & { num: int }
class Add[a]: Expr & { lhs: a; rhs: a }
class Mul[a]: Expr & { lhs: a; rhs: a }
//│ Defined class Numb
//│ Defined class Add[+a]
//│ Defined class Mul[+a]

def map_expr f v = case v of {
  | Var -> v
  | Numb -> v
  | Add -> Add { lhs = f v.lhs; rhs = f v.rhs }
  | Mul -> Mul { lhs = f v.lhs; rhs = f v.rhs }
  }
//│ map_expr: ('lhs -> 'lhs0) -> (Add[?] & {lhs: 'lhs, rhs: 'lhs} | Mul[?] & {lhs: 'lhs, rhs: 'lhs} | 'a & (Numb | Var)) -> (Add['lhs0] | Mul['lhs0] | 'a)
//│         = [Function: map_expr]

rec def eval_expr eval_rec subst v =
  let vv = map_expr (eval_rec subst) v in
  case vv of {
    | Var -> eval_var subst vv
    | Add -> let vv1 = vv.lhs in
              let vv2 = vv.rhs in
              case vv1 of {
              | Numb -> case vv2 of {
                | Numb -> Numb { num = vv1.num + vv2.num }
                | _ -> vv
                }
              | _ -> vv
              }
    | Mul -> let vv1 = vv.lhs in
              let vv2 = vv.rhs in
              case vv1 of {
              | Numb -> case vv2 of {
                | Numb -> Numb { num = vv1.num * vv2.num }
                | _ -> vv
                }
              | _ -> vv
              }
    | Numb -> vv // _ -> vv
    }
//│ eval_expr: ('a -> 'rhs -> 'rhs0) -> ('a & (Cons[?] & 'b | Nil)) -> (Add[?] & {lhs: 'rhs, rhs: 'rhs} | Mul[?] & {lhs: 'rhs, rhs: 'rhs} | Numb & 'result | Var & 'result) -> (Add['rhs0] | Mul['rhs0] | Numb | 'result)
//│   where
//│     'b <: {head: {0: string, 1: 'result}, tail: Cons[?] & 'b | Nil}
//│          = <no result>
//│            eval_var, list_assoc and eq are not implemented

rec def eval2 subst = eval_expr eval2 subst
//│ eval2: (Cons[?] & 'a | Nil) -> 'b -> (Numb | 'result)
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Mul[?] & {lhs: 'b, rhs: 'b} | Numb & 'result | Var & 'result
//│     'a <: {head: {0: string, 1: 'result & (Numb | ~#Numb)}, tail: Cons[?] & 'a | Nil}
//│     'result :> Mul[Numb | 'result] | Add[Numb | 'result]
//│      = <no result>
//│        eval_expr, eval_var, list_assoc and eq are not implemented


// ------------- OCaml's type -------------
// val map_expr :
//   ('a -> 'b) ->
//   [< `Add of 'a * 'a | `Mult of 'a * 'a | `Numb of 'c | `Var of string ] ->
//   [> `Add of 'b * 'b | `Mult of 'b * 'b | `Numb of 'c | `Var of string ] = <fun>

// val eval_expr :
//   ((string *
//     ([> `Add of ([> `Numb of int ] as 'b) * 'b
//       | `Mult of 'b * 'b
//       | `Numb of int
//       | `Var of string ]
//      as 'a))
//    list -> 'c -> 'b) ->
//   (string * 'a) list ->
//   [< `Add of 'c * 'c | `Mult of 'c * 'c | `Numb of int | `Var of string ] -> 'a =
//   <fun>
// val eval2 :
//   (string *
//    ([> `Add of 'a * 'a | `Mult of 'a * 'a | `Numb of int | `Var of string ]
//     as 'a))
//   list ->
//   ([< `Add of 'b * 'b | `Mult of 'b * 'b | `Numb of int | `Var of string ] as 'b) ->
//   'a = <fun>


// ************************** Mix things *******************************

def eval_lexpr eval_rec subst v = case v of {
  | Lambda -> eval_lambda eval_rec subst v
  | Expr -> eval_expr eval_rec subst v
  }
//│ eval_lexpr: ((Cons[('a, Var | 'body,) | 'A]\head\tail & {head: ('a, Var | 'body,), tail: Nil | 'tail} | 'tail) -> 'lhs -> ('body & 'result & (Abs[?]\body\name & {body: 'lhs, name: 'a} | 'lhs0 & ~#Abs))) -> (List['A] & (Cons[?] & 'b | Nil) & (Cons[?] & 'c | Nil) & 'tail) -> (Abs[?]\body\name & {body: 'lhs, name: 'a} | Add[?] & {lhs: 'lhs, rhs: 'lhs} | App[?] & {lhs: 'lhs, rhs: 'lhs} | Mul[?] & {lhs: 'lhs, rhs: 'lhs} | Numb & 'result | Var & 'result) -> (Abs['body] | Add['body] | App['lhs0 | 'body]\lhs\rhs & {lhs: 'lhs0, rhs: 'body} | Mul['body] | Numb | 'result)
//│   where
//│     'c <: {head: {0: string, 1: 'result}, tail: Cons[?] & 'c | Nil}
//│     'b <: {head: {0: string, 1: 'result}, tail: Cons[?] & 'b | Nil}
//│           = <no result>
//│             eval_lambda, eval_var, list_assoc and eq are not implemented

rec def eval3 subst = eval_lexpr eval3 subst
//│ eval3: ('tail & 'tail0 & (Cons[?] & List[?] & 'b & 'c | Nil & List[?])) -> 'd -> 'e
//│   where
//│     'tail0 <: Cons[?] & 'c | Nil
//│     'c <: {head: {0: string, 1: 'result}, tail: 'tail0}
//│     'tail <: Cons[?] & 'b | Nil
//│     'b <: {head: {0: string, 1: 'result}, tail: 'tail}
//│     'result :> Var | 'e | Numb
//│             <: Abs[?] & 'f & 'g | 'lhs & (Lambda & 'f & ~#Abs | 'h & (Expr & ~#Numb | Numb))
//│     'e :> Abs['e] | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | 'result | 'i | 'j | (Add['e] with {lhs: 'e, rhs: 'e}) | (Mul['e] with {lhs: 'e, rhs: 'e})
//│     'a :> (Add['e] with {lhs: 'e, rhs: 'e}) | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | (Mul['e] with {lhs: 'e, rhs: 'e}) | Var | 'e
//│     'lhs :> (Add['e] with {lhs: 'e, rhs: 'e}) | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | (Mul['e] with {lhs: 'e, rhs: 'e}) | Numb | Var
//│          <: 'd & 'a
//│     'd <: Expr & 'h | Lambda & 'f
//│     'h <: Add[?] & {lhs: 'd, rhs: 'd} | Mul[?] & {lhs: 'd, rhs: 'd} | Numb & 'result | Var & 'j
//│     'j <: Var & (Abs[?] & 'f & 'g | 'lhs & (Lambda & {name: string} & 'f & ~#Abs | 'h & (Expr & {name: string} & ~#Numb | Numb & {name: string})))
//│     'f <: Abs[?] & {body: 'd} | App[?] & {lhs: 'd, rhs: 'd} | Var & 'i
//│     'i :> Var
//│        <: Abs[?] & 'f & 'g | 'lhs & (Lambda & {name: string} & 'f & ~#Abs | 'h & (Expr & {name: string} & ~#Numb | Numb & {name: string}))
//│     'g <: {body: 'd, name: string}
//│     'rhs :> 'e
//│      = <no result>
//│        eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

// ------------- OCaml's type -------------
// val eval_lexpr :
//   ((string *
//     ([> `Abs of string * 'a
//       | `Add of 'a * 'a
//       | `App of 'a * 'a
//       | `Mult of 'a * 'a
//       | `Numb of int
//       | `Var of string ]
//      as 'a))
//    list -> 'a -> 'a) ->
//   (string * 'a) list ->
//   [< `Abs of string * 'a
//    | `Add of 'a * 'a
//    | `App of 'a * 'a
//    | `Mult of 'a * 'a
//    | `Numb of int
//    | `Var of string ] ->
//   'a = <fun>
//
// val eval3 :
//   (string *
//    ([ `Abs of string * 'a
//     | `Add of 'a * 'a
//     | `App of 'a * 'a
//     | `Mult of 'a * 'a
//     | `Numb of int
//     | `Var of string ] as 'a))
//   list -> 'a -> 'a = <fun>

// ************************** Tests *******************************

eval3 Nil (Var { name = "s" })
//│ res: 'b
//│   where
//│     'b :> Abs['b] | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Var | Numb | (Add['b] with {lhs: 'b, rhs: 'b}) | (Mul['b] with {lhs: 'b, rhs: 'b})
//│     'a :> 'lhs | 'b
//│     'lhs :> (Add['b] with {lhs: 'b, rhs: 'b}) | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | (Mul['b] with {lhs: 'b, rhs: 'b}) | Numb | Var
//│     'rhs :> 'b
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented
// ------------- OCaml's type -------------
// - : [ `Abs of string * 'a
//     | `Add of 'a * 'a
//     | `App of 'a * 'a
//     | `Mult of 'a * 'a
//     | `Numb of int
//     | `Var of string ] as 'a
// = `Var "s"


eval3 Nil (Abs { name = "s"; body = Var { name = "s" } })
//│ res: 'b
//│   where
//│     'b :> Abs['b] | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Var | Numb | (Add['b] with {lhs: 'b, rhs: 'b}) | (Mul['b] with {lhs: 'b, rhs: 'b})
//│     'a :> 'lhs | 'b
//│     'lhs :> (Add['b] with {lhs: 'b, rhs: 'b}) | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | (Mul['b] with {lhs: 'b, rhs: 'b}) | Numb | Var
//│     'rhs :> 'b
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

eval2 Nil (Numb { num = 1 })
//│ res: Numb | 'a
//│   where
//│     'a :> Add[Numb | 'a] | Mul[Numb | 'a]
//│    = <no result>
//│      eval2, eval_expr, eval_var, list_assoc and eq are not implemented

eval3 Nil (Numb { num = 1 })
//│ res: 'b
//│   where
//│     'b :> Abs['b] | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Var | Numb | (Add['b] with {lhs: 'b, rhs: 'b}) | (Mul['b] with {lhs: 'b, rhs: 'b})
//│     'a :> 'lhs | 'b
//│     'lhs :> (Add['b] with {lhs: 'b, rhs: 'b}) | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | (Mul['b] with {lhs: 'b, rhs: 'b}) | Numb | Var
//│     'rhs :> 'b
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

eval3 Nil (App { lhs = Numb {num = 0}; rhs = Numb {num = 0}})
//│ res: 'b
//│   where
//│     'b :> Abs['b] | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Var | Numb | (Add['b] with {lhs: 'b, rhs: 'b}) | (Mul['b] with {lhs: 'b, rhs: 'b})
//│     'a :> 'lhs | 'b
//│     'lhs :> (Add['b] with {lhs: 'b, rhs: 'b}) | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | (Mul['b] with {lhs: 'b, rhs: 'b}) | Numb | Var
//│     'rhs :> 'b
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

eval3 Nil (Abs { name = "s"; body = Add { lhs = Var { name = "s" }; rhs = Numb { num = 1 } } })
//│ res: 'b
//│   where
//│     'b :> Abs['b] | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Var | Numb | (Add['b] with {lhs: 'b, rhs: 'b}) | (Mul['b] with {lhs: 'b, rhs: 'b})
//│     'a :> 'lhs | 'b
//│     'lhs :> (Add['b] with {lhs: 'b, rhs: 'b}) | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | (Mul['b] with {lhs: 'b, rhs: 'b}) | Numb | Var
//│     'rhs :> 'b
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented


// *************************************

// * Note: the type size explodes and the test times out if we incorrectly call
// * `eval_var eval_rec subst v` instead of `eval_var subst v`.
// * This is a problem, and we should find a way to make it less so.

def eval_lexpr' eval_rec subst v = case v of {
  | Var -> eval_var subst v
  | Abs -> eval_lambda eval_rec subst v
  | App -> eval_lambda eval_rec subst v
  | Numb -> eval_expr eval_rec subst v
  | Add -> eval_expr eval_rec subst v
  | Mul -> eval_expr eval_rec subst v
  }
//│ eval_lexpr': ((Cons[('b, Var | 'body,) | 'A]\head\tail & {head: ('b, Var | 'body,), tail: Nil | 'tail} | 'tail) -> 'body0 -> ('body & 'result & (Abs[?]\body\name & {body: 'body0, name: 'b} | 'lhs & 'a & (Abs[?]\body\name & {body: 'body0, name: 'b} & ~#Abs | 'lhs & 'a & ~#Abs)))) -> (List['A] & (Cons[?] & 'c | Nil) & (Cons[?] & 'd | Nil) & (Cons[?] & 'e | Nil) & (Cons[?] & 'f | Nil) & (Cons[?] & 'g | Nil) & 'tail & (Cons[?] & 'h | Nil)) -> (Abs[?]\body\name & {body: 'body0, name: 'b} | Add[?] & {lhs: 'body0, rhs: 'body0} | App[?] & {lhs: 'body0, rhs: 'body0} | Mul[?] & {lhs: 'body0, rhs: 'body0} | Numb & 'result | Var & 'result) -> (Abs['body] | Add['body] | App['a | 'body]\lhs\rhs & {lhs: 'lhs, rhs: 'body} | Mul['body] | Numb | 'result)
//│   where
//│     'h <: {head: {0: string, 1: 'result}, tail: Cons[?] & 'h | Nil}
//│     'g <: {head: {0: string, 1: 'result}, tail: Cons[?] & 'g | Nil}
//│     'f <: {head: {0: string, 1: 'result}, tail: Cons[?] & 'f | Nil}
//│     'e <: {head: {0: string, 1: 'result}, tail: Cons[?] & 'e | Nil}
//│     'd <: {head: {0: string, 1: 'result}, tail: Cons[?] & 'd | Nil}
//│     'c <: {head: {0: string, 1: 'result}, tail: Cons[?] & 'c | Nil}
//│            = <no result>
//│              eval_var, list_assoc and eq are not implemented

:e
rec def eval4 subst = eval_lexpr' eval4 subst
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: ?eval4` took too many steps and ran out of fuel (10000)
//│ ║  l.418: 	rec def eval4 subst = eval_lexpr' eval4 subst
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ eval4: ('tail & 'tail0 & 'tail1 & 'tail2 & 'tail3 & 'tail4 & (Cons[?] & List[?] & 'b & 'c & 'd & 'e & 'f & 'g | Nil & List[?])) -> 'h -> 'i
//│   where
//│     'tail4 <: Cons[?] & 'g | Nil
//│     'g <: {head: {0: string, 1: 'result}, tail: 'tail4}
//│     'tail3 <: Cons[?] & 'f | Nil
//│     'f <: {head: {0: string, 1: 'result0}, tail: 'tail3}
//│     'tail2 <: Cons[?] & 'e | Nil
//│     'e <: {head: {0: string, 1: 'result0}, tail: 'tail2}
//│     'tail1 <: Cons[?] & 'd | Nil
//│     'd <: {head: {0: string, 1: 'result0}, tail: 'tail1}
//│     'tail0 <: Cons[?] & 'c | Nil
//│     'c <: {head: {0: string, 1: 'result}, tail: 'tail0}
//│     'tail <: Cons[?] & 'b | Nil
//│     'b <: {head: {0: string, 1: 'result}, tail: 'tail}
//│     'result :> 'i
//│             <: Abs[?] & 'j & 'k | 'lhs & (Abs[?] & 'k & ~#Abs | Add[?] & 'l | App[?] & 'm | Mul[?] & 'n | Var & 'o | 'p & (Numb | Numb & ~#Numb))
//│     'i :> 'result | 'q | Abs[nothing] | App[nothing] | Abs['i] | App['a]\lhs\rhs & {lhs: 'lhs, rhs: 'rhs} | 'result0 | 'r | Add['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | Mul['i]\lhs\rhs & {lhs: 'i, rhs: 'i}
//│     'q :> Var
//│        <: Abs[?] & 'j & 'k | 'lhs & (Abs[?] & 'k & ~#Abs | Add[?] & {name: string} & 'l | App[?] & {name: string} & 'm | Mul[?] & {name: string} & 'n | Var & 'o | 'p & (Numb & {name: string} | Numb & {name: string} & ~#Numb))
//│     'j <: {body: 'h, name: string}
//│     'h <: Abs[?] & 'k | Add[?] & 'l | App[?] & 'm | Mul[?] & 'n | Numb & 'p | Var & 'o
//│     'l <: Add[?] & {lhs: 'h, rhs: 'h} | Mul[?] & {lhs: 'h, rhs: 'h} | Numb & 'result0 | Var & 'r
//│     'result0 :> Var | 'i | Numb
//│              <: Abs[?] & 'j & 'k | 'lhs & (Add[?] & 'l | App[?] & 'm | Mul[?] & 'n | Var & 'o | 'p & (Numb | Numb & ~#Numb))
//│     'n <: Add[?] & {lhs: 'h, rhs: 'h} | Mul[?] & {lhs: 'h, rhs: 'h} | Numb & 'result0 | Var & 'r
//│     'r <: Var & (Abs[?] & 'j & 'k | 'lhs & (Add[?] & {name: string} & 'l | App[?] & {name: string} & 'm | Mul[?] & {name: string} & 'n | Var & 'o | 'p & (Numb & {name: string} | Numb & {name: string} & ~#Numb)))
//│     'p <: Add[?] & {lhs: 'h, rhs: 'h} | Mul[?] & {lhs: 'h, rhs: 'h} | Numb & 'result0 | Var & 'r
//│     'o <: Var & 'q
//│     'm <: Abs[?] & {body: 'h} | App[?] & {lhs: 'h, rhs: 'h} | Var & 'q
//│     'lhs :> Add['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | App['a]\lhs\rhs & {lhs: 'lhs, rhs: 'rhs} | Mul['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | Numb | Var
//│          <: 'h & 'a
//│     'a :> Add['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | App['a]\lhs\rhs & {lhs: 'lhs, rhs: 'rhs} | Mul['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | Var | 'i
//│     'rhs :> 'i
//│     'k <: Abs[?] | App[?] | Var & 'q
//│      = <no result>
//│        eval_lexpr', eval_var, list_assoc and eq are not implemented

:Fuel 20000

:stats
rec def eval4 subst = eval_lexpr' eval4 subst
//│ eval4: ('tail & 'tail0 & 'tail1 & 'tail2 & 'tail3 & 'tail4 & (Cons[?] & List[?] & 'b & 'c & 'd & 'e & 'f & 'g | Nil & List[?])) -> 'h -> 'i
//│   where
//│     'tail4 <: Cons[?] & 'd | Nil
//│     'd <: {head: {0: string, 1: 'result}, tail: 'tail4}
//│     'tail3 <: Cons[?] & 'g | Nil
//│     'g <: {head: {0: string, 1: 'result0}, tail: 'tail3}
//│     'tail2 <: Cons[?] & 'f | Nil
//│     'f <: {head: {0: string, 1: 'result}, tail: 'tail2}
//│     'tail1 <: Cons[?] & 'e | Nil
//│     'e <: {head: {0: string, 1: 'result}, tail: 'tail1}
//│     'tail0 <: Cons[?] & 'c | Nil
//│     'c <: {head: {0: string, 1: 'result0}, tail: 'tail0}
//│     'tail <: Cons[?] & 'b | Nil
//│     'b <: {head: {0: string, 1: 'result0}, tail: 'tail}
//│     'result0 :> 'i
//│              <: Abs[?] & 'j & 'k & 'l | 'lhs & (Abs[?] & 'k & 'l & ~#Abs | 'lhs0 & (Add[?] & 'm | App[?] & 'n | Mul[?] & 'o | Var & 'p | 'q & (Numb | Numb & ~#Numb)))
//│     'i :> 'result0 | 'r | Abs['i] | App['a]\lhs\rhs & {lhs: 'lhs0, rhs: 'rhs} | App['a0]\lhs\rhs & {lhs: 'lhs, rhs: 'rhs0} | 'result | 's | Add['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | Mul['i]\lhs\rhs & {lhs: 'i, rhs: 'i}
//│     'r :> Var
//│        <: Abs[?] & 'j & 'k & 'l | 'lhs & (Abs[?] & 'k & 'l & ~#Abs | 'lhs0 & (Add[?] & {name: string} & 'm | App[?] & {name: string} & 'n | Mul[?] & {name: string} & 'o | Var & 'p | 'q & (Numb & {name: string} | Numb & {name: string} & ~#Numb)))
//│     'j <: {body: 'h, name: string}
//│     'h <: Abs[?] & 'k | Add[?] & 'm | App[?] & 'n | Mul[?] & 'o | Numb & 'q | Var & 'p
//│     'm <: Add[?] & {lhs: 'h, rhs: 'h} | Mul[?] & {lhs: 'h, rhs: 'h} | Numb & 'result | Var & 's
//│     'result :> Var | 'i | Numb
//│             <: Abs[?] & 'j & 'k & 'l | 'lhs & 'lhs0 & (Add[?] & 'm | App[?] & 'n | Mul[?] & 'o | Var & 'p | 'q & (Numb | Numb & ~#Numb))
//│     'o <: Add[?] & {lhs: 'h, rhs: 'h} | Mul[?] & {lhs: 'h, rhs: 'h} | Numb & 'result | Var & 's
//│     's <: Var & (Abs[?] & 'j & 'k & 'l | 'lhs & 'lhs0 & (Add[?] & {name: string} & 'm | App[?] & {name: string} & 'n | Mul[?] & {name: string} & 'o | Var & 'p | 'q & (Numb & {name: string} | Numb & {name: string} & ~#Numb)))
//│     'q <: Add[?] & {lhs: 'h, rhs: 'h} | Mul[?] & {lhs: 'h, rhs: 'h} | Numb & 'result | Var & 's
//│     'p <: Var & 'r
//│     'n <: Abs[?] & {body: 'h} | App[?] & {lhs: 'h, rhs: 'h} | Var & 'r
//│     'lhs :> Add['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | App['a | 'a0]\lhs\rhs & {lhs: 'lhs | 'lhs0, rhs: 'rhs | 'rhs0} | Mul['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | Numb | Var
//│          <: 'h & 'a0
//│     'a :> Add['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | App['a | 'a0]\lhs\rhs & {lhs: 'lhs | 'lhs0, rhs: 'rhs | 'rhs0} | Mul['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | Var | 'i
//│     'a0 :> Add['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | App['a | 'a0]\lhs\rhs & {lhs: 'lhs | 'lhs0, rhs: 'rhs | 'rhs0} | Mul['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | Var | 'i
//│     'lhs0 :> Add['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | App['a | 'a0]\lhs\rhs & {lhs: 'lhs | 'lhs0, rhs: 'rhs | 'rhs0} | Mul['i]\lhs\rhs & {lhs: 'i, rhs: 'i} | Numb | Var
//│           <: 'h & 'a
//│     'rhs0 :> 'i
//│     'rhs :> 'i
//│     'l <: {body: 'h, name: string}
//│     'k <: Abs[?] & {body: 'h} | App[?] & {lhs: 'h, rhs: 'h} | Var & 'r
//│      = <no result>
//│        eval_lexpr', eval_var, list_assoc and eq are not implemented
//│ constrain calls  : 10599
//│ annoying  calls  : 2300
//│ subtyping calls  : 336422

:ResetFuel

eval4 Nil (Abs { name = "s"; body = Add { lhs = Var { name = "s" }; rhs = Numb { num = 1 } } })
//│ res: 'b
//│   where
//│     'b :> Var | Abs['b] | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Numb | (Add['b] with {lhs: 'b, rhs: 'b}) | (Mul['b] with {lhs: 'b, rhs: 'b})
//│     'a :> 'lhs | 'b
//│     'lhs :> (Add['b] with {lhs: 'b, rhs: 'b}) | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | (Mul['b] with {lhs: 'b, rhs: 'b}) | Numb | Var
//│     'rhs :> 'b
//│    = <no result>
//│      eval4, eval_lexpr', eval_var, list_assoc and eq are not implemented

