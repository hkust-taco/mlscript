// Example from Code reuse through polymorphic variants

//************************** PRELIMINARIES *************************

class NotFound
class Success: { result: anything }
//│ Defined class NotFound
//│ Defined class Success

def NotFound = NotFound {}
def Success result = Success { result }
//│ NotFound: NotFound
//│         = NotFound {}
//│ Success: 'result -> (Success with {result: 'result})
//│        = [Function: Success1]

type Tuple[A, B] = (A, B)
//│ Defined type alias Tuple[+A, +B]

def Tuple l r = (l, r)
//│ Tuple: 'a -> 'b -> ('a, 'b,)
//│      = [Function: Tuple]

class Nil
class Cons[A]: { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons[+A]
//│ Defined type alias List[+A]

def Nil = Nil {}
//│ Nil: Nil
//│    = Nil {}

def Cons head tail = Cons { head; tail }
//│ Cons: ('head & 'A) -> (List['A] & 'tail) -> (Cons['A] with {head: 'head, tail: 'tail})
//│     = [Function: Cons1]

def eq: string -> string -> bool
//│ eq: string -> string -> bool
//│   = <missing implementation>

rec def list_assoc s l = case l of {
  | Cons ->
      if eq l.head._1 s then Success l.head._2
      else list_assoc s l.tail
  | Nil -> NotFound
  }
//│ list_assoc: string -> 'a -> (NotFound | (Success with {result: 'result}))
//│   where
//│     'a <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'a}) | Nil
//│           = <no result>
//│             eq is not implemented

list_assoc "2" (Cons (Tuple "2" 1) Nil )
//│ res: NotFound | Success & {result: 1}
//│    = <no result>
//│      list_assoc and eq are not implemented

// ***************************** Var *******************************

class Expr
class Lambda
//│ Defined class Expr
//│ Defined class Lambda

class Var: Lambda & { name: string }
//│ Defined class Var

def eval_var sub v = case v of {
  | Var -> let res = list_assoc v.name sub in case res of {
          | NotFound -> v
          | Success -> res.result
          }
  }
//│ eval_var: 'a -> (Var & 'result) -> 'result
//│   where
//│     'a <: (Cons[?] with {head: {_1: string, _2: {name: string} & 'result}, tail: 'a}) | Nil
//│         = <no result>
//│           list_assoc and eq are not implemented

// *************************** Lambda ********************************

class Abs[a]: Lambda & { name: string; body: a }
class App[a]: Lambda & { lhs: a; rhs: a }
//│ Defined class Abs[+a]
//│ Defined class App[+a]

def f x = (x.a <- 0, x)
//│ f: ({mut a: in 0} & 'a) -> (unit, 'a,)
//│  = [Function: f]

f { mut a = 1 }
//│ res: (unit, {mut a: 'a},)
//│   where
//│     'a :> 0 | 1
//│    = [ [], { a: 0 } ]

def incr x = x.a <- x.a + 1
//│ incr: {mut a: int} -> unit
//│     = [Function: incr]


def gensym = let n = { mut a = 0 } in (incr n, n)
//│ gensym: (unit, {mut a: 'a},)
//│   where
//│     'a :> 0
//│       = [ [], { a: 1 } ]

gensym
//│ res: (unit, {mut a: 'a},)
//│   where
//│     'a :> 0
//│    = [ [], { a: 1 } ]

// ?
gensym
//│ res: (unit, {mut a: 'a},)
//│   where
//│     'a :> 0
//│    = [ [], { a: 1 } ]

def eval_lambda eval_rec subst v = case v of {
  | Var -> eval_var subst v
  | App -> let l2 = eval_rec subst v.lhs in
            let l1 = eval_rec subst v.rhs in
            case l1 of {
            | Abs -> eval_rec (Cons (Tuple l1.name l2) Nil) l1.body
            | _ -> App { lhs = l1; rhs = l2 }
            }
  | Abs -> Abs { name = v.name; body = eval_rec subst v.body }
  }
//│ eval_lambda: (((Cons[('a, 'rhs,)] with {tail: Nil}) | 'b) -> 'body -> ('rhs & 'result & ((Abs[?] with {body: 'body, name: string & 'a}) | {name: string} & 'lhs & ~abs))) -> ('b & 'c) -> ((Abs[?] with {body: 'body, name: string & 'name}) | (App[?] with {lhs: 'body, rhs: 'body}) | Var & 'result) -> ((Abs['rhs] with {name: 'name}) | (App['rhs] with {lhs: 'lhs, rhs: 'rhs}) | 'result)
//│   where
//│     'c <: (Cons[?] with {head: {_1: string, _2: {name: string} & 'result}, tail: 'c}) | Nil
//│            = <no result>
//│              eval_var, list_assoc and eq are not implemented

rec def eval1 subst = eval_lambda eval1 subst
//│ eval1: 'a -> 'b -> 'result
//│   where
//│     'a <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'a}) | Nil
//│     'result :> Abs['result] & {name: 'name} | (App['lhs] with {rhs: 'result})
//│             <: 'b & (Abs[?] & 'c | {name: string} & 'lhs & ~abs) & (Abs[?] & 'c | 'lhs & ~abs)
//│     'c <: {body: 'b, name: string}
//│     'lhs :> (App['lhs] with {rhs: 'result}) | 'result
//│          <: 'b
//│     'b <: Abs[?] & {body: 'b, name: string & 'name} | App[?] & {lhs: 'b, rhs: 'b} | Var & 'result
//│      = <no result>
//│        eval_lambda, eval_var, list_assoc and eq are not implemented

// ------------- OCaml's type -------------
// val eval_lambda :
//   ((string *
//     ([> `Abs of string * 'a | `App of 'a * 'a | `Var of string ] as 'a))
//   list -> 'a -> 'a) ->
//   (string * 'a) list ->
//   [< `Abs of string * 'a | `App of 'a * 'a | `Var of string ] -> 'a = <fun>
//
//   val eval1 :
//   (string * ([ `Abs of string * 'a | `App of 'a * 'a | `Var of string ] as 'a))
//   list -> 'a -> 'a = <fun>

// ************************* Expr ******************************

class Num: Expr & { num: int }
class Add[a]: Expr & { lhs: a; rhs: a }
class Mul[a]: Expr & { lhs: a; rhs: a }
//│ Defined class Num
//│ Defined class Add[+a]
//│ Defined class Mul[+a]

def map_expr f v = case v of {
  | Var -> v
  | Num -> v
  | Add -> Add { lhs = f v.lhs; rhs = f v.rhs }
  | Mul -> Mul { lhs = f v.lhs; rhs = f v.rhs }
  }
//│ map_expr: ('rhs -> 'rhs0) -> ((Add[?] with {lhs: 'rhs, rhs: 'rhs}) | (Mul[?] with {lhs: 'rhs, rhs: 'rhs}) | 'a & (Num | Var)) -> (Add['rhs0] | Mul['rhs0] | 'a)
//│         = [Function: map_expr]

rec def eval_expr eval_rec subst v =
  let vv = map_expr (eval_rec subst) v in
  case vv of {
    | Var -> eval_var subst vv
    | Add -> let vv1 = vv.lhs in
              let vv2 = vv.rhs in
              case vv1 of {
              | Num -> case vv2 of {
                | Num -> Num { num = vv1.num + vv2.num }
                | _ -> vv
                }
              | _ -> vv
              }
    | Mul -> let vv1 = vv.lhs in
              let vv2 = vv.rhs in
              case vv1 of {
              | Num -> case vv2 of {
                | Num -> Num { num = vv1.num * vv2.num }
                | _ -> vv
                }
              | _ -> vv
              }
    | Num -> vv // _ -> vv
    }
//│ eval_expr: ('a -> 'lhs -> ('lhs0 & (~num | Num))) -> ('a & 'b) -> ((Add[?] with {lhs: 'lhs, rhs: 'lhs}) | (Mul[?] with {lhs: 'lhs, rhs: 'lhs}) | 'result & (Num & {lhs: anything, name: string, rhs: anything} | Var & {lhs: anything, rhs: anything})) -> (Add['lhs0] | Mul['lhs0] | Num | 'result)
//│   where
//│     'b <: (Cons[?] with {head: {_1: string, _2: {lhs: anything, name: string, rhs: anything} & 'result}, tail: 'b}) | Nil
//│          = <no result>
//│            eval_var, list_assoc and eq are not implemented

rec def eval2 subst = eval_expr eval2 subst
//│ eval2: 'a -> 'b -> 'result
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Mul[?] & {lhs: 'b, rhs: 'b} | 'result & (Num | Var)
//│     'a <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'a}) | Nil
//│     'result :> Mul['result] | Add['result] | Num
//│             <: (Num & {lhs: anything, rhs: anything} | {lhs: anything, rhs: anything} & ~num) & (Num & {name: string} | {name: string} & ~num)
//│      = <no result>
//│        eval_expr, eval_var, list_assoc and eq are not implemented


// ------------- OCaml's type -------------
// val map_expr :
//   ('a -> 'b) ->
//   [< `Add of 'a * 'a | `Mult of 'a * 'a | `Num of 'c | `Var of string ] ->
//   [> `Add of 'b * 'b | `Mult of 'b * 'b | `Num of 'c | `Var of string ] = <fun>

// val eval_expr :
//   ((string *
//     ([> `Add of ([> `Num of int ] as 'b) * 'b
//       | `Mult of 'b * 'b
//       | `Num of int
//       | `Var of string ]
//      as 'a))
//    list -> 'c -> 'b) ->
//   (string * 'a) list ->
//   [< `Add of 'c * 'c | `Mult of 'c * 'c | `Num of int | `Var of string ] -> 'a =
//   <fun>
// val eval2 :
//   (string *
//    ([> `Add of 'a * 'a | `Mult of 'a * 'a | `Num of int | `Var of string ]
//     as 'a))
//   list ->
//   ([< `Add of 'b * 'b | `Mult of 'b * 'b | `Num of int | `Var of string ] as 'b) ->
//   'a = <fun>


// ************************** Mix things *******************************

def eval_lexpr eval_rec subst v = case v of {
  | Lambda -> eval_lambda eval_rec subst v
  | Expr -> eval_expr eval_rec subst v
  }
//│ eval_lexpr: (((Cons[('a, 'lhs,)] with {tail: Nil}) | 'b) -> 'lhs0 -> ('result & 'lhs & ((Abs[?] with {body: 'lhs0, lhs: anything, name: string & 'a, rhs: anything}) | 'lhs1 & (Num & {lhs: anything, name: string, rhs: anything} | {lhs: anything, name: string, rhs: anything} & ~abs & ~num)))) -> ('b & 'c) -> ((Abs[?] with {body: 'lhs0, name: string & 'name}) | (Add[?] with {lhs: 'lhs0, rhs: 'lhs0}) | (App[?] with {lhs: 'lhs0, rhs: 'lhs0}) | (Mul[?] with {lhs: 'lhs0, rhs: 'lhs0}) | 'result & (Num & {lhs: anything, name: string, rhs: anything} | Var & {lhs: anything, rhs: anything})) -> ((Abs['lhs] with {name: 'name}) | Add['lhs] | (App['lhs] with {lhs: 'lhs1, rhs: 'lhs}) | Mul['lhs] | Num | 'result)
//│   where
//│     'c <: (Cons[?] with {head: {_1: string, _2: {lhs: anything, name: string, rhs: anything} & 'result}, tail: 'c}) | Nil
//│           = <no result>
//│             eval_lambda, eval_var, list_assoc and eq are not implemented

rec def eval3 subst = eval_lexpr eval3 subst
//│ eval3: 'a -> 'b -> 'result
//│   where
//│     'a <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'a}) | Nil
//│     'result :> (Add['result] with {lhs: 'result, rhs: 'result}) | Num | Abs['result] & {name: 'name} | (App['lhs] with {rhs: 'result}) | (Mul['result] with {lhs: 'result, rhs: 'result})
//│             <: 'b & (Abs[?] & 'c | 'lhs & (Num & {name: string} | {name: string} & ~abs & ~num)) & (Abs[?] & {lhs: anything, rhs: anything} & 'c | 'lhs & (Num & {lhs: anything, rhs: anything} | {lhs: anything, rhs: anything} & ~abs & ~num)) & (Abs[?] & 'c | 'lhs & (~abs & ~num | Num))
//│     'c <: {body: 'b, name: string}
//│     'lhs :> (Add['result] with {lhs: 'result, rhs: 'result}) | (App['lhs] with {rhs: 'result}) | (Mul['result] with {lhs: 'result, rhs: 'result}) | Num | 'result
//│          <: 'b
//│     'b <: Abs[?] & {body: 'b, name: string & 'name} | Add[?] & {lhs: 'b, rhs: 'b} | App[?] & {lhs: 'b, rhs: 'b} | Mul[?] & {lhs: 'b, rhs: 'b} | Num & 'result & (Add[?] | Mul[?] | Num | Var) | Var & 'result
//│      = <no result>
//│        eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

// ------------- OCaml's type -------------
// val eval_lexpr :
//   ((string *
//     ([> `Abs of string * 'a
//       | `Add of 'a * 'a
//       | `App of 'a * 'a
//       | `Mult of 'a * 'a
//       | `Num of int
//       | `Var of string ]
//      as 'a))
//    list -> 'a -> 'a) ->
//   (string * 'a) list ->
//   [< `Abs of string * 'a
//    | `Add of 'a * 'a
//    | `App of 'a * 'a
//    | `Mult of 'a * 'a
//    | `Num of int
//    | `Var of string ] ->
//   'a = <fun>
//
// val eval3 :
//   (string *
//    ([ `Abs of string * 'a
//     | `Add of 'a * 'a
//     | `App of 'a * 'a
//     | `Mult of 'a * 'a
//     | `Num of int
//     | `Var of string ] as 'a))
//   list -> 'a -> 'a = <fun>

// ************************** Tests *******************************

eval3 Nil (Var { name = "s" })
//│ res: 'a
//│   where
//│     'a :> Abs['a] & {name: nothing} | (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | Var & {name: "s"} | 'b
//│     'a0 :> 'a | (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | Var & {name: "s"} | 'b
//│     'lhs :> (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | Var & {name: "s"} | 'b
//│     'b :> Mul['a] | Add['a]
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented
// ------------- OCaml's type -------------
// - : [ `Abs of string * 'a
//     | `Add of 'a * 'a
//     | `App of 'a * 'a
//     | `Mult of 'a * 'a
//     | `Num of int
//     | `Var of string ] as 'a
// = `Var "s"


eval3 Nil (Abs { name = "s"; body = Var { name = "s" } })
//│ res: 'a
//│   where
//│     'a :> Abs['a] & {name: "s"} | (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | Var & {name: "s"} | 'b
//│     'a0 :> 'a | (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | Var & {name: "s"} | 'b
//│     'lhs :> (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | Var & {name: "s"} | 'b
//│     'b :> Mul['a] | Add['a]
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

eval2 Nil (Num { num = 1 })
//│ res: 'rhs
//│   where
//│     'rhs :> Mul['rhs] | Add['rhs] | Num
//│    = <no result>
//│      eval2, eval_expr, eval_var, list_assoc and eq are not implemented

eval3 Nil (Num { num = 1 })
//│ res: 'a
//│   where
//│     'a :> Abs['a] & {name: nothing} | (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | 'b
//│     'a0 :> 'a | (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | 'b
//│     'lhs :> (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | 'b
//│     'b :> Mul['a] | Add['a]
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

eval3 Nil (App { lhs = Num {num = 0}; rhs = Num {num = 0}})
//│ res: 'a
//│   where
//│     'a :> Abs['a] & {name: nothing} | (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | 'b
//│     'a0 :> 'a | (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | 'b
//│     'lhs :> (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | 'b
//│     'b :> Mul['a] | Add['a]
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

eval3 Nil (Abs { name = "s"; body = Add { lhs = Var { name = "s" }; rhs = Num { num = 1 } } })
//│ res: 'a
//│   where
//│     'a :> Abs['a] & {name: "s"} | (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | Var & {name: "s"} | 'b
//│     'a0 :> 'a | (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | Var & {name: "s"} | 'b
//│     'lhs :> (App['a0] with {lhs: 'lhs, rhs: 'a}) | Num | Var & {name: "s"} | 'b
//│     'b :> Mul['a] | Add['a]
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented


// *************************************

def eval_lexpr' eval_rec subst v = case v of {
  | Var -> eval_var eval_rec subst v
  | Abs -> eval_lambda eval_rec subst v
  | App -> eval_lambda eval_rec subst v
  | Num -> eval_expr eval_rec subst v
  | Add -> eval_expr eval_rec subst v
  | Mul -> eval_expr eval_rec subst v
  }
//│ eval_lexpr': ((Cons[('a, 'lhs,)] with {tail: Nil}) -> 'lhs0 -> ('lhs & 'result & ((Abs[?] with {body: 'lhs0, lhs: anything, name: string & 'a, rhs: anything}) | 'lhs1 & ((Abs[?] with {body: 'lhs0, lhs: anything, name: string & 'a, rhs: anything}) & ~abs | 'lhs1 & (Num & {lhs: anything, name: string, rhs: anything} | {lhs: anything, name: string, rhs: anything} & ~abs & ~num)))) & 'b) -> nothing -> ((Abs[?] with {body: 'lhs0, name: string & 'name}) | (Add[?] with {lhs: 'lhs0, rhs: 'lhs0}) | (App[?] with {lhs: 'lhs0, rhs: 'lhs0}) | (Mul[?] with {lhs: 'lhs0, rhs: 'lhs0}) | Num & {lhs: anything, name: string, rhs: anything} & 'result | Var & 'c) -> ((Abs['lhs] with {name: 'name}) | Add['lhs] | (App['lhs] with {lhs: 'lhs1, rhs: 'lhs}) | Mul['lhs] | Num | 'result)
//│   where
//│     'b <: (Cons[?] with {head: {_1: string, _2: 'c -> ({lhs: anything, name: string, rhs: anything} & 'result)}, tail: 'b}) | Nil
//│            = <no result>
//│              eval_var, list_assoc and eq are not implemented

// rec def eval4 subst = eval_lexpr' eval4 subst ???

