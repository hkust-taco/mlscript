:js
def incr x = x.a <- x.a + 1
//│ // Prelude
//│ let res;
//│ // Query 1
//│ globalThis.incr = function incr(x) {
//│   return x.a = x.a + 1, [];
//│ };
//│ // End of generated code
//│ incr: {mut a: int} -> unit
//│     = [Function: incr]


:p
:js
def gensym = let n = { mut a = 0 } in fun () -> (incr n, n)
//│ Parsed: def gensym: let n = {mut a: 0} in  => incr (n,), n,;
//│ Desugared: def gensym: let n = {mut a: 0} in  => incr (n,), n,
//│ // Query 1
//│ globalThis.gensym = function gensym() {
//│   return (((n) => () => [
//│     incr(n),
//│     n
//│   ])({ a: 0 }));
//│ };
//│ // End of generated code
//│ gensym: () -> (unit, {mut a: 'a},)
//│   where
//│     'a :> 0
//│       = [Function: gensym]

:js
:p
gensym1 = let n = { mut a = 0 } in fun () -> (incr n, n)
//│ Parsed: let gensym1 = let n = {mut a: 0} in  => incr (n,), n,;
//│ Desugared: def gensym1: let n = {mut a: 0} in  => incr (n,), n,
//│ // Query 1
//│ globalThis.gensym1 = ((n) => () => [
//│   incr(n),
//│   n
//│ ])({ a: 0 });
//│ // End of generated code
//│ gensym1: () -> (unit, {mut a: 'a},)
//│   where
//│     'a :> 0
//│        = [Function (anonymous)]

:js
gensym ()
//│ // Query 1
//│ res = gensym()();
//│ // End of generated code
//│ res: (unit, {mut a: 'a},)
//│   where
//│     'a :> 0
//│    = [ [], { a: 1 } ]

:js
gensym ()
//│ // Query 1
//│ res = gensym()();
//│ // End of generated code
//│ res: (unit, {mut a: 'a},)
//│   where
//│     'a :> 0
//│    = [ [], { a: 1 } ]

:js
gensym1 ()
//│ // Query 1
//│ res = gensym1();
//│ // End of generated code
//│ res: (unit, {mut a: 'a},)
//│   where
//│     'a :> 0
//│    = [ [], { a: 1 } ]

gensym1 ()
//│ res: (unit, {mut a: 'a},)
//│   where
//│     'a :> 0
//│    = [ [], { a: 2 } ]

:js
gensym1 ()
//│ // Query 1
//│ res = gensym1();
//│ // End of generated code
//│ res: (unit, {mut a: 'a},)
//│   where
//│     'a :> 0
//│    = [ [], { a: 3 } ]

:js
def f x = x
//│ // Query 1
//│ globalThis.f = function f(x) {
//│   return x;
//│ };
//│ // End of generated code
//│ f: 'a -> 'a
//│  = [Function: f]

:js
f 1
//│ // Query 1
//│ res = f(1);
//│ // End of generated code
//│ res: 1
//│    = 1

:js
rec def xx = xx
//│ // Query 1
//│ globalThis.xx = function xx() {
//│   return xx();
//│ };
//│ // End of generated code
//│ xx: nothing
//│   = [Function: xx]
