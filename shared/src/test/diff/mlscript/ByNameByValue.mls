:js
def incr x = x.a <- x.a + 1
//│ // Prelude
//│ let res;
//│ // Query 1
//│ globalThis.incr = function incr(x) {
//│   return x.a = x.a + 1, [];
//│ };
//│ // End of generated code
//│ incr: {mut a: int} -> unit
//│     = [Function: incr]


:p
:js
def gensym = let n = { mut a = 0 } in fun () -> (incr n, n)
//│ Parsed: def gensym: let n = {mut a: 0} in () => [incr(n,), n,];
//│ Desugared: def gensym: let n = {mut a: 0} in () => [incr(n,), n,]
//│ AST: Def(false, gensym, Let(false, n, Rcd(Var(a) = IntLit(0)), Lam(Tup(), Tup(_: App(Var(incr), Tup(_: Var(n))), _: Var(n)))), true)
//│ // Query 1
//│ globalThis.gensym = function gensym() {
//│   return (((n) => () => [
//│     incr(n),
//│     n
//│   ])({ a: 0 }));
//│ };
//│ // End of generated code
//│ gensym: () -> (unit, forall 'a. {mut a: 'a},)
//│   where
//│     'a :> 0
//│       = [Function: gensym]

:js
:p
gensym1 = let n = { mut a = 0 } in fun () -> (incr n, n)
//│ Parsed: let gensym1 = let n = {mut a: 0} in () => [incr(n,), n,];
//│ Desugared: def gensym1: let n = {mut a: 0} in () => [incr(n,), n,]
//│ AST: Def(false, gensym1, Let(false, n, Rcd(Var(a) = IntLit(0)), Lam(Tup(), Tup(_: App(Var(incr), Tup(_: Var(n))), _: Var(n)))), false)
//│ // Query 1
//│ globalThis.gensym1 = ((n) => () => [
//│   incr(n),
//│   n
//│ ])({ a: 0 });
//│ // End of generated code
//│ gensym1: () -> (unit, forall 'a. {mut a: 'a},)
//│   where
//│     'a :> 0
//│        = [Function (anonymous)]

:js
gensym ()
//│ // Query 1
//│ res = gensym()();
//│ // End of generated code
//│ res: (unit, forall 'a. {mut a: 'a},)
//│   where
//│     'a :> 0
//│    = [ [], { a: 1 } ]

:js
gensym ()
//│ // Query 1
//│ res = gensym()();
//│ // End of generated code
//│ res: (unit, forall 'a. {mut a: 'a},)
//│   where
//│     'a :> 0
//│    = [ [], { a: 1 } ]

:js
gensym1 ()
//│ // Query 1
//│ res = gensym1();
//│ // End of generated code
//│ res: (unit, forall 'a. {mut a: 'a},)
//│   where
//│     'a :> 0
//│    = [ [], { a: 1 } ]

gensym1 ()
//│ res: (unit, forall 'a. {mut a: 'a},)
//│   where
//│     'a :> 0
//│    = [ [], { a: 2 } ]

:js
gensym1 ()
//│ // Query 1
//│ res = gensym1();
//│ // End of generated code
//│ res: (unit, forall 'a. {mut a: 'a},)
//│   where
//│     'a :> 0
//│    = [ [], { a: 3 } ]

:js
def f x = x
//│ // Query 1
//│ globalThis.f = function f(x) {
//│   return x;
//│ };
//│ // End of generated code
//│ f: 'a -> 'a
//│  = [Function: f]

:js
f 1
//│ // Query 1
//│ res = f(1);
//│ // End of generated code
//│ res: 1
//│    = 1

:js
rec def xx = xx
//│ // Query 1
//│ globalThis.xx = function xx() {
//│   return xx();
//│ };
//│ // End of generated code
//│ xx: nothing
//│   = [Function: xx]

class Nil: {}
class Cons[A]: { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons[+A]
//│ Defined type alias List[+A]

def Nil = Nil {}
def Cons head tail = Cons { head; tail }
//│ Nil: Nil
//│    = [Function: Nil1]
//│ Cons: ('head & 'A) -> (List['A] & 'tail) -> (Cons['A] with {head: 'head, tail: 'tail})
//│     = [Function: Cons1]

:js
rec def xs = Cons 0 (Cons 1 xs)
//│ // Query 1
//│ globalThis.xs = function xs() {
//│   return Cons1(0)(Cons1(1)(xs()));
//│ };
//│ // End of generated code
//│ xs: 'tail
//│   where
//│     'tail :> Cons[0 | 1] with {head: 0, tail: Cons[0 | 1] with {head: 1, tail: 'tail}}
//│   = [Function: xs]

:re
xs
//│ res: 'tail
//│   where
//│     'tail :> Cons[0 | 1] with {head: 0, tail: Cons[0 | 1] with {head: 1, tail: 'tail}}
//│    Runtime error:
//│      RangeError: Maximum call stack size exceeded
