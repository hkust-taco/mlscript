
def a = 1
def b = 2
def c = 3
//│ a: 1
//│  = [Function: a]
//│ b: 2
//│  = [Function: b]
//│ c: 3
//│  = [Function: c]

if true then if true then a else b else a
//│ res: 1 | 2
//│    = 1

if true then if true then id a else id b else a
//│ res: 1 | 2
//│    = 1

class Foo[A]: { field: A }
class Bar: {}
//│ Defined class Foo[+A]
//│ Defined class Bar

def foo = Foo { field = id 1 }
//│ foo: Foo[1]
//│    = [Function: foo]

(if true then foo else { field = 2 }).field
//│ res: 1 | 2
//│    = 1

Foo { field = id 1 }
//│ res: Foo[1]
//│    = Foo { field: 1 }

def test x = case x of { Bar -> 1 | Foo -> 2 }
//│ test: (Bar | Foo[?]) -> (1 | 2)
//│     = [Function: test]

test foo
//│ res: 1 | 2
//│    = 2

def test x = case x of { Bar -> 1 | Foo -> x.field }
//│ test: (Bar | (Foo[?] with {field: 'field})) -> (1 | 'field)
//│     = [Function: test1]

test foo
//│ res: 1
//│    = 1

test (Foo { field = 2 })
//│ res: 1 | 2
//│    = 2

def test x = case x of { Foo -> x.field | _ -> 1 }
//│ test: ((Foo[?] with {field: 'field}) | ~Foo[?]) -> (1 | 'field)
//│     = [Function: test2]


def f x = x.u
//│ f: {u: 'u} -> 'u
//│  = [Function: f]

f { u = 1 }
//│ res: 1
//│    = 1

f { u = 1; v = 2 }
//│ res: 1
//│    = 1

f (if true then { u = 1; v = 2 } else { u = 1 })
//│ res: 1
//│    = 1

if true then { u = 1; v = 2 } else { u = 2 }
//│ res: {u: 1 | 2}
//│    = { u: 1, v: 2 }

