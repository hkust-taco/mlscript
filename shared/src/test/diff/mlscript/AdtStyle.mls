:NoJS

datatype Either[A, B] = Left(A) | Right(B)
//│ Defined class Either[+A, +B]
//│ Declared Either.Left: Either['A, ?] -> ('A,)
//│ Declared Either.Right: Either[?, 'B] -> ('B,)
//│ Defined class Left[+A, +B]
//│ Defined class Right[+A, +B]
//│ Left: 'a -> Either['a, nothing]
//│ Right: 'a -> Either[nothing, 'a]


datatype List[A] = Cons(A, List[A]) | Nil
//│ Defined class List[+A]
//│ Declared List.Cons: List['A] -> ('A, List['A],)
//│ Declared List.Nil: List[?] -> anything
//│ Defined class Cons[+A]
//│ Defined class Nil[+A]
//│ Cons: ('a, List['a],) -> List['a]
//│ Nil: List[nothing]

type Heap = List[(string, int)]
datatype HeapVar = HeapInt(int) | HeapV(Heap)
datatype Exp = EInt(int) | Var(string) | Plus(Exp, Exp) | Times(Exp, Exp)
datatype Stmt = Skip | Assign(string, Exp)
//│ Defined type alias Heap
//│ Defined class HeapVar
//│ Declared HeapVar.HeapInt: HeapVar -> (int,)
//│ Declared HeapVar.HeapV: HeapVar -> (Heap,)
//│ Defined class HeapInt
//│ Defined class HeapV
//│ Defined class Exp
//│ Declared Exp.EInt: Exp -> (int,)
//│ Declared Exp.Var: Exp -> (string,)
//│ Declared Exp.Plus: Exp -> (Exp, Exp,)
//│ Declared Exp.Times: Exp -> (Exp, Exp,)
//│ Defined class EInt
//│ Defined class Var
//│ Defined class Plus
//│ Defined class Times
//│ Defined class Stmt
//│ Declared Stmt.Skip: Stmt -> anything
//│ Declared Stmt.Assign: Stmt -> (string, Exp,)
//│ Defined class Skip
//│ Defined class Assign
//│ HeapInt: int -> HeapVar
//│ HeapV: Heap -> HeapVar
//│ EInt: int -> Exp
//│ Var: string -> Exp
//│ Plus: (Exp, Exp,) -> Exp
//│ Times: (Exp, Exp,) -> Exp
//│ Skip: Stmt
//│ Assign: (string, Exp,) -> Stmt

datatype Poly[A] = PolyList(List[A -> A])
//│ Defined class Poly[=A]
//│ Declared Poly.PolyList: Poly['A] -> (List['A -> 'A],)
//│ Defined class PolyList[=A]
//│ PolyList: List['a -> 'a] -> Poly['a]

datatype FCPoly = FCPolyList(List[forall 'a. 'a -> 'a])
//│ Defined class FCPoly
//│ Declared FCPoly.FCPolyList: FCPoly -> (List[forall 'a. 'a -> 'a],)
//│ Defined class FCPolyList
//│ FCPolyList: List[forall 'a. 'a -> 'a] -> FCPoly


fun x ->
  match x with
   | Cons(a, b) -> b
   | Nil -> Nil
//│ res: List['A] -> List['A]

fun x ->
  match x with
   | Cons(1, b) -> Cons(0, b)
   | Cons(a, b) -> b
   | Nil -> Nil
//│ res: List[int & 'A] -> List[0 | 'A]

fun x ->
  match x with
   | EInt(v,) -> v
   | _ -> 0
//│ res: Exp -> int

fun x ->
  match x with
   | (1, 2, 3) -> 6
   | (x, y, 3,) -> x + y
   | _ -> 0
//│ res: ((int, int, int,),) -> int

fun (x, y) ->
  match (x, y) with
   | (1, 2) -> 3
   | _ -> 0
//│ res: (int, int,) -> (3 | 0)


foo x = match x with
  | 0 -> 0
  | 1 -> 1
//│ foo: int -> (0 | 1)

foo 0
//│ res: 0 | 1

// FIXME allow ascriptions
:e
foo x = match x with
  | (0 : int) -> 0
  | (1 : int) -> 1
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: Cannot handle pattern 0 : int

foo 0
//│ res: 0 | 1

// FIXME such patterns are not allowed
:e
foo x = match x with
  | (id 0) -> 0
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: id cannot be pattern matched


match Cons(0, Nil) with Cons(0, Nil) -> 0
//│ res: 0

match Cons(false, Nil) with Cons(true, Nil) -> 0
//│ res: 0

match Cons(0, Nil) with Cons(1, Nil) -> 0
//│ res: 0

:e
match Cons(true, Nil) with Cons(1, Nil) -> 0
//│ ╔══[ERROR] Type mismatch in ADT pattern matching:
//│ ║  l.136: 	match Cons(true, Nil) with Cons(1, Nil) -> 0
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `int`
//│ ║  l.136: 	match Cons(true, Nil) with Cons(1, Nil) -> 0
//│ ║         	           ^^^^
//│ ╟── Note: constraint arises from literal pattern:
//│ ║  l.136: 	match Cons(true, Nil) with Cons(1, Nil) -> 0
//│ ╙──       	                                ^
//│ res: 0

fun x -> 
  match x with Cons(Left a, Nil) -> a
//│ res: List[Either['a, ?]] -> 'a

:e
res(Cons(true, Nil))
// match Cons(true, Nil) with Cons(Left a, Nil) -> a
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.153: 	res(Cons(true, Nil))
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `Either`
//│ ║  l.153: 	res(Cons(true, Nil))
//│ ║         	         ^^^^
//│ ╟── Note: constraint arises from pattern:
//│ ║  l.149: 	  match x with Cons(Left a, Nil) -> a
//│ ║         	                    ^^^^^^
//│ ╟── Note: class type parameter A is defined at:
//│ ║  l.13: 	datatype List[A] = Cons(A, List[A]) | Nil
//│ ╙──      	              ^
//│ res: error


