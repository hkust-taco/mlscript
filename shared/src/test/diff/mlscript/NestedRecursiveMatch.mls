:NoJS

class Leaf
class Node
class Some[A]: { value: A }
  method Id: A -> A
class None
//│ Defined class Leaf
//│ Defined class Node
//│ Defined class Some[=A]
//│ Declared Some.Id: Some['A] -> 'A -> 'A
//│ Defined class None

def Some: 'a -> Some['a]
def None: None
//│ Some: 'a -> Some['a]
//│ None: None

rec def f w = case w of
  Leaf -> None,
  Node ->
    let left = (w).left in
    let right = (w).right in
    let tmp0 = f (left,) in
    case tmp0 of
      None -> (
        let tmp1 = f (right,) in
        case tmp1 of
          None -> Some (0,),
          Some ->
            let m = (tmp1).value in
            Some (m,)
      ),
      Some ->
        let m = (tmp0).value in
        Some (m,)
//│ f: 'right -> (None | Some[in 'a out 'a | 0])
//│   where
//│     'right <: Leaf | Node & {left: 'right, right: 'right}

// * Minimizations:

rec def f w = case w of
  Node ->
    let left = (w).left in
    let tmp0 = f (left,) in
    case tmp0 of
      None -> Some (0,),
      Some ->
        let m = (tmp0).value in
        Some (m,)
//│ f: 'b -> Some[in 'a out 'a | 0]
//│   where
//│     'b <: Node & {left: 'b}

rec def f w = case w of
  Node ->
    let tmp0 = f w.left in
    case tmp0 of
      None -> Some 0,
      Some ->
        // Some tmp0.value // * produces different result!
        let m = tmp0.value in Some m
//│ f: 'b -> Some[in 'a out 'a | 0]
//│   where
//│     'b <: Node & {left: 'b}

def f w =
  let tmp0 = f w.left in
  case tmp0 of
    None -> Some 0,
    Some ->
      let m = tmp0.value in Some m
//│ f: {left: 'b} -> Some[in 'a out 0 | 'a]
//│   where
//│     'b <: Node & {left: 'b}

