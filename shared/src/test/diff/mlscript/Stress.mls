:NoJS

class A[T]: { fA: T }
class B[T]: { fB: T }
class C[T]: { fC: T }
class D[T]: { fD: T }
class E[T]: { fE: T }
class F[T]: { fF: T }
class G[T]: { fG: T }
class H[T]: { fH: T }
//│ Defined class A[+T]
//│ Defined class B[+T]
//│ Defined class C[+T]
//│ Defined class D[+T]
//│ Defined class E[+T]
//│ Defined class F[+T]
//│ Defined class G[+T]
//│ Defined class H[+T]

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
//│ foo: (A[?] & {fA: 'fA} | B[?] & {fB: 'fA} | C[?] & {fC: 'fA} | D[?] & {fD: 'fA} | E[?] & {fE: 'fA} | F[?] & {fF: 'fA} | G[?] & {fG: 'fA} | H[?] & {fH: 'fA}) -> 'fA
//│ constrain calls  : 26
//│ annoying  calls  : 0
//│ subtyping calls  : 986


// ====== 1 & all ====== //

// :stats
// def arg: A[int]
// foo arg
// //│ arg: A[int]
// //│ res: int | (nothing | (nothing | (nothing | (nothing | (nothing | (nothing | nothing))))))
// //│ constrain calls: 55374
// //│ annoying  calls: 423405

// // Too long!
// // :stats
// // def arg: A[int] | B[int]
// // foo arg


// ====== 2 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  }
def arg: A[int] | B[int]
foo arg
//│ foo: (A[?] & {fA: 'fA} | B[?] & {fB: 'fA}) -> 'fA
//│ arg: A[int] | B[int]
//│ res: int
//│ constrain calls  : 39
//│ annoying  calls  : 20
//│ subtyping calls  : 295


// ====== 3 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  }
def arg: A[int] | B[int] | C[int]
foo arg
//│ foo: (A[?] & {fA: 'fA} | B[?] & {fB: 'fA} | C[?] & {fC: 'fA}) -> 'fA
//│ arg: A[int] | B[int] | C[int]
//│ res: int
//│ constrain calls  : 52
//│ annoying  calls  : 30
//│ subtyping calls  : 550


// ====== 4 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  }
def arg: A[int] | B[int] | C[int] | D[int]
foo arg
//│ foo: (A[?] & {fA: 'fA} | B[?] & {fB: 'fA} | C[?] & {fC: 'fA} | D[?] & {fD: 'fA}) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int]
//│ res: int
//│ constrain calls  : 65
//│ annoying  calls  : 40
//│ subtyping calls  : 889

:stats
foo (arg with { x = 1} with { y = 2 })
//│ res: int
//│ constrain calls  : 40
//│ annoying  calls  : 37
//│ subtyping calls  : 406

:stats
foo (arg with { x = 1; y = 2; z = 3 })
//│ res: int
//│ constrain calls  : 40
//│ annoying  calls  : 37
//│ subtyping calls  : 382


// ====== 5 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int]
foo arg
//│ foo: (A[?] & {fA: 'fA} | B[?] & {fB: 'fA} | C[?] & {fC: 'fA} | D[?] & {fD: 'fA} | E[?] & {fE: 'fA}) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int]
//│ res: int
//│ constrain calls  : 78
//│ annoying  calls  : 50
//│ subtyping calls  : 1320


// ====== 6 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int]
foo arg
//│ foo: (A[?] & {fA: 'fA} | B[?] & {fB: 'fA} | C[?] & {fC: 'fA} | D[?] & {fD: 'fA} | E[?] & {fE: 'fA} | F[?] & {fF: 'fA}) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int]
//│ res: int
//│ constrain calls  : 91
//│ annoying  calls  : 60
//│ subtyping calls  : 1851


// ====== 7 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
foo arg
//│ foo: (A[?] & {fA: 'fA} | B[?] & {fB: 'fA} | C[?] & {fC: 'fA} | D[?] & {fD: 'fA} | E[?] & {fE: 'fA} | F[?] & {fF: 'fA} | G[?] & {fG: 'fA}) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
//│ res: int
//│ constrain calls  : 104
//│ annoying  calls  : 70
//│ subtyping calls  : 2490


// ====== 8 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int] | H[int]
foo arg
//│ foo: (A[?] & {fA: 'fA} | B[?] & {fB: 'fA} | C[?] & {fC: 'fA} | D[?] & {fD: 'fA} | E[?] & {fE: 'fA} | F[?] & {fF: 'fA} | G[?] & {fG: 'fA} | H[?] & {fH: 'fA}) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int] | H[int]
//│ res: int
//│ constrain calls  : 117
//│ annoying  calls  : 80
//│ subtyping calls  : 3245


