:NoJS

class A[T]: { fA: T }
class B[T]: { fB: T }
class C[T]: { fC: T }
class D[T]: { fD: T }
class E[T]: { fE: T }
class F[T]: { fF: T }
class G[T]: { fG: T }
class H[T]: { fH: T }
//│ Defined class A
//│ Defined class B
//│ Defined class C
//│ Defined class D
//│ Defined class E
//│ Defined class F
//│ Defined class G
//│ Defined class H

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
//│ foo: ((A[?] with {fA: 'a}) | (B[?] with {fB: 'a}) | (C[?] with {fC: 'a}) | (D[?] with {fD: 'a}) | (E[?] with {fE: 'a}) | (F[?] with {fF: 'a}) | (G[?] with {fG: 'a}) | (H[?] with {fH: 'a})) -> 'a
//│ constrain calls  : 26
//│ annoying  calls  : 0
//│ subtyping calls  : 365


// ====== 1 & all ====== //

// :stats
// def arg: A[int]
// foo arg
// //│ arg: A[int]
// //│ res: int | (nothing | (nothing | (nothing | (nothing | (nothing | (nothing | nothing))))))
// //│ constrain calls: 55374
// //│ annoying  calls: 423405

// // Too long!
// // :stats
// // def arg: A[int] | B[int]
// // foo arg


// ====== 2 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  }
def arg: A[int] | B[int]
foo arg
//│ foo: ((A[?] with {fA: 'a}) | (B[?] with {fB: 'a})) -> 'a
//│ arg: A[int] | B[int]
//│ res: int
//│ constrain calls  : 31
//│ annoying  calls  : 20
//│ subtyping calls  : 93


// ====== 3 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  }
def arg: A[int] | B[int] | C[int]
foo arg
//│ foo: ((A[?] with {fA: 'a}) | (B[?] with {fB: 'a}) | (C[?] with {fC: 'a})) -> 'a
//│ arg: A[int] | B[int] | C[int]
//│ res: int
//│ constrain calls  : 42
//│ annoying  calls  : 30
//│ subtyping calls  : 172


// ====== 4 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  }
def arg: A[int] | B[int] | C[int] | D[int]
foo arg
//│ foo: ((A[?] with {fA: 'a}) | (B[?] with {fB: 'a}) | (C[?] with {fC: 'a}) | (D[?] with {fD: 'a})) -> 'a
//│ arg: A[int] | B[int] | C[int] | D[int]
//│ res: int
//│ constrain calls  : 53
//│ annoying  calls  : 40
//│ subtyping calls  : 282

:stats
foo (arg with { x = 1} with { y = 2 })
//│ res: int
//│ constrain calls  : 25
//│ annoying  calls  : 37
//│ subtyping calls  : 121

:stats
foo (arg with { x = 1; y = 2; z = 3 })
//│ res: int
//│ constrain calls  : 25
//│ annoying  calls  : 37
//│ subtyping calls  : 97


// ====== 5 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int]
foo arg
//│ foo: ((A[?] with {fA: 'a}) | (B[?] with {fB: 'a}) | (C[?] with {fC: 'a}) | (D[?] with {fD: 'a}) | (E[?] with {fE: 'a})) -> 'a
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int]
//│ res: int
//│ constrain calls  : 64
//│ annoying  calls  : 50
//│ subtyping calls  : 430


// ====== 6 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int]
foo arg
//│ foo: ((A[?] with {fA: 'a}) | (B[?] with {fB: 'a}) | (C[?] with {fC: 'a}) | (D[?] with {fD: 'a}) | (E[?] with {fE: 'a}) | (F[?] with {fF: 'a})) -> 'a
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int]
//│ res: int
//│ constrain calls  : 75
//│ annoying  calls  : 60
//│ subtyping calls  : 623


// ====== 7 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
foo arg
//│ foo: ((A[?] with {fA: 'a}) | (B[?] with {fB: 'a}) | (C[?] with {fC: 'a}) | (D[?] with {fD: 'a}) | (E[?] with {fE: 'a}) | (F[?] with {fF: 'a}) | (G[?] with {fG: 'a})) -> 'a
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
//│ res: int
//│ constrain calls  : 86
//│ annoying  calls  : 70
//│ subtyping calls  : 868


// ====== 8 ====== //

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int] | H[int]
foo arg
//│ foo: ((A[?] with {fA: 'a}) | (B[?] with {fB: 'a}) | (C[?] with {fC: 'a}) | (D[?] with {fD: 'a}) | (E[?] with {fE: 'a}) | (F[?] with {fF: 'a}) | (G[?] with {fG: 'a}) | (H[?] with {fH: 'a})) -> 'a
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int] | H[int]
//│ res: int
//│ constrain calls  : 97
//│ annoying  calls  : 80
//│ subtyping calls  : 1172


