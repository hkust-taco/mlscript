
def foo(a, b, c) = add a (add b c)
foo(1, 2, 3)
foo(1, 2, 3,)
//│ foo: (int, int, int,) -> int
//│    = [Function: foo]
//│ res: int
//│    = 6
//│ res: int
//│    = 6

def bar() = 1
bar()
bar(,)
//│ bar: () -> 1
//│    = [Function: bar]
//│ res: 1
//│    = 1
//│ res: 1
//│    = 1

def bar(x) = x
bar(1)
bar(1,)
//│ bar: 'a -> 'a
//│    = [Function: bar1]
//│ res: 1
//│    = 1
//│ res: 1
//│    = 1

def bar(x,) = x
bar(1)
bar(1,)
//│ bar: 'a -> 'a
//│    = [Function: bar2]
//│ res: 1
//│    = 1
//│ res: 1
//│    = 1

def bar(x, y) = add x y
bar(1, 2)
bar(1, 2,)
//│ bar: (int, int,) -> int
//│    = [Function: bar3]
//│ res: int
//│    = 3
//│ res: int
//│    = 3

:e
bar((1, 2))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.53: 	bar((1, 2))
//│ ║        	^^^^^^^^^
//│ ╟── expression of type `((1, 2,),)` does not match type `(?a, ?b,)`
//│ ║  l.53: 	bar((1, 2))
//│ ║        	     ^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.42: 	def bar(x, y) = add x y
//│ ╙──      	        ^^^^
//│ res: error | int

def bar((x, y)) = add x y
bar((1, 2))
//│ bar: (int, int,) -> int
//│    = [Function: bar4]
//│ res: int
//│    = 3

:p
f = fun (x, y) -> add x y
f(1, 2)
//│ Parsed: let f = ((x, y,) => ((add (x,)) (y,))); (f (1, 2,));
//│ Desugared: def f: ((x, y,) => ((add (x,)) (y,)))
//│ Desugared: (f (1, 2,))
//│ f: (int, int,) -> int
//│  = [Function: f]
//│ res: int
//│    = 3

:e
f((1, 2))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.84: 	f((1, 2))
//│ ║        	^^^^^^^
//│ ╟── expression of type `((1, 2,),)` does not match type `(?a, ?b,)`
//│ ║  l.84: 	f((1, 2))
//│ ║        	   ^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.73: 	f = fun (x, y) -> add x y
//│ ╙──      	         ^^^^
//│ res: error | int

:e
r = (1, 2)
f r
//│ r: (1, 2,)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.98: 	f r
//│ ║        	^^^
//│ ╟── expression of type `((1, 2,),)` does not match type `(?a, ?b,)`
//│ ║  l.98: 	f r
//│ ║        	  ^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.73: 	f = fun (x, y) -> add x y
//│ ╙──      	         ^^^^
//│ res: error | int

:p
f = fun ((x, y)) -> add x y
f((1, 2))
//│ Parsed: let f = ((((x, y,)),) => ((add (x,)) (y,))); (f (((1, 2,)),));
//│ Desugared: def f: ((((x, y,)),) => ((add (x,)) (y,)))
//│ Desugared: (f (((1, 2,)),))
//│ f: (int, int,) -> int
//│  = [Function: f1]
//│ res: int
//│    = 3

:e
f(1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.123: 	f(1, 2)
//│ ║         	^^^^^^
//│ ╟── expression of type `(1, 2,)` does not match type `((?a, ?b,),)`
//│ ║  l.123: 	f(1, 2)
//│ ╙──       	  ^^^^
//│ res: error | int

r = (1, 2)
f r
//│ r: (1, 2,)
//│  = [ 1, 2 ]
//│ res: int
//│    = 3

