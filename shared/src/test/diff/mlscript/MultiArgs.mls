
def foo(a, b, c) = add a (add b c)
foo(1, 2, 3)
foo(1, 2, 3,)
//│ foo: (int, int, int,) -> int
//│    = [Function: foo]
//│ res: int
//│    = 6
//│ res: int
//│    = 6

def bar() = 1
bar()
bar(,)
//│ bar: () -> 1
//│    = [Function: bar]
//│ res: 1
//│    = 1
//│ res: 1
//│    = 1

def bar(x) = x
bar(1)
bar(1,)
//│ bar: 'a -> 'a
//│    = [Function: bar1]
//│ res: 1
//│    = 1
//│ res: 1
//│    = 1

def bar(x,) = x
bar(1)
bar(1,)
//│ bar: 'a -> 'a
//│    = [Function: bar2]
//│ res: 1
//│    = 1
//│ res: 1
//│    = 1

def bar(x, y) = add x y
bar(1, 2)
bar(1, 2,)
//│ bar: (int, int,) -> int
//│    = [Function: bar3]
//│ res: int
//│    = 3
//│ res: int
//│    = 3

:e
bar((1, 2))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.53: 	bar((1, 2))
//│ ║        	^^^^^^^^^^^
//│ ╟── argument of type `((1, 2,),)` does not match type `(?a, ?b,)`
//│ ║  l.53: 	bar((1, 2))
//│ ║        	   ^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.42: 	def bar(x, y) = add x y
//│ ╙──      	       ^^^^^^
//│ res: error | int
//│    = '1,2undefined'

def bar((x, y)) = add x y
bar((1, 2))
//│ bar: ((int, int,),) -> int
//│    = [Function: bar4]
//│ res: int
//│    = 3

:p
f = fun (x, y) -> add x y
f(1, 2)
//│ Parsed: let f = (x, y,) => add(x,)(y,); f(1, 2,);
//│ Desugared: def f: (x, y,) => add(x,)(y,)
//│ AST: Def(false, f, Lam(Tup(_: Var(x), _: Var(y)), App(App(Var(add), Tup(_: Var(x))), Tup(_: Var(y)))), false)
//│ Desugared: f(1, 2,)
//│ AST: App(Var(f), Tup(_: IntLit(1), _: IntLit(2)))
//│ f: (int, int,) -> int
//│  = [Function: f]
//│ res: int
//│    = 3

:e
f((1, 2))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.87: 	f((1, 2))
//│ ║        	^^^^^^^^^
//│ ╟── argument of type `((1, 2,),)` does not match type `(?a, ?b,)`
//│ ║  l.87: 	f((1, 2))
//│ ║        	 ^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.74: 	f = fun (x, y) -> add x y
//│ ╙──      	        ^^^^^^
//│ res: error | int
//│    = '1,2undefined'

:e
r = (1, 2)
f r
//│ r: (1, 2,)
//│  = [ 1, 2 ]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.102: 	f r
//│ ║         	^^^
//│ ╟── argument of type `((1, 2,),)` does not match type `(?a, ?b,)`
//│ ║  l.102: 	f r
//│ ║         	  ^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.74: 	f = fun (x, y) -> add x y
//│ ╙──      	        ^^^^^^
//│ res: error | int
//│    = '1,2undefined'

:p
f = fun ((x, y)) -> add x y
f((1, 2))
//│ Parsed: let f = ('(' [x, y,] ')',) => add(x,)(y,); f('(' [1, 2,] ')',);
//│ Desugared: def f: ('(' [x, y,] ')',) => add(x,)(y,)
//│ AST: Def(false, f, Lam(Tup(_: Bra(rcd = false, Tup(_: Var(x), _: Var(y)))), App(App(Var(add), Tup(_: Var(x))), Tup(_: Var(y)))), false)
//│ Desugared: f('(' [1, 2,] ')',)
//│ AST: App(Var(f), Tup(_: Bra(rcd = false, Tup(_: IntLit(1), _: IntLit(2)))))
//│ f: ((int, int,),) -> int
//│  = [Function: f1]
//│ res: int
//│    = 3

:e
f(1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.131: 	f(1, 2)
//│ ║         	^^^^^^^
//│ ╟── argument list of type `(1, 2,)` does not match type `((?a, ?b,),)`
//│ ║  l.131: 	f(1, 2)
//│ ╙──       	 ^^^^^^
//│ res: error | int
//│ Runtime error:
//│ TypeError: number 1 is not iterable (cannot read property Symbol(Symbol.iterator))

r = (1, 2)
f r
//│ r: (1, 2,)
//│  = [ 1, 2 ]
//│ res: int
//│    = 3

