
def test f =
  let local x = f x
  in (local 0, local true)
//│ test: ((0 | true) -> 'a) -> ('a, 'a,)
//│     = [Function: test]

def test f =
  let local x = f x
  in (local (fun z -> z), local (fun z -> true))
//│ test: ((forall 'a. 'a -> (true | 'a)) -> 'b) -> ('b, 'b,)
//│     = [Function: test1]

def test f =
  let local x = x f
  in (local (fun z -> z), local (fun z -> true))
//│ test: 'a -> ('a, true,)
//│     = [Function: test2]

def test f a b =
  let local x = f x
  in (local a, local b)
//│ test: ('a -> 'b) -> 'a -> 'a -> ('b, 'b,)
//│     = [Function: test3]

def test x =
  let local g = g x
  in local succ
//│ test: int -> int
//│     = [Function: test4]

test 1
//│ res: int
//│    = 2

:e
test "hi"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.37: 	test "hi"
//│ ║        	^^^^^^^^^
//│ ╟── string literal of type `"hi"` is not an instance of type `int`
//│ ║  l.37: 	test "hi"
//│ ║        	     ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	  let local g = g x
//│ ╙──      	                  ^
//│ res: error | int
//│    = 'hi1'

def test f =
  let local() = succ (f 1)
  in local()
//│ test: (1 -> int) -> int
//│     = [Function: test5]

test succ
test id
//│ res: int
//│    = 3
//│ res: int
//│    = 2

:e
test (fun x -> false)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.64: 	test (fun x -> false)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `false` is not an instance of type `int`
//│ ║  l.64: 	test (fun x -> false)
//│ ║        	               ^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.51: 	  let local() = succ (f 1)
//│ ╙──      	                      ^^^
//│ res: error | int
//│    = 1

:e
test concat
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.78: 	test concat
//│ ║        	^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `string`
//│ ║  l.51: 	  let local() = succ (f 1)
//│ ╙──      	                        ^
//│ res: error | int
//│    = '(y) => x + y1'

def test f =
  let local g = g f
  in local succ
//│ test: int -> int
//│     = [Function: test6]

def test f =
  let local g = g (f 1)
  in local succ
//│ test: (1 -> int) -> int
//│     = [Function: test7]

:e
test (fun x -> "oops")
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.101: 	test (fun x -> "oops")
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"oops"` is not an instance of type `int`
//│ ║  l.101: 	test (fun x -> "oops")
//│ ║         	               ^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.95: 	  let local g = g (f 1)
//│ ╙──      	                   ^^^
//│ res: error | int
//│    = 'oops1'


def test f =
  let local g x = g (f x)
  in local succ
//│ test: ('a -> int) -> 'a -> int
//│     = [Function: test8]

def test f =
  let local g x = g (f x)
  in local add
//│ test: ('a -> int) -> 'a -> int -> int
//│     = [Function: test9]

def test f =
  let local g x = g (f x)
  in local add 1
//│ test: (1 -> int) -> int -> int
//│     = [Function: test10]

def test f =
  let local g x = g (f x)
  in (local add 1, local (fun y -> fun z -> y + z) 2)
//│ test: ((1 | 2) -> int) -> (int -> int, int -> int,)
//│     = [Function: test11]

f_g = test succ
f_g.0 42
f_g.1 42
//│ f_g: (int -> int, int -> int,)
//│    = [ [Function (anonymous)], [Function (anonymous)] ]
//│ res: int
//│    = 44
//│ res: int
//│    = 45


def test f =
  let local g x = g (f x)
  in (local add 1, local concat "ok")
//│ test: (("ok" | 1) -> nothing) -> (int -> int, string -> string,)
//│     = [Function: test12]

:e
test succ
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.157: 	test succ
//│ ║         	^^^^^^^^^
//│ ╟── string literal of type `"ok"` is not an instance of type `int`
//│ ║  l.152: 	  in (local add 1, local concat "ok")
//│ ╙──       	                                ^^^^
//│ res: error | (int -> int, string -> string,)
//│    = [ [Function (anonymous)], [Function (anonymous)] ]


def test =
  (fun f ->
    let local g x = f (g x)
    in local
  ) add
//│ test: ('a -> int) -> 'a -> int -> int
//│     = [Function: test13]

def test =
  (fun f -> fun x ->
    let local g = f (g x)
    in local
  ) add "1"
//│ test: ("1" -> int) -> int -> int
//│     = [Function: test14]

def test =
  (fun f -> fun x ->
    let local g = f (g x)
    in local add "1"
  )
//│ test: ((int -> int) -> "1" -> 'a) -> int -> 'a
//│     = [Function: test15]

fun f -> fun x ->
  let local = (fun y -> f y) x
  in ()
//│ res: ('a -> anything) -> 'a -> ()
//│    = [Function: res]

:e
res add "1"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.199: 	res add "1"
//│ ║         	^^^^^^^^^^^
//│ ╟── string literal of type `"1"` is not an instance of type `int`
//│ ║  l.199: 	res add "1"
//│ ║         	        ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.193: 	  let local = (fun y -> f y) x
//│ ║         	                          ^
//│ ╟── from reference:
//│ ║  l.193: 	  let local = (fun y -> f y) x
//│ ╙──       	                             ^
//│ res: error | ()
//│    = []

fun f -> fun x ->
  let local = f ((fun y -> y) x)
  in ()
//│ res: ('a -> anything) -> 'a -> ()
//│    = [Function: res]

:e
res add "1"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.222: 	res add "1"
//│ ║         	^^^^^^^^^^^
//│ ╟── string literal of type `"1"` is not an instance of type `int`
//│ ║  l.222: 	res add "1"
//│ ║         	        ^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.216: 	  let local = f ((fun y -> y) x)
//│ ║         	                 ^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.216: 	  let local = f ((fun y -> y) x)
//│ ╙──       	                              ^
//│ res: error | ()
//│    = []

def id: 'a -> 'a
//│ id: 'a -> 'a
//│   = <missing implementation>

fun f -> fun x ->
  let local = f (id x)
  in ()
//│ res: ('a -> anything) -> 'a -> ()
//│    = <no result>
//│      id is not implemented

:e
(fun k -> k (fun x ->
    let tmp = add x 1 in x
  )) (fun f -> f true)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.250: 	(fun k -> k (fun x ->
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.251: 	    let tmp = add x 1 in x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.252: 	  )) (fun f -> f true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `int`
//│ ║  l.252: 	  )) (fun f -> f true)
//│ ║         	                 ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.251: 	    let tmp = add x 1 in x
//│ ╙──       	                  ^
//│ res: error | true
//│    = true

:e
(fun k ->
    let test = k (fun x ->
      let tmp = add x 1 in x
    ) in test
  ) (fun f -> f true)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.270: 	(fun k ->
//│ ║         	^^^^^^^^^
//│ ║  l.271: 	    let test = k (fun x ->
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.272: 	      let tmp = add x 1 in x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.273: 	    ) in test
//│ ║         	^^^^^^^^^^^^^
//│ ║  l.274: 	  ) (fun f -> f true)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `int`
//│ ║  l.274: 	  ) (fun f -> f true)
//│ ║         	                ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.272: 	      let tmp = add x 1 in x
//│ ╙──       	                    ^
//│ res: error | true
//│    = true



def fst ((a, b)) = a
def snd ((a, b)) = b
//│ fst: (('a, anything,),) -> 'a
//│    = [Function: fst]
//│ snd: ((anything, 'a,),) -> 'a
//│    = [Function: snd]

def foo f =
  let x = f 42
  in fst x + snd x
//│ foo: (42 -> (int, int,)) -> int
//│    = [Function: foo]

def foo f =
  let x = f 42
  in fst x + snd x
//│ foo: (42 -> (int, int,)) -> int
//│    = [Function: foo1]

foo (fun x -> (x, x))
foo (fun x -> (0, x + 1))
//│ res: int
//│    = 84
//│ res: int
//│    = 43

def foo (f: 'a -> ('a, 'a)) =
  let x = f 42
  in fst x + snd x
//│ foo: ((42 | 'a) -> (int & 'a, int & 'a,)) -> int
//│    = [Function: foo2]

foo (fun x -> (x, x))
foo (fun x -> (0, x + 1))
//│ res: int
//│    = 84
//│ res: int
//│    = 43

def foo (f: forall 'a. 'a -> ('a, 'a)) =
  let x = f 42
  in fst x + snd x
//│ foo: (forall 'a. 'a -> ('a, 'a,)) -> int
//│    = [Function: foo3]

foo (fun x -> (x, x))
//│ res: int
//│    = 84

:e
foo (fun x -> (0, x + 1))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.347: 	foo (fun x -> (0, x + 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'a` is not an instance of type `int`
//│ ║  l.336: 	def foo (f: forall 'a. 'a -> ('a, 'a)) =
//│ ║         	                       ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.347: 	foo (fun x -> (0, x + 1))
//│ ║         	                  ^
//│ ╟── Note: quantified type variable 'a is defined at:
//│ ║  l.336: 	def foo (f: forall 'a. 'a -> ('a, 'a)) =
//│ ╙──       	                   ^^
//│ res: error | int
//│    = 43


