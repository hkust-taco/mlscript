// Examples from Set-Theoretic Types for Polymorphic Variants

//************** PRELIMINARIES *************

class Nil
class Cons[A]: { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons[+A]
//│ Defined type alias List[+A]

def Nil = Nil {}
//│ Nil: Nil
//│    = [Function: Nil1]

def Cons head tail = Cons { head; tail }
//│ Cons: ('head & 'A) -> (List['A] & 'tail) -> (Cons['A] with {head: 'head, tail: 'tail})
//│     = [Function: Cons1]

class A
class B
class C
class D
//│ Defined class A
//│ Defined class B
//│ Defined class C
//│ Defined class D

//************** EXAMPLE 1: LOSS OF POLYMORPHISM *************

def id x = x
//│ id: 'a -> 'a
//│   = [Function: id]


id A{}
//│ res: A
//│    = A {}

def f x = case x of { A -> true }
//│ f: A -> true
//│  = [Function: f]

f (id A{})
//│ res: true
//│    = true

// # [`A; `C]
// - : [> `A | `C] list
// # [id `A; `C]
// - : [> `A | `C] list

Cons (A{}) (Cons (C{}) Nil)
//│ res: Cons[A | C] with {head: A, tail: Cons[C] with {tail: Nil}}
//│    = Cons { head: A {}, tail: Cons { head: C {}, tail: Nil {} } }

Cons (id A{}) (Cons (C{}) Nil)
//│ res: Cons[A | C] with {head: A, tail: Cons[C] with {tail: Nil}}
//│    = Cons { head: A {}, tail: Cons { head: C {}, tail: Nil {} } }

// val id2 : ([< `A | `B ] as 'a) -> 'a = <fun>

def id2 x = case x of { A -> x | B -> x }
//│ id2: ('a & (A | B)) -> 'a
//│    = [Function: id2]

// id2 `A
// - : [< `A | `B > `A ] = `A

id2 (A{})
//│ res: A
//│    = A {}

// # [(id2 `A); `C];;
// Error: This expression has type [> `C ] but an expression was expected of
// type [< `A | `B > `A ]. The second variant type does not allow tag(s) `C

Cons (id2 (A{})) (Cons (C{}) Nil)
//│ res: Cons[A | C] with {head: A, tail: Cons[C] with {tail: Nil}}
//│    = Cons { head: A {}, tail: Cons { head: C {}, tail: Nil {} } }

//************** EXAMPLE 2: ROUGHLY-TYPED PATTERN MATCHING *************

// val f : [ `A | `B ] -> [ `A | `B ] = <fun>

def f x = let xx = id2 x in case xx of { A -> B{} | _ -> xx }
//│ f: (A | B) -> B
//│  = [Function: f1]

// val g : ([< `A | `B > `A ] as 'a) -> 'a = <fun>

// Actually ~A !!
def g x = case x of { A -> id2 x | _ -> x }
//│ g: ('a & (A | ~#A)) -> 'a
//│  = [Function: g]

g (C{})
//│ res: C
//│    = C {}

// val map : ('a -> 'a) -> 'a list -> 'a list = <fun>

rec def map f l = case l of {
  | Nil -> l
  | Cons -> Cons (f l.head) (map f l.tail)
  }
//│ map: ('head -> ('head0 & 'A)) -> 'a -> 'tail
//│   where
//│     'a <: (Cons[?] with {head: 'head, tail: 'a}) | Nil & List['A] & 'tail
//│     'tail :> Cons['A] with {head: 'head0, tail: 'tail}
//│    = [Function: map]

map (fun x -> "lol") (Cons 2 (Cons 3 Nil))
//│ res: 'tail
//│   where
//│     'tail :> (Cons["lol"] with {tail: 'tail}) | Nil
//│    = Cons { head: 'lol', tail: Cons { head: 'lol', tail: Nil {} } }

//************** EXAMPLE 3: ROUGH APPROXIMATIONS *************

// let f x = match x with
//  | (`A, _) -> 1 | (`B, _) -> 2
//  | (_, `A) -> 3 | (_, `B) -> 4
// Warning 8 [partial-match]: this pattern-matching is not exhaustive.
// Here is an example of a case that is not matched:
// (`AnyOtherTag, `AnyOtherTag)
// val f : [> `A | `B ] * [> `A | `B ] -> int = <fun>

// Inferred type is not good enough
def f = fun x -> case x._1 of {
  | A -> 1
  | B -> 2
  | _ -> case x._2 of {
    | A -> 3
    | B -> 4
    }
  }
//│ f: {_1: anything, _2: A | B} -> (1 | 2 | 3 | 4)
//│  = [Function: f2]

:e
f ({ _1 = A{}; _2 = C{} })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.142: 	f ({ _1 = A{}; _2 = C{} })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `C` does not match type `A | B`
//│ ║  l.142: 	f ({ _1 = A{}; _2 = C{} })
//│ ║         	                    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.133: 	  | _ -> case x._2 of {
//│ ║         	              ^^^^
//│ ╟── Note: class C is defined at:
//│ ║  l.22: 	class C
//│ ╙──      	      ^
//│ res: 1 | 2 | 3 | 4 | error
//│    = 1

// x actually has equivalent type {_1: anything; _2: anything}

def t1: {_1: A | B; _2: anything} | {_1: anything; _2: A | B}
//│ t1: {_1: anything, _2: anything}
//│   = <missing implementation>

:e
def f = fun (x: {_1: A | B; _2: anything} | {_1: anything; _2: A | B}) -> case x._1 of {
  | A -> 1
  | B -> 2
  | _ -> case x._2 of {
    | A -> 3
    | B -> 4
    }
  }
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.168: 	  | _ -> case x._2 of {
//│ ║         	         ^^^^^^^^^^^^^^
//│ ║  l.169: 	    | A -> 3
//│ ║         	^^^^^^^^^^^^
//│ ║  l.170: 	    | B -> 4
//│ ║         	^^^^^^^^^^^^
//│ ║  l.171: 	    }
//│ ║         	^^^^^
//│ ╟── type `anything` does not match type `A | B`
//│ ║  l.165: 	def f = fun (x: {_1: A | B; _2: anything} | {_1: anything; _2: A | B}) -> case x._1 of {
//│ ║         	                                ^^^^^^^^
//│ ╟── but it flows into field selection with expected type `A | B`
//│ ║  l.168: 	  | _ -> case x._2 of {
//│ ╙──       	              ^^^^
//│ f: {_1: anything, _2: anything} -> (1 | 2 | 3 | 4)
//│  = [Function: f3]

// not useful
class Tuple[a, b]: { _1: a; _2: b }
//│ Defined class Tuple[+a, +b]

def t2: Tuple[A | B, anything] | Tuple[anything, A | B] 
//│ t2: in Tuple[A | B, A | B] out Tuple[?, ?]
//│   = <missing implementation>
def t3: Tuple[anything, anything]
//│ t3: Tuple[?, ?]
//│   = <missing implementation>

t3 = t2
t2 = t3
//│ Tuple[?, ?]
//│   <:  t3:
//│ Tuple[?, ?]
//│   = <no result>
//│     t2 is not implemented
//│ Tuple[?, ?]
//│   <:  t2:
//│ Tuple[A | B, A | B]
//│   = <no result>
//│     t3 and t2 are not implemented

class L: { _1: A | B; _2: anything }
class R: { _1: anything; _2: A | B }
//│ Defined class L
//│ Defined class R

:e
def f = fun (x: L | R) -> case x._1 of {
  | A -> 1
  | B -> 2
  | _ -> case x._2 of {
    | A -> 3
    | B -> 4
    }
  }
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.224: 	  | _ -> case x._2 of {
//│ ║         	         ^^^^^^^^^^^^^^
//│ ║  l.225: 	    | A -> 3
//│ ║         	^^^^^^^^^^^^
//│ ║  l.226: 	    | B -> 4
//│ ║         	^^^^^^^^^^^^
//│ ║  l.227: 	    }
//│ ║         	^^^^^
//│ ╟── field selection of type `anything` does not match type `A | B`
//│ ║  l.224: 	  | _ -> case x._2 of {
//│ ╙──       	              ^^^^
//│ f: (L | R) -> (1 | 2 | 3 | 4)
//│  = [Function: f4]

f (L { _1 = A{}; _2 = C{} })
//│ res: 1 | 2 | 3 | 4
//│    = 1
