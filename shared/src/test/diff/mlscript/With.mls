
def rcd = { x = 1 }
//│ rcd: {x: 1}

rcd.x
//│ res: 1

rcd with { y = 2 }
//│ res: {x: 1, y: 2}

add res.x res.y
//│ res: int

rcd with { x = "oops" }
//│ res: {x: "oops"}

res.x
//│ res: "oops"

id rcd with { x = "oops" }
//│ res: {x: "oops"}

res.x
//│ res: "oops"


def rcd = { }
//│ rcd: anything

id rcd with { x = "oops" }
//│ res: {x: "oops"}

res.x
//│ res: "oops"


def f r = r with { x = "oops" }
//│ f: 'a -> ('a\x & {x: "oops"})

f rcd
//│ res: {x: "oops"}

f (rcd with { y = 2 })
//│ res: {x: "oops", y: 2}


def f a b = if true then a else b
//│ f: 'a -> 'a -> 'a

def f a b = (if true then a else b) with { x = "oops" }
//│ f: 'a -> 'a -> ('a\x & {x: "oops"})

def f a b = let tmp = a.x in (if true then a else b) with { x = "oops" }
//│ f: ({x: anything} & 'a) -> 'a -> ('a\x & {x: "oops"})


({ name = "Bob" } with { age = 123 }).age
//│ res: 123

({ name = "Bob" } with { age = 123 }).name
//│ res: "Bob"

({ name = "Bob" } with { name = 123 }).name
//│ res: 123


def getf { f } = f
//│ getf: {f: 'a} -> 'a

def foo x =
  let xf = x with { f = 42 }
  in getf xf
//│ foo: ({f: 'a} | ~{f: 42})\f -> 'a

foo 123
//│ res: 42

def fooManual: (~{f: 42} | {f: 'a})\f -> 'a
//│ fooManual: ({f: 'a} | ~{f: 42})\f -> 'a

fooManual 123
//│ res: 42

def foo x =
  let xf = x with { f = 42 }
  in add (getf xf) (getf x)
//│ foo: (({f: int} | ~{f: 42})\f & {f: int}) -> int

def foo x =
  let xf = x with { f = 42 }
  in { l = getf xf; r = getf x; s = x }
//│ foo: (({f: 'a} | ~{f: 42})\f & {f: 'b} & 'c) -> {l: 'a, r: 'b, s: 'c}

:e
foo 42
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.95: 	foo 42
//│ ║        	^^^^^^
//│ ╟── expression of type `42` does not have field 'f'
//│ ║  l.95: 	foo 42
//│ ║        	    ^^
//│ ╟── Note: constraint arises from record literal:
//│ ║  l.67: 	def getf { f } = f
//│ ║        	         ^^^^^
//│ ╟── from reference:
//│ ║  l.91: 	  in { l = getf xf; r = getf x; s = x }
//│ ╙──      	                             ^
//│ res: error | {l: 42, r: nothing, s: 42}

def r = foo (42 with { f = 1 })
//│ r: {l: 42, r: 1, s: 42 & {f: 1}}

r.s.f
//│ res: 1

add r.s 1
//│ res: int


{} with { x = 1 } with { y = 2 }
//│ res: {x: 1, y: 2}

:e
res.z
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.124: 	res.z
//│ ║         	^^^^^
//│ ╟── expression of type `{x: 1, y: 2}` does not match type `{z: ?a}`
//│ ║  l.120: 	{} with { x = 1 } with { y = 2 }
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{z: ?a}`
//│ ║  l.124: 	res.z
//│ ╙──       	^^^
//│ res: error



// === With and classes === //

class C[A]: { x: A }
//│ Defined class C

c = C{x = 1}
//│ c: C['A .. 1 | 'A] with {x: 1}

c.x
//│ res: 1

// FIXME: should reconstruct C[...]\x & {y: 2, x: "hi"}
d = c with { x = "hi"; y = 2 }
//│ d: C['A .. 1 | 'A] with {x: "hi", y: 2}

d.x
//│ res: "hi"

d: C['a]
//│ res: C['a .. "hi" | 'a | 1]

res.x
//│ res: "hi" | 1

