
class Parent1: { name: string }
//│ Defined class Parent1

class Parent2: { name: int }
//│ Defined class Parent2

:e
class Child: Parent1 & Parent2
//│ ╔══[ERROR] class Child cannot inherit from class Parent2 as it already inherits from class Parent1
//│ ║  l.9: 	class Child: Parent1 & Parent2
//│ ╙──     	      ^^^^^^^^^^^^^^^^^^^^^^^^

type Child = Parent1 & Parent2
def Child: (Parent1 & Parent2) -> Child
//│ Defined type alias Child
//│ Child: nothing -> nothing

def f(x:Child) = x.name
//│ f: nothing -> nothing
//│  = [Function: f]

def f(x:Child) = x: nothing
//│ f: nothing -> nothing
//│  = [Function: f1]

:pe
def c = Child(Parent1{name="A"} with Parent2{name="B"})
//│ /!\ Parse error: Expected ")":1:33, found "with Paren" at l.28:33: def c = Child(Parent1{name="A"} with Parent2{name="B"})

:e
def c = Child(Parent1{name="A"})
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.32: 	def c = Child(Parent1{name="A"})
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `Parent1 & {name: ?name}` does not match type `Parent2`
//│ ║  l.32: 	def c = Child(Parent1{name="A"})
//│ ║        	              ^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.15: 	def Child: (Parent1 & Parent2) -> Child
//│ ╙──      	                      ^^^^^^^
//│ c: error

:e
type Sly1 = Parent2
class Child2: Parent1 & Sly1
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.46: 	class Child2: Parent1 & Sly1
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^
//│ Defined type alias Sly1

:e
type Sly2[A] = A
class Child2: Sly2[Parent1] & Parent2
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.54: 	class Child2: Sly2[Parent1] & Parent2
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ Defined type alias Sly2

:e
class Crazy[A]: A & { name: A }
//│ ╔══[ERROR] cannot inherit from a type variable
//│ ║  l.61: 	class Crazy[A]: A & { name: A }
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^^

class Crazy[A]: { name: A }
def Crazy: 'a -> (Crazy['a] & 'a)
//│ Defined class Crazy
//│ Crazy: 'a -> (Crazy['a] & 'a)

Crazy
//│ res: 'a -> (Crazy['a] & 'a)
//│    = [class Crazy]

def c = Crazy({ name = "Bob"; age = 42 })
//│ c: Crazy['a .. 'a | {age: 42, name: "Bob"}] & 'a | (Crazy['a .. 'a | {age: 42, name: "Bob"}] with {age: 42, name: "Bob" & {age: 42, name: "Bob"} | "Bob" & 'a})
//│  = Crazy { name: 'Bob' }

:e
c: nothing
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.80: 	c: nothing
//│ ║        	^
//│ ╟── expression of type `{name: "Bob", age: 42}` does not match type `~Crazy[?a]`
//│ ║  l.75: 	def c = Crazy({ name = "Bob"; age = 42 })
//│ ║        	              ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.80: 	c: nothing
//│ ║        	^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.80: 	c: nothing
//│ ╙──      	   ^^^^^^^
//│ res: nothing

def d = Crazy(Parent1{name = "Bob"})
//│ d: (Crazy['a .. 'a | Parent1 & {name: "Bob"}] with {name: 'a | Parent1 & {name: "Bob"}}) & 'a
//│  = Crazy { name: 'Bob' }

d: nothing
//│ res: nothing
//│    = Crazy { name: 'Bob' }


:e
class Stupid: Parent1 | Parent2
//│ ╔══[ERROR] cannot inherit from a type union
//│ ║  l.105: 	class Stupid: Parent1 | Parent2
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^^^^^
:e
class Stupid: Parent1 -> Parent2
//│ ╔══[ERROR] cannot inherit from a function type
//│ ║  l.110: 	class Stupid: Parent1 -> Parent2
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^^^^^^
:e
class Stupid: ~Parent1
//│ ╔══[ERROR] cannot inherit from a type negation
//│ ║  l.115: 	class Stupid: ~Parent1
//│ ╙──       	      ^^^^^^^^^^^^^^^^

:e // TODO don't report several times
class Cycle1: Cycle2
class Cycle2: Cycle1
type Stutter = Cycle1
//│ ╔══[ERROR] illegal cycle involving type Cycle1
//│ ║  l.121: 	class Cycle1: Cycle2
//│ ╙──       	      ^^^^^^^^^^^^^^
//│ ╔══[ERROR] illegal cycle involving type Cycle2
//│ ║  l.122: 	class Cycle2: Cycle1
//│ ╙──       	      ^^^^^^^^^^^^^^
//│ ╔══[ERROR] illegal cycle involving type Cycle1
//│ ║  l.123: 	type Stutter = Cycle1
//│ ╙──       	     ^^^^^^^^^^^^^^^^

:e
def c = Cycle1 error
c: Cycle1
//│ ╔══[ERROR] identifier not found: Cycle1
//│ ║  l.135: 	def c = Cycle1 error
//│ ╙──       	        ^^^^^^
//│ c: error
//│ ╔══[ERROR] type identifier not found: Cycle1
//│ ║  l.136: 	c: Cycle1
//│ ╙──       	   ^^^^^^
//│ res: error


type N[A] = ~A
//│ Defined type alias N

:e
class Cycle: N[Cycle]
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.151: 	class Cycle: N[Cycle]
//│ ╙──       	      ^^^^^^^^^^^^^^^



:ng
// TODO forbid
class D: int
//│ Defined class D

add (D{}) 2
//│ res: int
//│    = Uncaught ReferenceError: add is not defined


:ng
// TODO forbid
class E: 1
//│ Defined class E

:e
E{}: 1
E{}: int
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.174: 	E{}: 1
//│ ║         	^^^
//│ ╙── expression of type `E` does not match type `1`
//│ res: 1
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.175: 	E{}: int
//│ ║         	^^^
//│ ╟── expression of type `E` does not match type `int`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.175: 	E{}: int
//│ ╙──       	     ^^^
//│ res: int


:e
class F: nothing
F{}
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.192: 	class F: nothing
//│ ╙──       	      ^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: F
//│ ║  l.193: 	F{}
//│ ╙──       	^
//│ res: error


// TODO forbid
class String
class Bool
//│ Defined class String
//│ Defined class Bool

"1" : String
true : Bool
//│ res: string
//│    = '1'
//│ res: bool
//│    = true


:e
class Weird: {} | {}
//│ ╔══[ERROR] cannot inherit from a type union
//│ ║  l.218: 	class Weird: {} | {}
//│ ╙──       	      ^^^^^^^^^^^^^^


:e
class A
type Id[T] = T
class B: Id[A]
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.227: 	class B: Id[A]
//│ ╙──       	      ^^^^^^^^
//│ Defined class A
//│ Defined type alias Id


:e // TODO improve prov of the TV
class Class3A
class Class3B: Class3A & 'a
//│ ╔══[ERROR] cannot inherit from a type variable
//│ ║  l.237: 	class Class3B: Class3A & 'a
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^
//│ Defined class Class3A

