
class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
class Nega[E]: { arg: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
def nega arg = Nega { arg }
//│ Defined class Lit
//│ Defined class Add[+E]
//│ Defined class Nega[+E]
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: ('lhs & 'E) -> ('E & 'rhs) -> (Add['E] with {lhs: 'lhs, rhs: 'rhs})
//│    = [Function: add]
//│ nega: 'arg -> Nega['arg]
//│     = [Function: nega]

rec def evalStub1 e = case e of {
  Lit -> e.val
  }
//│ evalStub1: (Lit with {val: 'val}) -> 'val
//│          = [Function: evalStub1]

rec def evalStub2 e = case e of {
  Lit -> e.val | Nega -> 0 - (evalStub2 e.arg)
  }
//│ evalStub2: 'a -> int
//│   where
//│     'a <: Lit | Nega[?] & {arg: 'a}
//│          = [Function: evalStub2]

rec def eval e = case e of {
  | Lit -> e.val
  | Add -> eval e.lhs + eval e.rhs
  | Nega -> 0 - (eval e.arg)
  }
//│ eval: 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: 'a, rhs: 'a} | Lit | Nega[?] & {arg: 'a}
//│     = [Function: eval]

ex = add (lit 2) (lit 2)
//│ ex: Add[Lit & {val: 2}]
//│   = Add { lhs: Lit { val: 2 }, rhs: Lit { val: 2 } }

eval ex
//│ res: int
//│    = 4

def e: Add['e] as 'e
//│ e: 'e
//│   where
//│     'e :> Add['e]
//│  = <missing implementation>

def e: Lit | Add['e] as 'e
//│ e: 'e
//│   where
//│     'e :> Add['e] | Lit
//│  = <missing implementation>

def e: Lit | Add['e] | Nega['e] as 'e
//│ e: 'e
//│   where
//│     'e :> Add['e] | Lit | Nega['e]
//│  = <missing implementation>

e = ex
//│ Add[Lit & {val: 2}]
//│   <:  e:
//│ 'e
//│   where
//│     'e :> Add['e] | Lit | Nega['e]
//│  = Add { lhs: Lit { val: 2 }, rhs: Lit { val: 2 } }

eval e
//│ res: int
//│    = 4

eval (e : Lit | Add['e] | Nega['e] as 'e)
//│ res: int
//│    = 4




// === === === ERROR CASES === === === //


:ShowRelativeLineNums
:AllowTypeErrors


class Automata
class Binding
//│ Defined class Automata
//│ Defined class Binding

def exp: Array[Automata] -> Array[Binding]
eval exp
//│ exp: Array[Automata] -> Array[Binding]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+2: 	eval exp
//│ ║        	^^^^^^^^
//│ ╟── type `Array[Automata] -> Array[Binding]` does not match type `Add[?] & ?a | Lit & ?b | Nega[?] & ?c`
//│ ║  l.+1: 	def exp: Array[Automata] -> Array[Binding]
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Add[?] & ?d | Lit & ?e | Nega[?] & ?f`
//│ ║  l.+2: 	eval exp
//│ ║        	     ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.32: 	rec def eval e = case e of {
//│ ╙──      	                      ^
//│ res: error | int

:e
eval (e : Lit | Add['e] | Nega[int] as 'e)
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.+1: 	eval (e : Lit | Add['e] | Nega[int] as 'e)
//│ ║        	      ^
//│ ╟── type `Lit` is not an instance of type `int`
//│ ║  l.62: 	def e: Lit | Add['e] | Nega['e] as 'e
//│ ║        	       ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.+1: 	eval (e : Lit | Add['e] | Nega[int] as 'e)
//│ ╙──      	                               ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	eval (e : Lit | Add['e] | Nega[int] as 'e)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `Add[?] & ?a | Lit & ?b | Nega[?] & ?c`
//│ ║  l.+1: 	eval (e : Lit | Add['e] | Nega[int] as 'e)
//│ ║        	                               ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.32: 	rec def eval e = case e of {
//│ ║        	                      ^
//│ ╟── from field selection:
//│ ║  l.35: 	  | Nega -> 0 - (eval e.arg)
//│ ╙──      	                      ^^^^^
//│ res: error | int


