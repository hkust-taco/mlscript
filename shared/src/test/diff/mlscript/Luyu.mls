

// Preamble
def plus1 x = x + 1
//│ plus1: int -> int
//│      = [Function: plus1]

class JustIntBox: { value: int }
  method Get = this.value
//│ Defined class JustIntBox
//│ Defined JustIntBox.Get: JustIntBox -> int

ib0 = JustIntBox { value = 0 }
//│ ib0: JustIntBox & {value: 0}
//│    = JustIntBox { value: 0 }

ib0.Get
//│ res: int
//│    = 0

// Extend with some function.
class MappableIntBox: JustIntBox
  method Map f = MappableIntBox { value = f this.value }
//│ Defined class MappableIntBox
//│ Defined MappableIntBox.Map: MappableIntBox -> (int -> (int & 'value)) -> (MappableIntBox with {value: 'value})

mib0 = MappableIntBox { value = 0 }
//│ mib0: MappableIntBox & {value: 0}
//│     = MappableIntBox { value: 0 }

mib0.Get
//│ res: int
//│    = 0

mib0.Map
//│ res: (int -> (int & 'value)) -> (MappableIntBox with {value: 'value})
//│    = [Function: Map]

mib0.Map plus1
//│ res: MappableIntBox
//│    = MappableIntBox { value: 1 }

// Naughty map...
:e
mib0.Map (fun _ -> "str")
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.45: 	mib0.Map (fun _ -> "str")
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"str"` is not an instance of `int`
//│ ║  l.45: 	mib0.Map (fun _ -> "str")
//│ ║        	                   ^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.8: 	class JustIntBox: { value: int }
//│ ║       	                           ^^^
//│ ╟── from application:
//│ ║  l.23: 	  method Map f = MappableIntBox { value = f this.value }
//│ ╙──      	                                          ^^^^^^^^^^^^
//│ res: error | (MappableIntBox with {value: "str"})
//│    = MappableIntBox { value: 'str' }

class BetterIntBox: { value: int }
  method Get = this.value
  method Map f = BetterIntBox { value = f this.value }
//│ Defined class BetterIntBox
//│ Defined BetterIntBox.Get: BetterIntBox -> int
//│ Defined BetterIntBox.Map: BetterIntBox -> (int -> (int & 'value)) -> (BetterIntBox with {value: 'value})


