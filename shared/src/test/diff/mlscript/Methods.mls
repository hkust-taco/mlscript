class Foo[A, B]: { x: A; y: B }
    method Fun[C]: (A -> B -> C) -> (A -> B -> C)
    method Fun[C, D] (f: C -> D) = f
//│ Defined class Foo
//│ Declared Foo.Fun: Foo['A, 'B] -> ('A -> 'B -> 'C) -> 'A -> 'B -> 'C
//│ Defined Foo.Fun: Foo['A, 'B] -> ('C -> 'D) -> 'C -> 'D

class Bar: Foo[int, bool]
    method Fun f = f
//│ Defined class Bar
//│ Defined Bar.Fun: Bar -> 'a -> 'a

Foo.Fun
Bar.Fun
//│ res: Foo['A, 'B] -> ('A -> 'B -> 'C) -> 'A -> 'B -> 'C
//│ res: Bar -> 'a -> 'a

f = Foo { x = 1; y = 2 }
//│ f: Foo['A .. 1 | 'A, 'B .. 2 | 'B] with {x: 1, y: 2}

f.(Foo.Fun)
//│ res: ((1 | 'A) -> (2 | 'B) -> 'C) -> 'A -> 'B -> 'C

Foo.Fun f
//│ res: ((1 | 'A) -> (2 | 'B) -> 'C) -> 'A -> 'B -> 'C

f.Fun
//│ res: ((1 | 'A) -> (2 | 'B) -> 'C) -> 'A -> 'B -> 'C

// :d
Bar
//│ res: {x: int & 'x, y: bool & 'y} -> (Bar with {x: 'x, y: 'y})

g = Bar { x = 42; y = true }
//│ g: Bar & {x: 42, y: true}

g.(Foo.Fun)
g.(Bar.Fun)
//│ res: (int -> bool -> 'C) -> int -> bool -> 'C
//│ res: 'a -> 'a

Foo.Fun g
Bar.Fun g
//│ res: (int -> bool -> 'C) -> int -> bool -> 'C
//│ res: 'a -> 'a

g.Fun
//│ res: (int -> bool -> 'C) -> int -> bool -> 'C

h = Bar { x = 43; y = true }
h.Fun
//│ h: Bar & {x: 43, y: true}
//│ res: (int -> bool -> 'C) -> int -> bool -> 'C




class Wrapper[A]: { x: A }
    method Apply f = Wrapper { x = f this.x }
    method Apply[B]: (A -> B) -> Wrapper[B]
    // method Apply f = Wrapper { x = f this.x }
//│ Defined class Wrapper
//│ Declared Wrapper.Apply: Wrapper['A] -> ('A -> 'B) -> Wrapper['B]
//│ Defined Wrapper.Apply: Wrapper['A] -> ('A -> ('a & 'A0)) -> (Wrapper['A0] with {x: 'a})

class IntWrapper: Wrapper[int]
    method Apply f = Wrapper { x = f this.x }
//│ Defined class IntWrapper
//│ Defined IntWrapper.Apply: IntWrapper -> (int -> ('a & 'A)) -> (Wrapper['A] with {x: 'a})

class Psyduck[B]: Wrapper[B]
    method Apply[A]: (B -> A) -> Psyduck[A]
    method Apply f = Psyduck { x = f this.x }
//│ Defined class Psyduck
//│ Declared Psyduck.Apply: Psyduck['B] -> ('B -> 'A) -> Psyduck['A]
//│ Defined Psyduck.Apply: Psyduck['B] -> ('B -> ('a & 'B0)) -> (Psyduck['B0] with {x: 'a})

class WrapperWrapper[A]: Wrapper[Wrapper[A]]
    method Apply2[B]: (A -> B) -> WrapperWrapper[B]
    method Apply2 f = WrapperWrapper { x = this.x.Apply f }
//│ Defined class WrapperWrapper
//│ Declared WrapperWrapper.Apply2: (WrapperWrapper['A] with {x: Wrapper['A]}) -> ('A -> 'B) -> (WrapperWrapper['B] with {x: Wrapper['B]})
//│ Defined WrapperWrapper.Apply2: (WrapperWrapper['A] with {x: Wrapper['A]}) -> ('A -> 'a) -> (WrapperWrapper['a] with {x: Wrapper['a]})

WrapperWrapper { x = Psyduck { x = 0 } }
//│ res: WrapperWrapper['A .. 0 | 'A] with {x: Psyduck['A .. 0 | 'A] with {x: 0}}

res.Apply2 (fun x -> mul x 2)
//│ res: WrapperWrapper['B .. 'B | int] with {x: Wrapper['B .. 'B | int]}

Wrapper
//│ res: {x: 'x & 'A} -> (Wrapper['A] with {x: 'x})




class Asc[A, B]: { x: A; y: B }
    method Left = { x = this.x; y = this.y } : { x: A }
    method Right2 = this : { y: B }
//│ Defined class Asc
//│ Defined Asc.Left: Asc['A, 'B] -> {x: 'A}
//│ Defined Asc.Right2: Asc['A, 'B] -> {y: 'B}




class Simple[A]
    method Get: A
//│ Defined class Simple
//│ Declared Simple.Get: Simple['A] -> 'A

class Simple2[A]: { a: A }
    method Get: A
//│ Defined class Simple2
//│ Declared Simple2.Get: Simple2['A] -> 'A




class AbstractPair[A, B]: { x: A; y: B }
    method Test: (A -> B -> bool) -> bool
    method Map[C, D]: (A -> C) -> (B -> D) -> AbstractPair[C, D]
//│ Defined class AbstractPair
//│ Declared AbstractPair.Test: AbstractPair['A, 'B] -> ('A -> 'B -> bool) -> bool
//│ Declared AbstractPair.Map: AbstractPair['A, 'B] -> ('A -> 'C) -> ('B -> 'D) -> AbstractPair['C, 'D]

class Pair[A, B]: AbstractPair[A, B]
    method Test(f: A -> B -> bool) = f this.x this.y
    method Map fx fy = Pair { x = fx this.x; y = fy this.y }
//│ Defined class Pair
//│ Defined Pair.Test: Pair['A, 'B] -> ('A -> 'B -> bool) -> bool
//│ Defined Pair.Map: Pair['A, 'B] -> ('A -> ('a & 'A0)) -> ('B -> ('b & 'B0)) -> (Pair['A0, 'B0] with {x: 'a, y: 'b})

class True[A, B]: Pair[A, B]
    method Test f = true
    method True = this.Test (fun x -> error)
//│ Defined class True
//│ Defined True.Test: (true & {x: 'A, y: 'B}) -> anything -> true
//│ Defined True.True: (true & {x: 'A, y: 'B}) -> true

class True2[A, B]: Pair[A, B]
    method Test: anything -> bool
    method True = this.Test (fun x -> error)
    method Test f = true
//│ Defined class True2
//│ Declared True2.Test: True2['A, 'B] -> anything -> bool
//│ Defined True2.True: True2['A, 'B] -> bool
//│ Defined True2.Test: True2['A, 'B] -> anything -> true

p = Pair { x = 42; y = true }
fx = fun x -> mul x 2
fy = fun x -> not x
ft = fun x -> fun y -> if (y) then gt x 0 else y
//│ p: Pair['A .. 42 | 'A, 'B .. 'B | true] with {x: 42, y: true}
//│ fx: int -> int
//│ fy: bool -> bool
//│ ft: int -> bool -> bool

p.Map fx fy
p.Test ft
(p.Map fx fy).Test ft
//│ res: AbstractPair['C .. 'C | int, 'D .. 'D | bool]
//│ res: bool
//│ res: bool

t = True { x = "foo"; y = false }
t.(True.True)
//│ t: true & {x: "foo", y: false}
//│ res: true

t = True2 { x = "bar"; y = false }
t.(True2.True)
//│ t: True2['A .. "bar" | 'A, 'B .. 'B | false] with {x: "bar", y: false}
//│ res: bool


class Class1A[A]
    method MtdA: A
trait Trait1A[B]
    method MtdA: B
class Class1B: Class1A["a" | "b"] & Trait1A["b" | "c"]
    method MtdA = "b"
//│ Defined class Class1A
//│ Declared Class1A.MtdA: Class1A['A] -> 'A
//│ Defined trait Trait1A
//│ Declared Trait1A.MtdA: trait1A -> 'B
//│ Defined class Class1B
//│ Defined Class1B.MtdA: (Class1B & trait1A) -> "b"


trait Trait2A[A]
    method MtdB: A
class Class2B[A, B]: Class1A[A] & Trait2A[B]
    method MtdA: A
    method MtdB: B
class Class2C: Class2B[int, bool]
    method MtdA = 42
    method MtdB = true
//│ Defined trait Trait2A
//│ Declared Trait2A.MtdB: trait2A -> 'A
//│ Defined class Class2B
//│ Declared Class2B.MtdA: (Class2B['A, 'B] & trait2A) -> 'A
//│ Declared Class2B.MtdB: (Class2B['A, 'B] & trait2A) -> 'B
//│ Defined class Class2C
//│ Defined Class2C.MtdA: (Class2C & trait2A) -> 42
//│ Defined Class2C.MtdB: (Class2C & trait2A) -> true


:e
class Class3C: Class2C
    method MtdA = 42
    method MtdB = 42
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.212: 	    method MtdB = 42
//│ ║         	           ^^^^^^^^^
//│ ╟── expression of type `42` does not match type `bool`
//│ ║  l.212: 	    method MtdB = 42
//│ ║         	                  ^^
//│ ╟── but it flows into method definition with expected type `bool`
//│ ║  l.212: 	    method MtdB = 42
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.196: 	class Class2C: Class2B[int, bool]
//│ ║         	                            ^^^^
//│ ╟── from method declaration:
//│ ║  l.195: 	    method MtdB: B
//│ ╙──       	           ^^^^^^^
//│ Defined class Class3C
//│ Defined Class3C.MtdA: (Class3C & trait2A) -> 42
//│ Defined Class3C.MtdB: (Class3C & trait2A) -> 42

type Id[T] = T
class Test1[A]: { x: A }
    method F: A
class Test2[B]: Test1[Id[B]] & { x: B }
    method F = this.x
//│ Defined type alias Id
//│ Defined class Test1
//│ Declared Test1.F: Test1['A] -> 'A
//│ Defined class Test2
//│ Defined Test2.F: Test2['B] -> 'B


class Test3A: Test1['a -> 'a]
Test3A.F
//│ Defined class Test3A
//│ res: (Test3A with {x: 'a -> 'a}) -> 'a0 -> 'a0

class Test3B: Test1['a -> 'a] & { x: 'a }
Test3B.F
//│ Defined class Test3B
//│ res: (Test3B with {x: 'a -> 'a & 'a}) -> 'a0 -> 'a0



:w
class Test4A[A]: { x: A }
    method Mth4A[A]: A
//│ ╔══[WARNING] Method type parameter A
//│ ║  l.257: 	class Test4A[A]: { x: A }
//│ ║         	             ^
//│ ╟── shadows class type parameter A
//│ ║  l.258: 	    method Mth4A[A]: A
//│ ╙──       	                 ^
//│ Defined class Test4A
//│ Declared Test4A.Mth4A: Test4A['A] -> nothing


class Test[A]: { x: A }
    method Mth[B]: (A -> B) -> B
    method Mth[B] (f: A -> B) = f this.x
//│ Defined class Test
//│ Declared Test.Mth: Test['A] -> ('A -> 'B) -> 'B
//│ Defined Test.Mth: Test['A] -> ('A -> 'B) -> 'B


