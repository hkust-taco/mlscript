//TODO: - ConstraintSolver.extrude TypeRef polarity
//      - ConstraintSolver.freshenAbove.freshen bounds on rigidified variables?
//          Currently it has a half-assed implementation taking care of bounds on one side only.
//          Bounds are only added to variables to be potentially regidified when constraining the `this` argument of methods.
//          By inspecting the bounds in every execution of the branch, it seems that the bounds are all variables with
//              no bounds themselves, which is equivalent to having no bounds. So this may not be necessary at all.
//      - ConstraintSolver.constrain.annoyingImpl missing cases?


class Foo[A, B]: { x: A; y: B }
    method Fun[C]: (A -> B -> C) -> (A -> B -> C)
//│ Defined class Foo
//│ Declared Foo.Fun: foo & {y: 'a, x: 'b} -> ('b -> 'a -> 'c) -> 'b -> 'a -> 'c

class Bar: Foo[int, bool]
    method Fun f = f
//│ Defined class Bar
//│ Defined Bar.Fun: bar & {y: bool, x: int} -> 'a -> 'a

Foo.Fun
Bar.Fun
//│ res: foo & {y: 'a, x: 'b} -> ('b -> 'a -> 'c) -> 'b -> 'a -> 'c
//│ res: bar & {y: bool, x: int} -> 'a -> 'a

f = Foo { x = 1; y = 2 }
//│ f: foo & {y: 2, x: 1}

f.(Foo.Fun)
//│ res: ('a | 1 -> 'b | 2 -> 'c) -> 'a -> 'b -> 'c

Foo.Fun f
//│ res: ('a | 1 -> 'b | 2 -> 'c) -> 'a -> 'b -> 'c

f.Fun
//│ res: ('a | 1 -> 'b | 2 -> 'c) -> 'a -> 'b -> 'c

g = Bar { x = 42; y = true }
//│ g: bar & {y: true, x: 42}

g.(Foo.Fun)
g.(Bar.Fun)
//│ res: ('a | 42 -> 'b | true -> 'c) -> 'a -> 'b -> 'c
//│ res: 'a -> 'a

Foo.Fun g
Bar.Fun g
//│ res: ('a | 42 -> 'b | true -> 'c) -> 'a -> 'b -> 'c
//│ res: 'a -> 'a

g.Fun
//│ res: ('a | 42 -> 'b | true -> 'c) -> 'a -> 'b -> 'c




class Asc[A, B]: { x: A; y: B }
    method Left = { x = this.x; y = this.y } : { x: A }
    method Right2 = this : { y: B }
//│ Defined class Asc
//│ Defined Asc.Left: asc & {y: anything, x: 'a} -> {x: 'a}
//│ Defined Asc.Right2: asc & {y: 'a, x: anything} -> {y: 'a}




class Simple[A]
    method Get: A
//│ Defined class Simple
//│ Declared Simple.Get: simple -> nothing

class Simple2[A]: { a: A }
    method Get: A
//│ Defined class Simple2
//│ Declared Simple2.Get: simple2 & {a: 'a} -> 'a




class AbstractPair[A, B]: { x: A; y: B }
    method Test: (A -> B -> bool) -> bool
    method Map[C, D]: (A -> C) -> (B -> D) -> AbstractPair[C, D]
//│ Defined class AbstractPair
//│ Declared AbstractPair.Test: abstractPair & {y: 'a, x: 'b} -> ('b -> 'a -> bool) -> bool
//│ Declared AbstractPair.Map: abstractPair & {y: 'a, x: 'b} -> ('b -> 'c) -> ('a -> 'd) -> abstractPair & {y: 'd, x: 'c}

class Pair[A, B]: AbstractPair[A, B]
    method Test(f: A -> B -> bool) = f this.x this.y
    method Map fx fy = Pair { x = fx this.x; y = fy this.y }
//│ Defined class Pair
//│ Defined Pair.Test: pair & {y: 'a, x: 'b} -> ('b -> 'a -> bool & 'c) -> 'c
//│ Defined Pair.Map: pair & {y: 'a, x: 'b} -> ('b -> 'c) -> ('a -> 'd) -> pair & {y: 'd, x: 'c}

class True[A, B]: Pair[A, B]
    method Test f = true
    method True = this.Test (fun x -> error)
//│ Defined class True
//│ Defined True.Test: true & {y: anything, x: anything} -> anything -> true
//│ Defined True.True: true & {y: anything, x: anything} -> true

class True2[A, B]: Pair[A, B]
    method Test: anything -> bool
    method True = this.Test (fun x -> error)
    method Test f = true
//│ Defined class True2
//│ Declared True2.Test: true2 & {y: anything, x: anything} -> anything -> true
//│ Defined True2.True: true2 & {y: anything, x: anything} -> bool
//│ Defined True2.Test: true2 & {y: anything, x: anything} -> anything -> true

p = Pair { x = 42; y = true }
p.(Pair.Map) (fun x -> mul x 2) (fun x -> not x)
p.(Pair.Test) (fun x -> fun y -> if (y) then gt x 0 else y)
(p.(Pair.Map) (fun x -> mul x 2) (fun x -> not x)).(Pair.Test) (fun x -> fun y -> if (y) then gt x 0 else y)
//│ p: pair & {y: true, x: 42}
//│ res: pair & {y: bool, x: int}
//│ res: bool
//│ res: bool

t = True { x = "foo"; y = false }
t.(True.True)
//│ t: true & {y: false, x: "foo"}
//│ res: true

t = True2 { x = "bar"; y = false }
t.(True2.True)
//│ t: true2 & {y: false, x: "bar"}
//│ res: bool
