class Undefined2: { x: undefined }
//│ Defined class Undefined2

Undefined2
//│ res: {x: undefined & 'x} -> (Undefined2 with {x: 'x})
//│    = [Function: res]

Undefined2 { x = undefined }
//│ res: Undefined2
//│    = Undefined2 { x: undefined }

:e
Undefined2 { x = "I am here to make a type mismatch." }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.13: 	Undefined2 { x = "I am here to make a type mismatch." }
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"I am here to make a type mismatch."` does not match type `undefined`
//│ ║  l.13: 	Undefined2 { x = "I am here to make a type mismatch." }
//│ ║        	                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.1: 	class Undefined2: { x: undefined }
//│ ╙──     	                       ^^^^^^^^^
//│ res: (Undefined2 with {x: "I am here to make a type mismatch."}) | error
//│    = Undefined2 { x: 'I am here to make a type mismatch.' }

:e
type Undefined2 = { x: string }
//│ ╔══[ERROR] Type 'Undefined2' is already defined.
//│ ║  l.27: 	type Undefined2 = { x: string }
//│ ╙──      	     ^^^^^^^^^^

type AnotherUndefined = { x: undefined }
//│ Defined type alias AnotherUndefined

type MoreOnTypes0 = undefined
//│ Defined type alias MoreOnTypes0

type MoreOnTypes1 = undefined -> undefined
//│ Defined type alias MoreOnTypes1

type MoreOnTypes2 = undefined -> undefined -> undefined
//│ Defined type alias MoreOnTypes2

type MoreOnTypes3 = (undefined -> undefined) -> null
//│ Defined type alias MoreOnTypes3

sample = undefined
sample: undefined
//│ sample: undefined
//│       = undefined
//│ res: undefined
//│    = undefined

sample2 = null
sample2: null
//│ sample2: null
//│        = null
//│ res: null
//│    = null

:e
sample: bool
sample2: bool
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.62: 	sample: bool
//│ ║        	^^^^^^
//│ ╟── undefined literal of type `undefined` is not an instance of type `bool`
//│ ║  l.47: 	sample = undefined
//│ ║        	         ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `bool`
//│ ║  l.62: 	sample: bool
//│ ║        	^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.62: 	sample: bool
//│ ╙──      	        ^^^^
//│ res: bool
//│    = undefined
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.63: 	sample2: bool
//│ ║        	^^^^^^^
//│ ╟── null literal of type `null` is not an instance of type `bool`
//│ ║  l.54: 	sample2 = null
//│ ║        	          ^^^^
//│ ╟── but it flows into reference with expected type `bool`
//│ ║  l.63: 	sample2: bool
//│ ║        	^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.63: 	sample2: bool
//│ ╙──      	         ^^^^
//│ res: bool
//│    = null

if false then sample else 0
if true then sample2 else 0
//│ res: 0 | undefined
//│    = 0
//│ res: 0 | null
//│    = null


def bar = fun sample -> (sample: MoreOnTypes0)
bar undefined
//│ bar: MoreOnTypes0 -> MoreOnTypes0
//│    = [Function: bar]
//│ res: MoreOnTypes0
//│    = undefined

:e
bar "undefined"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.109: 	bar "undefined"
//│ ║         	^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"undefined"` does not match type `undefined`
//│ ║  l.109: 	bar "undefined"
//│ ║         	    ^^^^^^^^^^^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.35: 	type MoreOnTypes0 = undefined
//│ ║        	                    ^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.101: 	def bar = fun sample -> (sample: MoreOnTypes0)
//│ ╙──       	                         ^^^^^^
//│ res: error | MoreOnTypes0
//│    = 'undefined'

case (undefined) of { undefined -> "undefined it is" | null -> "null it is"}
//│ res: "null it is" | "undefined it is"
//│    = 'undefined it is'

case (null) of { undefined -> "undefined it is" | null -> "null it is" }
//│ res: "null it is" | "undefined it is"
//│    = 'null it is'


absent = ()[0]
//│ absent: undefined
//│       = undefined

case absent of { undefined -> 1 }
//│ res: 1
//│    = 1

case absent of { null -> 0 | undefined -> 1 }
//│ res: 0 | 1
//│    = 1

case absent of { "" -> 0 | undefined -> 1 }
//│ res: 0 | 1
//│    = 1


uw = undefined with { x = 1 }
nw = null with { x = 1 }
uw.x
nw.x
//│ uw: undefined & {x: 1}
//│   = { x: 1 }
//│ nw: null & {x: 1}
//│   = { x: 1 }
//│ res: 1
//│    = 1
//│ res: 1
//│    = 1

:e
undefined.x
null.x
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.165: 	undefined.x
//│ ║         	^^^^^^^^^^^
//│ ╟── undefined literal of type `undefined` does not have field 'x'
//│ ║  l.165: 	undefined.x
//│ ╙──       	^^^^^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: Cannot read properties of undefined (reading 'x')
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.166: 	null.x
//│ ║         	^^^^^^
//│ ╟── null literal of type `null` does not have field 'x'
//│ ║  l.166: 	null.x
//│ ╙──       	^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: Cannot read properties of null (reading 'x')

def bypass: nothing
//│ bypass: nothing
//│       = <missing implementation>


:e
bypass = undefined
//│ undefined
//│   <:  bypass:
//│ nothing
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.192: 	bypass = undefined
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── undefined literal of type `undefined` does not match type `nothing`
//│ ║  l.192: 	bypass = undefined
//│ ║         	         ^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.186: 	def bypass: nothing
//│ ╙──       	            ^^^^^^^
//│       = undefined

:re
bypass.x
bypass + 1
//│ res: nothing
//│ Runtime error:
//│   TypeError: Cannot read properties of undefined (reading 'x')
//│ res: int
//│    = NaN

