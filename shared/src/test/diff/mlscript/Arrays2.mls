:ShowRelativeLineNums

class MyArray[A]: { size: int }
  method Set: (int, A) -> ()
  method Get: int -> A 
//│ Defined class MyArray
//│ Declared MyArray.Set: MyArray['A] -> (int, 'A,) -> ()
//│ Declared MyArray.Get: MyArray['A] -> int -> 'A



class Dummy[A]: MyArray[A] & { size: 0 }
  method Set (i, a) = ()
  method Get i = error
//│ Defined class Dummy
//│ Defined Dummy.Set: Dummy['A] -> (anything, anything,) -> ()
//│ Defined Dummy.Get: Dummy['A] -> anything -> nothing


dummy = Dummy { size = 0 }
//│ dummy: Dummy['A]
//│      = Dummy { size: 0 }

dummy: MyArray[int]
//│ res: MyArray[int]
//│    = Dummy { size: 0 }


def ty4B: MyArray[MyArray[MyArray['a]]] as 'a
//│ ty4B: 'a | MyArray['c & MyArray['d .. 'e] .. 'f | MyArray['e & MyArray['g .. 'h] .. MyArray['h & MyArray[MyArray[MyArray['g .. 'h] .. 'i] .. 'c] & 'a .. 'b] as 'i]] as 'b
//│     = <missing implementation>




:e
MyArray{ size = 0 }
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.+1: 	MyArray{ size = 0 }
//│ ║        	^^^^^^^
//│ ╟── Note that class MyArray is abstract:
//│ ║  l.3: 	class MyArray[A]: { size: int }
//│ ║       	      ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Hint: method Set is abstract
//│ ║  l.4: 	  method Set: (int, A) -> ()
//│ ║       	         ^^^^^^^^^^^^^^^^^^^
//│ ╟── Hint: method Get is abstract
//│ ║  l.5: 	  method Get: int -> A 
//│ ╙──     	         ^^^^^^^^^^^^^
//│ res: error
//│    = MyArray { size: 0 }


