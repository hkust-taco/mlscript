
def absImpl lt x =
  case lt of
    { true -> x
    | false -> 0 - x }
//│ absImpl: Bool -> int -> int
//│        = [Function: absImpl]

// * TODO support this
:e
def abs x =
  let r = x < 0 in absImpl r x
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.12: 	  let r = x < 0 in absImpl r x
//│ ║        	                   ^^^^^^^^^
//│ ╟── operator application of type `bool` does not match type `true & ?a | false & ?b`
//│ ║  l.12: 	  let r = x < 0 in absImpl r x
//│ ║        	          ^^^^^
//│ ╟── but it flows into reference with expected type `true & ?a | false & ?b`
//│ ║  l.12: 	  let r = x < 0 in absImpl r x
//│ ║        	                           ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.3: 	  case lt of
//│ ╙──     	       ^^
//│ abs: int -> (int | error)
//│    = [Function: abs]


def neg b = case b of
  { true -> false
  | false -> true }
//│ neg: Bool -> Bool
//│    = [Function: neg]

