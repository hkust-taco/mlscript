// TODO: remove after recursive function is fixed
:AllowRuntimeErrors

// From Simple-sub tests:
let rec l = fun a -> fun a -> fun a -> l in let rec r = fun a -> fun a -> r in if true then l else r
//│ res: ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> 'a as 'a
//│    = [Function (anonymous)]



rec def l a = l
//│ l: ((anything,) & {_1: anything}) -> 'a as 'a
//│  = [Function: l]

if true then l else l
//│ res: ((anything,) & {_1: anything}) -> 'a as 'a
//│    = [Function: l]



rec def l a a a = l
//│ l: ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> 'a as 'a
//│  = [Function: l1]


rec def r a a = l
//│ r: ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> 'a as 'a
//│  = [Function: r]

rec def r a a = l
//│ r: ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> 'a as 'a
//│  = [Function: r1]


rec def r a a = r
//│ r: ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> 'a as 'a
//│  = [Function: r2]


if true then l else r
//│ res: ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> 'a as 'a
//│    = [Function: l1]

if true then l else r
//│ res: ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> ((anything,) & {_1: anything}) -> 'a as 'a
//│    = [Function: l1]



rec def l (a: int) (a: int) = l
rec def r (a: bool) (a: bool) (a: bool) = r
//│ l: ((int,) & {_1: int}) -> ((int,) & {_1: int}) -> 'a as 'a
//│  = [Function: l2]
//│ r: ((bool,) & {_1: bool}) -> ((bool,) & {_1: bool}) -> ((bool,) & {_1: bool}) -> 'a as 'a
//│  = [Function: r3]

if true then l else r
//│ res: ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> 'a as 'a
//│    = [Function: l2]

if true then l else r
//│ res: ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> 'a as 'a
//│    = [Function: l2]

if true then (fun x -> add x 1) else (fun y -> not y)
//│ res: ((nothing,) & {_1: nothing}) -> (bool | int)
//│    = [Function (anonymous)]

if true then (fun x -> add x 1) else (fun y -> not y)
//│ res: ((nothing,) & {_1: nothing}) -> (bool | int)
//│    = [Function (anonymous)]



rec def l (a: int) (a: bool) = l
rec def r (a: int) (a: bool) (a: bool) = r
//│ l: ((int,) & {_1: int}) -> ((bool,) & {_1: bool}) -> 'a as 'a
//│  = [Function: l3]
//│ r: ((int,) & {_1: int}) -> ((bool,) & {_1: bool}) -> ((bool,) & {_1: bool}) -> 'a as 'a
//│  = [Function: r4]

if true then l else r
//│ res: ((int,) & {_1: int}) -> ((bool,) & {_1: bool}) -> ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> ((bool,) & {_1: bool}) -> 'a as 'a
//│    = [Function: l3]

if true then l else r
//│ res: ((int,) & {_1: int}) -> ((bool,) & {_1: bool}) -> ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> ((nothing,) & {_1: nothing}) -> ((bool,) & {_1: bool}) -> 'a as 'a
//│    = [Function: l3]



rec def l (a: int) b = if true then l else b
rec def r (a: int) b c = if true then r else if true then b else c
//│ l: ((int,) & {_1: int}) -> ('b | (('c,) & {_1: 'c}) -> ('a | 'c)) as 'a
//│  = [Function: l4]
//│ r: ((int,) & {_1: int}) -> ('b | (('c,) & {_1: 'c}) -> (('c,) & {_1: 'c}) -> ('a | 'c)) as 'a
//│  = [Function: r5]

if true then l else r
//│ res: ((int,) & {_1: int}) -> ('b | (('c & 'd,) & {_1: 'c & 'd}) -> (((int & 'd,) & {_1: int & 'd}) -> (((int & 'c,) & {_1: int & 'c}) -> (((int & 'd,) & {_1: int & 'd}) -> (('c & 'd,) & {_1: 'c & 'd}) -> ('a | 'c | 'd) | 'c) | 'd) | 'c)) as 'a
//│    = [Function: l4]

if true then l else r
//│ res: ((int,) & {_1: int}) -> ('b | (('c & 'd,) & {_1: 'c & 'd}) -> (((int & 'd,) & {_1: int & 'd}) -> (((int & 'c,) & {_1: int & 'c}) -> (((int & 'd,) & {_1: int & 'd}) -> (('c & 'd,) & {_1: 'c & 'd}) -> ('a | 'c | 'd) | 'c) | 'd) | 'c)) as 'a
//│    = [Function: l4]



rec def l (a: int) (b: int) = l
//│ l: ((int,) & {_1: int}) -> ((int,) & {_1: int}) -> 'a as 'a
//│  = [Function: l5]

rec def r (a: int) (b: int) (c: int) = r
//│ r: ((int,) & {_1: int}) -> ((int,) & {_1: int}) -> ((int,) & {_1: int}) -> 'a as 'a
//│  = [Function: r6]

if true then l else r
//│ res: ((int,) & {_1: int}) -> ((int,) & {_1: int}) -> ((int,) & {_1: int}) -> ((int,) & {_1: int}) -> ((int,) & {_1: int}) -> ((int,) & {_1: int}) -> 'a as 'a
//│    = [Function: l5]



// ------ // ------ // ------ // ------ // ------ // ------ //



class C[A]: { a: A }
//│ Defined class C



:ns
rec def foo (c: C['a]) = foo (c.a)
//│ foo: 'b | C['c & C['a .. 'a0] as 'a .. 'a0] -> 'd
//│    = [Function: foo]

// TODO figure ou why some type variables are not simplified here
foo
//│ res: (((C[?] with {a: 'c & 'b & 'a}) as 'b,) & {_1: (C[?] with {a: 'c & 'b & 'a}) as 'b}) -> nothing
//│    = [Function: foo]

type Rec = C[Rec]
def foo_ty: Rec -> nothing
//│ Defined type alias Rec
//│ foo_ty: (((C['b .. 'c] with {a: 'a}) as 'a,) & {_1: (C['b .. 'c] with {a: 'a}) as 'a}) -> nothing

foo_ty = foo
//│ (((C[?] with {a: 'c & 'b & 'a}) as 'b,) & {_1: (C[?] with {a: 'c & 'b & 'a}) as 'b}) -> nothing
//│   <:  foo_ty:
//│ (((C['b .. 'c] with {a: 'a}) as 'a,) & {_1: (C['b .. 'c] with {a: 'a}) as 'a}) -> nothing
//│       = [Function: foo]

def foo_ty2: (C['r] as 'r) -> nothing
//│ foo_ty2: (((C['b .. 'c] with {a: 'a}) & 'r as 'a,) & {_1: (C['b .. 'c] with {a: 'a}) & 'r as 'a}) -> nothing

:ns
foo_ty2
//│ res: (C['r .. C['r .. 'r0] as 'r0] as 'r) -> nothing
//│ Runtime error:
//│   ReferenceError: foo_ty2 is not defined

foo_ty = foo_ty2
//│ (((C['b .. 'c] with {a: 'a}) & 'r as 'a,) & {_1: (C['b .. 'c] with {a: 'a}) & 'r as 'a}) -> nothing
//│   <:  foo_ty:
//│ (((C['b .. 'c] with {a: 'a}) as 'a,) & {_1: (C['b .. 'c] with {a: 'a}) as 'a}) -> nothing
//│ Runtime error:
//│   ReferenceError: foo_ty2 is not defined

foo_ty2 = foo_ty
//│ (((C['b .. 'c] with {a: 'a}) as 'a,) & {_1: (C['b .. 'c] with {a: 'a}) as 'a}) -> nothing
//│   <:  foo_ty2:
//│ (((C['b .. 'c] with {a: 'a}) & 'r as 'a,) & {_1: (C['b .. 'c] with {a: 'a}) & 'r as 'a}) -> nothing
//│ Runtime error:
//│   ReferenceError: foo_ty1 is not defined

foo_ty2 = foo
//│ (((C[?] with {a: 'c & 'b & 'a}) as 'b,) & {_1: (C[?] with {a: 'c & 'b & 'a}) as 'b}) -> nothing
//│   <:  foo_ty2:
//│ (((C['b .. 'c] with {a: 'a}) & 'r as 'a,) & {_1: (C['b .. 'c] with {a: 'a}) & 'r as 'a}) -> nothing
//│        = [Function: foo]



rec def bar = C { a = bar }
//│ bar: (C[?] with {a: 'a}) as 'a
//│ Runtime error:
//│   ReferenceError: bar is not defined

type Rec2 = C[Rec2]
def bar_ty: Rec2
//│ Defined type alias Rec2
//│ bar_ty: (C[(C['c .. 'd] with {a: 'b}) as 'b .. 'a] with {a: 'a}) as 'a

bar_ty = bar
//│ (C[?] with {a: 'a}) as 'a
//│   <:  bar_ty:
//│ (C[(C['c .. 'd] with {a: 'b}) as 'b .. 'a] with {a: 'a}) as 'a
//│ Runtime error:
//│   ReferenceError: bar is not defined

def bar_ty2: C['r] as 'r
//│ bar_ty2: 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a

:ns
bar_ty2
//│ res: C[C['r0 .. 'r] as 'r0 .. 'r] as 'r
//│ Runtime error:
//│   ReferenceError: bar_ty2 is not defined

bar_ty2
//│ res: 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a
//│ Runtime error:
//│   ReferenceError: bar_ty2 is not defined

bar_ty = bar_ty2
//│ 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a
//│   <:  bar_ty:
//│ (C[(C['c .. 'd] with {a: 'b}) as 'b .. 'a] with {a: 'a}) as 'a
//│ Runtime error:
//│   ReferenceError: bar_ty2 is not defined

bar_ty2 = bar_ty
//│ (C[(C['c .. 'd] with {a: 'b}) as 'b .. 'a] with {a: 'a}) as 'a
//│   <:  bar_ty2:
//│ 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a
//│ Runtime error:
//│   ReferenceError: bar_ty1 is not defined

bar_ty2 = bar
//│ (C[?] with {a: 'a}) as 'a
//│   <:  bar_ty2:
//│ 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a
//│ Runtime error:
//│   ReferenceError: bar is not defined



type Rec3 = { x: Rec3 }
//│ Defined type alias Rec3

def bar2_ty: Rec3
//│ bar2_ty: {x: 'a} as 'a

def bar2_ty2: { x: 'r } as 'r
//│ bar2_ty2: {x: 'a} as 'a

bar2_ty = bar2_ty2
//│ {x: 'a} as 'a
//│   <:  bar2_ty:
//│ {x: 'a} as 'a
//│ Runtime error:
//│   ReferenceError: bar2_ty2 is not defined

bar2_ty2 = bar2_ty
//│ {x: 'a} as 'a
//│   <:  bar2_ty2:
//│ {x: 'a} as 'a
//│ Runtime error:
//│   ReferenceError: bar2_ty is not defined

:e
bar2_ty2 = bar_ty2
//│ 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a
//│   <:  bar2_ty2:
//│ {x: 'a} as 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.262: 	bar2_ty2 = bar_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `C[?r]` does not match type `'r | {x: ?r0}`
//│ ║  l.201: 	def bar_ty2: C['r] as 'r
//│ ║         	             ^^^^^
//│ ╟── but it flows into reference with expected type `'r | {x: ?r1}`
//│ ║  l.262: 	bar2_ty2 = bar_ty2
//│ ║         	           ^^^^^^^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.244: 	def bar2_ty2: { x: 'r } as 'r
//│ ╙──       	              ^^^^^^^^^
//│ Runtime error:
//│   ReferenceError: bar_ty21 is not defined

:e
bar_ty2 = bar2_ty2
//│ {x: 'a} as 'a
//│   <:  bar_ty2:
//│ 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.282: 	bar_ty2 = bar2_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `{x: ?r}` does not match type `'r | C[?r0]`
//│ ║  l.244: 	def bar2_ty2: { x: 'r } as 'r
//│ ║         	              ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `'r | C[?r1]`
//│ ║  l.282: 	bar_ty2 = bar2_ty2
//│ ║         	          ^^^^^^^^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.201: 	def bar_ty2: C['r] as 'r
//│ ╙──       	             ^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.282: 	bar_ty2 = bar2_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `{x: ?r}` does not match type `'r | C[?r0]`
//│ ║  l.244: 	def bar2_ty2: { x: 'r } as 'r
//│ ║         	              ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `'r | C[?r1]`
//│ ║  l.282: 	bar_ty2 = bar2_ty2
//│ ║         	          ^^^^^^^^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.201: 	def bar_ty2: C['r] as 'r
//│ ╙──       	             ^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.282: 	bar_ty2 = bar2_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `{x: ?r}` does not match type `'r | C[?r0]`
//│ ║  l.244: 	def bar2_ty2: { x: 'r } as 'r
//│ ║         	              ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `'r | C[?r1]`
//│ ║  l.282: 	bar_ty2 = bar2_ty2
//│ ║         	          ^^^^^^^^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.201: 	def bar_ty2: C['r] as 'r
//│ ╙──       	             ^^^^^
//│ Runtime error:
//│   ReferenceError: bar2_ty21 is not defined



// ------ // ------ // ------ // ------ // ------ // ------ //



rec def f x = if x > 0 then f (x with { a = x - 1 }) else x
//│ f: (('a,) & {_1: 'a}) -> ('a | 'b\a & {a: int} as 'b)
//│  = [Function: f]

f 1
//│ res: 1 | 'a\a & {a: int} as 'a
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:ns
rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ f: 'a | ('b & (({a: 'd & 'e & 'f & 'c} as 'c) | ~{a: 'g | int} | ~{})\a & (({a: 'd & 'e & 'f & 'c} as 'c) | ~{a: 'g | int})\a & (int | ~{a: 'g | int} | ~{})\a & (int | ~{a: 'g | int})\a & 'e & 'f & 'h & ({a: 'i} as 'c) & int & int) -> ('f | ('j\a & {a: 'g | int} as 'j)\a & {a: 'g | int})
//│  = [Function: f1]

f
//│ res: ((({a: 'a} & 'b as 'a) & 'c,) & {_1: ({a: 'a} & 'b as 'a) & 'c}) -> ('b | (('e | 'c | 'd)\a & {a: int} as 'd))
//│    = [Function: f1]

// Notice how what is most likely an the error is reported in call sites,
//    due to the delaying effect of the field removal type...
//    though it *is* still possible to call this function wtihout errors,
//    using a bottom-typed argument.

// TODO: This causes `Maximum call stack size exceeded`.
:e
f 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.356: 	f 1
//│ ║         	^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.341: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.341: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int | (('b | 1 | 'a)\a & {a: int} as 'a)
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:e
f { a = 1 }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.371: 	f { a = 1 }
//│ ║         	^^^^^^^^^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.341: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.341: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error
//│    = { a: 1 }

f error
//│ res: 'a\a & {a: int} as 'a
//│ Runtime error:
//│   Error: unexpected runtime error


:e
rec def ainf = { a = ainf }
f ainf
//│ ainf: {a: 'a} as 'a
//│ Runtime error:
//│   ReferenceError: ainf is not defined
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.392: 	f ainf
//│ ║         	^^^^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.341: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.341: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error
//│ Runtime error:
//│   ReferenceError: ainf is not defined

:e
rec def infina = 0 with { a = infina }
f infina
//│ infina: 0 & {a: 'a} as 'a
//│ Runtime error:
//│   ReferenceError: infina is not defined
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.411: 	f infina
//│ ║         	^^^^^^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.341: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.341: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int | (('b | (0 & {a: 'c} as 'c) | 'a)\a & {a: int} as 'a)
//│ Runtime error:
//│   ReferenceError: infina is not defined


def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ f_manual: ((({a: 'b & 'a & 'c} as 'a) & 'd,) & {_1: ({a: 'b & 'a & 'c} as 'a) & 'd}) -> ('c | ('d | 'e\a & {a: int} as 'e))

:e
f_manual 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.433: 	f_manual 1
//│ ║         	^^^^^^^^^^
//│ ╟── integer literal of type `1` does not have field 'a'
//│ ║  l.433: 	f_manual 1
//│ ║         	         ^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.429: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ║         	                ^^^^^^^^^^^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.429: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ╙──       	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: 1 | error | (('b | 1 | 'a)\a & {a: int} as 'a)
//│ Runtime error:
//│   ReferenceError: f_manual is not defined

:e
f_manual { a = 1 }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.451: 	f_manual { a = 1 }
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not have field 'a'
//│ ║  l.451: 	f_manual { a = 1 }
//│ ║         	               ^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.429: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ║         	                ^^^^^^^^^^^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.429: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ╙──       	                    ^^^^^^^^^^^^
//│ res: 1 | error | ({a: 1} | 'a\a & {a: int} as 'a)
//│ Runtime error:
//│   ReferenceError: f_manual is not defined

f_manual error
//│ res: 'a\a & {a: int} as 'a
//│ Runtime error:
//│   ReferenceError: f_manual is not defined

// > FIXME why is this one accepted but `f ainf` is not?
//    It looks like a simplification error (I copy-pasted the simplified type for f_manual)
//    since `f_manual_ns ainf` gets the same error as `f ainf`.
f_manual ainf
//│ res: ({a: 'b} as 'b) | 'a\a & {a: int} as 'a
//│ Runtime error:
//│   ReferenceError: f_manual is not defined

// Notice the simplified type is NOT the same as that of `f`...
def f_manual_ns: 'a | ('b & (({a: 'd & 'c} as 'c) | ~{a: 'e | int} | ~{})\a & (({a: 'd & 'c} as 'c) | ~{a: 'e | int})\a & (({a: 'f} as 'c) as 'f) & (int | ~{a: 'e | int} | ~{})\a & (int | ~{a: 'e | int})\a & int & int) -> ('g | 'd | ('b | 'h\a & {a: 'e | int} as 'h))
//│ f_manual_ns: ((({a: 'a} as 'a) & 'b,) & {_1: ({a: 'a} as 'a) & 'b}) -> ('b | 'c\a & {a: int} as 'c)

// FIXME SOF
// :e
// :s
// :d
// f_manual_ns ainf

def f_manual_2: (({a: 'a} as 'a) & 'b) -> ('b | 'c\a & {a: int} as 'c)
//│ f_manual_2: ((({a: 'a} as 'a) & 'b,) & {_1: ({a: 'a} as 'a) & 'b}) -> ('b | 'c\a & {a: int} as 'c)

f_manual_2 ainf
//│ res: ({a: 'b} as 'b) | 'a\a & {a: int} as 'a
//│ Runtime error:
//│   ReferenceError: f_manual_2 is not defined



rec def f x = if error then f (x with { a = x - 1 }) else x
//│ f: (('a,) & {_1: 'a}) -> ('a | 'b\a & {a: int} as 'b)
//│  = [Function: f2]

r = f 1
//│ r: 1 | 'a\a & {a: int} as 'a
//│ Runtime error:
//│   Error: unexpected runtime error

r + 1
//│ res: int
//│ Runtime error:
//│   ReferenceError: r7 is not defined

:e
r.a
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.516: 	r.a
//│ ║         	^^^
//│ ╟── integer literal of type `1` does not have field 'a'
//│ ║  l.505: 	r = f 1
//│ ║         	      ^
//│ ╟── but it flows into reference with expected type `{a: ?a}`
//│ ║  l.516: 	r.a
//│ ╙──       	^
//│ res: error | int
//│ Runtime error:
//│   ReferenceError: r7 is not defined

case r of {int -> 0 | _ -> r.a}
//│ res: 0
//│ Runtime error:
//│   ReferenceError: r7 is not defined

r2 = case r of {int -> error | _ -> r}
//│ r2: nothing
//│ Runtime error:
//│   ReferenceError: r7 is not defined

r2.a
//│ res: nothing
//│ Runtime error:
//│   ReferenceError: r21 is not defined

r2 + 1
//│ res: int
//│ Runtime error:
//│   ReferenceError: r21 is not defined

r: int
//│ res: int
//│ Runtime error:
//│   ReferenceError: r7 is not defined



rec def f x = if error then f (x with { a = 1 }) else x
//│ f: (('a,) & {_1: 'a}) -> ('a | 'b\a & {a: 1} as 'b)
//│  = [Function: f3]

r = f 1
//│ r: 1 | 'a\a & {a: 1} as 'a
//│ Runtime error:
//│   Error: unexpected runtime error

r: int
//│ res: int
//│ Runtime error:
//│   ReferenceError: r8 is not defined


// Field removal also blocks proper simplification

def fancyBottom1: 'a & ('a -> 'a) as 'a
def fancyBottom2: 'a\x as 'a
//│ fancyBottom1: nothing
//│ fancyBottom2: 'a\x as 'a

fancyBottom2: nothing
//│ res: nothing
//│ Runtime error:
//│   ReferenceError: fancyBottom2 is not defined



// ------ // ------ // ------ // ------ // ------ // ------ //



// Just poking around:

def impossible: 'a -> ('a & int)
//│ impossible: (('a,) & {_1: 'a}) -> (int & 'a)

rec def f (x: int | string) = f (impossible x) + 1
//│ f: ((int | string,) & {_1: int | string}) -> int
//│  = [Function: f4]

rec def f (x: int | string) = (case x of {int -> f "ok" | string -> f (impossible x)}) + 1
//│ f: ((int | string,) & {_1: int | string}) -> int
//│  = [Function: f5]

rec def f x = (case x of {int -> f "ok" | string -> f (impossible x)}) + 1
//│ f: ((int | string,) & {_1: int | string}) -> int
//│  = [Function: f6]

f 1
f "a"
//│ res: int
//│ Runtime error:
//│   ReferenceError: impossible is not defined
//│ res: int
//│ Runtime error:
//│   ReferenceError: impossible is not defined

rec def f x = case x of {int -> f "ok" | string -> f (impossible x) | _ -> x}
//│ f: ((int | string | 'a & ~int & ~string,) & {_1: int | string | 'a & ~int & ~string}) -> 'a
//│  = [Function: f7]

f 1
f "a"
f false
//│ res: nothing
//│ Runtime error:
//│   ReferenceError: impossible is not defined
//│ res: nothing
//│ Runtime error:
//│   ReferenceError: impossible is not defined
//│ res: false
//│    = false

