// TODO: remove after recursive function is fixed
:AllowRuntimeErrors

// From Simple-sub tests:
:js
let rec l = fun a -> fun a -> fun a -> l in let rec r = fun a -> fun a -> r in if true then l else r
//│ // Prelude
//│ let res;
//│ // Query 1
//│ res = (function (l) {
//│   return ((function (r) {
//│     return true ? l : r;
//│   })(function r(a) {
//│     return (a) => r;
//│   }));
//│ })(function l(a) {
//│   return (a) => (a) => l;
//│ });
//│ // End of generated code
//│ res: anything -> anything -> ((anything -> anything -> anything -> 'a as 'a) | (anything -> anything -> 'b as 'b))
//│    = [Function: l]



rec def l a = l
//│ l: anything -> 'a as 'a
//│  = [Function: l]

if true then l else l
//│ res: anything -> ((anything -> 'a as 'a) | (anything -> 'b as 'b))
//│    = [Function: l]



rec def l a a a = l
//│ l: anything -> anything -> anything -> 'a as 'a
//│  = [Function: l1]


rec def r a a = l
//│ r: anything -> anything -> anything -> 'a as 'a
//│  = [Function: r]

rec def r a a = l
//│ r: anything -> anything -> anything -> 'a as 'a
//│  = [Function: r1]


rec def r a a = r
//│ r: anything -> anything -> 'a as 'a
//│  = [Function: r2]


if true then l else r
//│ res: anything -> anything -> ((anything -> anything -> anything -> 'a as 'a) | (anything -> anything -> 'b as 'b))
//│    = [Function: l1]

if true then l else r
//│ res: anything -> anything -> ((anything -> anything -> anything -> 'a as 'a) | (anything -> anything -> 'b as 'b))
//│    = [Function: l1]



rec def l (a: int) (a: int) = l
rec def r (a: bool) (a: bool) (a: bool) = r
//│ l: int -> int -> 'a as 'a
//│  = [Function: l2]
//│ r: bool -> bool -> bool -> 'a as 'a
//│  = [Function: r3]

if true then l else r
//│ res: nothing -> nothing -> ((bool -> bool -> bool -> 'a as 'a) | (int -> int -> 'b as 'b))
//│    = [Function: l2]

if true then l else r
//│ res: nothing -> nothing -> ((bool -> bool -> bool -> 'a as 'a) | (int -> int -> 'b as 'b))
//│    = [Function: l2]

if true then (fun x -> add x 1) else (fun y -> not y)
//│ res: nothing -> (bool | int)
//│    = [Function (anonymous)]

if true then (fun x -> add x 1) else (fun y -> not y)
//│ res: nothing -> (bool | int)
//│    = [Function (anonymous)]



rec def l (a: int) (a: bool) = l
rec def r (a: int) (a: bool) (a: bool) = r
//│ l: int -> bool -> 'a as 'a
//│  = [Function: l3]
//│ r: int -> bool -> bool -> 'a as 'a
//│  = [Function: r4]

if true then l else r
//│ res: int -> bool -> ((bool -> int -> bool -> 'a as 'a) | (int -> bool -> 'b as 'b))
//│    = [Function: l3]

if true then l else r
//│ res: int -> bool -> ((bool -> int -> bool -> 'a as 'a) | (int -> bool -> 'b as 'b))
//│    = [Function: l3]



rec def l (a: int) b = if true then l else b
rec def r (a: int) b c = if true then r else if true then b else c
//│ l: int -> 'b -> ('b | 'a) as 'a
//│  = [Function: l4]
//│ r: int -> 'b -> 'b -> ('b | 'a) as 'a
//│  = [Function: r5]

if true then l else r
//│ res: int -> ('a & 'b) -> (('b -> (int -> 'd -> 'c as 'd) as 'c) | (int -> 'e -> 'e as 'e))
//│    = [Function: l4]

if true then l else r
//│ res: int -> ('a & 'b) -> (('b -> (int -> 'd -> 'c as 'd) as 'c) | (int -> 'e -> 'e as 'e))
//│    = [Function: l4]



rec def l (a: int) (b: int) = l
//│ l: int -> int -> 'a as 'a
//│  = [Function: l5]

rec def r (a: int) (b: int) (c: int) = r
//│ r: int -> int -> int -> 'a as 'a
//│  = [Function: r6]

if true then l else r
//│ res: int -> int -> ((int -> int -> int -> 'a as 'a) | (int -> int -> 'b as 'b))
//│    = [Function: l5]



// ------ // ------ // ------ // ------ // ------ // ------ //



class C[A]: { a: A }
//│ Defined class C



:ns
rec def foo (c: C['a]) = foo (c.a)
//│ foo: (C[in 'a out 'a & 'b] as 'b) -> nothing
//│    = [Function: foo]

// TODOne-simplif figure ou why some type variables are not simplified here
// foo

type Rec = C[Rec]
def foo_ty: Rec -> nothing
//│ Defined type alias Rec
//│ foo_ty: Rec -> nothing
//│       = <missing implementation>

foo_ty = foo
//│ (C['a] as 'b) -> nothing
//│   where
//│     'a <: 'b
//│   <:  foo_ty:
//│ Rec -> nothing
//│       = [Function: foo]

def foo_ty2: (C['r] as 'r) -> nothing
//│ foo_ty2: (C['r] as 'r) -> nothing
//│        = <missing implementation>

:ns
foo_ty2
//│ res: (C['r] as 'r) -> nothing
//│    = <no result>
//│      foo_ty2 is not implemented

foo_ty = foo_ty2
//│ (C['r] as 'r) -> nothing
//│   <:  foo_ty:
//│ Rec -> nothing
//│       = <no result>
//│         foo_ty2 is not implemented

foo_ty2 = foo_ty
//│ Rec -> nothing
//│   <:  foo_ty2:
//│ (C['r] as 'r) -> nothing
//│        = <no result>
//│          foo_ty and foo_ty2 are not implemented

foo_ty2 = foo
//│ (C['a] as 'b) -> nothing
//│   where
//│     'a <: 'b
//│   <:  foo_ty2:
//│ (C['r] as 'r) -> nothing
//│        = [Function: foo]



rec def bar = C { a = bar }
//│ bar: (C['A] with {a: 'a}) as 'a
//│   where
//│     'A :> 'a
//│ Runtime error:
//│   ReferenceError: bar is not defined

type Rec2 = C[Rec2]
def bar_ty: Rec2
//│ Defined type alias Rec2
//│ bar_ty: Rec2
//│       = <missing implementation>

bar_ty = bar
//│ (C['A] with {a: 'a}) as 'a
//│   where
//│     'A :> 'a
//│   <:  bar_ty:
//│ Rec2
//│ Runtime error:
//│   ReferenceError: bar is not defined

def bar_ty2: C['r] as 'r
//│ bar_ty2: C['r] as 'r
//│        = <missing implementation>

:ns
bar_ty2
//│ res: C['r] as 'r
//│    = <no result>
//│      bar_ty2 is not implemented

bar_ty2
//│ res: C['r] as 'r
//│    = <no result>
//│      bar_ty2 is not implemented

bar_ty = bar_ty2
//│ C['r] as 'r
//│   <:  bar_ty:
//│ Rec2
//│       = <no result>
//│         bar_ty2 is not implemented

bar_ty2 = bar_ty
//│ Rec2
//│   <:  bar_ty2:
//│ C['r] as 'r
//│        = <no result>
//│          bar_ty and bar_ty2 are not implemented

bar_ty2 = bar
//│ (C['A] with {a: 'a}) as 'a
//│   where
//│     'A :> 'a
//│   <:  bar_ty2:
//│ C['r] as 'r
//│ Runtime error:
//│   ReferenceError: bar is not defined



type Rec3 = { x: Rec3 }
//│ Defined type alias Rec3

def bar2_ty: Rec3
//│ bar2_ty: Rec3
//│        = <missing implementation>

def bar2_ty2: { x: 'r } as 'r
//│ bar2_ty2: {x: 'r} as 'r
//│         = <missing implementation>

bar2_ty = bar2_ty2
//│ {x: 'r} as 'r
//│   <:  bar2_ty:
//│ Rec3
//│        = <no result>
//│          bar2_ty2 is not implemented

bar2_ty2 = bar2_ty
//│ Rec3
//│   <:  bar2_ty2:
//│ {x: 'r} as 'r
//│         = <no result>
//│           bar2_ty and bar2_ty2 are not implemented

:e
bar2_ty2 = bar_ty2
//│ C['r] as 'r
//│   <:  bar2_ty2:
//│ {x: 'r} as 'r
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.290: 	bar2_ty2 = bar_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `C[?r] with {a: ?r}` does not match type `{x: ?r0} | 'r`
//│ ║  l.224: 	def bar_ty2: C['r] as 'r
//│ ║         	             ^^^^^
//│ ╟── but it flows into reference with expected type `{x: ?r1} | 'r`
//│ ║  l.290: 	bar2_ty2 = bar_ty2
//│ ║         	           ^^^^^^^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.271: 	def bar2_ty2: { x: 'r } as 'r
//│ ╙──       	              ^^^^^^^^^
//│ Runtime error:
//│   ReferenceError: bar_ty21 is not defined

:e
bar_ty2 = bar2_ty2
//│ {x: 'r} as 'r
//│   <:  bar_ty2:
//│ C['r] as 'r
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.310: 	bar_ty2 = bar2_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `{x: ?r}` does not match type `'r | C[?r0]`
//│ ║  l.271: 	def bar2_ty2: { x: 'r } as 'r
//│ ║         	              ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `'r | C[?r1]`
//│ ║  l.310: 	bar_ty2 = bar2_ty2
//│ ║         	          ^^^^^^^^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.224: 	def bar_ty2: C['r] as 'r
//│ ╙──       	             ^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.310: 	bar_ty2 = bar2_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `{x: ?r}` does not match type `'r | C[?r0]`
//│ ║  l.271: 	def bar2_ty2: { x: 'r } as 'r
//│ ║         	              ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `'r | C[?r1]`
//│ ║  l.310: 	bar_ty2 = bar2_ty2
//│ ║         	          ^^^^^^^^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.224: 	def bar_ty2: C['r] as 'r
//│ ╙──       	             ^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.310: 	bar_ty2 = bar2_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `{x: ?r}` does not match type `'r | C[?r0]`
//│ ║  l.271: 	def bar2_ty2: { x: 'r } as 'r
//│ ║         	              ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `'r | C[?r1]`
//│ ║  l.310: 	bar_ty2 = bar2_ty2
//│ ║         	          ^^^^^^^^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.224: 	def bar_ty2: C['r] as 'r
//│ ╙──       	             ^^^^^
//│ Runtime error:
//│   ReferenceError: bar2_ty21 is not defined



// ------ // ------ // ------ // ------ // ------ // ------ //



rec def f x = if x > 0 then f (x with { a = x - 1 }) else x
//│ /!!!\ Uncaught error: java.lang.StackOverflowError
//│ 	at: mlscript.TyperHelpers$SimpleTypeImpl.$amp(TyperHelpers.scala:308)
//│ 	at: mlscript.TyperHelpers$SimpleTypeImpl.$amp$(TyperHelpers.scala:306)
//│ 	at: mlscript.TyperDatatypes$SimpleType.$amp(TyperDatatypes.scala:76)
//│ 	at: mlscript.TyperHelpers$SimpleTypeImpl.$amp(TyperHelpers.scala:322)
//│ 	at: mlscript.TyperHelpers$SimpleTypeImpl.$amp$(TyperHelpers.scala:306)
//│ 	at: mlscript.TyperDatatypes$SimpleType.$amp(TyperDatatypes.scala:76)
//│ 	at: mlscript.NormalForms$LhsNf.$anonfun$mkType$2(NormalForms.scala:28)
//│ 	at: scala.Option.fold(Option.scala:263)
//│ 	at: mlscript.NormalForms$LhsNf.mkType(NormalForms.scala:28)
//│ 	at: mlscript.NormalForms$LhsNf.underlying$lzycompute(NormalForms.scala:33)

f 1
//│ res: 1 | 'a\a & {a: int} as 'a
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:ns
rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ f: ('a & (({a: 'c & 'b} as 'b) | ~{a: int} | ~{})\a & (({a: 'c & 'b} as 'b) | ~{a: int})\a & (int | ~{a: int} | ~{})\a & (int | ~{a: int})\a & ('c & ({a: 'd} as 'b) as 'd) & int) -> ('c | (('a | 'e)\a & {a: int} as 'e))
//│  = [Function: f1]

f
//│ /!!!\ Uncaught error: java.lang.StackOverflowError
//│ 	at: mlscript.NormalForms$LhsNf.mkType(NormalForms.scala:28)
//│ 	at: mlscript.NormalForms$LhsNf.underlying$lzycompute(NormalForms.scala:33)
//│ 	at: mlscript.NormalForms$LhsNf.underlying(NormalForms.scala:33)
//│ 	at: mlscript.NormalForms$LhsNf.toType(NormalForms.scala:23)
//│ 	at: mlscript.NormalForms$Conjunct.$amp(NormalForms.scala:263)
//│ 	at: mlscript.NormalForms$DNF.$anonfun$$amp$20(NormalForms.scala:394)
//│ 	at: scala.collection.immutable.List.flatMap(List.scala:293)
//│ 	at: mlscript.NormalForms$DNF.$amp(NormalForms.scala:394)
//│ 	at: mlscript.NormalForms$DNF.$anonfun$$amp$18(NormalForms.scala:391)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)

// Notice how what is most likely an the error is reported in call sites,
//    due to the delaying effect of the field removal type...
//    though it *is* still possible to call this function wtihout errors,
//    using a bottom-typed argument.

// TODO: This causes `Maximum call stack size exceeded`.
:e
f 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.402: 	f 1
//│ ║         	^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.378: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.378: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int | ((1 | 'a)\a & {a: int} as 'a)
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:e
f { a = 1 }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.417: 	f { a = 1 }
//│ ║         	^^^^^^^^^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.378: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.378: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error
//│    = { a: 1 }

f error
//│ res: 'a\a & {a: int} as 'a
//│ Runtime error:
//│   Error: unexpected runtime error


:e
rec def ainf = { a = ainf }
f ainf
//│ ainf: {a: 'a} as 'a
//│ Runtime error:
//│   ReferenceError: ainf is not defined
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.438: 	f ainf
//│ ║         	^^^^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.378: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.378: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error
//│ Runtime error:
//│   ReferenceError: ainf is not defined

:e
rec def infina = 0 with { a = infina }
f infina
//│ infina: 0 & {a: 'a} as 'a
//│ Runtime error:
//│   ReferenceError: infina is not defined
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.457: 	f infina
//│ ║         	^^^^^^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.378: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.378: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int | (((0 & {a: 'b} as 'b) | 'a)\a & {a: int} as 'a)
//│ Runtime error:
//│   ReferenceError: infina is not defined


def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ f_manual: ('d & ({a: 'c & 'a} as 'a)) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│         = <missing implementation>

:e
f_manual 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.480: 	f_manual 1
//│ ║         	^^^^^^^^^^
//│ ╟── integer literal of type `1` does not have field 'a'
//│ ║  l.480: 	f_manual 1
//│ ║         	         ^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.475: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ║         	                ^^^^^^^^^^^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.475: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ╙──       	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: ('e\a & {a: int} | 1 as 'e) | error
//│    = <no result>
//│      f_manual is not implemented

:e
f_manual { a = 1 }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.498: 	f_manual { a = 1 }
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not have field 'a'
//│ ║  l.498: 	f_manual { a = 1 }
//│ ║         	               ^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.475: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ║         	                ^^^^^^^^^^^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.475: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ╙──       	                    ^^^^^^^^^^^^
//│ res: ('e\a & {a: int} | {a: 1} as 'e) | 1 | error
//│    = <no result>
//│      f_manual is not implemented

f_manual error
//│ res: 'e\a & {a: int} as 'e
//│    = <no result>
//│      f_manual is not implemented

// > FIXME why is this one accepted but `f ainf` is not?
//    It looks like a simplification error (I copy-pasted the simplified type for f_manual)
//    since `f_manual_ns ainf` gets the same error as `f ainf`.
f_manual ainf
//│ res: ('e\a & {a: int} | ({a: 'a} as 'a) as 'e) | ({a: 'a} as 'a)
//│    = <no result>
//│      f_manual is not implemented

// TODO-simplif FIXME SOF
// Notice the simplified type is NOT the same as that of `f`...
// def f_manual_ns: 'a | ('b & (({a: 'd & 'c} as 'c) | ~{a: 'e | int} | ~{})\a & (({a: 'd & 'c} as 'c) | ~{a: 'e | int})\a & (({a: 'f} as 'c) as 'f) & (int | ~{a: 'e | int} | ~{})\a & (int | ~{a: 'e | int})\a & int & int) -> ('g | 'd | ('b | 'h\a & {a: 'e | int} as 'h))
def f_manual_ns: anything
//│ f_manual_ns: anything
//│            = <missing implementation>

:e
f_manual_ns ainf
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.536: 	f_manual_ns ainf
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── type `anything` is not a function
//│ ║  l.531: 	def f_manual_ns: anything
//│ ║         	                 ^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a -> ?b`
//│ ║  l.536: 	f_manual_ns ainf
//│ ╙──       	^^^^^^^^^^^
//│ res: error
//│    = <no result>
//│      f_manual_ns is not implemented

def f_manual_2: (({a: 'a} as 'a) & 'b) -> ('b | 'c\a & {a: int} as 'c)
//│ f_manual_2: ('b & ({a: 'a} as 'a)) -> ('b | 'c\a & {a: int} as 'c)
//│           = <missing implementation>

// :ds
f_manual_2 // [test:T2]
//│ res: ('b & ({a: 'a} as 'a)) -> ('b | 'c\a & {a: int} as 'c)
//│    = <no result>
//│      f_manual_2 is not implemented

f_manual_2 ainf
//│ res: 'a\a & {a: int} | ({a: 'b} as 'b) as 'a
//│    = <no result>
//│      f_manual_2 is not implemented



rec def f x = if error then f (x with { a = x - 1 }) else x
//│ /!!!\ Uncaught error: java.lang.StackOverflowError
//│ 	at: mlscript.TyperHelpers$SimpleTypeImpl.$amp(TyperHelpers.scala:308)
//│ 	at: mlscript.TyperHelpers$SimpleTypeImpl.$amp$(TyperHelpers.scala:306)
//│ 	at: mlscript.TyperDatatypes$SimpleType.$amp(TyperDatatypes.scala:76)
//│ 	at: mlscript.NormalForms$LhsNf.$anonfun$mkType$2(NormalForms.scala:28)
//│ 	at: scala.Option.fold(Option.scala:263)
//│ 	at: mlscript.NormalForms$LhsNf.mkType(NormalForms.scala:28)
//│ 	at: mlscript.NormalForms$LhsNf.underlying$lzycompute(NormalForms.scala:33)
//│ 	at: mlscript.NormalForms$LhsNf.underlying(NormalForms.scala:33)
//│ 	at: mlscript.NormalForms$LhsNf.toType(NormalForms.scala:23)
//│ 	at: mlscript.NormalForms$Conjunct.$amp(NormalForms.scala:263)

r = f 1
//│ r: 1 | 'a\a & {a: int} as 'a
//│ Runtime error:
//│   Error: unexpected runtime error

r + 1
//│ res: int
//│ Runtime error:
//│   ReferenceError: r7 is not defined

:e
r.a
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.591: 	r.a
//│ ║         	^^^
//│ ╟── integer literal of type `1` does not have field 'a'
//│ ║  l.580: 	r = f 1
//│ ║         	      ^
//│ ╟── but it flows into reference with expected type `{a: ?a}`
//│ ║  l.591: 	r.a
//│ ╙──       	^
//│ res: error | int
//│ Runtime error:
//│   ReferenceError: r7 is not defined

case r of {int -> 0 | _ -> r.a}
//│ res: 0
//│ Runtime error:
//│   ReferenceError: r7 is not defined

r2 = case r of {int -> error | _ -> r}
//│ r2: nothing
//│ Runtime error:
//│   ReferenceError: r7 is not defined

r2.a
//│ res: nothing
//│ Runtime error:
//│   ReferenceError: r21 is not defined

r2 + 1
//│ res: int
//│ Runtime error:
//│   ReferenceError: r21 is not defined

r: int
//│ res: int
//│ Runtime error:
//│   ReferenceError: r7 is not defined



rec def f x = if error then f (x with { a = 1 }) else x
//│ f: 'a -> ('b\a & {a: 1} as 'b)
//│  = [Function: f3]

r = f 1
//│ r: 1 | 'a\a & {a: 1} as 'a
//│ Runtime error:
//│   Error: unexpected runtime error

r: int
//│ res: int
//│ Runtime error:
//│   ReferenceError: r8 is not defined


// Field removal also blocks proper simplification

def fancyBottom1: 'a & ('a -> 'a) as 'a
def fancyBottom2: 'a\x as 'a
//│ fancyBottom1: nothing
//│             = <missing implementation>
//│ fancyBottom2: nothing\x
//│             = <missing implementation>

fancyBottom2: nothing
//│ res: nothing
//│    = <no result>
//│      fancyBottom2 is not implemented



// ------ // ------ // ------ // ------ // ------ // ------ //



// Just poking around:

def impossible: 'a -> ('a & int)
//│ impossible: 'a -> (int & 'a)
//│           = <missing implementation>

rec def f (x: int | string) = f (impossible x) + 1
//│ f: (int | string) -> int
//│  = <no result>
//│    impossible is not implemented

rec def f (x: int | string) = (case x of {int -> f "ok" | string -> f (impossible x)}) + 1
//│ f: (int | string) -> int
//│  = <no result>
//│    impossible is not implemented

rec def f x = (case x of {int -> f "ok" | string -> f (impossible x)}) + 1
//│ f: (int | string & (int | string | ~int)) -> int
//│  = <no result>
//│    impossible is not implemented

f 1
f "a"
//│ res: int
//│    = <no result>
//│      f and impossible are not implemented
//│ res: int
//│    = <no result>
//│      f and impossible are not implemented

rec def f x = case x of {int -> f "ok" | string -> f (impossible x) | _ -> x}
//│ f: (int | string & (int | string | ~int) | 'a & ~int & ~string) -> 'a
//│  = <no result>
//│    impossible is not implemented

f 1
f "a"
f false
//│ res: nothing
//│    = <no result>
//│      f and impossible are not implemented
//│ res: nothing
//│    = <no result>
//│      f and impossible are not implemented
//│ res: false
//│    = <no result>
//│      f and impossible are not implemented

