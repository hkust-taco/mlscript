
// From Simple-sub tests:
let rec l = fun a -> fun a -> fun a -> l in let rec r = fun a -> fun a -> r in if true then l else r
//│ res: anything -> anything -> anything -> anything -> anything -> anything -> 'a as 'a
//│    = [Function (anonymous)]



rec def l a = l
//│ l: anything -> 'a as 'a
//│  = [Function: l]

if true then l else l
//│ res: anything -> 'a as 'a
//│    = [Function: l]



rec def l a a a = l
//│ l: anything -> anything -> anything -> 'a as 'a
//│  = [Function: l1]


rec def r a a = l
//│ r: anything -> anything -> anything -> 'a as 'a
//│  = [Function: r]

rec def r a a = l
//│ r: anything -> anything -> anything -> 'a as 'a
//│  = [Function: r1]


rec def r a a = r
//│ r: anything -> anything -> 'a as 'a
//│  = [Function: r2]


if true then l else r
//│ res: anything -> anything -> anything -> anything -> anything -> anything -> 'a as 'a
//│    = [Function: l1]

if true then l else r
//│ res: anything -> anything -> anything -> anything -> anything -> anything -> 'a as 'a
//│    = [Function: l1]



rec def l (a: int) (a: int) = l
rec def r (a: bool) (a: bool) (a: bool) = r
//│ l: int -> int -> 'a as 'a
//│  = [Function: l2]
//│ r: bool -> bool -> bool -> 'a as 'a
//│  = [Function: r3]

if true then l else r
//│ res: nothing -> nothing -> nothing -> nothing -> nothing -> nothing -> 'a as 'a
//│    = [Function: l2]

if true then l else r
//│ res: nothing -> nothing -> nothing -> nothing -> nothing -> nothing -> 'a as 'a
//│    = [Function: l2]

if true then (fun x -> add x 1) else (fun y -> not y)
//│ res: nothing -> (bool | int)
//│    = [Function (anonymous)]

if true then (fun x -> add x 1) else (fun y -> not y)
//│ res: nothing -> (bool | int)
//│    = [Function (anonymous)]



rec def l (a: int) (a: bool) = l
rec def r (a: int) (a: bool) (a: bool) = r
//│ l: int -> bool -> 'a as 'a
//│  = [Function: l3]
//│ r: int -> bool -> bool -> 'a as 'a
//│  = [Function: r4]

if true then l else r
//│ res: int -> bool -> nothing -> nothing -> nothing -> bool -> 'a as 'a
//│    = [Function: l3]

if true then l else r
//│ res: int -> bool -> nothing -> nothing -> nothing -> bool -> 'a as 'a
//│    = [Function: l3]



rec def l (a: int) b = if true then l else b
rec def r (a: int) b c = if true then r else if true then b else c
//│ l: int -> ('b | 'c -> ('a | 'c)) as 'a
//│  = [Function: l4]
//│ r: int -> ('b | 'c -> 'c -> ('a | 'c)) as 'a
//│  = [Function: r5]

if true then l else r
//│ res: int -> ('b | ('c & 'd) -> ((int & 'e) -> ((int & 'c) -> ((int & 'd) -> ('c & 'e) -> ('a | 'c | 'd | 'e) | 'c) | 'd | 'e) | 'c)) as 'a
//│    = [Function: l4]

if true then l else r
//│ res: int -> ('b | ('c & 'd) -> ((int & 'e) -> ((int & 'c) -> ((int & 'd) -> ('c & 'e) -> ('a | 'c | 'd | 'e) | 'c) | 'd | 'e) | 'c)) as 'a
//│    = [Function: l4]



rec def l (a: int) (b: int) = l
//│ l: int -> int -> 'a as 'a
//│  = [Function: l5]

rec def r (a: int) (b: int) (c: int) = r
//│ r: int -> int -> int -> 'a as 'a
//│  = [Function: r6]

if true then l else r
//│ res: int -> int -> int -> int -> int -> int -> 'a as 'a
//│    = [Function: l5]



// ------ // ------ // ------ // ------ // ------ // ------ //



class C[A]: { a: A }
//│ Defined class C



:ns
rec def foo (c: C['a]) = foo (c.a)
//│ foo: 'b | (C['a & 'c .. 'a] as 'c) -> 'd
//│    = [Function: foo]

// TODO figure ou why some type variables are not simplified here
foo
//│ res: ((C[?] with {a: 'c & 'b & 'a}) as 'b) -> nothing
//│    = [Function: foo]

type Rec = C[Rec]
def foo_ty: Rec -> nothing
//│ Defined type alias Rec
//│ foo_ty: ((C['b .. 'c] with {a: 'a}) as 'a) -> nothing

foo_ty = foo
//│ ((C[?] with {a: 'c & 'b & 'a}) as 'b) -> nothing
//│   <:  foo_ty:
//│ ((C['b .. 'c] with {a: 'a}) as 'a) -> nothing
//│       = [Function: foo]

def foo_ty2: (C['r] as 'r) -> nothing
//│ foo_ty2: ((C['b .. 'c] with {a: 'a}) & 'r as 'a) -> nothing

:ns
foo_ty2
//│ res: (C['r .. C['r .. 'r0] as 'r0] as 'r) -> nothing
//│ Runtime error:
//│   ReferenceError: foo_ty2 is not defined

foo_ty = foo_ty2
//│ ((C['b .. 'c] with {a: 'a}) & 'r as 'a) -> nothing
//│   <:  foo_ty:
//│ ((C['b .. 'c] with {a: 'a}) as 'a) -> nothing
//│ Runtime error:
//│   ReferenceError: foo_ty2 is not defined

foo_ty2 = foo_ty
//│ ((C['b .. 'c] with {a: 'a}) as 'a) -> nothing
//│   <:  foo_ty2:
//│ ((C['b .. 'c] with {a: 'a}) & 'r as 'a) -> nothing
//│ Runtime error:
//│   ReferenceError: foo_ty1 is not defined

foo_ty2 = foo
//│ ((C[?] with {a: 'c & 'b & 'a}) as 'b) -> nothing
//│   <:  foo_ty2:
//│ ((C['b .. 'c] with {a: 'a}) & 'r as 'a) -> nothing
//│        = [Function: foo]



rec def bar = C { a = bar }
//│ bar: (C[?] with {a: 'a}) as 'a
//│ Runtime error:
//│   ReferenceError: bar is not defined

type Rec2 = C[Rec2]
def bar_ty: Rec2
//│ Defined type alias Rec2
//│ bar_ty: (C[(C['c .. 'd] with {a: 'b}) as 'b .. 'a] with {a: 'a}) as 'a

bar_ty = bar
//│ (C[?] with {a: 'a}) as 'a
//│   <:  bar_ty:
//│ (C[(C['c .. 'd] with {a: 'b}) as 'b .. 'a] with {a: 'a}) as 'a
//│ Runtime error:
//│   ReferenceError: bar is not defined

def bar_ty2: C['r] as 'r
//│ bar_ty2: 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a

:ns
bar_ty2
//│ res: C[C['r0 .. 'r] as 'r0 .. 'r] as 'r
//│ Runtime error:
//│   ReferenceError: bar_ty2 is not defined

bar_ty2
//│ res: 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a
//│ Runtime error:
//│   ReferenceError: bar_ty2 is not defined

bar_ty = bar_ty2
//│ 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a
//│   <:  bar_ty:
//│ (C[(C['c .. 'd] with {a: 'b}) as 'b .. 'a] with {a: 'a}) as 'a
//│ Runtime error:
//│   ReferenceError: bar_ty2 is not defined

bar_ty2 = bar_ty
//│ (C[(C['c .. 'd] with {a: 'b}) as 'b .. 'a] with {a: 'a}) as 'a
//│   <:  bar_ty2:
//│ 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a
//│ Runtime error:
//│   ReferenceError: bar_ty1 is not defined

bar_ty2 = bar
//│ (C[?] with {a: 'a}) as 'a
//│   <:  bar_ty2:
//│ 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a
//│ Runtime error:
//│   ReferenceError: bar is not defined



type Rec3 = { x: Rec3 }
//│ Defined type alias Rec3

def bar2_ty: Rec3
//│ bar2_ty: {x: 'a} as 'a

def bar2_ty2: { x: 'r } as 'r
//│ bar2_ty2: {x: 'a} as 'a

bar2_ty = bar2_ty2
//│ {x: 'a} as 'a
//│   <:  bar2_ty:
//│ {x: 'a} as 'a
//│ Runtime error:
//│   ReferenceError: bar2_ty2 is not defined

bar2_ty2 = bar2_ty
//│ {x: 'a} as 'a
//│   <:  bar2_ty2:
//│ {x: 'a} as 'a
//│ Runtime error:
//│   ReferenceError: bar2_ty is not defined

:e
bar2_ty2 = bar_ty2
//│ 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a
//│   <:  bar2_ty2:
//│ {x: 'a} as 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.260: 	bar2_ty2 = bar_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `C[?r]` does not match type `'r | {x: ?r0}`
//│ ║  l.199: 	def bar_ty2: C['r] as 'r
//│ ║         	             ^^^^^
//│ ╟── but it flows into reference with expected type `'r | {x: ?r1}`
//│ ║  l.260: 	bar2_ty2 = bar_ty2
//│ ║         	           ^^^^^^^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.242: 	def bar2_ty2: { x: 'r } as 'r
//│ ╙──       	              ^^^^^^^^^
//│ Runtime error:
//│   ReferenceError: bar_ty21 is not defined

:e
bar_ty2 = bar2_ty2
//│ {x: 'a} as 'a
//│   <:  bar_ty2:
//│ 'r | (C[(C['c .. 'd] with {a: 'b}) & 'r as 'b .. 'a] with {a: 'a}) as 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.280: 	bar_ty2 = bar2_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `{x: ?r}` does not match type `'r | C[?r0]`
//│ ║  l.242: 	def bar2_ty2: { x: 'r } as 'r
//│ ║         	              ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `'r | C[?r1]`
//│ ║  l.280: 	bar_ty2 = bar2_ty2
//│ ║         	          ^^^^^^^^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.199: 	def bar_ty2: C['r] as 'r
//│ ╙──       	             ^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.280: 	bar_ty2 = bar2_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `{x: ?r}` does not match type `'r | C[?r0]`
//│ ║  l.242: 	def bar2_ty2: { x: 'r } as 'r
//│ ║         	              ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `'r | C[?r1]`
//│ ║  l.280: 	bar_ty2 = bar2_ty2
//│ ║         	          ^^^^^^^^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.199: 	def bar_ty2: C['r] as 'r
//│ ╙──       	             ^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.280: 	bar_ty2 = bar2_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `{x: ?r}` does not match type `'r | C[?r0]`
//│ ║  l.242: 	def bar2_ty2: { x: 'r } as 'r
//│ ║         	              ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `'r | C[?r1]`
//│ ║  l.280: 	bar_ty2 = bar2_ty2
//│ ║         	          ^^^^^^^^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.199: 	def bar_ty2: C['r] as 'r
//│ ╙──       	             ^^^^^
//│ Runtime error:
//│   ReferenceError: bar2_ty21 is not defined



// ------ // ------ // ------ // ------ // ------ // ------ //



rec def f x = if x > 0 then f (x with { a = x - 1 }) else x
//│ f: nothing -> ('a\a & {a: int} as 'a)
//│  = [Function: f]

:ns
rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ f: 'a | ('b & (~{a: 'c | int} | ({a: 'e & 'd} as 'd))\a & (({a: 'f} as 'd) as 'f) & (~{a: 'c | int} | int)\a & int & int) -> ('g | 'e | ('b | 'h\a & {a: 'c | int} as 'h))
//│  = [Function: f1]

f
//│ res: nothing -> ('a\a & {a: int} as 'a)
//│    = [Function: f1]

// Notice how what is most likely an the error is reported in call sites,
//    due to the delaying effect of the field removal type...
//    though it *is* still possible to call this function wtihout errors,
//    using a bottom-typed argument.

// TODO: This causes `Maximum call stack size exceeded`.
:e
f 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.349: 	f 1
//│ ║         	^^^
//│ ╟── expression of type `int` does not have field 'a'
//│ ║  l.334: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── but it flows into integer literal with expected type `~{a: ?a} | {a: ?b}`
//│ ║  l.349: 	f 1
//│ ║         	  ^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.334: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int | (('b | 1 | 'a)\a & {a: int} as 'a)
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:e
f { a = 1 }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.367: 	f { a = 1 }
//│ ║         	^^^^^^^^^^^
//│ ╟── expression of type `int` does not have field 'a'
//│ ║  l.334: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── but it flows into record literal with expected type `~{a: ?a} | {a: ?b}`
//│ ║  l.367: 	f { a = 1 }
//│ ║         	  ^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.334: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int | ({a: 1} | 'a\a & {a: int} as 'a)
//│    = { a: 1 }

f error
//│ res: 'a\a & {a: int} as 'a
//│ Runtime error:
//│   ReferenceError: error is not defined

:e
rec def infina = 0 with { a = infina }
f infina
//│ infina: 0 & {a: 'a} as 'a
//│ Runtime error:
//│   ReferenceError: infina is not defined
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.390: 	f infina
//│ ║         	^^^^^^^^
//│ ╟── expression of type `int` does not have field 'a'
//│ ║  l.334: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── but it flows into reference with expected type `(~{a: ?a} | {a: ?b})\a`
//│ ║  l.390: 	f infina
//│ ║         	  ^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.334: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int | (('b | (0 & {a: 'c} as 'c) | 'a)\a & {a: int} as 'a)
//│ Runtime error:
//│   ReferenceError: infina is not defined


// FIXME why does type printing show `nothing`?
rec def f x = if error then f (x with { a = x - 1 }) else x
//│ f: nothing -> ('a\a & {a: int} as 'a)
//│  = [Function: f2]

r = f 1
//│ r: 1 | 'a\a & {a: int} as 'a
//│ Runtime error:
//│   ReferenceError: error is not defined

r + 1
//│ res: int
//│ Runtime error:
//│   ReferenceError: r7 is not defined

:e
r.a
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.427: 	r.a
//│ ║         	^^^
//│ ╟── expression of type `1` does not have field 'a'
//│ ║  l.416: 	r = f 1
//│ ║         	      ^
//│ ╟── but it flows into reference with expected type `{a: ?a}`
//│ ║  l.427: 	r.a
//│ ╙──       	^
//│ res: error | int
//│ Runtime error:
//│   ReferenceError: r7 is not defined

case r of {int -> 0 | _ -> r.a}
//│ res: 0
//│ Runtime error:
//│   ReferenceError: r7 is not defined

r2 = case r of {int -> error | _ -> r}
//│ r2: ('b | 1 | 'a)\a & {a: int} as 'a
//│ Runtime error:
//│   ReferenceError: r7 is not defined

r2.a
//│ res: nothing
//│ Runtime error:
//│   ReferenceError: r21 is not defined

r2 + 1
//│ res: int
//│ Runtime error:
//│   ReferenceError: r21 is not defined

r: int
//│ res: int
//│ Runtime error:
//│   ReferenceError: r7 is not defined



rec def f x = if error then f (x with { a = 1 }) else x
//│ f: 'a -> ('a | 'b\a & {a: 1} as 'b)
//│  = [Function: f3]

r = f 1
//│ r: 1 | 'a\a & {a: 1} as 'a
//│ Runtime error:
//│   ReferenceError: error is not defined

r: int
//│ res: int
//│ Runtime error:
//│   ReferenceError: r8 is not defined


// Field removal also blocks proper simplification

def fancyBottom1: 'a & ('a -> 'a) as 'a
def fancyBottom2: 'a\x as 'a
//│ fancyBottom1: nothing
//│ fancyBottom2: 'a\x as 'a

fancyBottom2: nothing
//│ res: nothing
//│ Runtime error:
//│   ReferenceError: fancyBottom2 is not defined



// ------ // ------ // ------ // ------ // ------ // ------ //



// Just poking around:

def impossible: 'a -> ('a & int)
//│ impossible: 'a -> (int & 'a)

rec def f (x: int | string) = f (impossible x) + 1
//│ f: (int | string) -> int
//│  = [Function: f4]

rec def f (x: int | string) = (case x of {int -> f "ok" | string -> f (impossible x)}) + 1
//│ f: (int | string) -> int
//│  = [Function: f5]

rec def f x = (case x of {int -> f "ok" | string -> f (impossible x)}) + 1
//│ f: (int | string) -> int
//│  = [Function: f6]

f 1
f "a"
//│ res: int
//│ Runtime error:
//│   ReferenceError: impossible is not defined
//│ res: int
//│ Runtime error:
//│   ReferenceError: impossible is not defined

rec def f x = case x of {int -> f "ok" | string -> f (impossible x) | _ -> x}
//│ f: (int | string | 'a & ~int & ~string) -> 'a
//│  = [Function: f7]

f 1
f "a"
f false
//│ res: nothing
//│ Runtime error:
//│   ReferenceError: impossible is not defined
//│ res: nothing
//│ Runtime error:
//│   ReferenceError: impossible is not defined
//│ res: false
//│    = false

