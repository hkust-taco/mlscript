

// From Simple-sub tests:
:js
let rec l = fun a -> fun a -> fun a -> l in let rec r = fun a -> fun a -> r in if true then l else r
//│ // Prelude
//│ let res;
//│ // Query 1
//│ res = ((l) => ((r) => true ? l : r)(function r(a) {
//│   return (a) => r;
//│ }))(function l(a) {
//│   return (a) => (a) => l;
//│ });
//│ // End of generated code
//│ res: 'l | 'r
//│   where
//│     'r :> anything -> anything -> 'r
//│     'l :> anything -> anything -> anything -> 'l
//│    = [Function: l]



rec def l a = l
//│ l: 'l
//│   where
//│     'l :> anything -> 'l
//│  = [Function: l]

if true then l else l
//│ res: 'l
//│   where
//│     'l :> anything -> 'l
//│    = [Function: l]



rec def l a a a = l
//│ l: 'l
//│   where
//│     'l :> anything -> anything -> anything -> 'l
//│  = [Function: l1]


rec def r a a = l
//│ r: anything -> anything -> 'l
//│   where
//│     'l :> anything -> anything -> anything -> 'l
//│  = [Function: r]

rec def r a a = l
//│ r: anything -> anything -> 'l
//│   where
//│     'l :> anything -> anything -> anything -> 'l
//│  = [Function: r1]


rec def r a a = r
//│ r: 'r
//│   where
//│     'r :> anything -> anything -> 'r
//│  = [Function: r2]


if true then l else r
//│ res: 'l | 'r
//│   where
//│     'r :> anything -> anything -> 'r
//│     'l :> anything -> anything -> anything -> 'l
//│    = [Function: l1]

if true then l else r
//│ res: 'l | 'r
//│   where
//│     'r :> anything -> anything -> 'r
//│     'l :> anything -> anything -> anything -> 'l
//│    = [Function: l1]



rec def l (a: int) (a: int) = l
rec def r (a: bool) (a: bool) (a: bool) = r
//│ l: 'l
//│   where
//│     'l :> int -> int -> 'l
//│  = [Function: l2]
//│ r: 'r
//│   where
//│     'r :> bool -> bool -> bool -> 'r
//│  = [Function: r3]

if true then l else r
//│ res: 'l | 'r
//│   where
//│     'r :> bool -> bool -> bool -> 'r
//│     'l :> int -> int -> 'l
//│    = [Function: l2]

if true then l else r
//│ res: 'l | 'r
//│   where
//│     'r :> bool -> bool -> bool -> 'r
//│     'l :> int -> int -> 'l
//│    = [Function: l2]

if true then (fun x -> add x 1) else (fun y -> not y)
//│ res: nothing -> (bool | int)
//│    = [Function (anonymous)]

if true then (fun x -> add x 1) else (fun y -> not y)
//│ res: nothing -> (bool | int)
//│    = [Function (anonymous)]



rec def l (a: int) (a: bool) = l
rec def r (a: int) (a: bool) (a: bool) = r
//│ l: 'l
//│   where
//│     'l :> int -> bool -> 'l
//│  = [Function: l3]
//│ r: 'r
//│   where
//│     'r :> int -> bool -> bool -> 'r
//│  = [Function: r4]

if true then l else r
//│ res: 'l | 'r
//│   where
//│     'r :> int -> bool -> bool -> 'r
//│     'l :> int -> bool -> 'l
//│    = [Function: l3]

if true then l else r
//│ res: 'l | 'r
//│   where
//│     'r :> int -> bool -> bool -> 'r
//│     'l :> int -> bool -> 'l
//│    = [Function: l3]



rec def l (a: int) b = if true then l else b
rec def r (a: int) b c = if true then r else if true then b else c
//│ l: int -> 'a -> 'a
//│   where
//│     'a :> int -> 'a -> 'a
//│  = [Function: l4]
//│ r: int -> 'a -> 'a -> 'a
//│   where
//│     'a :> int -> 'a -> 'a -> 'a
//│  = [Function: r5]

if true then l else r
//│ res: int -> ('a & 'b) -> ('a -> 'a | 'b)
//│   where
//│     'b :> int -> 'b -> 'b
//│     'a :> int -> 'a -> 'a -> 'a
//│    = [Function: l4]

if true then l else r
//│ res: int -> ('a & 'b) -> ('a -> 'a | 'b)
//│   where
//│     'b :> int -> 'b -> 'b
//│     'a :> int -> 'a -> 'a -> 'a
//│    = [Function: l4]



rec def l (a: int) (b: int) = l
//│ l: 'l
//│   where
//│     'l :> int -> int -> 'l
//│  = [Function: l5]

rec def r (a: int) (b: int) (c: int) = r
//│ r: 'r
//│   where
//│     'r :> int -> int -> int -> 'r
//│  = [Function: r6]

if true then l else r
//│ res: 'l | 'r
//│   where
//│     'r :> int -> int -> int -> 'r
//│     'l :> int -> int -> 'l
//│    = [Function: l5]



// ------ // ------ // ------ // ------ // ------ // ------ //


:NoJS


class C[A]: { a: A }
//│ Defined class C[+A]



:ns
rec def foo (c: C['a]) = foo (c.a)
//│ foo: forall 'foo 'a 'a0 'b. 'foo
//│   where
//│     'foo := C['a] -> 'b
//│     'a <: 'a0
//│     'a0 <: C['a]

foo
//│ res: 'a -> nothing
//│   where
//│     'a <: C['a]

type Rec = C[Rec]
def foo_ty: Rec -> nothing
//│ Defined type alias Rec
//│ foo_ty: Rec -> nothing

foo_ty = foo
//│ 'a -> nothing
//│   where
//│     'a <: C['a]
//│   <:  foo_ty:
//│ Rec -> nothing

def foo_ty2: (C['r] as 'r) -> nothing
//│ foo_ty2: 'r -> nothing
//│   where
//│     'r <: C['r]

:ns
foo_ty2
//│ res: forall 'r. 'r -> nothing
//│   where
//│     'r := C['r]

foo_ty = foo_ty2
//│ 'r -> nothing
//│   where
//│     'r <: C['r]
//│   <:  foo_ty:
//│ Rec -> nothing

foo_ty2 = foo_ty
//│ Rec -> nothing
//│   <:  foo_ty2:
//│ 'r -> nothing
//│   where
//│     'r <: C['r]

foo_ty2 = foo
//│ 'a -> nothing
//│   where
//│     'a <: C['a]
//│   <:  foo_ty2:
//│ 'r -> nothing
//│   where
//│     'r <: C['r]



rec def bar = C { a = bar }
//│ bar: 'A
//│   where
//│     'A :> C['A]

type Rec2 = C[Rec2]
def bar_ty: Rec2
//│ Defined type alias Rec2
//│ bar_ty: Rec2

bar_ty = bar
//│ 'A
//│   where
//│     'A :> C['A]
//│   <:  bar_ty:
//│ Rec2

def bar_ty2: C['r] as 'r
//│ bar_ty2: 'r
//│   where
//│     'r :> C['r]

:ns
bar_ty2
//│ res: forall 'r. 'r
//│   where
//│     'r := C['r]

bar_ty2
//│ res: 'r
//│   where
//│     'r :> C['r]

bar_ty = bar_ty2
//│ 'r
//│   where
//│     'r :> C['r]
//│   <:  bar_ty:
//│ Rec2

bar_ty2 = bar_ty
//│ Rec2
//│   <:  bar_ty2:
//│ 'r
//│   where
//│     'r :> C['r]

bar_ty2 = bar
//│ 'A
//│   where
//│     'A :> C['A]
//│   <:  bar_ty2:
//│ 'r
//│   where
//│     'r :> C['r]



type Rec3 = { x: Rec3 }
//│ Defined type alias Rec3

def bar2_ty: Rec3
//│ bar2_ty: Rec3

def bar2_ty2: { x: 'r } as 'r
//│ bar2_ty2: 'r
//│   where
//│     'r :> {x: 'r}

bar2_ty = bar2_ty2
//│ 'r
//│   where
//│     'r :> {x: 'r}
//│   <:  bar2_ty:
//│ Rec3

bar2_ty2 = bar2_ty
//│ Rec3
//│   <:  bar2_ty2:
//│ 'r
//│   where
//│     'r :> {x: 'r}

:e
bar2_ty2 = bar_ty2
//│ 'r
//│   where
//│     'r :> C['r]
//│   <:  bar2_ty2:
//│ 'r
//│   where
//│     'r :> {x: 'r}
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.346: 	bar2_ty2 = bar_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `forall 'r. 'r` does not match type `{x: 'r0}`
//│ ║  l.279: 	def bar_ty2: C['r] as 'r
//│ ║         	             ^^^^^
//│ ╟── but it flows into reference with expected type `{x: 'r1}`
//│ ║  l.346: 	bar2_ty2 = bar_ty2
//│ ║         	           ^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.326: 	def bar2_ty2: { x: 'r } as 'r
//│ ╙──       	              ^^^^^^^^^

:e
bar_ty2 = bar2_ty2
//│ 'r
//│   where
//│     'r :> {x: 'r}
//│   <:  bar_ty2:
//│ 'r
//│   where
//│     'r :> C['r]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.368: 	bar_ty2 = bar2_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `{x: 'r}` is not an instance of type `C`
//│ ║  l.326: 	def bar2_ty2: { x: 'r } as 'r
//│ ║         	              ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `C[?]`
//│ ║  l.368: 	bar_ty2 = bar2_ty2
//│ ║         	          ^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.279: 	def bar_ty2: C['r] as 'r
//│ ╙──       	             ^^^^^



// ------ // ------ // ------ // ------ // ------ // ------ //



rec def f x = if x > 0 then f (x with { a = x - 1 }) else x
//│ f: 'a -> 'a
//│   where
//│     'a :> 'a\a & {a: int}
//│        <: int & (int | ~{a: int})\a & (number | ~{a: int})\a

f 1
//│ res: 'a
//│   where
//│     'a :> 1 | 'a\a & {a: int}

:ns
rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ f: forall 'b 'c 'f 'd 'e 'g 'a. 'f
//│   where
//│     'f := 'g -> 'c
//│     'g :> 'g\a & {a: 'd}
//│        <: ({a: 'a} | ~{a: 'd} | ~{})\a & ({a: 'a} | ~{a: 'd})\a & (number | ~{a: 'd} | ~{})\a & (number | ~{a: 'd})\a & (int | ~{a: 'd} | ~{})\a & (int | ~{a: 'd})\a & 'e & int & number
//│     'a <: 'e
//│     'e :> 'g\a & {a: 'd}
//│        <: 'c
//│     'c :> 'g\a & {a: 'd}
//│        <: 'b
//│     'b :> 'g\a & {a: 'd}
//│        <: {a: 'a}
//│     'd :> int

f
//│ res: 'a -> 'b
//│   where
//│     'a :> 'a\a & {a: int}
//│        <: int & (int | ~{a: int})\a & (number | ~{a: int})\a & ({a: 'b} | ~{a: int})\a & 'b
//│     'b :> 'a\a & {a: int}
//│        <: {a: 'b}

// Notice how what is most likely an the error is reported in call sites,
//    due to the delaying effect of the field removal type...
//    though it *is* still possible to call this function wtihout errors,
//    using a bottom-typed argument.

:e
f 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.436: 	f 1
//│ ║         	^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.407: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.407: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int | 'a\a & {a: int}
//│   where
//│     'a :> 1 | 'a\a & {a: int}

:e
f { a = 1 }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.451: 	f { a = 1 }
//│ ║         	^^^^^^^^^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.407: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.407: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error

f error
//│ res: 'a
//│   where
//│     'a :> 'a\a & {a: int}


:e
rec def ainf = { a = ainf }
f ainf
//│ ainf: 'ainf
//│   where
//│     'ainf :> {a: 'ainf}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.471: 	f ainf
//│ ║         	^^^^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.407: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.407: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error

:e
rec def infina = 0 with { a = infina }
f infina
//│ infina: 'infina
//│   where
//│     'infina :> 0 & {a: 'infina}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.488: 	f infina
//│ ║         	^^^^^^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.407: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.407: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int | 'infina | 'a\a & {a: int}
//│   where
//│     'a :> 'infina | 'a\a & {a: int}
//│     'infina :> 0 & {a: 'infina}


def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ f_manual: ('a & 'd) -> ('c | 'd)
//│   where
//│     'd :> 'd\a & {a: int}
//│     'a <: {a: 'a & 'c}

:e
f_manual 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.514: 	f_manual 1
//│ ║         	^^^^^^^^^^
//│ ╟── integer literal of type `1` does not have field 'a'
//│ ║  l.514: 	f_manual 1
//│ ║         	         ^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.507: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ║         	                ^^^^^^^^^^^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.507: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ╙──       	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | 'e
//│   where
//│     'e :> 1 | 'e\a & {a: int}

:e
f_manual { a = 1 }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.532: 	f_manual { a = 1 }
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not have field 'a'
//│ ║  l.532: 	f_manual { a = 1 }
//│ ║         	               ^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.507: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ║         	                ^^^^^^^^^^^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.507: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ╙──       	                    ^^^^^^^^^^^^
//│ res: 1 | error | 'e
//│   where
//│     'e :> 'e\a & {a: int} | {a: 1}

f_manual error
//│ res: 'e
//│   where
//│     'e :> 'e\a & {a: int}

// > FIXME why is this one accepted but `f ainf` is not?
//    It looks like a simplification error (I copy-pasted the simplified type for f_manual)
//    since `f_manual_ns ainf` gets the same error as `f ainf`.
f_manual ainf
//│ res: 'e | 'ainf
//│   where
//│     'ainf :> {a: 'ainf}
//│     'e :> forall 'ainf0. 'e\a & {a: int} | 'ainf0
//│     'ainf0 :> {a: 'ainf0}

// Notice the simplified type is NOT the same as that of `f`...
def f_manual_ns: 'a | ('b & (({a: 'd & 'c} as 'c) | ~{a: 'e | int} | ~{})\a & (({a: 'd & 'c} as 'c) | ~{a: 'e | int})\a & (({a: 'f} as 'c) as 'f) & (int | ~{a: 'e | int} | ~{})\a & (int | ~{a: 'e | int})\a & int & int) -> ('g | 'd | ('b | 'h\a & {a: 'e | int} as 'h))
//│ f_manual_ns: in forall 'f 'c 'd 'c0 'b. ('b & 'f & (int & ~{a: int} | (int & 'c)\a & 'c0\a & int)) -> ('b | 'd) out forall 'f 'c 'd 'c0 'b. ((int & 'c & 'c0 | ~{a: int})\a & int & 'b & 'f) -> ('b | 'd)
//│   where
//│     'c0 <: {a: 'd & 'c0}
//│     'c <: {a: 'c & 'd}
//│     'f <: {a: 'f}
//│     'b :> 'b\a & {a: int}

:e
f_manual_ns ainf
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.574: 	f_manual_ns ainf
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not have field 'a'
//│ ║  l.565: 	def f_manual_ns: 'a | ('b & (({a: 'd & 'c} as 'c) | ~{a: 'e | int} | ~{})\a & (({a: 'd & 'c} as 'c) | ~{a: 'e | int})\a & (({a: 'f} as 'c) as 'f) & (int | ~{a: 'e | int} | ~{})\a & (int | ~{a: 'e | int})\a & int & int) -> ('g | 'd | ('b | 'h\a & {a: 'e | int} as 'h))
//│ ║         	                                                              ^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.565: 	def f_manual_ns: 'a | ('b & (({a: 'd & 'c} as 'c) | ~{a: 'e | int} | ~{})\a & (({a: 'd & 'c} as 'c) | ~{a: 'e | int})\a & (({a: 'f} as 'c) as 'f) & (int | ~{a: 'e | int} | ~{})\a & (int | ~{a: 'e | int})\a & int & int) -> ('g | 'd | ('b | 'h\a & {a: 'e | int} as 'h))
//│ ║         	                              ^^^^^^^^^^^^
//│ ╟── from local type binding:
//│ ║  l.565: 	def f_manual_ns: 'a | ('b & (({a: 'd & 'c} as 'c) | ~{a: 'e | int} | ~{})\a & (({a: 'd & 'c} as 'c) | ~{a: 'e | int})\a & (({a: 'f} as 'c) as 'f) & (int | ~{a: 'e | int} | ~{})\a & (int | ~{a: 'e | int})\a & int & int) -> ('g | 'd | ('b | 'h\a & {a: 'e | int} as 'h))
//│ ╙──       	                             ^^^^^^^^^^^^^^^^^^^^
//│ res: error

def f_manual_2: (({a: 'a} as 'a) & 'b) -> ('b | 'c\a & {a: int} as 'c)
//│ f_manual_2: ('a & 'b) -> 'b
//│   where
//│     'b :> 'b\a & {a: int}
//│     'a <: {a: 'a}

f_manual_2 // [test:T2]
//│ res: ('a & 'b) -> 'b
//│   where
//│     'b :> 'b\a & {a: int}
//│     'a <: {a: 'a}

f_manual_2 ainf
//│ res: 'c
//│   where
//│     'c :> forall 'ainf. 'c\a & {a: int} | 'ainf
//│     'ainf :> {a: 'ainf}



rec def f x = if error then f (x with { a = x - 1 }) else x
//│ f: 'a -> 'a
//│   where
//│     'a :> 'a\a & {a: int}
//│        <: int & (int | ~{a: int})\a

r = f 1
//│ r: 'a
//│   where
//│     'a :> 1 | 'a\a & {a: int}

r + 1
//│ res: int

:e
r.a
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.624: 	r.a
//│ ║         	^^^
//│ ╟── integer literal of type `1` does not have field 'a'
//│ ║  l.615: 	r = f 1
//│ ║         	      ^
//│ ╟── but it flows into reference with expected type `{a: ?a}`
//│ ║  l.624: 	r.a
//│ ╙──       	^
//│ res: error | int

case r of {int -> 0 | _ -> r.a}
//│ res: 0

r2 = case r of {int -> error | _ -> r}
//│ r2: nothing

r2.a
//│ res: nothing

r2 + 1
//│ res: int

r: int
//│ res: int



rec def f x = if error then f (x with { a = 1 }) else x
//│ f: 'a -> 'a
//│   where
//│     'a :> 'a\a & {a: 1}

r = f 1
//│ r: 'a
//│   where
//│     'a :> 1 | 'a\a & {a: 1}

r: int
//│ res: int


// Field removal also blocks proper simplification

def fancyBottom1: 'a & ('a -> 'a) as 'a
def fancyBottom2: 'a\x as 'a
//│ fancyBottom1: 'a
//│   where
//│     'a := 'a -> 'a & 'a
//│ fancyBottom2: 'a
//│   where
//│     'a :> 'a\x

fancyBottom2: nothing
//│ res: nothing



// ------ // ------ // ------ // ------ // ------ // ------ //



// Just poking around:

def impossible: 'a -> ('a & int)
//│ impossible: 'a -> (int & 'a)

rec def f (x: int | string) = f (impossible x) + 1
//│ f: (int | string) -> int

rec def f (x: int | string) = (case x of {int -> f "ok" | string -> f (impossible x)}) + 1
//│ f: (int | string) -> int

rec def f x = (case x of {int -> f "ok" | string -> f (impossible x)}) + 1
//│ f: (int | string & (int | string | ~int)) -> int

f 1
f "a"
//│ res: int
//│ res: int

rec def f x = case x of {int -> f "ok" | string -> f (impossible x) | _ -> x}
//│ f: (int | string & (int | string | ~int) | 'a & ~int & ~string) -> 'a

f 1
f "a"
f false
//│ res: nothing
//│ res: nothing
//│ res: false

