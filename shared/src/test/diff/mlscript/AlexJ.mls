

1
//│ res: 1
//│    = 1

class A: { x: int }
//│ Defined class A

a = A{ x = 123 }
//│ a: A & {x: 123}
//│  = A { x: 123 }

a.x
//│ res: 123
//│    = 123


def foo x = (x, x)
//│ foo: 'a -> ('a, 'a,)
//│    = [Function: foo]

id
//│ res: 'a -> 'a
//│    = [Function: id]

r = foo id
//│ r: (forall 'a. 'a -> 'a, forall 'a. 'a -> 'a,)
//│  = [ [Function: id], [Function: id] ]

def fst(x, _) = x
def snd(_, x) = x
//│ fst: ('a, anything,) -> 'a
//│    = [Function: fst]
//│ snd: (anything, 'a,) -> 'a
//│    = [Function: snd]

fst(1,2)
//│ res: 1
//│    = 1

:e
fst((1,2))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.43: 	fst((1,2))
//│ ║        	^^^^^^^^^^
//│ ╟── argument of type `((1, 2,),)` does not match type `(?a, ?b,)`
//│ ║  l.43: 	fst((1,2))
//│ ║        	   ^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.31: 	def fst(x, _) = x
//│ ╙──      	       ^^^^^^
//│ res: error
//│    = [ 1, 2 ]

def fst((x, _)) = x
def snd((_, x)) = x
//│ fst: (('a, anything,),) -> 'a
//│    = [Function: fst1]
//│ snd: ((anything, 'a,),) -> 'a
//│    = [Function: snd1]

:e
fst(1,2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.64: 	fst(1,2)
//│ ║        	^^^^^^^^
//│ ╟── argument list of type `(1, 2,)` does not match type `((?a, ?b,),)`
//│ ║  l.64: 	fst(1,2)
//│ ╙──      	   ^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: number 1 is not iterable (cannot read property Symbol(Symbol.iterator))

fst((1,2))
//│ res: 1
//│    = 1

s = fst(r)
//│ s: 'a -> 'a
//│  = [Function: id]

s "abc"
//│ res: "abc"
//│    = 'abc'

s 123
//│ res: 123
//│    = 123

fst r "abc"
//│ res: "abc"
//│    = 'abc'

fst(r)
//│ res: 'a -> 'a
//│    = [Function: id]

snd(r) 123
//│ res: 123
//│    = 123


