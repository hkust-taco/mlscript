def toBool = fun x -> true
def b = toBool true
def bb = (fun a -> fun b -> toBool (if b then not a else not a)) true
//│ toBool: anything -> true
//│       = [Function: toBool]
//│ b: true
//│  = true
//│ bb: bool -> true
//│   = [Function (anonymous)]

def isInt = fun x -> b
//│ isInt: anything -> true
//│      = [Function: isInt]

def selectBoolOrInt = fun x -> if isInt x then 1 else true
def r1 = selectBoolOrInt true
def r2 = selectBoolOrInt 1
def addOneI = fun x -> add x 1
def addOneB = bb
//│ selectBoolOrInt: anything -> (1 | true)
//│                = [Function: selectBoolOrInt]
//│ r1: 1 | true
//│   = 1
//│ r2: 1 | true
//│   = 1
//│ addOneI: int -> int
//│        = [Function: addOneI]
//│ addOneB: bool -> true
//│        = [Function (anonymous)]

def addOne = fun x -> 
    if (isInt x) 
    then addOneI x 
    else addOneB x
def r3 = isInt r2
//│ addOne: nothing -> (int | true)
//│       = [Function: addOne]
//│ r3: true
//│   = true

:e
def r4 = addOne (selectBoolOrInt 1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.42: 	def r4 = addOne (selectBoolOrInt 1)
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `true` does not match type `int`
//│ ║  l.15: 	def selectBoolOrInt = fun x -> if isInt x then 1 else true
//│ ║        	                                                      ^^^^
//│ ╟── but it flows into application with expected type `int`
//│ ║  l.42: 	def r4 = addOne (selectBoolOrInt 1)
//│ ║        	                 ^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.18: 	def addOneI = fun x -> add x 1
//│ ║        	                           ^
//│ ╟── from reference:
//│ ║  l.33: 	    then addOneI x 
//│ ╙──      	                 ^
//│ r4: error | int | true
//│   = 2

:e
def r4 = let tmp = selectBoolOrInt 1 in case tmp of { int -> addOne tmp }
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.62: 	def r4 = let tmp = selectBoolOrInt 1 in case tmp of { int -> addOne tmp }
//│ ║        	                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `true` does not match type `int`
//│ ║  l.15: 	def selectBoolOrInt = fun x -> if isInt x then 1 else true
//│ ║        	                                                      ^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.62: 	def r4 = let tmp = selectBoolOrInt 1 in case tmp of { int -> addOne tmp }
//│ ║        	                                             ^^^
//│ ╟── Note: constraint arises from class pattern:
//│ ║  l.62: 	def r4 = let tmp = selectBoolOrInt 1 in case tmp of { int -> addOne tmp }
//│ ╙──      	                                                      ^^^
//│ r4: error | int | true
//│   = 2

// TODO improve:
//    Note the strange lack of specific provenance flows for `1` and `bool`.
//    This is due to our eagerly collapsing `int & bool` in the previously-inferred type.
//    We should either not collapse them until type simplification or somehow remember the original components
//      so a proper error can later be displayed.
:e
def r4 = let tmp = selectBoolOrInt 1 in case tmp of { int -> addOne tmp | _ -> 0 }
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.84: 	def r4 = let tmp = selectBoolOrInt 1 in case tmp of { int -> addOne tmp | _ -> 0 }
//│ ║        	                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `1` does not match type `bool`
//│ ╟── Note: constraint arises from argument:
//│ ║  l.3: 	def bb = (fun a -> fun b -> toBool (if b then not a else not a)) true
//│ ║       	                                       ^
//│ ╟── from refined scrutinee:
//│ ║  l.84: 	def r4 = let tmp = selectBoolOrInt 1 in case tmp of { int -> addOne tmp | _ -> 0 }
//│ ╙──      	                                             ^^^
//│ r4: int | true
//│   = 2

def addOne x = case x of {
  | int -> addOneI x 
  | bool -> addOneB x
  }
//│ addOne: (bool | int) -> (int | true)
//│       = [Function: addOne1]

def r4 = addOne (selectBoolOrInt 1)
//│ r4: int | true
//│   = 2

