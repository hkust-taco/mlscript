class Some[A]: { value: A }
class None: {}
//│ Defined class Some[+A]
//│ Defined class None



def flatMap3 = fun f -> fun opt -> case opt of { Some -> f opt | _ -> opt }
//│ flatMap3: ('a -> 'b) -> (Some[?] & 'a | 'b & ~#Some) -> 'b
//│         = [Function: flatMap3]


arg = if true then Some{value = 42} with {payload = 23} else None {}
//│ arg: None | Some[42] & {payload: 23}
//│    = Some { value: 42, payload: 23 }

// > TODO don't distribute neg inters + handle better at constraint top level
:stats
flatMap3 (fun x -> add x.value x.payload) arg
//│ res: None | int
//│    = 65
//│ constrain calls  : 94
//│ annoying  calls  : 23
//│ subtyping calls  : 545


arg = if true then Some{value = 42} else None {}
//│ arg: None | Some[42]
//│    = Some { value: 42 }

flatMap3 (fun x -> x.value) arg
//│ res: 42 | None
//│    = 42


foo = flatMap3 (fun x -> x.value)
//│ foo: (Some[?] & {value: 'a} | 'a & ~#Some) -> 'a
//│    = [Function (anonymous)]

foo arg
//│ res: 42 | None
//│    = 42

foo 1
//│ res: 1
//│    = 1

fn = foo None
//│ fn: anything -> None
//│   = [Function (anonymous)]

// :d
fn{} // foo None {}
//│ res: None
//│    = None {}

// :d
foo (None{})
//│ res: None
//│    = None {}


fun f -> flatMap3 f arg
//│ res: (Some[42] -> 'a) -> (None | 'a)
//│    = [Function: res]




foo = flatMap3 (fun x -> x)
//│ foo: (Some[?] & 'a | 'a & ~#Some) -> 'a
//│    = [Function (anonymous)]

foo 1
//│ res: 1
//│    = 1




def simpler = fun f -> case None{} of { Some -> f 1 | _ -> None{} }
//│ simpler: (1 -> 'a) -> (None | 'a)
//│        = [Function: simpler]

def simpler = fun f -> fun opt -> case opt of { Some -> f opt | None -> opt }
//│ simpler: ('a -> 'b) -> (None & 'b | Some[?] & 'a) -> 'b
//│        = [Function: simpler1]

simpler (fun x -> x.value)
//│ res: (None & 'a | Some[?] & {value: 'b}) -> ('b | 'a)
//│    = [Function (anonymous)]

:e
res 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.94: 	res 1
//│ ║        	^^^^^
//│ ╟── integer literal of type `1` does not match type `None & ?a | Some[?] & ?b`
//│ ║  l.94: 	res 1
//│ ║        	    ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.85: 	def simpler = fun f -> fun opt -> case opt of { Some -> f opt | None -> opt }
//│ ╙──      	                                       ^^^
//│ res: error
//│ Runtime error:
//│   Error: non-exhaustive case expression


def funny = fun f -> case f of { Some -> f f }
//│ funny: nothing -> nothing
//│      = [Function: funny]
