class Some[A]: { value: A }
class None: {}
//│ Defined class Some
//│ Defined class None



def flatMap3 = fun f -> fun opt -> case opt of { Some -> f opt | _ -> opt }
//│ flatMap3: ('a -> 'b) -> ((some & 'a) | ('c & ~some)) -> 'b | 'c


def arg = if true then Some{value = 42} with {payload = 23} else None {}
//│ arg: (some & {value: 42} with {payload: 23}) | none

flatMap3 (fun x -> add x.value x.payload) arg
//│ res: int | (({} & (some & {value: 42} with {payload: 23})) & ~{value: 42}) | ((some & {value: 42} with {payload: 23}) & ~some) | (none & ~some) | (none & ~{payload: 23}) | (({} & (some & {value: 42} with {payload: 23})) & ~{payload: 23}) | (none & ~{value: 42})


def arg = if true then Some{value = 42} else None {}
//│ arg: (some & {value: 42}) | none

flatMap3 (fun x -> x.value) arg
//│ res: 42 | (none & ~{value: 42}) | (none & ~some) | ((some & {value: 42}) & ~{value: 42}) | (({value: 42} & some) & ~some)


def foo = flatMap3 (fun x -> x.value)
//│ foo: ((some & {value: 'a}) | ('b & ~some)) -> 'a | 'b

foo arg
//│ res: 42 | (none & ~{value: 42}) | (none & ~some) | ((some & {value: 42}) & ~{value: 42}) | (({value: 42} & some) & ~some)

foo 1
//│ res: nothing | (1 & ~{value: nothing}) | (1 & ~some)

def fn = foo None
//│ fn: nothing | ((anything -> none) & ~{value: nothing}) | ((anything -> none) & ~some)

// :d
fn{} // foo None {}
//│ res: none

// :d
foo (None{})
//│ res: nothing | (none & ~{value: nothing}) | (none & ~some)


fun f -> flatMap3 f arg
//│ res: ((none & ~((none & ~some) | (({value: 42} & some) & ~some) & ~some)) | ((some & {value: 42}) & ~((none & ~some) | (({value: 42} & some) & ~some) & ~some)) -> 'a) -> 'a | (none & ~some) | (({value: 42} & some) & ~some)




def foo = flatMap3 (fun x -> x)
//│ foo: ((some & 'a) | ('b & ~some)) -> 'a | 'b

foo 1
//│ res: (1 & ~((1 & ~some) & ~some)) | (1 & ~some)




def simpler = fun f -> case None{} of { Some -> f 1 | _ -> None{} }
//│ simpler: (1 -> 'a) -> 'a | none

def simpler = fun f -> fun opt -> case opt of { Some -> f opt | None -> opt }
//│ simpler: ('a -> 'b) -> ((some & 'a) | ((none & 'c) & ~some)) -> 'b | 'c

simpler (fun x -> x.value)
//│ res: ((some & {value: 'a}) | ((none & 'b) & ~some)) -> 'a | 'b

:e
res 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.72: 	res 1
//│ ║        	^^^^^
//│ ╟── expression of type `1` does not match type `(some & ?a & {value: ?b}) | ((none & ?c) & ~some)`
//│ ║  l.72: 	res 1
//│ ║        	    ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.65: 	def simpler = fun f -> fun opt -> case opt of { Some -> f opt | None -> opt }
//│ ╙──      	                                       ^^^
//│ res: (nothing | (1 & ~{value: nothing}) | (1 & ~some)) | error


def funny = fun f -> case f of { Some -> f f }
//│ funny: 'a & some & ('a -> 'b) -> 'b

