


tuple1 = (1, 2, 3)
//│ tuple1: (1, 2, 3,)
//│       = [ 1, 2, 3 ]

tuple2 = (4, 5)
//│ tuple2: (4, 5,)
//│       = [ 4, 5 ]

if true then tuple1 else tuple2
//│ res: Array[4 | 5 | 1 | 2 | 3] & {0: 4 | 1, 1: 5 | 2}
//│    = [ 1, 2, 3 ]

arr = tuple1 : Array[int]
//│ arr: Array[int]
//│    = [ 1, 2, 3 ]

if true then tuple1 else arr
//│ res: Array[int]
//│    = [ 1, 2, 3 ]



type Cons[H, T] = { h: H; t: T }
type List[A] = Cons[A, List[A]] | ()
//│ Defined type alias Cons[+H, +T]
//│ Defined type alias List[+A]

list1 = { h = 1; t = { h = 2; t = () }}
//│ list1: {h: 1, t: {h: 2, t: ()}}
//│      = { h: 1, t: { h: 2, t: [] } }

list2 = { h = 3; t = () }
//│ list2: {h: 3, t: ()}
//│      = { h: 3, t: [] }

ls = if true then list1 else list2
//│ ls: {h: 3 | 1, t: () | {h: 2, t: ()}}
//│   = { h: 1, t: { h: 2, t: [] } }

ls : List[int]
//│ res: List[int]
//│    = { h: 1, t: { h: 2, t: [] } }

type NonEmptyList[A] = Cons[A, List[A]]
//│ Defined type alias NonEmptyList[+A]

ls : NonEmptyList[int]
//│ res: NonEmptyList[int]
//│    = { h: 1, t: { h: 2, t: [] } }

:e // TODO improve error message
ls : Cons[int, Cons[int, List[int]]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.55: 	ls : Cons[int, Cons[int, List[int]]]
//│ ║        	^^
//│ ╟── expression of type `anything` does not have field 'h'
//│ ╟── Note: constraint arises from record type:
//│ ║  l.26: 	type Cons[H, T] = { h: H; t: T }
//│ ║        	                  ^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.55: 	ls : Cons[int, Cons[int, List[int]]]
//│ ╙──      	               ^^^^^^^^^^^^^^^^^^^^
//│ res: Cons[int, Cons[int, List[int]]]
//│    = { h: 1, t: { h: 2, t: [] } }

ls : { h: int; t: List[int] }
//│ res: {h: int, t: List[int]}
//│    = { h: 1, t: { h: 2, t: [] } }

:e
ls : { h: int; t: { h: int; t: List[int] } }
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.74: 	ls : { h: int; t: { h: int; t: List[int] } }
//│ ║        	^^
//│ ╟── expression of type `anything` does not have field 'h'
//│ ╟── Note: constraint arises from record type:
//│ ║  l.74: 	ls : { h: int; t: { h: int; t: List[int] } }
//│ ╙──      	                  ^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: {h: int, t: {h: int, t: List[int]}}
//│    = { h: 1, t: { h: 2, t: [] } }



class C[A]: { h: A; t: List[A] }
type List0[A] = C[A] | ()
//│ Defined class C[+A]
//│ Defined type alias List0[+A]

list1 = C { h = 1; t = C { h = 2; t = () }}
//│ list1: C[1 | 2] with {h: 1, t: C[2] with {t: ()}}
//│      = C { h: 1, t: C { h: 2, t: [] } }

list2 = C { h = 3; t = () }
//│ list2: C[3] with {t: ()}
//│      = C { h: 3, t: [] }

ls = if true then list1 else list2
//│ ls: C[3 | 1 | 2] with {h: 3 | 1, t: () | (C[2] with {t: ()})}
//│   = C { h: 1, t: C { h: 2, t: [] } }

ls : List0[int]
//│ res: List0[int]
//│    = C { h: 1, t: C { h: 2, t: [] } }



type List1[A] = (A, List1[A]) | ()
//│ Defined type alias List1[+A]

list1 = (1, (2, (3, ())))
//│ list1: (1, (2, (3, (),),),)
//│      = [ 1, [ 2, [ 3, [] ] ] ]

list1: List1[int]
//│ res: List1[int]
//│    = [ 1, [ 2, [ 3, [] ] ] ]

list2 = (4, (5, ()))
//│ list2: (4, (5, (),),)
//│      = [ 4, [ 5, [] ] ]

if true then list1 else list2
//│ res: (4 | 1, (5 | 2, Array[3 | ()],),)
//│    = [ 1, [ 2, [ 3, [] ] ] ]



class N
//│ Defined class N

class Con[H, T]: { h: H; t: T }
//│ Defined class Con[+H, +T]

type List2[A] = Cons[A, List2[A]] | N
//│ Defined type alias List2[+A]


rec def foo xs = case xs of
  Con -> if xs.h then Con { h = xs.t.h; t = foo xs.t.t } else foo xs.t.t
//│ foo: 'a -> 'T
//│   where
//│     'T :> Con['h, 'T]
//│     'a <: Con[?, ?] & {h: bool, t: {h: 'h, t: 'a}}
//│    = [Function: foo]

rec def foo xs = case xs of
  Con ->
    let tmp = foo xs.t.t in
    if xs.h then Con { h = xs.t.h; t = tmp } else tmp,
  N -> xs
//│ foo: 'a -> 'b
//│   where
//│     'a <: Con[?, ?] & {h: bool, t: {h: 'h, t: 'a}} | N & 'b
//│     'b :> Con['h, 'b]
//│    = [Function: foo1]

rec def foo xs = case xs of
  Con -> if xs.h then Con { h = xs.t.h; t = foo xs.t.t } else foo xs.t.t,
  N -> xs
//│ foo: 'a -> 'b
//│   where
//│     'a <: Con[?, ?] & {h: bool, t: {h: 'h, t: 'a}} | N & 'b
//│     'b :> Con['h, 'b]
//│    = [Function: foo2]

foo (N{})
//│ res: 'a | N
//│   where
//│     'a :> Con[nothing, 'a | N] | N
//│    = N {}

foo (Con{ h = true; t = Con{ h = 0; t = N{} } })
//│ res: 'a | N
//│   where
//│     'a :> Con[0, 'a | N] | N
//│    = Con { h: 0, t: N {} }

def inf: Con[true, Con[0, 'I]] as 'I
//│ inf: 'I
//│   where
//│     'I :> Con[true, Con[0, 'I]]
//│    = <missing implementation>

foo inf
//│ res: 'a
//│   where
//│     'a :> Con[0, 'a]
//│    = <no result>
//│      inf is not implemented


rec def foo2 xs = case xs of
  Con -> if xs.h then Con { h = xs.t.h; t = foo xs.t.t } else foo xs.t.t,
  N -> N{}
//│ foo2: (Con[?, ?] & {h: bool, t: {h: 'h, t: 'a & 'b}} | N) -> ('c | Con['h, forall 'd. 'd | 'e] | N)
//│   where
//│     'd :> Con['h0, 'd | 'e] | 'e
//│     'b <: Con[?, ?] & {h: bool, t: {h: 'h1, t: 'b}} | N & 'c
//│     'c :> Con['h1, 'c]
//│     'a <: Con[?, ?] & {h: bool, t: {h: 'h0, t: 'a}} | N & 'e
//│     = [Function: foo21]



// === === === ERROR CASES === === === //



:e
foo (Con{ h = 1; t = N{} })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.213: 	foo (Con{ h = 1; t = N{} })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `N` does not have field 't'
//│ ║  l.213: 	foo (Con{ h = 1; t = N{} })
//│ ║         	                     ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.161: 	  Con -> if xs.h then Con { h = xs.t.h; t = foo xs.t.t } else foo xs.t.t,
//│ ║         	                                                                  ^^^^^^
//│ ╟── from field selection:
//│ ║  l.161: 	  Con -> if xs.h then Con { h = xs.t.h; t = foo xs.t.t } else foo xs.t.t,
//│ ║         	                                                                  ^^^^
//│ ╟── Note: class N is defined at:
//│ ║  l.131: 	class N
//│ ╙──       	      ^
//│ res: error
//│ Runtime error:
//│   Error: non-exhaustive case expression


