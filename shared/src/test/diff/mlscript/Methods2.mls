
class Option[A]
    method Get: A
    method Destruct: Some[A] | None[A]
class Some[A]: Option[A] & { payload: A }
    method Get = this.payload
    method Destruct = this
class None[A]: Option[A]
    method Get = error
    method Destruct = this
//│ Defined class Option[+A]
//│ Declared Option.Get: Option['A] -> 'A
//│ Declared Option.Destruct: Option['A] -> (None['A] | Some['A])
//│ Defined class Some[+A]
//│ Defined Some.Get: Some['A] -> 'A
//│ Defined Some.Destruct: (Some['A] & 'this) -> (Some['A] & 'this)
//│ Defined class None[+A]
//│ Defined None.Get: None[?] -> nothing
//│ Defined None.Destruct: (None['A] & 'this) -> (None['A] & 'this)


class List[A]
    method Size: int
    method HeadOption: Option[A]
    method Map[B]: (A -> B) -> List[B]
//│ Defined class List[+A]
//│ Declared List.Size: List[?] -> int
//│ Declared List.HeadOption: List['A] -> Option['A]
//│ Declared List.Map: List['A] -> ('A -> 'B) -> List['B]

class Nil[A]: List[A]
    method Size = 0
    method HeadOption = None {}
    method Map[B] f = Nil {}
//│ Defined class Nil[+A]
//│ Defined Nil.Size: Nil[?] -> 0
//│ Defined Nil.HeadOption: Nil[?] -> None[nothing]
//│ Defined Nil.Map: Nil[?] -> anything -> Nil[nothing]

class Cons[A]: List[A] & { head: A; tail: List[A] }
    method Size = succ this.tail.Size
    method HeadOption = Some { payload = this.head }
    method Map[B] f = Cons { head = f this.head; tail = this.tail.Map f }
//│ Defined class Cons[+A]
//│ Defined Cons.Size: Cons[?] -> int
//│ Defined Cons.HeadOption: Cons['A] -> Some['A]
//│ Defined Cons.Map: Cons['A] -> ('A -> 'B) -> Cons['B]

// Note that the useless `with {tail: List['A]}` refinement is kept
//  because the approximate subtyping check `list & {List#A = 'A} <: List['A]` currently returns false
//  as we do not try to expand type aliases right now.
Cons.Size
//│ res: Cons[?] -> int
//│    = undefined

List.HeadOption
//│ res: List['A] -> Option['A]
//│    = undefined

Cons.HeadOption
//│ res: Cons['A] -> Some['A]
//│    = undefined

l = Cons { head = 0; tail = Cons { head = 1; tail = Nil {} } }
//│ l: Cons[0 | 1] with {head: 0, tail: Cons[1] with {tail: Nil[nothing]}}
//│  = Cons { head: 0, tail: Cons { head: 1, tail: Nil {} } }

l.Size
//│ res: int
//│    = 2

:stats
l.Map (fun x -> mul x 2)
//│ res: List[int]
//│    = Cons { head: 0, tail: Cons { head: 2, tail: Nil {} } }
//│ constrain calls  : 76
//│ annoying  calls  : 6
//│ subtyping calls  : 12

l0 = Cons { head = 0; tail = Nil {} }
//│ l0: Cons[0] with {tail: Nil[nothing]}
//│   = Cons { head: 0, tail: Nil {} }

:re
:stats
Cons.HeadOption l0
//│ res: Some[0]
//│ Runtime error:
//│   TypeError: (intermediate value).HeadOption is not a function
//│ constrain calls  : 27
//│ annoying  calls  : 9
//│ subtyping calls  : 59


l1 = Cons { head = 0; tail = Nil {} }
//│ l1: Cons[0] with {tail: Nil[nothing]}
//│   = Cons { head: 0, tail: Nil {} }

:re
:stats
Cons.HeadOption l1
//│ res: Some[0]
//│ Runtime error:
//│   TypeError: (intermediate value).HeadOption is not a function
//│ constrain calls  : 27
//│ annoying  calls  : 9
//│ subtyping calls  : 59

:re
:stats
Cons.HeadOption l
//│ res: Some[0 | 1]
//│ Runtime error:
//│   TypeError: (intermediate value).HeadOption is not a function
//│ constrain calls  : 33
//│ annoying  calls  : 9
//│ subtyping calls  : 108

:stats
o = l.(Cons.HeadOption)
//│ o: Some[0 | 1]
//│  = undefined
//│ constrain calls  : 31
//│ annoying  calls  : 9
//│ subtyping calls  : 108

o = l.(Cons.HeadOption)
//│ o: Some[0 | 1]
//│  = undefined

o = l.HeadOption
//│ o: Option[0 | 1]
//│  = Some { payload: 0 }

:e
case o of {None -> 0 | Some -> o.payload}
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.136: 	case o of {None -> 0 | Some -> o.payload}
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Option[?A]` does not match type `None[?] & ?a | Some[?] & ?b`
//│ ║  l.24: 	    method HeadOption: Option[A]
//│ ║        	                       ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `None[?] & ?a | Some[?] & ?c`
//│ ║  l.136: 	case o of {None -> 0 | Some -> o.payload}
//│ ╙──       	     ^
//│ res: 0
//│    = 0

v = o.Destruct
case v of {None -> 0 | Some -> v.payload}
//│ v: None[0 | 1] | Some[0 | 1]
//│  = Some { payload: 0 }
//│ res: 0 | 1
//│    = 0


def newHeadOption x = case x of {
    | Cons -> Some {payload = x.head}
    | _ -> None{}
    }
//│ newHeadOption: (Cons[?] & {head: 'payload} | ~Cons[?]) -> (None[nothing] | Some['payload])
//│              = [Function: newHeadOption]

// Note that `o` is not a list, so this takes the default case:
newHeadOption o
//│ res: None[nothing] | Some[nothing]
//│    = None {}

newHeadOption l
//│ res: None[nothing] | Some[0]
//│    = Some { payload: 0 }

case res of {None -> 0 | Some -> res.payload}
//│ res: 0
//│    = 0


// Idiomatic definition for proper matching: `type Option[A] = Some[A] | None[A]`
:e
case o of {
    Some -> o.Get | None -> 0 }
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.180: 	case o of {
//│ ║         	^^^^^^^^^^^
//│ ║  l.181: 	    Some -> o.Get | None -> 0 }
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Option[?A]` does not match type `None[?] & ?a | Some[?] & ?b`
//│ ║  l.24: 	    method HeadOption: Option[A]
//│ ║        	                       ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `None[?] & ?a | Some[?] & ?c`
//│ ║  l.180: 	case o of {
//│ ╙──       	     ^
//│ res: 0 | 1
//│    = 0

case o of {
    Some -> o.Get | None -> 0 | Option -> error }
//│ res: 0 | 1
//│    = 0

