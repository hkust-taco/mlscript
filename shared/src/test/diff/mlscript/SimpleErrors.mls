:AllowTypeErrors

succ false
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.3: 	succ false
//│ ║       	^^^^^^^^^^
//│ ╟── reference of type `false` is not an instance of type `int`
//│ ║  l.3: 	succ false
//│ ╙──     	     ^^^^^
//│ res: error | int

x = "oops"
//│ x: "oops"

f y = succ y
//│ f: int -> int

:e
f x
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.19: 	f x
//│ ║        	^^^
//│ ╟── string literal of type `"oops"` is not an instance of type `int`
//│ ║  l.12: 	x = "oops"
//│ ║        	    ^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.19: 	f x
//│ ║        	  ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.15: 	f y = succ y
//│ ╙──      	           ^
//│ res: error | int



trait MyTrait: { value: anything }
//│ Defined trait MyTrait

def test1 x = case x of { MyTrait -> x.value | _ -> 0 }
//│ test1: ({value: 'value} & #MyTrait | ~#MyTrait) -> ('value | 0)

:e
test1 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.43: 	test1 1
//│ ║        	^^^^^^^
//│ ╟── expression of type `1 & ~?a | 1 & #MyTrait` does not have field 'value'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.39: 	def test1 x = case x of { MyTrait -> x.value | _ -> 0 }
//│ ║        	                                     ^^^^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.39: 	def test1 x = case x of { MyTrait -> x.value | _ -> 0 }
//│ ╙──      	                   ^
//│ res: error | 0


def map: 'a -> 'a
def map f = f map (fun x -> map)
//│ map: 'a -> 'a
//│ ((forall 'a. 'a -> 'a) -> (forall 'a0. anything -> 'a0 -> 'a0) -> 'b) -> 'b
//│   <:  map:
//│ 'a -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.58: 	def map f = f map (fun x -> map)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'a` is not a function
//│ ║  l.57: 	def map: 'a -> 'a
//│ ║        	         ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.58: 	def map f = f map (fun x -> map)
//│ ║        	            ^^^^^
//│ ╟── from reference:
//│ ║  l.58: 	def map f = f map (fun x -> map)
//│ ╙──      	            ^


class Bar
    method Map[B]: B -> B
    rec method Map f = f 1
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.79: 	    rec method Map f = f 1
//│ ║        	               ^^^^^^^^^^^
//│ ╟── type `B` is not a function
//│ ║  l.78: 	    method Map[B]: B -> B
//│ ║        	               ^
//│ ╟── Note: constraint arises from application:
//│ ║  l.79: 	    rec method Map f = f 1
//│ ║        	                       ^^^
//│ ╟── from reference:
//│ ║  l.79: 	    rec method Map f = f 1
//│ ╙──      	                       ^
//│ Defined class Bar
//│ Declared Bar.Map: Bar -> 'B -> 'B
//│ Defined Bar.Map: Bar -> (1 -> 'a) -> 'a


def boom: anything
//│ boom: anything

// :d
:e
add boom 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.102: 	add boom 1
//│ ║         	^^^^^^^^
//│ ╟── type `anything` is not an instance of type `int`
//│ ║  l.97: 	def boom: anything
//│ ║        	          ^^^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.102: 	add boom 1
//│ ╙──       	    ^^^^
//│ res: int | error


