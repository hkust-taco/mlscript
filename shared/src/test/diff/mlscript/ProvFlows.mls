:AllowTypeErrors


x1 = false
x2 = x1
x3 = x2
//│ x1: false
//│ x2: false
//│ x3: false

:ex
succ x3
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.12: 	succ x3
//│ ║        	^^^^^^^
//│ ╟── expression of type `false` does not match type `int`
//│ ║  l.4: 	x1 = false
//│ ║       	     ^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.12: 	succ x3
//│ ║        	     ^^
//│ ╟── ========= Additional explanations below =========
//│ ╟── [info] flowing from expression of type `false`
//│ ╟── [info] flowing from reference of type `false`
//│ ║  l.4: 	x1 = false
//│ ║       	     ^^^^^
//│ ╟── [info] flowing from reference of type `false`
//│ ║  l.5: 	x2 = x1
//│ ║       	     ^^
//│ ╟── [info] flowing from reference of type `false`
//│ ║  l.6: 	x3 = x2
//│ ║       	     ^^
//│ ╟── [info] flowing from reference of type `false`
//│ ║  l.12: 	succ x3
//│ ║        	     ^^
//│ ╙── [info] flowing into expression of type `int`
//│ res: error | int


f1 y1 = succ y1
f2 y2 = f1 y2
f3 y3 = f2 y3
//│ f1: int -> int
//│ f2: int -> int
//│ f3: int -> int

:ex
f3 true
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.48: 	f3 true
//│ ║        	^^^^^^^
//│ ╟── expression of type `true` does not match type `int`
//│ ║  l.48: 	f3 true
//│ ║        	   ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.40: 	f1 y1 = succ y1
//│ ║        	             ^^
//│ ╟── from reference:
//│ ║  l.42: 	f3 y3 = f2 y3
//│ ║        	           ^^
//│ ╟── ========= Additional explanations below =========
//│ ╟── [info] flowing from expression of type `true`
//│ ╟── [info] flowing from reference of type `true`
//│ ║  l.48: 	f3 true
//│ ║        	   ^^^^
//│ ╟── [info] flowing into variable of type `?a`
//│ ╟── [info] flowing into variable of type `?b`
//│ ╟── [info] flowing into reference of type `?c`
//│ ║  l.42: 	f3 y3 = f2 y3
//│ ║        	           ^^
//│ ╟── [info] flowing into variable of type `?d`
//│ ╟── [info] flowing into variable of type `?e`
//│ ╟── [info] flowing into variable of type `?f`
//│ ╟── [info] flowing into reference of type `?g`
//│ ║  l.41: 	f2 y2 = f1 y2
//│ ║        	           ^^
//│ ╟── [info] flowing into variable of type `?h`
//│ ╟── [info] flowing into variable of type `?i`
//│ ╟── [info] flowing into variable of type `int`
//│ ╟── [info] flowing into reference of type `int`
//│ ║  l.40: 	f1 y1 = succ y1
//│ ║        	             ^^
//│ ╙── [info] flowing into expression of type `int`
//│ res: error | int


:ex
f3 x3
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.88: 	f3 x3
//│ ║        	^^^^^
//│ ╟── expression of type `false` does not match type `int`
//│ ║  l.4: 	x1 = false
//│ ║       	     ^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.88: 	f3 x3
//│ ║        	   ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.40: 	f1 y1 = succ y1
//│ ║        	             ^^
//│ ╟── from reference:
//│ ║  l.42: 	f3 y3 = f2 y3
//│ ║        	           ^^
//│ ╟── ========= Additional explanations below =========
//│ ╟── [info] flowing from expression of type `false`
//│ ╟── [info] flowing from reference of type `false`
//│ ║  l.4: 	x1 = false
//│ ║       	     ^^^^^
//│ ╟── [info] flowing from reference of type `false`
//│ ║  l.5: 	x2 = x1
//│ ║       	     ^^
//│ ╟── [info] flowing from reference of type `false`
//│ ║  l.6: 	x3 = x2
//│ ║       	     ^^
//│ ╟── [info] flowing from reference of type `false`
//│ ║  l.88: 	f3 x3
//│ ║        	   ^^
//│ ╟── [info] flowing into variable of type `?a`
//│ ╟── [info] flowing into variable of type `?b`
//│ ╟── [info] flowing into reference of type `?c`
//│ ║  l.42: 	f3 y3 = f2 y3
//│ ║        	           ^^
//│ ╟── [info] flowing into variable of type `?d`
//│ ╟── [info] flowing into variable of type `?e`
//│ ╟── [info] flowing into variable of type `?f`
//│ ╟── [info] flowing into reference of type `?g`
//│ ║  l.41: 	f2 y2 = f1 y2
//│ ║        	           ^^
//│ ╟── [info] flowing into variable of type `?h`
//│ ╟── [info] flowing into variable of type `?i`
//│ ╟── [info] flowing into variable of type `int`
//│ ╟── [info] flowing into reference of type `int`
//│ ║  l.40: 	f1 y1 = succ y1
//│ ║        	             ^^
//│ ╙── [info] flowing into expression of type `int`
//│ res: error | int


h1 f x = f x
h2 f x = h1 f x
h3 f x = h2 f x
//│ h1: ('a -> 'b) -> 'a -> 'b
//│ h2: ('a -> 'b) -> 'a -> 'b
//│ h3: ('a -> 'b) -> 'a -> 'b

:ex
h3 f3 x3
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.147: 	h3 f3 x3
//│ ║         	^^^^^^^^
//│ ╟── expression of type `false` does not match type `int`
//│ ║  l.4: 	x1 = false
//│ ║       	     ^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.147: 	h3 f3 x3
//│ ║         	      ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.40: 	f1 y1 = succ y1
//│ ║        	             ^^
//│ ╟── from reference:
//│ ║  l.141: 	h3 f x = h2 f x
//│ ║         	              ^
//│ ╟── ========= Additional explanations below =========
//│ ╟── [info] flowing from expression of type `false`
//│ ╟── [info] flowing from reference of type `false`
//│ ║  l.4: 	x1 = false
//│ ║       	     ^^^^^
//│ ╟── [info] flowing from reference of type `false`
//│ ║  l.5: 	x2 = x1
//│ ║       	     ^^
//│ ╟── [info] flowing from reference of type `false`
//│ ║  l.6: 	x3 = x2
//│ ║       	     ^^
//│ ╟── [info] flowing from reference of type `false`
//│ ║  l.147: 	h3 f3 x3
//│ ║         	      ^^
//│ ╟── [info] flowing into variable of type `?a`
//│ ╟── [info] flowing into variable of type `?b`
//│ ╟── [info] flowing into reference of type `?c`
//│ ║  l.141: 	h3 f x = h2 f x
//│ ║         	              ^
//│ ╟── [info] flowing into variable of type `?d`
//│ ╟── [info] flowing into variable of type `?e`
//│ ╟── [info] flowing into variable of type `?f`
//│ ╟── [info] flowing into reference of type `?g`
//│ ║  l.140: 	h2 f x = h1 f x
//│ ║         	              ^
//│ ╟── [info] flowing into variable of type `?h`
//│ ╟── [info] flowing into variable of type `?i`
//│ ╟── [info] flowing into variable of type `?j`
//│ ╟── [info] flowing into reference of type `?k`
//│ ║  l.139: 	h1 f x = f x
//│ ║         	           ^
//│ ╟── [info] flowing into variable of type `?l`
//│ ╟── [info] flowing into variable of type `?m`
//│ ╟── [info] flowing into variable of type `?n`
//│ ╟── [info] flowing into reference of type `?o`
//│ ║  l.42: 	f3 y3 = f2 y3
//│ ║        	           ^^
//│ ╟── [info] flowing into variable of type `?p`
//│ ╟── [info] flowing into variable of type `?q`
//│ ╟── [info] flowing into variable of type `?r`
//│ ╟── [info] flowing into reference of type `?s`
//│ ║  l.41: 	f2 y2 = f1 y2
//│ ║        	           ^^
//│ ╟── [info] flowing into variable of type `?t`
//│ ╟── [info] flowing into variable of type `?u`
//│ ╟── [info] flowing into variable of type `int`
//│ ╟── [info] flowing into reference of type `int`
//│ ║  l.40: 	f1 y1 = succ y1
//│ ║        	             ^^
//│ ╙── [info] flowing into expression of type `int`
//│ res: error | int


:ex
(fun x -> succ x) false
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.217: 	(fun x -> succ x) false
//│ ║         	     ^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `false` does not match type `int`
//│ ║  l.217: 	(fun x -> succ x) false
//│ ║         	                  ^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.217: 	(fun x -> succ x) false
//│ ║         	               ^
//│ ╟── ========= Additional explanations below =========
//│ ╟── [info] flowing from expression of type `false`
//│ ╟── [info] flowing from reference of type `false`
//│ ║  l.217: 	(fun x -> succ x) false
//│ ║         	                  ^^^^^
//│ ╟── [info] flowing into variable of type `?a`
//│ ╟── [info] flowing into variable of type `int`
//│ ╟── [info] flowing into reference of type `int`
//│ ║  l.217: 	(fun x -> succ x) false
//│ ║         	               ^
//│ ╙── [info] flowing into expression of type `int`
//│ res: error | int

// :d
:ex
rec def x = add x
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.242: 	rec def x = add x
//│ ║         	            ^^^^^
//│ ╟── expression of type `int -> int` does not match type `int`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.242: 	rec def x = add x
//│ ║         	                ^
//│ ╟── ========= Additional explanations below =========
//│ ╟── [info] flowing from expression of type `int -> int`
//│ ╟── [info] flowing from application of type `int -> int`
//│ ║  l.242: 	rec def x = add x
//│ ║         	            ^^^^^
//│ ╟── [info] flowing from application of type `?a`
//│ ║  l.242: 	rec def x = add x
//│ ║         	            ^^^^^
//│ ╟── [info] flowing into expression of type `?b`
//│ ╟── [info] flowing into reference of type `int`
//│ ║  l.242: 	rec def x = add x
//│ ║         	                ^
//│ ╙── [info] flowing into expression of type `int`
//│ x: int -> int


def foo: int | string
//│ foo: int | string

:ex
succ foo
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.270: 	succ foo
//│ ║         	^^^^^^^^
//│ ╟── expression of type `string` does not match type `int`
//│ ║  l.266: 	def foo: int | string
//│ ║         	               ^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.270: 	succ foo
//│ ║         	     ^^^
//│ ╟── ========= Additional explanations below =========
//│ ╟── [info] flowing from expression of type `string`
//│ ╟── [info] flowing from type reference of type `string`
//│ ║  l.266: 	def foo: int | string
//│ ║         	               ^^^^^^
//│ ╟── [info] flowing from union type of type `int | string`
//│ ║  l.266: 	def foo: int | string
//│ ║         	         ^^^^^^^^^^^^
//│ ╟── [info] flowing from reference of type `int | string`
//│ ║  l.270: 	succ foo
//│ ║         	     ^^^
//│ ╙── [info] flowing into expression of type `int`
//│ res: error | int



class A
class B
//│ Defined class A
//│ Defined class B

def ty00: ('a & A | 'b & B) -> ('a, 'b)
//│ ty00: (A & 'a | B & 'b) -> ('a, 'b,)

def ty11: ('a & A | 'a & B) -> ('a, 'a)
//│ ty11: (A & 'a | B & 'a) -> ('a, 'a,)

ty11 = ty00
//│ (A & 'a | B & 'b) -> ('a, 'b,)
//│   <:  ty11:
//│ (A & 'a | B & 'a) -> ('a, 'a,)

// :d
:ex
ty00 = ty11
//│ (A & 'a | B & 'a) -> ('a, 'a,)
//│   <:  ty00:
//│ (A & 'a | B & 'b) -> ('a, 'b,)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.314: 	ty00 = ty11
//│ ║         	^^^^^^^^^^^
//│ ╟── expression of type `B & 'b` does not match type `'a`
//│ ║  l.301: 	def ty00: ('a & A | 'b & B) -> ('a, 'b)
//│ ║         	                    ^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.301: 	def ty00: ('a & A | 'b & B) -> ('a, 'b)
//│ ║         	                                ^^
//│ ╟── ========= Additional explanations below =========
//│ ╟── [info] flowing from expression of type `B & 'b`
//│ ╟── [info] flowing from intersection type of type `B & 'b`
//│ ║  l.301: 	def ty00: ('a & A | 'b & B) -> ('a, 'b)
//│ ║         	                    ^^^^^^
//│ ╟── [info] flowing from union type of type `B & 'b`
//│ ║  l.301: 	def ty00: ('a & A | 'b & B) -> ('a, 'b)
//│ ║         	           ^^^^^^^^^^^^^^^
//│ ╟── [info] flowing from union type of type `B & 'b`
//│ ║  l.304: 	def ty11: ('a & A | 'a & B) -> ('a, 'a)
//│ ║         	           ^^^^^^^^^^^^^^^
//│ ╟── [info] flowing from expression of type `?a`
//│ ╟── [info] flowing from type variable of type `?a0`
//│ ║  l.304: 	def ty11: ('a & A | 'a & B) -> ('a, 'a)
//│ ║         	                                ^^
//│ ╟── [info] flowing into type variable of type `'a`
//│ ║  l.301: 	def ty00: ('a & A | 'b & B) -> ('a, 'b)
//│ ║         	                                ^^
//│ ╙── [info] flowing into expression of type `'a`
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.314: 	ty00 = ty11
//│ ║         	^^^^^^^^^^^
//│ ╟── expression of type `A & 'a` does not match type `'b`
//│ ║  l.301: 	def ty00: ('a & A | 'b & B) -> ('a, 'b)
//│ ║         	           ^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.301: 	def ty00: ('a & A | 'b & B) -> ('a, 'b)
//│ ║         	                                    ^^
//│ ╟── ========= Additional explanations below =========
//│ ╟── [info] flowing from expression of type `A & 'a`
//│ ╟── [info] flowing from intersection type of type `A & 'a`
//│ ║  l.301: 	def ty00: ('a & A | 'b & B) -> ('a, 'b)
//│ ║         	           ^^^^^^
//│ ╟── [info] flowing from union type of type `A & 'a`
//│ ║  l.301: 	def ty00: ('a & A | 'b & B) -> ('a, 'b)
//│ ║         	           ^^^^^^^^^^^^^^^
//│ ╟── [info] flowing from union type of type `A & 'a`
//│ ║  l.304: 	def ty11: ('a & A | 'a & B) -> ('a, 'a)
//│ ║         	           ^^^^^^^^^^^^^^^
//│ ╟── [info] flowing from expression of type `?a`
//│ ╟── [info] flowing from type variable of type `?a0`
//│ ║  l.304: 	def ty11: ('a & A | 'a & B) -> ('a, 'a)
//│ ║         	                                    ^^
//│ ╟── [info] flowing into type variable of type `'b`
//│ ║  l.301: 	def ty00: ('a & A | 'b & B) -> ('a, 'b)
//│ ║         	                                    ^^
//│ ╙── [info] flowing into expression of type `'b`

