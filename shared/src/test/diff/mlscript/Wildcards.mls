

:e
42: ?
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.4: 	42: ?
//│ ║       	^^
//│ ╟── integer literal of type `42` does not match type `nothing`
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.4: 	42: ?
//│ ╙──     	    ^
//│ res: anything
//│    = 42

def n: ?
n = 42
//│ n: anything
//│  = <missing implementation>
//│ 42
//│   <:  n:
//│ anything
//│  = 42


def f x = x : ?
//│ f: nothing -> anything
//│  = [Function: f]

class E[A]
//│ Defined class E

:e
E{} : E[?]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.33: 	E{} : E[?]
//│ ║        	^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.33: 	E{} : E[?]
//│ ║        	        ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.33: 	E{} : E[?]
//│ ╙──      	        ^
//│ res: E[?]
//│    = E {}

def e: E[?]
def e = E{}
//│ e: E[?]
//│  = <missing implementation>
//│ E['A]
//│   <:  e:
//│ E[?]
//│  = E {}


type Als1[A] = int -> A
//│ Defined type alias Als1

:e
add 1 : Als1[?]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.60: 	add 1 : Als1[?]
//│ ║        	^^^^^
//│ ╟── expression of type `int` does not match type `nothing`
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.60: 	add 1 : Als1[?]
//│ ╙──      	             ^
//│ res: int -> anything
//│    = [Function (anonymous)]

def a1: Als1[?]
a1 = add 1
//│ a1: int -> anything
//│   = <missing implementation>
//│ int -> int
//│   <:  a1:
//│ int -> anything
//│   = [Function (anonymous)]


type Als2[A] = A -> int
//│ Defined type alias Als2

:e
add 1 : Als2[?]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.85: 	add 1 : Als2[?]
//│ ║        	^^^^^
//│ ╟── type `anything` does not match type `int`
//│ ║  l.85: 	add 1 : Als2[?]
//│ ╙──      	             ^
//│ res: nothing -> int
//│    = [Function (anonymous)]

def a2: Als2[?]
a2 = add 1
//│ a2: nothing -> int
//│   = <missing implementation>
//│ int -> int
//│   <:  a2:
//│ nothing -> int
//│   = [Function (anonymous)]


def q: ?
//│ q: anything
//│  = <missing implementation>

q = 1
//│ 1
//│   <:  q:
//│ anything
//│  = 1

:e
q + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.116: 	q + 1
//│ ║         	^^^
//│ ╟── type `anything` does not match type `int`
//│ ║  l.105: 	def q: ?
//│ ║         	       ^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.116: 	q + 1
//│ ╙──       	^
//│ res: error | int
//│    = 2

:e
q q
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.130: 	q q
//│ ║         	^^^
//│ ╟── type `anything` is not a function
//│ ║  l.105: 	def q: ?
//│ ║         	       ^
//│ ╟── but it flows into reference with expected type `anything -> ?a`
//│ ║  l.130: 	q q
//│ ╙──       	^
//│ res: error
//│ Runtime error:
//│   TypeError: q is not a function

