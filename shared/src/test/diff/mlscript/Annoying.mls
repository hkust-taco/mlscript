:NoJS
// :NoProvs

def foo: ~int\x
//│ foo: ~int\x

foo: ~(int\x)
//│ res: ~int\x

foo: (~int)\x
//│ res: ~int

res: ~(int\x)
//│ res: ~int\x


def foo: (~ 'a \ x) -> 'a -> 'a
//│ foo: ~'a\x -> 'a -> 'a

foo 1
//│ res: ('a & ~1) -> 'a

def foo: (~ 'a \ x) -> 'a
//│ foo: anything -> nothing

foo 1
//│ res: nothing


class X: {}
//│ Defined class X

def v0: (~(X\x))\y
//│ v0: ~X\x\y

:e
v0: int
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.37: 	v0: int
//│ ║        	^^
//│ ╟── type `~X\x\y` is not an instance of type `int`
//│ ║  l.33: 	def v0: (~(X\x))\y
//│ ║        	        ^^^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.37: 	v0: int
//│ ║        	^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.37: 	v0: int
//│ ╙──      	    ^^^
//│ res: int



// def test: (int | { x: 'a } | { y: 'a }) -> 'a
def test: (int & { f: 'a } | { x: 'a } | { y: 'a }) -> 'a
//│ test: anything -> nothing

:e
def test x = case x of { int -> x.f | _ -> x.x }
//│ (int & {f: 'f} | {x: 'f} & ~int) -> 'f
//│   <:  test:
//│ anything -> nothing
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.59: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `int & {x: 'a} | {x: 'a} & ~?a` does not have field 'f'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.59: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	                                ^^^
//│ ╟── from refined scrutinee:
//│ ║  l.59: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ╙──      	                  ^

// Note: not an error, but a terminating `test` can't be implemented
test 1
//│ res: nothing

test { x = 1 }
//│ res: nothing

test { y = 1 }
//│ res: nothing


class A: { }
class B: { }
class C: { }
//│ Defined class A
//│ Defined class B
//│ Defined class C

def test: (A & { a: 'a } | B & { b: 'a } | C & { c: 'a }) -> 'a
//│ test: (A & {a: 'a} | B & {b: 'a} | C & {c: 'a}) -> 'a

test (error: A & { a: int })
test (error: B & { b: int })
test (error: C & { c: int })
//│ res: int
//│ res: int
//│ res: int

:e
test (error: B & { c: int })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.103: 	test (error: B & { c: int })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `B & {c: int}` does not match type `A & {a: 'a} | B & {b: 'a} | C & {c: 'a}`
//│ ║  l.103: 	test (error: B & { c: int })
//│ ║         	             ^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.92: 	def test: (A & { a: 'a } | B & { b: 'a } | C & { c: 'a }) -> 'a
//│ ╙──      	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error


def test: (A & { x: 'a; y: 'b } | B & { x: 'a; y: 'b } | C & { x: 'a; y: 'b }) -> { l: 'a; r: 'b }
//│ test: (A & {x: 'a, y: 'b} | B & {x: 'a, y: 'b} | C & {x: 'a, y: 'b}) -> {l: 'a, r: 'b}

test (error: A & { x: int; y: string })
test (error: B & { x: int; y: string })
test (error: C & { x: int; y: string })
//│ res: {l: int, r: string}
//│ res: {l: int, r: string}
//│ res: {l: int, r: string}

:e
test (error: A & { x: int })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.127: 	test (error: A & { x: int })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `A & {x: int}` does not match type `A & {x: 'a, y: 'b} | B & {x: 'a, y: 'b} | C & {x: 'a, y: 'b}`
//│ ║  l.127: 	test (error: A & { x: int })
//│ ║         	             ^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.116: 	def test: (A & { x: 'a; y: 'b } | B & { x: 'a; y: 'b } | C & { x: 'a; y: 'b }) -> { l: 'a; r: 'b }
//│ ╙──       	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | {l: int, r: nothing}


def test: (A & { xA: 'a; yA: 'b } | B & { xB: 'a; yB: 'b } | C & { xC: 'a; yC: 'b }) -> { l: 'a; r: 'b }
//│ test: (A & {xA: 'a, yA: 'b} | B & {xB: 'a, yB: 'b} | C & {xC: 'a, yC: 'b}) -> {l: 'a, r: 'b}

test (error: A & { xA: int; yA: string })
test (error: B & { xB: int; yB: string })
test (error: C & { xC: int; yC: string })
//│ res: {l: int, r: string}
//│ res: {l: int, r: string}
//│ res: {l: int, r: string}


def negInt: ~int
//│ negInt: ~int

def v = negInt with { x = 1 }
//│ v: ~int & {x: 1}

v.x
//│ res: 1

(id v).x
//│ res: 1

:e
negInt: A | { x: 'a }
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.164: 	negInt: A | { x: 'a }
//│ ║         	^^^^^^
//│ ╟── type `~int` does not match type `A | {x: 'a}`
//│ ║  l.151: 	def negInt: ~int
//│ ║         	            ^^^^
//│ ╟── but it flows into reference with expected type `A | {x: 'a}`
//│ ║  l.164: 	negInt: A | { x: 'a }
//│ ║         	^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.164: 	negInt: A | { x: 'a }
//│ ╙──       	        ^^^^^^^^^^^^^
//│ res: A | {x: nothing}

v: A | { x: 'a }
//│ res: A | {x: 1}

(error: A) with { x = 1 }
//│ res: A\x & {x: 1}

// Note that we get {x: nothing} because the LHS is a subtype of A so 'a is not constrained
(error: A) with { x = 1 } : A | { x: 'a }
//│ res: A | {x: nothing}

id (error: A) with { x = 1 } : A | { x: 'a }
//│ res: A | {x: nothing}

def negWeird: ~(~(~(A & { x: int })))
//│ negWeird: in ~(A & {x: int}) out ~A

def v = negWeird with { x = 1 }
//│ v: {x: 1} & ~{x: int} | ~A\x & {x: 1}

def w: {x: 1} & ~{x: int} | ~A\x & {x: 1}
//│ w: {x: 1} & ~A\x

v: A | { x: 'a }
//│ res: A | {x: 1}


w: A | { x: 'a }
//│ res: A | {x: 1}

def v: {x: 1} & ~{x: int}
v: { x: 'a }
//│ v: nothing
//│ res: {x: nothing}

def v: A & {x: 1} & ~{x: int}
v: A & { x: 'a }
//│ v: nothing
//│ res: A & {x: nothing}


def funny = error: nothing\x
//│ funny: nothing

// It could be agrued this should fail... but that would make constraint solving more awkward!
funny.x
//│ res: nothing


:e
(error: { x: int }): int | string
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.228: 	(error: { x: int }): int | string
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── type `{x: int}` does not match type `int | string`
//│ ║  l.228: 	(error: { x: int }): int | string
//│ ║         	        ^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.228: 	(error: { x: int }): int | string
//│ ╙──       	                     ^^^^^^^^^^^^
//│ res: int | string


(error: (~ 'a) \ x): { x: int }
//│ res: {x: int}


idx = id with { x = 1 }
//│ idx: 'a -> 'a & {x: 1}

idx idx.x
//│ res: 1

def indirect i = i i.x
//│ indirect: ('x -> 'a & {x: 'x}) -> 'a

indirect idx
//│ res: 1

if true then id else idx
//│ res: 'a -> 'a

r =  if true then id with { x = "a"; y = "b" } else idx
//│ r: 'a -> 'a & {x: "a" | 1}

r r.x
//│ res: "a" | 1

indirect r
//│ res: "a" | 1

def takeFunOrRecord: (int -> int | { x: int }) -> int
//│ takeFunOrRecord: anything -> int

:pe
takeFunOrRecord x = case x of { { x = v } -> 0 | _ -> 1 }
//│ /!\ Parse error: Expected "}":1:33, found "{ x = v } " at l.273:33: takeFunOrRecord x = case x of { { x = v } -> 0 | _ -> 1 }

:pe
takeFunOrRecord x = case x of { { x } -> 0 | _ -> 1 }
//│ /!\ Parse error: Expected "}":1:33, found "{ x } -> 0" at l.277:33: takeFunOrRecord x = case x of { { x } -> 0 | _ -> 1 }

:pe
takeFunOrRecord x = case x of { (int -> int) -> 0 | _ -> 1 }
//│ /!\ Parse error: Expected "}":1:33, found "(int -> in" at l.281:33: takeFunOrRecord x = case x of { (int -> int) -> 0 | _ -> 1 }

:pe
takeFunOrRecord x = case x of { (->) -> 0 | _ -> 1 }
//│ /!\ Parse error: Expected "}":1:33, found "(->) -> 0 " at l.285:33: takeFunOrRecord x = case x of { (->) -> 0 | _ -> 1 }


class AA
trait TT
def ty: AA | ('a \ x)
def ty2: TT & { x: int }
// def ty: AA | (int -> int)
//│ Defined class AA
//│ Defined trait TT
//│ ty: in AA | nothing\x out AA
//│ ty2: TT & {x: int}

:e
ty = ty2
//│ TT & {x: int}
//│   <:  ty:
//│ AA | nothing\x
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.300: 	ty = ty2
//│ ║         	^^^^^^^^
//│ ╟── type `TT & {x: int}` does not match type `AA | 'a\x`
//│ ║  l.292: 	def ty2: TT & { x: int }
//│ ║         	         ^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `AA | 'a\x`
//│ ║  l.300: 	ty = ty2
//│ ║         	     ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.291: 	def ty: AA | ('a \ x)
//│ ╙──       	        ^^^^^^^^^^^^^


