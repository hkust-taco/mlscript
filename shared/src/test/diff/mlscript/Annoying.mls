
def foo: ~int\x
//│ foo: ~int

foo: ~(int\x)
//│ res: ~int

foo: (~int)\x
//│ res: ~int

// FIXME
res: ~(int\x)
//│ res: ~int


def foo: (~ 'a \ x) -> 'a -> 'a
//│ foo: ~'a\x -> 'a -> 'a

foo 1
//│ res: 'a & ~1 -> 'a

def foo: (~ 'a \ x) -> 'a
//│ foo: anything -> nothing

foo 1
//│ res: nothing


class X: {}
//│ Defined class X

def v0: (~(X\x))\y
//│ v0: ~x

:e
v0: int
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.36: 	v0: int
//│ ║        	^^
//│ ╟── expression of type `~x` does not match type `int`
//│ ║  l.32: 	def v0: (~(X\x))\y
//│ ║        	           ^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.36: 	v0: int
//│ ║        	^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.36: 	v0: int
//│ ╙──      	    ^^^
//│ res: int



// def test: (int | { x: 'a } | { y: 'a }) -> 'a
def test: (int & { f: 'a } | { x: 'a } | { y: 'a }) -> 'a
//│ test: anything -> nothing

:e
def test x = case x of { int -> x.f | _ -> x.x }
//│ int & {f: 'a} | {x: 'a} & ~int -> 'a  <:  f: anything -> nothing
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.58: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `{x: _α52} & ~?a | int & {x: _α52}` does not match type `{f: ?b}`
//│ ║  l.54: 	def test: (int & { f: 'a } | { x: 'a } | { y: 'a }) -> 'a
//│ ║        	                             ^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.58: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	                                ^
//│ ╟── from refined scrutinee:
//│ ║  l.58: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ╙──      	                  ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.58: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `{y: _α52} & ~int` does not match type `{x: ?a}`
//│ ║  l.54: 	def test: (int & { f: 'a } | { x: 'a } | { y: 'a }) -> 'a
//│ ║        	                                         ^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.58: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	                                           ^
//│ ╟── from reference:
//│ ║  l.58: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ╙──      	                  ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.58: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `{y: _α52} & ~?a | int & {y: _α52}` does not match type `{f: ?b}`
//│ ║  l.54: 	def test: (int & { f: 'a } | { x: 'a } | { y: 'a }) -> 'a
//│ ║        	                                         ^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.58: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	                                ^
//│ ╟── from refined scrutinee:
//│ ║  l.58: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ╙──      	                  ^

// Note: not an error, but a terminating `test` can't be implemented
test 1
//│ res: nothing

test { x = 1 }
//│ res: nothing

test { y = 1 }
//│ res: nothing


class A: { }
class B: { }
class C: { }
//│ Defined class A
//│ Defined class B
//│ Defined class C

def test: (A & { a: 'a } | B & { b: 'a } | C & { c: 'a }) -> 'a
//│ test: a & {a: 'a} | b & {b: 'a} | c & {c: 'a} -> 'a

test (error: A & { a: int })
test (error: B & { b: int })
test (error: C & { c: int })
//│ res: int
//│ res: int
//│ res: int

:e
test (error: B & { c: int })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.126: 	test (error: B & { c: int })
//│ ║         	^^^^^^^^^^^
//│ ╟── expression of type `b & {c: int}` does not match type `a & {a: ?a} | b & {b: ?a} | c & {c: ?a}`
//│ ║  l.126: 	test (error: B & { c: int })
//│ ║         	             ^^^^^^^^^^^^^^
//│ ╟── but it flows into argument with expected type `a & {a: ?b} | b & {b: ?b} | c & {c: ?b}`
//│ ║  l.126: 	test (error: B & { c: int })
//│ ║         	      ^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.115: 	def test: (A & { a: 'a } | B & { b: 'a } | C & { c: 'a }) -> 'a
//│ ╙──       	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error


def test: (A & { x: 'a; y: 'b } | B & { x: 'a; y: 'b } | C & { x: 'a; y: 'b }) -> { l: 'a; r: 'b }
//│ test: a & {x: 'a, y: 'b} | b & {x: 'a, y: 'b} | c & {x: 'a, y: 'b} -> {l: 'a, r: 'b}

test (error: A & { x: int; y: string })
test (error: B & { x: int; y: string })
test (error: C & { x: int; y: string })
//│ res: {l: int, r: string}
//│ res: {l: int, r: string}
//│ res: {l: int, r: string}

:e
test (error: A & { x: int })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.153: 	test (error: A & { x: int })
//│ ║         	^^^^^^^^^^^
//│ ╟── expression of type `a & {x: int}` does not match type `a & {x: ?a, y: ?b} | b & {x: ?a, y: ?b} | c & {x: ?a, y: ?b}`
//│ ║  l.153: 	test (error: A & { x: int })
//│ ║         	             ^^^^^^^^^^^^^^
//│ ╟── but it flows into argument with expected type `a & {x: ?c, y: ?d} | b & {x: ?c, y: ?d} | c & {x: ?c, y: ?d}`
//│ ║  l.153: 	test (error: A & { x: int })
//│ ║         	      ^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.142: 	def test: (A & { x: 'a; y: 'b } | B & { x: 'a; y: 'b } | C & { x: 'a; y: 'b }) -> { l: 'a; r: 'b }
//│ ╙──       	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: {l: int, r: nothing} | error


def test: (A & { xA: 'a; yA: 'b } | B & { xB: 'a; yB: 'b } | C & { xC: 'a; yC: 'b }) -> { l: 'a; r: 'b }
//│ test: a & {yA: 'a, xA: 'b} | b & {yB: 'a, xB: 'b} | c & {yC: 'a, xC: 'b} -> {l: 'b, r: 'a}

test (error: A & { xA: int; yA: string })
test (error: B & { xB: int; yB: string })
test (error: C & { xC: int; yC: string })
//│ res: {l: int, r: string}
//│ res: {l: int, r: string}
//│ res: {l: int, r: string}


def negInt: ~int
//│ negInt: ~int

def v = negInt with { x = 1 }
//│ v: {x: 1} & ~int

v.x
//│ res: 1

(id v).x
//│ res: 1

:e
negInt: A | { x: 'a }
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.193: 	negInt: A | { x: 'a }
//│ ║         	^^^^^^
//│ ╟── expression of type `~int` does not match type `a | {x: ?a}`
//│ ║  l.180: 	def negInt: ~int
//│ ║         	            ^^^^
//│ ╟── but it flows into reference with expected type `a | {x: ?b}`
//│ ║  l.193: 	negInt: A | { x: 'a }
//│ ║         	^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.193: 	negInt: A | { x: 'a }
//│ ╙──       	        ^^^^^^^^^^^^^
//│ res: a | {x: nothing}

v: A | { x: 'a }
//│ res: a | {x: 1}

(error: A) with { x = 1 }
//│ res: a & {x: 1}

// Note that we get {x: nothing} because the LHS is a subtype of A so 'a is not constrained
(error: A) with { x = 1 } : A | { x: 'a }
//│ res: a | {x: nothing}

id (error: A) with { x = 1 } : A | { x: 'a }
//│ res: a | {x: nothing}

def negWeird: ~(~(~(A & { x: int })))
//│ negWeird: ~a

def v = negWeird with { x = 1 }
//│ v: {x: 1} & ~a

v: A | { x: 'a }
//│ res: a | {x: 1}


def funny = error: nothing\x
//│ funny: nothing

// It could be agrued this should fail... but that would make constraint solving more awkward!
funny.x
//│ res: nothing


:e
(error: { x: int }): int | string
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.240: 	(error: { x: int }): int | string
//│ ║         	 ^^^^^
//│ ╟── expression of type `{x: int}` does not match type `int | string`
//│ ║  l.240: 	(error: { x: int }): int | string
//│ ║         	        ^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.240: 	(error: { x: int }): int | string
//│ ╙──       	                     ^^^^^^^^^^^^
//│ res: int | string


(error: (~ 'a) \ x): { x: int }
//│ res: {x: int}


