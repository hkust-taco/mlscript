
(mut 1,): MutArray['a]
//│ res: MutArray['a]
//│   where
//│     'a :> 1
//│    = [ 1 ]

(mut 1, mut 2): MutArray['a]
//│ res: MutArray['a]
//│   where
//│     'a :> 1 | 2
//│    = [ 1, 2 ]

((fun t -> let tmp = t.1 <- 3 in t) ((mut 1, mut 2))): MutArray['a]
//│ res: MutArray['a]
//│   where
//│     'a :> 1 | 2 | 3
//│    = [ 1, 3 ]

((fun t -> let tmp = t.1 + 1 in t) ((mut 1, mut 2))): MutArray['a]
//│ res: MutArray['a]
//│   where
//│     'a :> 1 | 2
//│        <: int
//│    = [ 1, 2 ]

if true then (mut 1,) else (mut 2,)
//│ res: (mut in 'a out 1 | 2 | 'a,)
//│    = [ 1 ]

if true then (mut 1, mut 2) else (mut 3, mut 4)
//│ res: (mut in 'a out 1 | 3 | 'a, mut in 'b out 2 | 4 | 'b,)
//│    = [ 1, 2 ]

def t1: (mut 1, mut 2)
def t2: (mut 3, mut 4)
//│ t1: (mut 1, mut 2,)
//│   = <missing implementation>
//│ t2: (mut 3, mut 4,)
//│   = <missing implementation>

r = if true then t1 else t2
//│ r: (mut out 1 | 3, mut out 2 | 4,)
//│  = <no result>
//│    t1 is not implemented

:e
r._1 <- 1
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.48: 	r._1 <- 1
//│ ║        	^^^^^^^^^
//│ ╟── type `{mut 0: 1, mut 1: 2}` does not have field '_1'
//│ ║  l.35: 	def t1: (mut 1, mut 2)
//│ ║        	        ^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{mut _1: in ?a}`
//│ ║  l.48: 	r._1 <- 1
//│ ║        	^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.48: 	r._1 <- 1
//│ ╙──      	^^^^
//│ = <no result>
//│   r and t1 are not implemented


def t1: (mut 1 | 2 | 3)
def t2: (mut 2 | 3 | 4)
//│ t1: (mut 1 | 2 | 3,)
//│   = <missing implementation>
//│ t2: (mut 2 | 3 | 4,)
//│   = <missing implementation>

r = if true then t1 else t2
//│ r: (mut in 2 | 3 out 1 | 2 | 3 | 4,)
//│  = <no result>
//│    t1 is not implemented

r.0 <- if true then 2 else 3
//│ = <no result>
//│   r and t1 are not implemented

:e
r.0 <- if true then 2 else 1
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.82: 	r.0 <- if true then 2 else 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not match type `2 | 3 | 4`
//│ ║  l.82: 	r.0 <- if true then 2 else 1
//│ ║        	                           ^
//│ ╟── but it flows into application with expected type `2 | 3 | 4`
//│ ║  l.82: 	r.0 <- if true then 2 else 1
//│ ║        	          ^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.66: 	def t2: (mut 2 | 3 | 4)
//│ ║        	             ^^^^^^^^^
//│ ╟── from assigned selection:
//│ ║  l.82: 	r.0 <- if true then 2 else 1
//│ ╙──      	^^^
//│ = <no result>
//│   r and t1 are not implemented
