:NoConstrainedTypes
:DontDistributeForalls
:NoCycleCheck
:NoRecursiveTypes



def foo: (forall 'a. 'a -> 'a) -> int
//│ foo: (forall 'a. 'a -> 'a) -> int
//│    = <missing implementation>

foo f = f 42
//│ (42 -> 'a) -> 'a
//│   <:  foo:
//│ (forall 'a. 'a -> 'a) -> int
//│    = [Function: foo]

foo id
//│ res: int
//│    = 42

// Notice `f` is passed an arg of locally-quantified type 'a, which is extruded to `anything`:
bar f = foo (fun x -> let tmp = f x in x)
//│ bar: (??a -> anything) -> int
//│    = [Function: bar]

bar (fun x -> 0)
//│ res: int
//│    = 42

:e
bar succ
//│ ╔══[ERROR] Type error in application
//│ ║  l.32: 	bar succ
//│ ║        	^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.8: 	def foo: (forall 'a. 'a -> 'a) -> int
//│ ║       	                     ^^
//│ ╟── into type `int`
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.23: 	bar f = foo (fun x -> let tmp = f x in x)
//│ ╙──      	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int
//│    = 42

:e
bar (fun x -> case x of {})
//│ ╔══[ERROR] Type error in application
//│ ║  l.48: 	bar (fun x -> case x of {})
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.8: 	def foo: (forall 'a. 'a -> 'a) -> int
//│ ║       	                     ^^
//│ ╟── into reference of type `nothing`
//│ ║  l.48: 	bar (fun x -> case x of {})
//│ ║        	                   ^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.23: 	bar f = foo (fun x -> let tmp = f x in x)
//│ ╙──      	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int
//│ Runtime error:
//│ Error: non-exhaustive case expression


def f: 'a -> 'b
//│ f: anything -> nothing
//│  = <missing implementation>

def foo: (forall 'a. 'a -> 'b) -> 'b
//│ foo: (anything -> 'b) -> 'b
//│    = <missing implementation>


// Notice `id` returns its arg of locally-quantified type 'a, which is extruded to `anything`:
foo id
//│ res: ??a
//│    = <no result>
//│      foo is not implemented

:e
foo (fun a -> a + 1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.83: 	foo (fun a -> a + 1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'a` is not an instance of type `int`
//│ ║  l.71: 	def foo: (forall 'a. 'a -> 'b) -> 'b
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.83: 	foo (fun a -> a + 1)
//│ ║        	              ^
//│ ╟── Note: quantified type variable 'a is defined at:
//│ ║  l.71: 	def foo: (forall 'a. 'a -> 'b) -> 'b
//│ ╙──      	                 ^^
//│ res: error | int
//│    = <no result>
//│      foo is not implemented



