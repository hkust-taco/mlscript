
// * Strictly speaking, type preservation does not hold in the MLscript implementation,
// *  though this is merely a technicality that can be addressed in the formal language.
// * Consider the following example:

class C1
class C2: C1
class C3
//│ Defined class C1
//│ Defined class C2
//│ Defined class C3

def foo x = case x of {
  | C2 -> C3{}
  | _ -> x
  }
//│ foo: (C2 | 'a & ~#C2) -> (C3 | 'a)
//│    = [Function: foo]

c1 = C1{}
//│ c1: C1
//│   = C1 {}

r = foo c1
//│ r: C3 | C1 & ~#C2
//│  = C1 {}

// * Here we have the C1{} value typed at ~C2
r : ~C2
//│ res: ~C2
//│    = C1 {}

// * But that C1{} value cannot be typed at ~C2 directly!
:e
c1 : ~C2
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.35: 	c1 : ~C2
//│ ║        	^^
//│ ╟── application of type `C1` does not match type `~C2`
//│ ║  l.20: 	c1 = C1{}
//│ ║        	     ^^^^
//│ ╟── but it flows into reference with expected type `~C2`
//│ ║  l.35: 	c1 : ~C2
//│ ║        	^^
//│ ╟── Note: constraint arises from type negation:
//│ ║  l.35: 	c1 : ~C2
//│ ║        	     ^^^
//│ ╟── Note: class C1 is defined at:
//│ ║  l.6: 	class C1
//│ ╙──     	      ^^
//│ res: ~C2
//│    = C1 {}

// * The problem is resolved by saying that when instantiating a non-final class C1,
// *  we are really instantiating a hidden final C1_Impl version of it:

class C1_Impl: C1
//│ Defined class C1_Impl

c1 = C1_Impl{}
//│ c1: C1_Impl
//│   = C1_Impl {}

r = foo c1
//│ r: C3 | C1_Impl
//│  = C1_Impl {}

r : ~C2
//│ res: ~C2
//│    = C1_Impl {}

c1 : ~C2
//│ res: ~C2
//│    = C1_Impl {}


// * More concerning: trait constructors are unsound as long as we allow matching on traits!
// * Trait constructors were always a fringe feature that we wanted to eventually remove anyway.

trait T1
//│ Defined trait T1

rec def getNegT1 x = case x of {
  | T1 -> getNegT1 x
  | _ -> x
  }
//│ getNegT1: (#T1 | 'a & ~#T1) -> 'a
//│         = [Function: getNegT1]

nt1 = getNegT1 {}
//│ nt1: ~#T1
//│    = {}

T1
//│ res: 'a -> (#T1 & 'a)
//│    = [Function: build]

t1nt1 = T1 nt1
//│ t1nt1: nothing
//│      = {}

:re
t1nt1.lol "oops!"
//│ res: nothing
//│ Runtime error:
//│   TypeError: t1nt1.lol is not a function



