
def intToString: int -> string
def done x = case x of {}
//│ intToString: int -> string
//│ done: nothing -> nothing



class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add
//│ lit: (int & 'a) -> (Lit with {val: 'a})
//│ add: 'a -> 'b -> (Add['E .. 'E | 'a | 'b] with {lhs: 'a, rhs: 'b})



rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> 'b) -> ((Add[?]\rhs with {lhs: 'c}) | 'a & ~add as 'c) -> 'b

rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs + eval1_stub k e.rhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> int) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | 'a & ~add as 'b) -> int

:ns
rec def eval1_stub e = case e of {
  | Lit -> 1
  | Add -> eval1_stub e.lhs
  | _ -> 0
  }
//│ eval1_stub: 'a | (lit & 'c | (add & 'd & {lhs: 'b} | 'e & ~add) & ~lit as 'b) -> (1 | 'f | 0 as 'f)

eval1_stub
//│ res: ((Add[?]\rhs with {lhs: 'a}) | Lit | ~add & ~lit as 'a) -> (0 | 1)

// def eval1: ('b -> int) -> Expr['b] -> int
:stats
rec def eval1 k e = case e of {
  | Lit -> e.val
  | Add -> eval1 k e.lhs + eval1 k e.rhs
  | _ -> k e
  }
//│ eval1: ('a -> int) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit as 'b) -> int
//│ constrain calls  : 78
//│ annoying  calls  : 0
//│ subtyping calls  : 655

:ns
eval1
//│ res: 'a | ('b & 'c -> ('d & int) & 'c -> ('d & int)) -> (lit & 'f & {val: 'g & int} | (add & 'h & {rhs: 'e} & {lhs: 'e} | 'c & ~add) & ~lit as 'e) -> ('g | 'i | int | 'd)

error: ~Add[?]
//│ res: ~Add[?]

error: ('a & ~Lit) -> 'a
//│ res: ('a & ~{val: int} | 'a & ~lit) -> 'a

error: ('a & ~Add[?]) -> 'a
//│ res: ('a & ~{Add#E} | 'a & ~{lhs: anything} | 'a & ~{rhs: anything} | 'a & ~add) -> 'a

error: ('a & ~add) -> 'a
//│ res: ('a & ~add) -> 'a

:ns
def eval1_ty_ugly: ('a -> int) -> (Lit | Add['b] | 'a & ~Lit & ~Add[?] as 'b) -> int
//│ eval1_ty_ugly: ('a -> int) -> (Lit | Add['b .. Lit | Add['b .. 'b0] | 'a & ~Lit & ~Add[?] as 'b0] | 'a & ~Lit & ~Add[?] as 'b) -> int

eval1_ty_ugly // TODO simplify positive record negatins to bottom!
//│ res: ('a -> int) -> ((Add['d .. 'e] with {lhs: 'c, rhs: 'c}) & 'b | Lit & 'b | 'a & 'b & ~{val: int} & ~add | 'a & 'b & ~add & ~lit | 'a & 'b & ~{Add#E} & ~lit | 'a & 'b & ~{lhs: anything} & ~lit | 'a & 'b & ~{rhs: anything} & ~lit as 'c) -> int

:stats
def eval1_ty_ugly = eval1
//│ ('a -> int) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit as 'b) -> int
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> ((Add['d .. 'e] with {lhs: 'c, rhs: 'c}) & 'b | Lit & 'b | 'a & 'b & ~{val: int} & ~add | 'a & 'b & ~add & ~lit | 'a & 'b & ~{Add#E} & ~lit | 'a & 'b & ~{lhs: anything} & ~lit | 'a & 'b & ~{rhs: anything} & ~lit as 'c) -> int
//│ constrain calls  : 58
//│ annoying  calls  : 36
//│ subtyping calls  : 6988

:ns
def eval1_ty: ('a -> int) -> (Lit | Add['b] | 'a & ~lit & ~add as 'b) -> int
//│ eval1_ty: ('a -> int) -> (Lit | Add['b .. Lit | Add['b .. 'b0] | 'a & ~lit & ~add as 'b0] | 'a & ~lit & ~add as 'b) -> int

eval1_ty
//│ res: ('a -> int) -> ((Add['d .. 'e] with {lhs: 'c, rhs: 'c}) & 'b | Lit & 'b | 'a & 'b & ~add & ~lit as 'c) -> int

:stats
def eval1_ty = eval1
//│ ('a -> int) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit as 'b) -> int
//│   <:  eval1_ty:
//│ ('a -> int) -> ((Add['d .. 'e] with {lhs: 'c, rhs: 'c}) & 'b | Lit & 'b | 'a & 'b & ~add & ~lit as 'c) -> int
//│ constrain calls  : 58
//│ annoying  calls  : 36
//│ subtyping calls  : 1393

:stats
eval1_ty_ugly = eval1_ty
//│ ('a -> int) -> ((Add['d .. 'e] with {lhs: 'c, rhs: 'c}) & 'b | Lit & 'b | 'a & 'b & ~add & ~lit as 'c) -> int
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> ((Add['d .. 'e] with {lhs: 'c, rhs: 'c}) & 'b | Lit & 'b | 'a & 'b & ~{val: int} & ~add | 'a & 'b & ~add & ~lit | 'a & 'b & ~{Add#E} & ~lit | 'a & 'b & ~{lhs: anything} & ~lit | 'a & 'b & ~{rhs: anything} & ~lit as 'c) -> int
//│ constrain calls  : 14
//│ annoying  calls  : 1
//│ subtyping calls  : 6952

:stats
eval1_ty = eval1_ty_ugly
//│ ('a -> int) -> ((Add['d .. 'e] with {lhs: 'c, rhs: 'c}) & 'b | Lit & 'b | 'a & 'b & ~{val: int} & ~add | 'a & 'b & ~add & ~lit | 'a & 'b & ~{Add#E} & ~lit | 'a & 'b & ~{lhs: anything} & ~lit | 'a & 'b & ~{rhs: anything} & ~lit as 'c) -> int
//│   <:  eval1_ty:
//│ ('a -> int) -> ((Add['d .. 'e] with {lhs: 'c, rhs: 'c}) & 'b | Lit & 'b | 'a & 'b & ~add & ~lit as 'c) -> int
//│ constrain calls  : 14
//│ annoying  calls  : 1
//│ subtyping calls  : 7128


// Workaround:
:ns
type E1[A] = Lit | Add[E1[A]] | A & ~lit & ~add
def eval1_ty: ('a -> int) -> E1['a] -> int
//│ Defined type alias E1
//│ eval1_ty: ('a -> int) -> E1['a] -> int

eval1_ty
//│ res: ('a -> int) -> ((Add['c .. 'd] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit as 'b) -> int

:stats
def eval1_ty = eval1
//│ ('a -> int) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit as 'b) -> int
//│   <:  eval1_ty:
//│ ('a -> int) -> ((Add['c .. 'd] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit as 'b) -> int
//│ constrain calls  : 62
//│ annoying  calls  : 38
//│ subtyping calls  : 1136


rec def pretty1 k e = case e of {
  | Lit -> intToString e.val
  | Add -> concat (pretty1 k e.lhs) (pretty1 k e.rhs)
  | _ -> k e
  }
//│ pretty1: ('a -> string) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit as 'b) -> string

// TODO find out why the `prettier` types are not simplified more

:stats
rec def prettier1 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
  | _ -> k e
  }
//│ prettier1: ('a -> string) -> ('b -> int) -> ((Add[?] with {lhs: (Add[?] with {lhs: 'c, rhs: 'c}) | Lit | 'a & ~add & ~lit as 'c, rhs: (Add[?] with {lhs: 'd, rhs: 'd}) | Lit | 'a & ~add & ~lit as 'd}) & 'b | Lit | 'a & ~add & ~lit) -> string
//│ constrain calls  : 135
//│ annoying  calls  : 0
//│ subtyping calls  : 1489



:stats
e1 = Add{lhs = Lit {val = 1}; rhs = Add{lhs = Lit {val = 2}; rhs = Lit {val = 3}}}
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
//│ e1: Add['E .. 'E | (Add['E0 .. 'E0 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add['E0 .. 'E0 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│ res: int
//│ res: string
//│ res: string
//│ constrain calls  : 452
//│ annoying  calls  : 240
//│ subtyping calls  : 741

e1 = add (lit 1) (add (lit 2) (lit 3))
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
//│ e1: Add['E .. 'E | (Add['E0 .. 'E0 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add['E0 .. 'E0 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│ res: int
//│ res: string
//│ res: string



class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega
//│ nega: 'a -> (Nega['E .. 'E | 'a] with {arg: 'a})



rec def eval2 k = eval1 (fun x -> case x of {
  | Nega -> 0 - (eval2 k x.arg)
  | _ -> k x
  })
//│ eval2: ('a -> int) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | Lit | (Nega[?] with {arg: 'b}) | 'a & ~add & ~lit & ~nega as 'b) -> int


// FIXME particularly egregious type!
:stats
rec def prettier2 k ev = prettier1 (fun x -> case x of {
  | Nega -> concat "-" (prettier2 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier2: ('a -> string) -> ('b -> int) -> ((Add[?] with {lhs: 'd & ((Add[?] with {lhs: 'e, rhs: 'e}) | Lit | (Nega[?] with {arg: 'c}) | 'a & ~add & ~lit & ~nega as 'e), rhs: (Add[?] with {lhs: 'f, rhs: 'f}) | Lit | (Nega[?] with {arg: 'c}) | 'a & ~add & ~lit & ~nega as 'f}) & 'b | Lit | (Nega[?] with {arg: 'c}) | 'a & ~add & ~lit & ~nega as 'c) -> string
//│ constrain calls  : 169
//│ annoying  calls  : 0
//│ subtyping calls  : 28067



:stats
eval2 done e1
//│ res: int
//│ constrain calls  : 108
//│ annoying  calls  : 60
//│ subtyping calls  : 136

e2 = add (lit 1) (nega e1)
//│ e2: Add['E .. 'E | Lit & {val: 1} | (Nega['E0 .. 'E0 | (Add['E1 .. 'E1 | (Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}})] with {arg: Add['E1 .. 'E1 | (Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}})] with {lhs: Lit & {val: 1}, rhs: Nega['E0 .. 'E0 | (Add['E1 .. 'E1 | (Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}})] with {arg: Add['E1 .. 'E1 | (Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}}}

:stats
eval2 done e2
//│ res: int
//│ constrain calls  : 154
//│ annoying  calls  : 103
//│ subtyping calls  : 192

d2 = nega (add (lit 1) (nega (lit 1)))
//│ d2: Nega['E .. 'E | (Add['E0 .. 'E0 | Lit & {val: 1} | (Nega['E1 .. 'E1 | Lit & {val: 1}] with {arg: Lit & {val: 1}})] with {lhs: Lit & {val: 1}, rhs: Nega['E1 .. 'E1 | Lit & {val: 1}] with {arg: Lit & {val: 1}}})] with {arg: Add['E0 .. 'E0 | Lit & {val: 1} | (Nega['E1 .. 'E1 | Lit & {val: 1}] with {arg: Lit & {val: 1}})] with {lhs: Lit & {val: 1}, rhs: Nega['E1 .. 'E1 | Lit & {val: 1}] with {arg: Lit & {val: 1}}}}

:stats
eval2 done d2
//│ res: int
//│ constrain calls  : 106
//│ annoying  calls  : 71
//│ subtyping calls  : 99


prettier2 done
//│ res: ('a -> int) -> ((Add[?] with {lhs: 'c & ((Add[?] with {lhs: 'd, rhs: 'd}) | Lit | (Nega[?] with {arg: 'b}) as 'd), rhs: (Add[?] with {lhs: 'e, rhs: 'e}) | Lit | (Nega[?] with {arg: 'b}) as 'e}) & 'a | Lit | (Nega[?] with {arg: 'b}) as 'b) -> string

prettier2 done (eval1 done)
//│ res: ((Add[?] with {lhs: (Add[?] with {lhs: 'b, rhs: 'b}) | Lit as 'b, rhs: (Add[?] with {lhs: 'c, rhs: 'c}) | Lit as 'c}) | Lit | (Nega[?] with {arg: 'a}) as 'a) -> string

:stats
prettier2 done (eval1 done) e1
//│ res: string
//│ constrain calls  : 230
//│ annoying  calls  : 120
//│ subtyping calls  : 248

:stats
prettier2 done (eval2 done)
prettier2 done (eval2 done) e2
prettier2 done (eval2 done) d2
//│ res: (((Add[?] with {lhs: 'c & ((Add[?] with {lhs: 'd, rhs: 'd}) | (Lit | (Nega[?] with {arg: 'f & ('b | 'e)}) as 'e) as 'd), rhs: (Add[?] with {lhs: 'g, rhs: 'g}) | (Lit | (Nega[?] with {arg: 'f & ('b | 'e)}) as 'e) as 'g}) as 'b) | Lit | (Nega[?] with {arg: 'a}) as 'a) -> string
//│ res: string
//│ res: string
//│ constrain calls  : 643
//│ annoying  calls  : 335
//│ subtyping calls  : 63770




// === === === ERROR CASES === === === //


:ShowRelativeLineNums


:e
eval1 done e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	eval1 done e2
//│ ║        	^^^^^^^^^^^^^
//│ ╟── expression of type `Nega[?E] & {arg: ?arg}` does not match type `nothing`
//│ ║  l.12: 	def add lhs rhs = Add { lhs; rhs }
//│ ║        	                             ^^^
//│ ╟── but it flows into reference with expected type `Lit & ?a | Add[?] & ?b | ?c & ~add & ~lit`
//│ ║  l.+1: 	eval1 done e2
//│ ║        	           ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.3: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from reference:
//│ ║  l.48: 	  | _ -> k e
//│ ║        	           ^
//│ ╟── from reference:
//│ ║  l.45: 	rec def eval1 k e = case e of {
//│ ║        	                         ^
//│ ╟── from field selection:
//│ ║  l.47: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ╙──      	                                   ^^^^^
//│ res: error | int


:e
prettier2 done eval1 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `?a -> (?b | ?c | ?d)` does not match type `int`
//│ ║  l.45: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.46: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.47: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference of type `?e`
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	               ^^^^^
//│ ╟── which does not match type `?f -> ?g`
//│ ╟── Note: constraint arises from application:
//│ ║  l.156: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ║         	            ^^^^
//│ ╟── from reference:
//│ ║  l.209: 	  }) ev
//│ ║         	     ^^
//│ ╟── from reference:
//│ ║  l.207: 	  | Nega -> concat "-" (prettier2 k ev x.arg)
//│ ╙──       	                                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `Add[?E] & {lhs: ?lhs, rhs: ?rhs}` does not match type `?a -> ?b`
//│ ║  l.179: 	e1 = add (lit 1) (add (lit 2) (lit 3))
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Lit & ?c | Add[?] & ?d | ?e & ~add & ~lit`
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.48: 	  | _ -> k e
//│ ║        	         ^^^
//│ ╟── from reference:
//│ ║  l.156: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ║         	               ^
//│ ╟── from refined scrutinee:
//│ ║  l.152: 	rec def prettier1 k ev e = case e of {
//│ ╙──       	                                ^
//│ res: error | string


:e
:stats
prettier2 done (eval1 done) e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done (eval1 done) e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `Nega[?E] & {arg: ?arg}` does not match type `nothing`
//│ ║  l.12: 	def add lhs rhs = Add { lhs; rhs }
//│ ║        	                             ^^^
//│ ╟── but it flows into reference with expected type `Lit & ?a | Add[?] & ?b | ?c & ~add & ~lit`
//│ ║  l.+1: 	prettier2 done (eval1 done) e2
//│ ║        	                            ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.3: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from reference:
//│ ║  l.48: 	  | _ -> k e
//│ ║        	           ^
//│ ╟── from reference:
//│ ║  l.45: 	rec def eval1 k e = case e of {
//│ ║        	                         ^
//│ ╟── from field selection:
//│ ║  l.47: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	                                   ^^^^^
//│ ╟── from reference:
//│ ║  l.156: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ║         	               ^
//│ ╟── from refined scrutinee:
//│ ║  l.152: 	rec def prettier1 k ev e = case e of {
//│ ╙──       	                                ^
//│ res: error | string
//│ constrain calls  : 309
//│ annoying  calls  : 198
//│ subtyping calls  : 643

:e
:stats
prettier2 done eval2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `?a -> (?b | ?c | ?d)` does not match type `int`
//│ ║  l.45: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.46: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.47: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference of type `?e`
//│ ║  l.+1: 	prettier2 done eval2
//│ ║        	               ^^^^^
//│ ╟── which does not match type `?f -> ?g`
//│ ╟── Note: constraint arises from application:
//│ ║  l.156: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ║         	            ^^^^
//│ ╟── from reference:
//│ ║  l.209: 	  }) ev
//│ ║         	     ^^
//│ ╟── from reference:
//│ ║  l.207: 	  | Nega -> concat "-" (prettier2 k ev x.arg)
//│ ╙──       	                                    ^^
//│ res: (Lit | (Nega[?] with {arg: 'a}) as 'a) -> string | error
//│ constrain calls  : 59
//│ annoying  calls  : 0
//│ subtyping calls  : 329

:e
:stats
prettier2 done eval2 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `?a -> (?b | ?c | ?d)` does not match type `int`
//│ ║  l.45: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.46: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.47: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference of type `?e`
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	               ^^^^^
//│ ╟── which does not match type `?f -> ?g`
//│ ╟── Note: constraint arises from application:
//│ ║  l.156: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ║         	            ^^^^
//│ ╟── from reference:
//│ ║  l.209: 	  }) ev
//│ ║         	     ^^
//│ ╟── from reference:
//│ ║  l.207: 	  | Nega -> concat "-" (prettier2 k ev x.arg)
//│ ╙──       	                                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `Add[?E] & {lhs: ?lhs, rhs: ?rhs}` does not match type `?a -> ?b`
//│ ║  l.179: 	e1 = add (lit 1) (add (lit 2) (lit 3))
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Lit & ?c | Add[?] & ?d | ?e & ~add & ~lit`
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.199: 	  | _ -> k x
//│ ║         	         ^^^
//│ ╟── from reference:
//│ ║  l.156: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ║         	               ^
//│ ╟── from refined scrutinee:
//│ ║  l.152: 	rec def prettier1 k ev e = case e of {
//│ ╙──       	                                ^
//│ res: error | string
//│ constrain calls  : 145
//│ annoying  calls  : 64
//│ subtyping calls  : 494

:e
:stats
prettier2 done eval2 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `?a -> (?b | ?c | ?d)` does not match type `int`
//│ ║  l.45: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.46: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.47: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference of type `?e`
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	               ^^^^^
//│ ╟── which does not match type `?f -> ?g`
//│ ╟── Note: constraint arises from application:
//│ ║  l.156: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ║         	            ^^^^
//│ ╟── from reference:
//│ ║  l.209: 	  }) ev
//│ ║         	     ^^
//│ ╟── from reference:
//│ ║  l.207: 	  | Nega -> concat "-" (prettier2 k ev x.arg)
//│ ╙──       	                                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `Add[?E] & {lhs: ?lhs, rhs: ?rhs}` does not match type `?a -> ?b`
//│ ║  l.224: 	e2 = add (lit 1) (nega e1)
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Lit & ?c | Add[?] & ?d | ?e & ~add & ~lit`
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.199: 	  | _ -> k x
//│ ║         	         ^^^
//│ ╟── from reference:
//│ ║  l.156: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ║         	               ^
//│ ╟── from refined scrutinee:
//│ ║  l.152: 	rec def prettier1 k ev e = case e of {
//│ ╙──       	                                ^
//│ res: error
//│ constrain calls  : 111
//│ annoying  calls  : 36
//│ subtyping calls  : 1014

:e
:stats
prettier2 done eval2 d2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `?a -> (?b | ?c | ?d)` does not match type `int`
//│ ║  l.45: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.46: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.47: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference of type `?e`
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	               ^^^^^
//│ ╟── which does not match type `?f -> ?g`
//│ ╟── Note: constraint arises from application:
//│ ║  l.156: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ║         	            ^^^^
//│ ╟── from reference:
//│ ║  l.209: 	  }) ev
//│ ║         	     ^^
//│ ╟── from reference:
//│ ║  l.207: 	  | Nega -> concat "-" (prettier2 k ev x.arg)
//│ ╙──       	                                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `Add[?E] & {lhs: ?lhs, rhs: ?rhs}` does not match type `?a -> ?b`
//│ ║  l.191: 	def nega arg = Nega { arg }
//│ ║         	                      ^^^
//│ ╟── but it flows into reference with expected type `Lit & ?c | Add[?] & ?d | ?e & ~add & ~lit`
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.199: 	  | _ -> k x
//│ ║         	         ^^^
//│ ╟── from reference:
//│ ║  l.156: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ║         	               ^
//│ ╟── from refined scrutinee:
//│ ║  l.152: 	rec def prettier1 k ev e = case e of {
//│ ║         	                                ^
//│ ╟── from field selection:
//│ ║  l.207: 	  | Nega -> concat "-" (prettier2 k ev x.arg)
//│ ║         	                                       ^^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.206: 	rec def prettier2 k ev = prettier1 (fun x -> case x of {
//│ ║         	                                                  ^
//│ ╟── from reference:
//│ ║  l.157: 	  | _ -> k e
//│ ╙──       	           ^
//│ res: error | string
//│ constrain calls  : 144
//│ annoying  calls  : 75
//│ subtyping calls  : 578

:e
:stats
prettier2 done eval1 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `?a -> (?b | ?c | ?d)` does not match type `int`
//│ ║  l.45: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.46: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.47: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference of type `?e`
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	               ^^^^^
//│ ╟── which does not match type `?f -> ?g`
//│ ╟── Note: constraint arises from application:
//│ ║  l.156: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ║         	            ^^^^
//│ ╟── from reference:
//│ ║  l.209: 	  }) ev
//│ ║         	     ^^
//│ ╟── from reference:
//│ ║  l.207: 	  | Nega -> concat "-" (prettier2 k ev x.arg)
//│ ╙──       	                                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `Add[?E] & {lhs: ?lhs, rhs: ?rhs}` does not match type `?a -> ?b`
//│ ║  l.224: 	e2 = add (lit 1) (nega e1)
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Lit & ?c | Add[?] & ?d | ?e & ~add & ~lit`
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.48: 	  | _ -> k e
//│ ║        	         ^^^
//│ ╟── from reference:
//│ ║  l.156: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ║         	               ^
//│ ╟── from refined scrutinee:
//│ ║  l.152: 	rec def prettier1 k ev e = case e of {
//│ ╙──       	                                ^
//│ res: error
//│ constrain calls  : 110
//│ annoying  calls  : 36
//│ subtyping calls  : 1008

