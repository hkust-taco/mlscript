// * Here we compare to OCaml's polymorphic variants, showing their limitation


class Apple
class Banana
//│ Defined class Apple
//│ Defined class Banana


// utop # let foo x default otherwise = match x with `Apple -> default | y -> otherwise y ;;
// val foo : ([> `Apple ] as 'a) -> 'b -> ('a -> 'b) -> 'b = <fun>

def foo x default otherwise = case x of { Apple -> default | _ -> otherwise x }
//│ foo: (Apple | 'a & ~#Apple) -> 'b -> ('a -> 'b) -> 'b
//│    = [Function: foo]

// utop # foo `Apple ;;
// - : '_a -> (_[> `Apple ] -> '_a) -> '_a = <fun>

foo (Apple{})
//│ res: 'a -> (nothing -> 'a) -> 'a
//│    = [Function (anonymous)]

// utop # foo `Banana ;;
// - : '_a -> (_[> `Apple | `Banana ] -> '_a) -> '_a = <fun>

foo (Banana{})
//│ res: 'a -> (Banana -> 'a) -> 'a
//│    = [Function (anonymous)]

// utop # foo `Banana 0 (function `Banana -> 1) ;;
// Characters 9-27:
// Warning 8: this pattern-matching is not exhaustive.
// Here is an example of a value that is not matched:
// `Apple
// Characters 9-27:
// Warning 8: this pattern-matching is not exhaustive.
// Here is an example of a value that is not matched:
// `Apple
// - : int = 1

foo (Banana{}) 0 (fun z -> case z of  { Banana -> 1 })
//│ res: 0 | 1
//│    = 1

// utop # foo `Apple 0 (function `Apple -> 1) ;;
// - : int = 0

foo (Apple{}) 0 (fun z -> case z of  { Apple -> 1 })
//│ res: 0 | 1
//│    = 0

foo (Apple{}) 0 (fun z -> z.lol) // z has type `nothing` so we can do whatever we want in this unreachable case
//│ res: 0
//│    = 0

