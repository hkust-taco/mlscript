
class Test1: { x: int }
//│ Defined class Test1

Test1
//│ res: {x: int & 'x} -> (Test1 with {x: 'x})
//│    = [Function: res]

Test1 { x = 123 }
//│ res: Test1 & {x: 123}
//│    = Test1 { x: 123 }

:e
Test1 { x = "oops" }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.14: 	Test1 { x = "oops" }
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"oops"` does not match type `int`
//│ ║  l.14: 	Test1 { x = "oops" }
//│ ║        	            ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.2: 	class Test1: { x: int }
//│ ╙──     	                  ^^^
//│ res: error | (Test1 with {x: "oops"})
//│    = Test1 { x: 'oops' }

def Test1 = fun x -> Test1 { x = x }
//│ Test1: (int & 'x) -> (Test1 with {x: 'x})
//│      = [Function: Test11]

class Test11: { x: int }
def Test11 x = Test11 { x }
//│ Defined class Test11
//│ Test11: (int & 'x) -> (Test11 with {x: 'x})
//│       = [Function: Test112]


:e
type Test1 = { x: int }
//│ ╔══[ERROR] Type 'Test1' is already defined.
//│ ║  l.39: 	type Test1 = { x: int }
//│ ╙──      	     ^^^^^

type Test2 = { x: int }
//│ Defined type alias Test2

:pe
class Test = { x: int }
//│ /!\ Parse error: Expected end-of-input:1:12, found "= { x: int" at l.48:12: class Test = { x: int }

:pe
type Test: { x: int }
//│ /!\ Parse error: Expected "=":1:10, found ": { x: int" at l.52:10: type Test: { x: int }

type Test3 = int -> int
//│ Defined type alias Test3

type Test4 = int -> int -> int
//│ Defined type alias Test4

type Test5 = (int -> int) -> int
//│ Defined type alias Test5


type T = int
//│ Defined type alias T

:e
type T = int
type T = int
//│ ╔══[ERROR] Type 'T' is already defined.
//│ ║  l.69: 	type T = int
//│ ╙──      	     ^
//│ ╔══[ERROR] Type 'T' is already defined.
//│ ║  l.70: 	type T = int
//│ ╙──      	     ^

:e
type TypeA = int
foo 42
def foo = 1
foo 42
//│ Defined type alias TypeA
//│ ╔══[ERROR] identifier not found: foo
//│ ║  l.80: 	foo 42
//│ ╙──      	^^^
//│ res: error
//│ foo: 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.82: 	foo 42
//│ ║        	^^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.81: 	def foo = 1
//│ ║        	          ^
//│ ╟── but it flows into reference with expected type `42 -> ?a`
//│ ║  l.82: 	foo 42
//│ ╙──      	^^^
//│ res: error
//│ Code generation encountered an error:
//│   unresolved symbol foo

42: TypeA
//│ res: int
//│    = 42

:e
type TypeOops = TypeOops
type TypeB = TypeC
def test = fun x -> (x: TypeB)
test 42
type TypeC = TypeA
//│ ╔══[ERROR] illegal cycle involving type TypeOops
//│ ║  l.107: 	type TypeOops = TypeOops
//│ ╙──       	     ^^^^^^^^^^^^^^^^^^^
//│ Defined type alias TypeB
//│ Defined type alias TypeC
//│ test: int -> int
//│     = [Function: test]
//│ res: int
//│    = 42



def test = fun (x: TypeB) -> x
//│ test: int -> int
//│     = [Function: test1]



// Note: type alias definitions can contain type variables,
//   which are refreshed on every use (every expansion) of the alias
type Lol = { x: 'a -> 'a }
//│ Defined type alias Lol

:re
error: Lol -> Lol
//│ res: {x: 'a -> 'a} -> {x: 'a -> 'a}
//│ Runtime error:
//│   Error: unexpected runtime error

{ x = id } : Lol
//│ res: {x: 'a -> 'a}
//│    = { x: [Function: id] }


:e
type Runaway[A] = Runaway['a]
//│ ╔══[ERROR] illegal cycle involving type Runaway
//│ ║  l.147: 	type Runaway[A] = Runaway['a]
//│ ╙──       	     ^^^^^^^^^^^^^^^^^^^^^^^^

:e
type Runaway[A] = 'a -> Runaway['a]
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as Runaway['a], but is defined as Runaway['A]
//│ ║  l.153: 	type Runaway[A] = 'a -> Runaway['a]
//│ ╙──       	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


type Runaway2 = Lol -> Runaway2
//│ Defined type alias Runaway2

:e
id: Runaway2
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.163: 	id: Runaway2
//│ ║         	^^
//│ ╟── type `{x: ?a -> ?a}` is not a function
//│ ║  l.132: 	type Lol = { x: 'a -> 'a }
//│ ║         	           ^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.159: 	type Runaway2 = Lol -> Runaway2
//│ ║         	                ^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.159: 	type Runaway2 = Lol -> Runaway2
//│ ╙──       	                       ^^^^^^^^
//│ res: {x: (('b,) | ('c,)) -> ('b & 'c)} -> 'a as 'a
//│    = [Function: id]

:re
error: Runaway2
//│ res: {x: (('b,) | ('c,)) -> ('b & 'c)} -> 'a as 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:e
:re
error: {x: int} -> nothing : Runaway2
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.187: 	error: {x: int} -> nothing : Runaway2
//│ ║         	^^^^^
//│ ╟── type `?a -> ?a` does not match type `int`
//│ ║  l.132: 	type Lol = { x: 'a -> 'a }
//│ ║         	                ^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.187: 	error: {x: int} -> nothing : Runaway2
//│ ╙──       	           ^^^
//│ res: {x: (('b,) | ('c,)) -> ('b & 'c)} -> 'a as 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: {x: 'x -> 'x} -> nothing : Runaway2
//│ res: {x: (('b,) | ('c,)) -> ('b & 'c)} -> 'a as 'a
//│ Runtime error:
//│   Error: unexpected runtime error




type A1[A] = A -> A -> A1[A]
type A2[A] = A -> A2[A]
//│ Defined type alias A1
//│ Defined type alias A2

def ty1: A1[anything]
def ty2: A2[anything]
//│ ty1: anything -> anything -> 'a as 'a
//│    = <missing implementation>
//│ ty2: anything -> 'a as 'a
//│    = <missing implementation>

ty1 = ty2
//│ anything -> 'a as 'a
//│   <:  ty1:
//│ anything -> anything -> 'a as 'a
//│    = <no result>
//│      ty2 is not implemented

ty2 = ty1
//│ anything -> anything -> 'a as 'a
//│   <:  ty2:
//│ anything -> 'a as 'a
//│    = <no result>
//│      ty1 and ty2 are not implemented


