
1: ~string
//│ res: ~string
//│    = 1

:e
1: ~int
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.7: 	1: ~int
//│ ║       	^
//│ ╟── integer literal of type `1` does not match type `~int`
//│ ╟── Note: constraint arises from type negation:
//│ ║  l.7: 	1: ~int
//│ ╙──     	   ^^^^
//│ res: ~int
//│    = 1

:e
add res 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.19: 	add res 1
//│ ║        	^^^^^^^
//│ ╟── type `~int` does not match type `int`
//│ ║  l.7: 	1: ~int
//│ ║       	   ^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.19: 	add res 1
//│ ╙──      	    ^^^
//│ res: error | int
//│    = 2

:e
(1: int): ~int
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.33: 	(1: int): ~int
//│ ║        	^^^^^^^^
//│ ╟── type `int` does not match type `~int`
//│ ║  l.33: 	(1: int): ~int
//│ ║        	    ^^^
//│ ╟── Note: constraint arises from type negation:
//│ ║  l.33: 	(1: int): ~int
//│ ╙──      	          ^^^^
//│ res: ~int
//│    = 1

1: ~2
//│ res: ~2
//│    = 1

1: int
//│ res: int
//│    = 1

"ok": ~int
//│ res: ~int
//│    = 'ok'

1: ~(~1 & ~2)
//│ res: 1 | 2
//│    = 1

:e
1: ~(~3 & ~2)
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.63: 	1: ~(~3 & ~2)
//│ ║        	^
//│ ╟── integer literal of type `1` does not match type `~(~2 & ~3)`
//│ ╟── Note: constraint arises from type negation:
//│ ║  l.63: 	1: ~(~3 & ~2)
//│ ╙──      	   ^^^^^^^^^^
//│ res: 2 | 3
//│    = 1

