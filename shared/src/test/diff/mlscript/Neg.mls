
1: ~string
//│ res: ~string
//│    = 1

:e
1: ~int
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.7: 	1: ~int
//│ ║       	^
//│ ╟── integer literal of type `1` does not match type `~int`
//│ ╟── Note: constraint arises from type negation:
//│ ║  l.7: 	1: ~int
//│ ╙──     	   ^^^^
//│ res: ~int
//│    = 1

:e
add res 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.19: 	add res 1
//│ ║        	^^^^^^^
//│ ╟── type `~int` is not an instance of type `int`
//│ ║  l.7: 	1: ~int
//│ ║       	   ^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.19: 	add res 1
//│ ╙──      	    ^^^
//│ res: error | int
//│    = 2

:e
(1: int): ~int
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.33: 	(1: int): ~int
//│ ║        	^^^^^^^^
//│ ╟── type `int` does not match type `~int`
//│ ║  l.33: 	(1: int): ~int
//│ ║        	    ^^^
//│ ╟── Note: constraint arises from type negation:
//│ ║  l.33: 	(1: int): ~int
//│ ╙──      	          ^^^^
//│ res: ~int
//│    = 1

1: ~2
//│ res: ~2
//│    = 1

1: int
//│ res: int
//│    = 1

"ok": ~int
//│ res: ~int
//│    = 'ok'

1: ~(~1 & ~2)
//│ res: 1 | 2
//│    = 1

:e
1: ~(~3 & ~2)
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.63: 	1: ~(~3 & ~2)
//│ ║        	^
//│ ╟── integer literal of type `1` does not match type `2 | 3`
//│ ╟── Note: constraint arises from type negation:
//│ ║  l.63: 	1: ~(~3 & ~2)
//│ ╙──      	   ^^^^^^^^^^
//│ res: 2 | 3
//│    = 1


class Lit
class Add
//│ Defined class Lit
//│ Defined class Add

def f: ~lit & {x:int} -> int // Note the precedence!
//│ f: {x: int} -> int
//│  = <missing implementation>

def f: (~lit & {x:int}) -> int
//│ f: ({x: int} & ~#Lit) -> int
//│  = <missing implementation>

// :ds
def f: (~Lit & {x:int}) -> int
//│ f: ({x: int} & ~Lit) -> int
//│  = <missing implementation>

def f: ~Lit & 'b -> 'b
//│ f: 'b -> 'b & ~Lit
//│  = <missing implementation>

def f: ~Lit & ~Add & 'b -> 'b
//│ f: 'b -> 'b & ~Add & ~Lit
//│  = <missing implementation>

def f: (~Lit & 'b) -> 'b
//│ f: ('b & ~Lit) -> 'b
//│  = <missing implementation>

def f: (~Lit & ~Add & 'b) -> 'b
//│ f: ('b & ~Add & ~Lit) -> 'b
//│  = <missing implementation>

def f: ~Lit & ~Lit
//│ f: ~Lit
//│  = <missing implementation>

:w
class Foo[A]
//│ Defined class Foo[±A]
//│ ╔══[WARNING] Type definition Foo has bivariant type parameters:
//│ ║  l.114: 	class Foo[A]
//│ ║         	      ^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.114: 	class Foo[A]
//│ ╙──       	          ^

def f: ~Foo[1 | 2] | ~Foo[2 | 3]
//│ f: ~Foo[?]
//│  = <missing implementation>

def f: (~Foo[1 | 2] & 'a | ~Foo[2 | 3] & 'a) -> 'a
//│ f: ('a & ~Foo[?]) -> 'a
//│  = <missing implementation>

// * Notice the weird negative (in) type, and also see BooleanFail.mls
def f: (~{x: 1 | 2} & 'a | ~{x: 2 | 3} & 'a) -> 'a
//│ f: in forall 'a. nothing -> 'a out forall 'a. ('a & ~{x: 2}) -> 'a
//│  = <missing implementation>

f = id
//│ 'a -> 'a
//│   <:  f:
//│ nothing -> nothing
//│  = [Function: id]

f x = case x of {}
//│ nothing -> nothing
//│   <:  f:
//│ nothing -> nothing
//│  = [Function: f2]

def f: (~{x: 1 | 2} & ~lit & 'a | ~{x: 2 | 3} & ~lit & 'a) -> 'a
//│ f: in forall 'a. nothing -> 'a out forall 'a. ('a & ~{x: 2} & ~#Lit) -> 'a
//│  = <missing implementation>


def f: string & 'a & ~int & ~string | string & ~int
//│ f: string
//│  = <missing implementation>


trait T
//│ Defined trait T

def a: T & 1 | T & 1 & ~'a | 'a
//│ a: T & 1
//│  = <missing implementation>

