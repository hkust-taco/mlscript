
class None: {}
class Some[A]: { value: A }
type Option[A] = Some[A] | None
//│ Defined class None
//│ Defined class Some
//│ Defined type alias Option


def flatMap f opt = case opt of {
  | Some -> f opt.value
  | None -> None{}
  }
//│ flatMap: ('a -> 'b) -> (None | (Some[?] with {value: 'a})) -> (None | 'b)
//│        = [Function: flatMap]

def flatMap2 f opt = case opt of { Some -> f opt.value | _ -> opt }
//│ flatMap2: ('a -> 'b) -> ((Some[?] with {value: 'a}) | 'b & ~some) -> 'b
//│         = [Function: flatMap2]

def flatMap3 f opt = case opt of { Some -> f opt | _ -> opt }
//│ flatMap3: ('a -> 'b) -> (Some[?] & 'a | 'b & ~some) -> 'b
//│         = [Function: flatMap3]



type List[A] = Cons[A] | None
class Cons[A]: Some[A] & { tail: List[A] }
//│ Defined type alias List
//│ Defined class Cons

// Note – no longer needed with the new class ctor semantics:
// def Cons{value; tail} = Cons(Some{value} with {tail})

rec def map2 f ls = case ls of {
  | Cons -> Cons{value = f ls.value; tail = map2 f ls.tail}
  | None -> None{}
  }
//│ map2: ('a -> ('value & 'A)) -> ((Cons[?] with {tail: 'b, value: 'a}) | None as 'b) -> ((Cons['A] with {tail: 'c, value: 'value}) | None as 'c)
//│     = [Function: map2]




:e
def safeDiv x (y: ~0) = div x y
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.46: 	def safeDiv x (y: ~0) = div x y
//│ ║        	                        ^^^^^^^
//│ ╟── expression of type `~0` does not match type `int`
//│ ║  l.46: 	def safeDiv x (y: ~0) = div x y
//│ ║        	                  ^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.46: 	def safeDiv x (y: ~0) = div x y
//│ ╙──      	                              ^
//│ safeDiv: int -> ~0 -> (error | int)
//│        = [Function: safeDiv]

def safeDiv x (y: int & ~0) = div x y
//│ safeDiv: int -> (int & ~0) -> int
//│        = [Function: safeDiv1]

:e
safeDiv 1 0
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.64: 	safeDiv 1 0
//│ ║        	^^^^^^^^^^^
//│ ╟── expression of type `0` does not match type `~0`
//│ ║  l.64: 	safeDiv 1 0
//│ ║        	          ^
//│ ╟── Note: constraint arises from type negation:
//│ ║  l.59: 	def safeDiv x (y: int & ~0) = div x y
//│ ╙──      	                        ^^
//│ res: error | int
//│ Runtime error:
//│   ReferenceError: div is not defined

fun x -> safeDiv 1 x
//│ res: (int & ~0) -> int
//│    = [Function: res]

fun x -> case x of { int -> safeDiv 1 x | _ -> None{} }
//│ res: (int & ~0 | ~int) -> (int | None)
//│    = [Function: res]

:e // we no longer refine x's type here, as that was rather unexpected
fun (x: int) -> safeDiv 1 x
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.87: 	fun (x: int) -> safeDiv 1 x
//│ ║        	                ^^^^^^^^^^^
//│ ╟── expression of type `int` does not match type `~0`
//│ ║  l.87: 	fun (x: int) -> safeDiv 1 x
//│ ║        	        ^^^
//│ ╟── but it flows into reference with expected type `~0`
//│ ║  l.87: 	fun (x: int) -> safeDiv 1 x
//│ ║        	                          ^
//│ ╟── Note: constraint arises from type negation:
//│ ║  l.59: 	def safeDiv x (y: int & ~0) = div x y
//│ ╙──      	                        ^^
//│ res: int -> (error | int)
//│    = [Function: res]

fun (x: int & ~0) -> safeDiv 1 x
//│ res: (int & ~0) -> int
//│    = [Function: res]

def tryDiv: int -> int -> Option[int]
//│ tryDiv: int -> int -> (None | Some[int])

def tryDiv x y = case y of { 0 -> None{} | _ -> Some { value = safeDiv x y } }
//│ int -> (0 | int & ~0) -> (None | (Some['A .. 'A | int] with {value: int}))
//│   <:  tryDiv:
//│ int -> int -> (None | Some[int])
//│       = [Function: tryDiv]
// ^ Note: `0 | int & ~0` could be further simplified

tryDiv 1 1
tryDiv 1 0
//│ res: None | Some[int]
//│ Runtime error:
//│   ReferenceError: div is not defined
//│ res: None | Some[int]
//│    = None {}

