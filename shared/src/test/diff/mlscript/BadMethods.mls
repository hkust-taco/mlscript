:AllowTypeErrors

class Foo[A]: { x: A }
    method Map[B]: (A -> B) -> A
class Bar[A]: Foo[A]
    method Map[B]: B -> A
    rec method Map f = f Map (fun x -> Map)
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.7: 	    rec method Map f = f Map (fun x -> Map)
//│ ║       	               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `B` is not a function
//│ ║  l.6: 	    method Map[B]: B -> A
//│ ║       	               ^
//│ ╟── Note: constraint arises from application:
//│ ║  l.7: 	    rec method Map f = f Map (fun x -> Map)
//│ ║       	                       ^^^^^
//│ ╟── from reference:
//│ ║  l.7: 	    rec method Map f = f Map (fun x -> Map)
//│ ╙──     	                       ^
//│ Defined class Foo
//│ Declared Foo.Map: Foo['A] -> ('A -> anything) -> 'A
//│ Defined class Bar
//│ Declared Bar.Map: Bar['A] -> anything -> 'A
//│ Defined Bar.Map: Bar['A] -> (('a -> (anything -> 'a) -> 'b) -> 'b as 'a)

Foo.Map
Bar.Map
//│ res: Foo['A] -> ('A -> anything) -> 'A
//│ res: Bar['A] -> anything -> 'A




class bar[A, B]: Foo[A] & { Y: B; z: int }
    method identity z = z
    method identity z = z
//│ ╔══[ERROR] Type names must start with a capital letter
//│ ║  l.34: 	class bar[A, B]: Foo[A] & { Y: B; z: int }
//│ ╙──      	      ^^^
//│ ╔══[ERROR] Type 'Bar' is already defined.
//│ ║  l.34: 	class bar[A, B]: Foo[A] & { Y: B; z: int }
//│ ╙──      	      ^^^
//│ ╔══[ERROR] Field identifiers must start with a small letter
//│ ║  l.34: 	class bar[A, B]: Foo[A] & { Y: B; z: int }
//│ ╙──      	                            ^
//│ ╔══[ERROR] Method names must start with a capital letter
//│ ║  l.35: 	    method identity z = z
//│ ╙──      	           ^^^^^^^^
//│ ╔══[ERROR] Method names must start with a capital letter
//│ ║  l.36: 	    method identity z = z
//│ ╙──      	           ^^^^^^^^
//│ ╔══[ERROR] Method 'Bar.identity' is already defined
//│ ║  l.36: 	    method identity z = z
//│ ║        	           ^^^^^^^^
//│ ╟── at
//│ ║  l.35: 	    method identity z = z
//│ ╙──      	           ^^^^^^^^




class ImplicitCall[A]: { x: A }
    method Fun = this.x
//│ Defined class ImplicitCall
//│ Defined ImplicitCall.Fun: ImplicitCall['A] -> 'A

i = ImplicitCall { x = "stonks" }
i.Fun
//│ i: ImplicitCall['A] & {x: "stonks"}
//│   where
//│     'A :> "stonks"
//│ res: "stonks"

class NoMoreImplicitCall
    method Fun = "not stonks"
//│ Defined class NoMoreImplicitCall
//│ Defined NoMoreImplicitCall.Fun: NoMoreImplicitCall -> "not stonks"

i.Fun
//│ ╔══[ERROR] Implicit call to method Fun is forbidden because it is ambiguous.
//│ ║  l.79: 	i.Fun
//│ ║        	^^^^^
//│ ╟── Unrelated methods named Fun are defined by:
//│ ╟── • class ImplicitCall
//│ ║  l.62: 	class ImplicitCall[A]: { x: A }
//│ ║        	      ^^^^^^^^^^^^
//│ ╟── • class NoMoreImplicitCall
//│ ║  l.74: 	class NoMoreImplicitCall
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ res: error




def this = fun x -> fun y -> add x y
this 42 42
//│ this: int -> int -> int
//│ res: int

class BadThis: { x: int; y: int }
    method Sum = this this.x this.y
    method Funny = this 42 42
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.101: 	    method Sum = this this.x this.y
//│ ║         	                 ^^^^^^^^^^^
//│ ╟── type definition of type `BadThis` is not a function
//│ ║  l.100: 	class BadThis: { x: int; y: int }
//│ ║         	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a -> ?b`
//│ ║  l.101: 	    method Sum = this this.x this.y
//│ ╙──       	                 ^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.102: 	    method Funny = this 42 42
//│ ║         	                   ^^^^^^^
//│ ╟── type definition of type `BadThis` is not a function
//│ ║  l.100: 	class BadThis: { x: int; y: int }
//│ ║         	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `42 -> ?a`
//│ ║  l.102: 	    method Funny = this 42 42
//│ ╙──       	                   ^^^^
//│ Defined class BadThis
//│ Defined BadThis.Sum: BadThis -> error
//│ Defined BadThis.Funny: BadThis -> error




class BadSelf[A]: { x: A }
    method F = this.x 42
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.129: 	    method F = this.x 42
//│ ║         	               ^^^^^^^^^
//│ ╟── field selection of type `A` is not a function
//│ ║  l.129: 	    method F = this.x 42
//│ ║         	               ^^^^^^
//│ ╟── Note: class type parameter A is defined at:
//│ ║  l.128: 	class BadSelf[A]: { x: A }
//│ ╙──       	              ^
//│ Defined class BadSelf
//│ Defined BadSelf.F: BadSelf['A] -> error

c = BadSelf { x = fun x -> x }
c.F
//│ c: BadSelf['A] with {x: 'a -> 'a}
//│   where
//│     'A :> 'a -> 'a
//│ res: error




class Simple2[A]: { a: A }
    method Get: A
//│ Defined class Simple2
//│ Declared Simple2.Get: Simple2['A] -> 'A

class Simple3[A, B]: Simple2[A]
    method Get: B
//│ ╔══[ERROR] Type mismatch in method declaration:
//│ ║  l.158: 	    method Get: B
//│ ║         	           ^^^^^^
//│ ╟── type `B` is not an instance of type A
//│ ║  l.157: 	class Simple3[A, B]: Simple2[A]
//│ ║         	                 ^
//│ ╟── Note: constraint arises from class type parameter:
//│ ║  l.157: 	class Simple3[A, B]: Simple2[A]
//│ ╙──       	              ^
//│ Defined class Simple3
//│ Declared Simple3.Get: Simple3['A, 'B] -> 'B




class AbstractPair[A, B]: { x: A; y: B }
    method Test: (A -> B -> bool) -> bool
    method Map[C, D]: (A -> C) -> (B -> D) -> AbstractPair[C, D]
//│ Defined class AbstractPair
//│ Declared AbstractPair.Test: AbstractPair['A, 'B] -> ('A -> 'B -> bool) -> bool
//│ Declared AbstractPair.Map: AbstractPair['A, 'B] -> ('A -> 'C) -> ('B -> 'D) -> AbstractPair['C, 'D]

class BadPair[A, B]: AbstractPair[A, B]
    method Test f = f this.x this.x
    method Map fx fy = BadPair { x = fx this.x; y = fx this.x }
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.182: 	    method Test f = f this.x this.x
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `A` is not an instance of type B
//│ ║  l.182: 	    method Test f = f this.x this.x
//│ ║         	                             ^^^^^^
//│ ╟── Note: constraint arises from class type parameter:
//│ ║  l.181: 	class BadPair[A, B]: AbstractPair[A, B]
//│ ║         	                 ^
//│ ╟── Note: class type parameter A is defined at:
//│ ║  l.181: 	class BadPair[A, B]: AbstractPair[A, B]
//│ ╙──       	              ^
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.183: 	    method Map fx fy = BadPair { x = fx this.x; y = fx this.x }
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `C` is not an instance of type D
//│ ║  l.183: 	    method Map fx fy = BadPair { x = fx this.x; y = fx this.x }
//│ ║         	                                                    ^^^^^^^^^
//│ ╟── Note: constraint arises from method type parameter:
//│ ║  l.176: 	    method Map[C, D]: (A -> C) -> (B -> D) -> AbstractPair[C, D]
//│ ║         	                  ^
//│ ╟── Note: method type parameter C is defined at:
//│ ║  l.176: 	    method Map[C, D]: (A -> C) -> (B -> D) -> AbstractPair[C, D]
//│ ╙──       	               ^
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.183: 	    method Map fx fy = BadPair { x = fx this.x; y = fx this.x }
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `C` is not an instance of type D
//│ ║  l.183: 	    method Map fx fy = BadPair { x = fx this.x; y = fx this.x }
//│ ║         	                                                    ^^^^^^^^^
//│ ╟── Note: constraint arises from method type parameter:
//│ ║  l.176: 	    method Map[C, D]: (A -> C) -> (B -> D) -> AbstractPair[C, D]
//│ ║         	                  ^
//│ ╟── Note: method type parameter C is defined at:
//│ ║  l.176: 	    method Map[C, D]: (A -> C) -> (B -> D) -> AbstractPair[C, D]
//│ ╙──       	               ^
//│ Defined class BadPair
//│ Defined BadPair.Test: BadPair['A, 'B] -> ('A -> 'A -> 'a) -> 'a
//│ Defined BadPair.Map: BadPair['A, 'B] -> ('A -> ('a & 'B0 & 'A0)) -> anything -> (BadPair['A0, 'B0] with {x: 'a, y: 'a})

bp = BadPair { x = 42; y = true }
bp.(BadPair.Test) (fun x -> fun y -> if (y) then x else y)
//│ bp: BadPair['A, 'B] & {x: 42, y: true}
//│   where
//│     'B :> true
//│     'A :> 42
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.225: 	bp.(BadPair.Test) (fun x -> fun y -> if (y) then x else y)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `42` does not match type `bool`
//│ ║  l.224: 	bp = BadPair { x = 42; y = true }
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from argument:
//│ ║  l.225: 	bp.(BadPair.Test) (fun x -> fun y -> if (y) then x else y)
//│ ║         	                                        ^^^
//│ ╟── from reference:
//│ ║  l.225: 	bp.(BadPair.Test) (fun x -> fun y -> if (y) then x else y)
//│ ╙──       	                                         ^
//│ res: 42 | error

BadPair = BadPair { x = 42; y = 0 }
BadPair.Map
BadPair.(BadPair.Map)
//│ BadPair: BadPair['A, 'B] & {x: 42, y: 0}
//│   where
//│     'B :> 0
//│     'A :> 42
//│ res: BadPair['A, 'B] -> ('A -> ('a & 'B0 & 'A0)) -> anything -> (BadPair['A0, 'B0] with {x: 'a, y: 'a})
//│ ╔══[ERROR] Class BadPair has no method BadPair.Map
//│ ║  l.246: 	BadPair.(BadPair.Map)
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^
//│ res: (42 -> ('a & 'B & 'A)) -> anything -> (BadPair['A, 'B] with {x: 'a, y: 'a})


class ClassA
    method MtdA = 42
//│ Defined class ClassA
//│ Defined ClassA.MtdA: ClassA -> 42

:e
class ClassB: ClassA
    method MtdA = 43
//│ ╔══[ERROR] Overriding method ClassA.MtdA without explicit declaration is not allowed.
//│ ║  l.265: 	    method MtdA = 43
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.259: 	    method MtdA = 42
//│ ╙──       	           ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.265: 	    method MtdA = 43
//│ ║         	           ^^^^^^^^^
//│ ╟── integer literal of type `43` does not match type `42`
//│ ║  l.265: 	    method MtdA = 43
//│ ║         	                  ^^
//│ ╟── but it flows into method definition with expected type `42`
//│ ║  l.265: 	    method MtdA = 43
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: constraint arises from integer literal:
//│ ║  l.259: 	    method MtdA = 42
//│ ║         	                  ^^
//│ ╟── from inherited method definition:
//│ ║  l.259: 	    method MtdA = 42
//│ ╙──       	           ^^^^^^^^^
//│ Defined class ClassB
//│ Defined ClassB.MtdA: ClassB -> 43

:e
class ClassC: ClassA
    method MtdA: int
    method MtdA = 43
//│ ╔══[ERROR] Overriding method ClassA.MtdA without explicit declaration is not allowed.
//│ ║  l.292: 	    method MtdA: int
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.259: 	    method MtdA = 42
//│ ╙──       	           ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in method declaration:
//│ ║  l.292: 	    method MtdA: int
//│ ║         	           ^^^^^^^^^
//│ ╟── type `int` does not match type `42`
//│ ║  l.292: 	    method MtdA: int
//│ ║         	                 ^^^
//│ ╟── but it flows into method declaration with expected type `42`
//│ ║  l.292: 	    method MtdA: int
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: constraint arises from integer literal:
//│ ║  l.259: 	    method MtdA = 42
//│ ║         	                  ^^
//│ ╟── from inherited method definition:
//│ ║  l.259: 	    method MtdA = 42
//│ ╙──       	           ^^^^^^^^^
//│ Defined class ClassC
//│ Declared ClassC.MtdA: ClassC -> int
//│ Defined ClassC.MtdA: ClassC -> 43

:e
class ClassD: ClassA
    method MtdA: int
//│ ╔══[ERROR] Overriding method ClassA.MtdA without explicit declaration is not allowed.
//│ ║  l.321: 	    method MtdA: int
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.259: 	    method MtdA = 42
//│ ╙──       	           ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in method declaration:
//│ ║  l.321: 	    method MtdA: int
//│ ║         	           ^^^^^^^^^
//│ ╟── type `int` does not match type `42`
//│ ║  l.321: 	    method MtdA: int
//│ ║         	                 ^^^
//│ ╟── but it flows into method declaration with expected type `42`
//│ ║  l.321: 	    method MtdA: int
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: constraint arises from integer literal:
//│ ║  l.259: 	    method MtdA = 42
//│ ║         	                  ^^
//│ ╟── from inherited method definition:
//│ ║  l.259: 	    method MtdA = 42
//│ ╙──       	           ^^^^^^^^^
//│ Defined class ClassD
//│ Declared ClassD.MtdA: ClassD -> int

// TODO: remove repeated overriding errors?
class ClassE: ClassD
    method MtdA = 43
//│ ╔══[ERROR] Overriding method ClassA.MtdA without explicit declaration is not allowed.
//│ ║  l.348: 	    method MtdA = 43
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.259: 	    method MtdA = 42
//│ ╙──       	           ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.348: 	    method MtdA = 43
//│ ║         	           ^^^^^^^^^
//│ ╟── integer literal of type `43` does not match type `42`
//│ ║  l.348: 	    method MtdA = 43
//│ ║         	                  ^^
//│ ╟── but it flows into method definition with expected type `42`
//│ ║  l.348: 	    method MtdA = 43
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: constraint arises from integer literal:
//│ ║  l.259: 	    method MtdA = 42
//│ ║         	                  ^^
//│ ╟── from inherited method definition:
//│ ║  l.259: 	    method MtdA = 42
//│ ╙──       	           ^^^^^^^^^
//│ Defined class ClassE
//│ Defined ClassE.MtdA: ClassE -> 43

(ClassE{}).MtdA // typed as 42!
//│ res: 42


:e
class Class2A[A]
    method MtdA: A
trait Trait2A[B]
    method MtdA: B
class Class2B: Class2A[int] & Trait2A[string]
    method MtdA = "ok"
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.383: 	    method MtdA = "ok"
//│ ║         	           ^^^^^^^^^^^
//│ ╟── string literal of type `"ok"` does not match type `int`
//│ ║  l.383: 	    method MtdA = "ok"
//│ ║         	                  ^^^^
//│ ╟── but it flows into method definition with expected type `int`
//│ ║  l.383: 	    method MtdA = "ok"
//│ ║         	           ^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.382: 	class Class2B: Class2A[int] & Trait2A[string]
//│ ║         	                       ^^^
//│ ╟── from inherited method declaration:
//│ ║  l.379: 	    method MtdA: A
//│ ╙──       	           ^^^^^^^
//│ Defined class Class2A
//│ Declared Class2A.MtdA: Class2A['A] -> 'A
//│ Defined trait Trait2A
//│ Declared Trait2A.MtdA: Trait2A['B] -> 'B
//│ Defined class Class2B
//│ Defined Class2B.MtdA: Class2B -> "ok"


:e
class Class3A[A]
    method MtdA: A
type Type3A = Class3A[string]
class Class3B: Type3A
    method MtdA = 1
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.411: 	class Class3B: Type3A
//│ ╙──       	      ^^^^^^^^^^^^^^^
//│ Defined class Class3A
//│ Declared Class3A.MtdA: Class3A['A] -> 'A
//│ Defined type alias Type3A


:e
Oops.M
//│ ╔══[ERROR] Method M not found
//│ ║  l.422: 	Oops.M
//│ ╙──       	^^^^^^
//│ res: error


class Test4A
    method Mth4A: anything
    method Mth4A = true
//│ Defined class Test4A
//│ Declared Test4A.Mth4A: Test4A -> anything
//│ Defined Test4A.Mth4A: Test4A -> true
:e
class Test4B: Test4A
    method Mth4A: int
//│ ╔══[ERROR] Type mismatch in inherited method definition:
//│ ║  l.431: 	    method Mth4A = true
//│ ║         	           ^^^^^^^^^^^^
//│ ╟── reference of type `true` does not match type `int`
//│ ║  l.431: 	    method Mth4A = true
//│ ║         	                   ^^^^
//│ ╟── but it flows into inherited method definition with expected type `int`
//│ ║  l.431: 	    method Mth4A = true
//│ ║         	           ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.437: 	    method Mth4A: int
//│ ║         	                  ^^^
//│ ╟── from method declaration:
//│ ║  l.437: 	    method Mth4A: int
//│ ╙──       	           ^^^^^^^^^^
//│ ╔══[ERROR] Overriding method Test4A.Mth4A without an overriding definition is not allowed.
//│ ║  l.437: 	    method Mth4A: int
//│ ║         	           ^^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.431: 	    method Mth4A = true
//│ ╙──       	           ^^^^^^^^^^^^
//│ Defined class Test4B
//│ Declared Test4B.Mth4A: Test4B -> int

o = Test4A {}
o.Mth4A
o.(Test4A.Mth4A)
//│ o: Test4A
//│ res: anything
//│ res: anything

:e
class Test5A
    method Mth5A: 42
class Test5B: Test5A
    method Mth5A = 43
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.473: 	    method Mth5A = 43
//│ ║         	           ^^^^^^^^^^
//│ ╟── integer literal of type `43` does not match type `42`
//│ ║  l.473: 	    method Mth5A = 43
//│ ║         	                   ^^
//│ ╟── but it flows into method definition with expected type `42`
//│ ║  l.473: 	    method Mth5A = 43
//│ ║         	           ^^^^^^^^^^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.471: 	    method Mth5A: 42
//│ ║         	                  ^^
//│ ╟── from inherited method declaration:
//│ ║  l.471: 	    method Mth5A: 42
//│ ╙──       	           ^^^^^^^^^
//│ Defined class Test5A
//│ Declared Test5A.Mth5A: Test5A -> 42
//│ Defined class Test5B
//│ Defined Test5B.Mth5A: Test5B -> 43


class Test6A[A]
    method Mth6A: A
    method Mth6B[B]: (A -> B) -> B
trait Test6B
    method Mth6A: bool
class Test6C: Test6A[int] & Test6B
//│ Defined class Test6A
//│ Declared Test6A.Mth6A: Test6A['A] -> 'A
//│ Declared Test6A.Mth6B: Test6A['A] -> ('A -> 'B) -> 'B
//│ Defined trait Test6B
//│ Declared Test6B.Mth6A: Test6B -> bool
//│ Defined class Test6C

:e
Test6A
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.509: 	Test6A
//│ ║         	^^^^^^
//│ ╟── Note that class Test6A is abstract:
//│ ║  l.495: 	class Test6A[A]
//│ ║         	      ^^^^^^^^
//│ ╟── Hint: method Mth6A is abstract
//│ ║  l.496: 	    method Mth6A: A
//│ ║         	           ^^^^^^^^
//│ ╟── Hint: method Mth6B is abstract
//│ ║  l.497: 	    method Mth6B[B]: (A -> B) -> B
//│ ╙──       	           ^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error

:e
Test6B
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.525: 	Test6B
//│ ║         	^^^^^^
//│ ╟── Note that trait Test6B is abstract:
//│ ║  l.498: 	trait Test6B
//│ ║         	      ^^^^^^
//│ ╟── Hint: method Mth6A is abstract
//│ ║  l.499: 	    method Mth6A: bool
//│ ╙──       	           ^^^^^^^^^^^
//│ res: error

:e
Test6C
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.538: 	Test6C
//│ ║         	^^^^^^
//│ ╟── Note that class Test6C is abstract:
//│ ║  l.500: 	class Test6C: Test6A[int] & Test6B
//│ ║         	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Hint: method Mth6B is abstract
//│ ║  l.497: 	    method Mth6B[B]: (A -> B) -> B
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Hint: method Mth6A is abstract
//│ ║  l.500: 	class Test6C: Test6A[int] & Test6B
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error




:e
class Dup[A, A]: { x: A }
    method MthDup[B, C, // random comment
        B]: (A -> B) -> B
    method MthDup f = f this.x
//│ ╔══[ERROR] Multiple declarations of type parameter A in class definition
//│ ║  l.557: 	class Dup[A, A]: { x: A }
//│ ║         	      ^^^^^^^^^^^^^^^^^^^
//│ ╟── Declared at
//│ ║  l.557: 	class Dup[A, A]: { x: A }
//│ ║         	          ^
//│ ╟── Declared at
//│ ║  l.557: 	class Dup[A, A]: { x: A }
//│ ╙──       	             ^
//│ ╔══[ERROR] Multiple declarations of type parameter B in method declaration
//│ ║  l.558: 	    method MthDup[B, C, // random comment
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.559: 	        B]: (A -> B) -> B
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Declared at
//│ ║  l.558: 	    method MthDup[B, C, // random comment
//│ ║         	                  ^
//│ ╟── Declared at
//│ ║  l.559: 	        B]: (A -> B) -> B
//│ ╙──       	        ^
//│ Defined class Dup
//│ Declared Dup.MthDup: Dup['A, 'A0] -> ('A0 -> 'B) -> 'B
//│ Defined Dup.MthDup: Dup['A, 'A0] -> ('A0 -> 'a) -> 'a

t = Dup { x = 42 }
//│ t: Dup[in 'A | 'A0 out 'A & (42 | 'A0), in 'A | 'A0 out 'A & (42 | 'A0)] with {x: 42}

:stats
t : Dup[bool, int]
//│ res: Dup[bool, int]
//│ constrain calls  : 53
//│ annoying  calls  : 41
//│ subtyping calls  : 46

:stats
t : Dup[int, bool]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.596: 	t : Dup[int, bool]
//│ ║         	^
//│ ╟── integer literal of type `42` does not match type `bool`
//│ ║  l.585: 	t = Dup { x = 42 }
//│ ║         	              ^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.596: 	t : Dup[int, bool]
//│ ╙──       	             ^^^^
//│ res: Dup[int, bool]
//│ constrain calls  : 62
//│ annoying  calls  : 41
//│ subtyping calls  : 46

:stats
t.MthDup (fun x -> mul 2 x)
//│ res: int
//│ constrain calls  : 89
//│ annoying  calls  : 27
//│ subtyping calls  : 38

// TODO-simplif
// :ds
:stats
t.MthDup id
//│ res: 42
//│ constrain calls  : 74
//│ annoying  calls  : 25
//│ subtyping calls  : 55


// We don't currently analyze forward method declarations
:e
class A
  method Yes = B { x = 1 }
  method Nope = this.Yes.F1
class B: { x: int }
  method F1: int
  method F1 = 1
//│ ╔══[ERROR] Method F1 not found
//│ ║  l.632: 	  method Nope = this.Yes.F1
//│ ╙──       	                ^^^^^^^^^^^
//│ Defined class A
//│ Defined A.Yes: A -> (B & {x: 1})
//│ Defined A.Nope: A -> error
//│ Defined class B
//│ Declared B.F1: B -> int
//│ Defined B.F1: B -> 1


trait D
  method G = 1
trait E
  method G: int
class H: D & E
  method G = 2
//│ ╔══[ERROR] Overriding method D.G without explicit declaration is not allowed.
//│ ║  l.652: 	  method G = 2
//│ ║         	         ^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.648: 	  method G = 1
//│ ╙──       	         ^^^^^
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.652: 	  method G = 2
//│ ║         	         ^^^^^
//│ ╟── integer literal of type `2` does not match type `1`
//│ ║  l.652: 	  method G = 2
//│ ║         	             ^
//│ ╟── but it flows into method definition with expected type `1`
//│ ║  l.652: 	  method G = 2
//│ ║         	         ^^^^^
//│ ╟── Note: constraint arises from integer literal:
//│ ║  l.648: 	  method G = 1
//│ ║         	             ^
//│ ╟── from inherited method definition:
//│ ║  l.648: 	  method G = 1
//│ ╙──       	         ^^^^^
//│ Defined trait D
//│ Defined D.G: D -> 1
//│ Defined trait E
//│ Declared E.G: E -> int
//│ Defined class H
//│ Defined H.G: H -> 2

h = H{}
//│ h: H

d = h: D
//│ d: D

d.(D.G)
//│ res: 1

((H{}): D).(D.G)
//│ res: 1


trait D2
  method G2 = 1
trait E2
  method G2: bool
class H2: D2 & E2
//│ ╔══[ERROR] Type mismatch in inherited method definition:
//│ ║  l.695: 	  method G2 = 1
//│ ║         	         ^^^^^^
//│ ╟── integer literal of type `1` does not match type `bool`
//│ ║  l.695: 	  method G2 = 1
//│ ║         	              ^
//│ ╟── but it flows into inherited method definition with expected type `bool`
//│ ║  l.695: 	  method G2 = 1
//│ ║         	         ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.697: 	  method G2: bool
//│ ║         	             ^^^^
//│ ╟── from inherited method declaration:
//│ ║  l.697: 	  method G2: bool
//│ ╙──       	         ^^^^^^^^
//│ Defined trait D2
//│ Defined D2.G2: D2 -> 1
//│ Defined trait E2
//│ Declared E2.G2: E2 -> bool
//│ Defined class H2




trait Test7A
  method Mth7A: int
  method Mth7A = 42
trait Test7B
  method Mth7A: int
  method Mth7A = 43
//│ Defined trait Test7A
//│ Declared Test7A.Mth7A: Test7A -> int
//│ Defined Test7A.Mth7A: Test7A -> 42
//│ Defined trait Test7B
//│ Declared Test7B.Mth7A: Test7B -> int
//│ Defined Test7B.Mth7A: Test7B -> 43

:e
class Test7C: Test7A & Test7B
//│ ╔══[ERROR] An overriding method definition must be given when inheriting from multiple method definitions
//│ ║  l.737: 	class Test7C: Test7A & Test7B
//│ ║         	      ^^^^^^
//│ ╟── Definitions of method Mth7A inherited from:
//│ ╟── • Test7A
//│ ║  l.725: 	  method Mth7A = 42
//│ ║         	         ^^^^^^^^^^
//│ ╟── • Test7B
//│ ║  l.728: 	  method Mth7A = 43
//│ ╙──       	         ^^^^^^^^^^
//│ Defined class Test7C

Test7C.Mth7A
//│ res: error

class Test7D: Test7A & Test7B
  method Mth7A = this.(Test7A.Mth7A) * this.(Test7B.Mth7A)
//│ Defined class Test7D
//│ Defined Test7D.Mth7A: Test7D -> int

:e // TODO: suppress?
class Test7E: Test7C
  method Mth7A = 0
//│ ╔══[ERROR] An overriding method definition must be given when inheriting from multiple method definitions
//│ ║  l.737: 	class Test7C: Test7A & Test7B
//│ ║         	      ^^^^^^
//│ ╟── Definitions of method Mth7A inherited from:
//│ ╟── • Test7A
//│ ║  l.725: 	  method Mth7A = 42
//│ ║         	         ^^^^^^^^^^
//│ ╟── • Test7B
//│ ║  l.728: 	  method Mth7A = 43
//│ ╙──       	         ^^^^^^^^^^
//│ Defined class Test7E
//│ Defined Test7E.Mth7A: Test7E -> 0

trait Test7F
  method Mth7A = 0
//│ Defined trait Test7F
//│ Defined Test7F.Mth7A: Test7F -> 0

:e
class Test7G: Test7C & Test7F
//│ ╔══[ERROR] An overriding method definition must be given when inheriting from multiple method definitions
//│ ║  l.737: 	class Test7C: Test7A & Test7B
//│ ║         	      ^^^^^^
//│ ╟── Definitions of method Mth7A inherited from:
//│ ╟── • Test7A
//│ ║  l.725: 	  method Mth7A = 42
//│ ║         	         ^^^^^^^^^^
//│ ╟── • Test7B
//│ ║  l.728: 	  method Mth7A = 43
//│ ╙──       	         ^^^^^^^^^^
//│ ╔══[ERROR] An overriding method definition must be given when inheriting from multiple method definitions
//│ ║  l.780: 	class Test7G: Test7C & Test7F
//│ ║         	      ^^^^^^
//│ ╟── Definitions of method Mth7A inherited from:
//│ ╟── • Test7C
//│ ║  l.737: 	class Test7C: Test7A & Test7B
//│ ║         	      ^^^^^^
//│ ╟── • Test7F
//│ ║  l.775: 	  method Mth7A = 0
//│ ╙──       	         ^^^^^^^^^
//│ Defined class Test7G




class Test8A
    method F: int
    method F = 1
//│ Defined class Test8A
//│ Declared Test8A.F: Test8A -> int
//│ Defined Test8A.F: Test8A -> 1

:e
class Test8B: Test8A
    method F: 1
//│ ╔══[ERROR] Overriding method Test8A.F without an overriding definition is not allowed.
//│ ║  l.815: 	    method F: 1
//│ ║         	           ^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.808: 	    method F = 1
//│ ╙──       	           ^^^^^
//│ Defined class Test8B
//│ Declared Test8B.F: Test8B -> 1

class Test8C[A]
    method F: A
    method F = error
//│ Defined class Test8C
//│ Declared Test8C.F: Test8C['A] -> 'A
//│ Defined Test8C.F: Test8C['A] -> nothing

// We used to allow syntactically identitcal declarations for documentation,
//  but that's actually a bad idea (and the implementation was broken)
:e
class Test8D: Test8C[int]
    method F: int
//│ ╔══[ERROR] Overriding method Test8C.F without an overriding definition is not allowed.
//│ ║  l.836: 	    method F: int
//│ ║         	           ^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.827: 	    method F = error
//│ ╙──       	           ^^^^^^^^^
//│ Defined class Test8D
//│ Declared Test8D.F: Test8D -> int




class Test9A[A]: { x: A }
    method Mth9A = this.x
//│ Defined class Test9A
//│ Defined Test9A.Mth9A: Test9A['A] -> 'A

class Test9B: Test9A[int]
//│ Defined class Test9B

:e
:NoJS
error.(Test9B.Mth9A): nothing
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.859: 	error.(Test9B.Mth9A): nothing
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `nothing`
//│ ║  l.854: 	class Test9B: Test9A[int]
//│ ║         	                     ^^^
//│ ╟── but it flows into field selection with expected type `nothing`
//│ ║  l.859: 	error.(Test9B.Mth9A): nothing
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.859: 	error.(Test9B.Mth9A): nothing
//│ ╙──       	                      ^^^^^^^
//│ res: nothing
