
t = (1, 2, 3)
//│ t: (1, 2, 3,)
//│  = [ 1, 2, 3 ]

{} with {}
//│ res: anything
//│    = {}

:js
tx = t with { x = 1 }
//│ // Query 1
//│ globalThis.tx = withConstruct(t, { x: 1 });
//│ // End of generated code
//│ tx: (1, 2, 3,) & {x: 1}
//│   = [ 1, 2, 3, x: 1 ]

tx.x
//│ res: 1
//│    = 1

trait Hey: { x: int }
//│ Defined trait Hey

:e
Hey t
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.26: 	Hey t
//│ ║        	^^^^^
//│ ╟── tuple literal of type `{0: 1, 1: 2, 2: 3}` does not have field 'x'
//│ ║  l.2: 	t = (1, 2, 3)
//│ ║       	    ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{x: int}`
//│ ║  l.26: 	Hey t
//│ ║        	    ^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.22: 	trait Hey: { x: int }
//│ ╙──      	           ^^^^^^^^^^
//│ res: error | (1, 2, 3,) & #Hey
//│    = [ 1, 2, 3 ]

htx = Hey tx
//│ htx: (1, 2, 3,) & {x: 1} & #Hey
//│    = [ 1, 2, 3, x: 1 ]

htx.x
//│ res: 1
//│    = 1

f ((a, b, c)) = { a; b; c }
//│ f: (('a, 'b, 'c,),) -> {a: 'a, b: 'b, c: 'c}
//│  = [Function: f]

f t
//│ res: {a: 1, b: 2, c: 3}
//│    = { a: 1, b: 2, c: 3 }

f tx
//│ res: {a: 1, b: 2, c: 3}
//│    = { a: 1, b: 2, c: 3 }

f htx
//│ res: {a: 1, b: 2, c: 3}
//│    = { a: 1, b: 2, c: 3 }

f ((a, b)) = add a b
//│ f: ((int, int,),) -> int
//│  = [Function: f1]

:e
f t
f tx
f htx
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.71: 	f t
//│ ║        	^^^
//│ ╟── tuple literal of type `(1, 2, 3,)` does not match type `(?a, ?b,)`
//│ ║  l.2: 	t = (1, 2, 3)
//│ ║       	    ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?c, ?d,)`
//│ ║  l.71: 	f t
//│ ║        	  ^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.66: 	f ((a, b)) = add a b
//│ ╙──      	   ^^^^^^
//│ res: error | int
//│    = 3
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.72: 	f tx
//│ ║        	^^^^
//│ ╟── `with` extension of type `(1, 2, 3,) & {x: 1}` is not a 2-element tuple
//│ ║  l.11: 	tx = t with { x = 1 }
//│ ║        	     ^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?a, ?b,)`
//│ ║  l.72: 	f tx
//│ ║        	  ^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.66: 	f ((a, b)) = add a b
//│ ╙──      	   ^^^^^^
//│ res: error | int
//│    = 3
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.73: 	f htx
//│ ║        	^^^^^
//│ ╟── `with` extension of type `(1, 2, 3,) & {x: 1}` does not match type `(?a & ?b, ?b,) | ~#Hey`
//│ ║  l.11: 	tx = t with { x = 1 }
//│ ║        	     ^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?c & ?d, ?d,) | ~#Hey`
//│ ║  l.73: 	f htx
//│ ║        	  ^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.66: 	f ((a, b)) = add a b
//│ ╙──      	   ^^^^^^
//│ res: error | int
//│    = 3


g arg = case arg of { Hey -> arg.x | _ -> () }
//│ g: ({x: 'x} & #Hey | ~#Hey) -> (() | 'x)
//│  = [Function: g]

g htx
g tx
//│ res: 1 | ()
//│    = 1
//│ res: 1 | ()
//│    = 1

// TODO: pattern match for traits in JavaScript
g arg = case arg of { Hey -> arg.x | _ -> arg.y }
//│ g: ({x: 'x} & #Hey | {y: 'x} & ~#Hey) -> 'x
//│  = [Function: g1]

g htx
g (tx with { y = 2 })
//│ res: 1
//│    = 1
//│ res: 1 | 2
//│    = 2

:e
g tx
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.142: 	g tx
//│ ║         	^^^^
//│ ╟── expression of type `(nothing, nothing, 3,) & {x: 1} & ~#Hey` does not have field 'y'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.130: 	g arg = case arg of { Hey -> arg.x | _ -> arg.y }
//│ ╙──       	                                          ^^^^^
//│ res: 1 | error
//│    = 1

:ge
if bool then (1,) else (2,)
//│ res: (1 | 2,)
//│ Code generation encountered an error:
//│   type alias bool is not a valid expression

:ge
if bool then (1,) else (2, 3)
//│ res: Array[1 | 2 | 3] & {0: 1 | 2}
//│ Code generation encountered an error:
//│   type alias bool is not a valid expression

:ge
if bool then (1,) with { a = 1; b = 2 } else (2, 3) with { b = 3; c = 4 }
//│ res: Array[1 | 2 | 3] & {0: 1 | 2, b: 2 | 3}
//│ Code generation encountered an error:
//│   type alias bool is not a valid expression

:ge
if bool then (1,) else fun x -> x
//│ res: anything
//│ Code generation encountered an error:
//│   type alias bool is not a valid expression



t.0
t.1
//│ res: 1
//│    = 1
//│ res: 2
//│    = 2


t = (1, 2, 3) with {x = 1}
// t = (1, 2, 3)
//│ t: (1, 2, 3,) & {x: 1}
//│  = [ 1, 2, 3, x: 1 ]

t.x
//│ res: 1
//│    = 1

t.0
t.1
//│ res: 1
//│    = 1
//│ res: 2
//│    = 2


t = (1, 2, 3) with {0 = "oops"}
//│ t: {0: "oops", 1: 2, 2: 3}
//│  = [ 'oops', 2, 3 ]

// TODO (https://github.com/hkust-taco/mlscript/issues/69)
:e
(t: ("oops",int,int,)).0
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.210: 	(t: ("oops",int,int,)).0
//│ ║         	 ^
//│ ╟── `with` extension of type `{0: "oops", 1: 2, 2: 3}` is not a 3-element tuple
//│ ║  l.204: 	t = (1, 2, 3) with {0 = "oops"}
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `("oops", int, int,)`
//│ ║  l.210: 	(t: ("oops",int,int,)).0
//│ ║         	 ^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.210: 	(t: ("oops",int,int,)).0
//│ ╙──       	    ^^^^^^^^^^^^^^^^^
//│ res: "oops"
//│    = 'oops'


def f: (1, 2, 3) & (2, 2 | 3, 3 | 4)
//│ f: (nothing, 2, 3,)
//│  = <missing implementation>

def f: (1, 2, 3) & (2, 3)
//│ f: nothing
//│  = <missing implementation>

def f: (1, 2, 3) & Array[2 | 3 | 4]
//│ f: (nothing, 2, 3,)
//│  = <missing implementation>



a = (if true then (0, 1) else (2, 1, 2))[1]
//│ a: 0 | 1 | 2 | undefined
//│  = 1

case a of
  undefined -> 0, _ -> a
//│ res: 0 | 1 | 2
//│    = 1


