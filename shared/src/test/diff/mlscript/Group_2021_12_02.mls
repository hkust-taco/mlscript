
class Lit
class Add
class Const
//│ Defined class Lit
//│ Defined class Add
//│ Defined class Const

Lit
//│ res: anything -> Lit
//│    = [Function: res]

// TODO: support `as` types in parser and typer:
// def eval: ('b -> 'c) -> (Lit & {val: int} | Add & {lhs: 'a; rhs: 'a} | ~Lit & ~Add & 'b as 'a) -> (int | 'c)

type Expr[A] = Lit & {val: int} | Add & {lhs: Expr[A]; rhs: Expr[A]} | ~Lit & ~Add & A
//│ Defined type alias Expr

// TODO: make sure the simplified from this commented version is corect:
// def eval: ('b -> 'c & int) -> Expr['b] -> (int | 'c)

def eval: ('b -> int) -> Expr['b] -> int
//│ eval: ('b -> int) -> Expr['b] -> int
//│     = <missing implementation>

// TODO better simplify type!
rec def eval f e = case e of {
  | Lit -> e.val
  | Add -> eval f e.lhs + eval f e.rhs
  | _ -> f e
  }
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add & {lhs: 'b, rhs: 'b} | Lit & {val: int} | 'a & ~add & ~lit
//│   <:  eval:
//│ ('b -> int) -> Expr['b] -> int
//│     = [Function: eval]

:e
eval {} (Lit{} with { val = 1 })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.40: 	eval {} (Lit{} with { val = 1 })
//│ ║        	^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.40: 	eval {} (Lit{} with { val = 1 })
//│ ║        	     ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.22: 	def eval: ('b -> int) -> Expr['b] -> int
//│ ╙──      	          ^^^^^^^^^^^
//│ res: error | int
//│    = 1

eval (fun x -> x) (Lit{} with { val = 1 })
//│ res: int
//│    = 1

eval (fun x -> x) 1
//│ res: int
//│    = 1

eval (fun x -> x.hello) (Const{} with {hello=1})
//│ res: int
//│    = 1

:e
eval (fun x -> x.hello) {hello=1}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.66: 	eval (fun x -> x.hello) {hello=1}
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── record literal of type `{hello: 1}` does not match type `?b & ~add & ~lit | Add & {lhs: Expr[?b], rhs: Expr[?b]} | Lit & {val: int}`
//│ ║  l.66: 	eval (fun x -> x.hello) {hello=1}
//│ ║        	                        ^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.16: 	type Expr[A] = Lit & {val: int} | Add & {lhs: Expr[A]; rhs: Expr[A]} | ~Lit & ~Add & A
//│ ║        	               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.22: 	def eval: ('b -> int) -> Expr['b] -> int
//│ ╙──      	                         ^^^^^^^^
//│ res: error | int
//│    = 1

l = Lit{} with {hello=1}
//│ l: Lit & {hello: 1}
//│  = Lit { hello: 1 }
l: {hello:1}
//│ res: {hello: 1}
//│    = Lit { hello: 1 }


