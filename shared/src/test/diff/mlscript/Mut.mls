:NoJS

class A: { x: int }
//│ Defined class A

def muta1: MutArray[int]
//│ muta1: MutArray[int .. int]

def a1: Array[int]
//│ a1: Array[int]

a2 = A {x=3}
//│ a2: A & {x: 3}

def rc1 : { mut x : int}
rc1 = {mut x = 1}
//│ rc1: {x: int .. int}
//│ {x: 'a .. 1 | 'a}
//│   <:  rc1:
//│ {x: int .. int}

rc1.x <- 3

:e
rc1.x <- true
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.25: 	rc1.x <- true
//│ ║        	^^^^^^^^^^^^^
//│ ╟── reference of type `true` does not match type `int`
//│ ║  l.25: 	rc1.x <- true
//│ ╙──      	         ^^^^

//FIXME
rc2 = {mut x = 1}
rc2.x <- true
rc2.x <- "hello"
//│ rc2: {x: 'a .. 1 | 'a}

def g r = (fun x -> r) (r.x <- 3)
//│ g: ({x: 3 | 'a .. 'a} & 'b) -> 'b

g rc1
//│ res: {x: int .. int}

g rc2
//│ res: {x: 'a .. 1 | 3 | 'a}

trait T
//│ Defined trait T

def t1 : T & {mut x : int; y : bool}
t1 = T {mut x = 2; y = false}
t2 = T {x = 2}
//│ t1: {x: int .. int, y: bool} & t
//│ {x: 'a .. 2 | 'a, y: false} & t
//│   <:  t1:
//│ {x: int .. int, y: bool} & t
//│ t2: {x: 2} & t

t1.x <- 4

:e
t2.x <- 3
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.63: 	t2.x <- 3
//│ ║        	^^^^^^^^^
//│ ╟── integer literal of type `2` does not match type `nothing`
//│ ║  l.53: 	t2 = T {x = 2}
//│ ╙──      	            ^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.63: 	t2.x <- 3
//│ ║        	^^^^^^^^^
//│ ╟── integer literal of type `3` does not match type `nothing`
//│ ║  l.63: 	t2.x <- 3
//│ ╙──      	        ^

class B: { mut x: int; y: bool }
//│ Defined class B

def b1 : B
b1 = B { mut x = 2; y = true }
//│ b1: B
//│ B with {x: int & 'x .. 2 | 'x, y: true}
//│   <:  b1:
//│ B

b2 = B {mut x = 1; y = false}
//│ b2: B with {x: int & 'x .. 1 | 'x, y: false}

:e
b3 = B {x = 6; y = false}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.91: 	b3 = B {x = 6; y = false}
//│ ║        	     ^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `6` does not match type `nothing`
//│ ║  l.91: 	b3 = B {x = 6; y = false}
//│ ╙──      	            ^
//│ b3: (B with {x: 6, y: false}) | error

:e
b2.y <- b1.y
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.101: 	b2.y <- b1.y
//│ ║         	^^^^^^^^^^^^
//│ ╟── reference of type `false` does not match type `nothing`
//│ ║  l.87: 	b2 = B {mut x = 1; y = false}
//│ ╙──      	                       ^^^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.101: 	b2.y <- b1.y
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `bool` does not match type `nothing`
//│ ║  l.77: 	class B: { mut x: int; y: bool }
//│ ║        	                          ^^^^
//│ ╟── but it flows into field selection with expected type `nothing`
//│ ║  l.101: 	b2.y <- b1.y
//│ ╙──       	        ^^^^

b2.x <- b1.x
b1.x <- a2.x

def h : B -> int -> int
def h b i = (fun _ -> b.x) (b.x <- i) 
//│ h: B -> int -> int
//│ {x: 'a .. 'a & 'b} -> 'a -> 'b
//│   <:  h:
//│ B -> int -> int

h b1 2
//│ res: int

:e
h {mut x = 4} 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.132: 	h {mut x = 4} 2
//│ ║         	^^^^^^^^^^^^^
//│ ╟── record literal of type `{x: ?a .. ?a}` is not an instance of type B
//│ ║  l.132: 	h {mut x = 4} 2
//│ ║         	  ^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.121: 	def h : B -> int -> int
//│ ╙──       	        ^
//│ res: error | int

def mt1: (mut int, mut bool)
def mt2: (int, int)
def mt3: (mut int, mut int)
def mt4: (mut bool, bool, bool)
mt4 = (mut true, false, false)
//│ mt1: (int .. int, bool .. bool,)
//│ mt2: (int, int,)
//│ mt3: (int .. int, int .. int,)
//│ mt4: (bool .. bool, bool, bool,)
//│ ('a .. true | 'a, false, false,)
//│   <:  mt4:
//│ (bool .. bool, bool, bool,)

def emt: (mut int)
//│ emt: (int .. int,)

emt._1
//│ res: int

k1 = (mut 233, "hello", mut true)
k1._1 <- k1._1 + 1
//│ k1: ('a .. 233 | 'a, "hello", 'b .. true | 'b,)

:e
k1._2 <- 233
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.168: 	k1._2 <- 233
//│ ║         	^^^^^^^^^^^^
//│ ╟── string literal of type `"hello"` does not match type `nothing`
//│ ║  l.163: 	k1 = (mut 233, "hello", mut true)
//│ ╙──       	               ^^^^^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.168: 	k1._2 <- 233
//│ ║         	^^^^^^^^^^^^
//│ ╟── integer literal of type `233` does not match type `nothing`
//│ ║  l.168: 	k1._2 <- 233
//│ ╙──       	         ^^^

muta1[0] <- 1

mt1 = (mut 3, mut false)
//│ ('a .. 3 | 'a, 'b .. false | 'b,)
//│   <:  mt1:
//│ (int .. int, bool .. bool,)

mt1._2 <- true

:e
mt2._1 <- 2
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.192: 	mt2._1 <- 2
//│ ║         	^^^^^^^^^^^
//│ ╟── type `int` does not match type `nothing`
//│ ║  l.145: 	def mt2: (int, int)
//│ ╙──       	          ^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.192: 	mt2._1 <- 2
//│ ║         	^^^^^^^^^^^
//│ ╟── integer literal of type `2` does not match type `nothing`
//│ ║  l.192: 	mt2._1 <- 2
//│ ╙──       	          ^

def amf : MutArray['a] -> 'a
//│ amf: MutArray['a .. 'a] -> 'a

amf mt3
//│ res: int

:e
amf mt4
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.213: 	amf mt4
//│ ║         	^^^^^^^
//│ ╟── type `bool` does not match type `nothing`
//│ ║  l.147: 	def mt4: (mut bool, bool, bool)
//│ ║         	                          ^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.206: 	def amf : MutArray['a] -> 'a
//│ ╙──       	                   ^^
//│ res: bool | error

:e
muta1[1] <- false
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.226: 	muta1[1] <- false
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `false` does not match type `int`
//│ ║  l.226: 	muta1[1] <- false
//│ ╙──       	            ^^^^^

:e
a1[0] <- 1
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.235: 	a1[0] <- 1
//│ ║         	^^^^^^^^^^
//│ ╟── type `int` does not match type `nothing`
//│ ║  l.9: 	def a1: Array[int]
//│ ╙──     	              ^^^

mt1._1 <- mt2._1

:e
mt1._1 <- mt1._2
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.246: 	mt1._1 <- mt1._2
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── type `bool` does not match type `int`
//│ ║  l.144: 	def mt1: (mut int, mut bool)
//│ ║         	                       ^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.246: 	mt1._1 <- mt1._2
//│ ╙──       	          ^^^^^^

mt1._2 <- false

:e
mt1._2 <- 1
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.260: 	mt1._2 <- 1
//│ ║         	^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not match type `bool`
//│ ║  l.260: 	mt1._2 <- 1
//│ ╙──       	          ^

:e
mt1._1 <- (b1.t <- 4)
(mt1._1 <- b1.t) <- 4
b1.x <- 1 + 2 <- 4
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.269: 	mt1._1 <- (b1.t <- 4)
//│ ║         	           ^^^^^^^^^
//│ ╟── type `B` does not have field 't'
//│ ║  l.80: 	def b1 : B
//│ ║        	         ^
//│ ╟── but it flows into reference with expected type `{t: ?a .. ?a}`
//│ ║  l.269: 	mt1._1 <- (b1.t <- 4)
//│ ╙──       	           ^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.269: 	mt1._1 <- (b1.t <- 4)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `unit` does not match type `int`
//│ ╔══[ERROR] Cannot not assign to non-field
//│ ║  l.270: 	(mt1._1 <- b1.t) <- 4
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^
//│ res: error
//│ ╔══[ERROR] Cannot not assign to non-field
//│ ║  l.271: 	b1.x <- 1 + 2 <- 4
//│ ╙──       	            ^^^^^^

def f : {mut _1 : int} -> int -> unit
def g : (mut int, bool) -> int -> unit
//│ f: {_1: int .. int} -> int -> unit
//│ g: (int .. int, bool,) -> int -> unit

def f a n = a._1 <- n
//│ {_1: 'a .. 'a} -> 'a -> unit
//│   <:  f:
//│ {_1: int .. int} -> int -> unit

f mt1 1

:e
f mt2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.306: 	f mt2
//│ ║         	^^^^^
//│ ╟── type `int` does not match type `nothing`
//│ ║  l.293: 	def f : {mut _1 : int} -> int -> unit
//│ ╙──       	                  ^^^
//│ res: int -> unit | error

:e
g (1, true) 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.316: 	g (1, true) 2
//│ ║         	^^^^^^^^^^^
//│ ╟── type `int` does not match type `nothing`
//│ ║  l.294: 	def g : (mut int, bool) -> int -> unit
//│ ╙──       	             ^^^
//│ res: error | unit

w1 = 3 with {mut x = 4}
w1.x <- 3
//│ w1: 3 & {x: 'a .. 4 | 'a}

w1.x
//│ res: 4

def st1 : (int, )
def st2 : (mut int, )
//│ st1: (int,)
//│ st2: (int .. int,)

st1 = (3,)
st2 = (mut 4,)
//│ (3,)
//│   <:  st1:
//│ (int,)
//│ ('a .. 4 | 'a,)
//│   <:  st2:
//│ (int .. int,)

st2._1 <- 8

:e
st1._1 <- 9
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.349: 	st1._1 <- 9
//│ ║         	^^^^^^^^^^^
//│ ╟── type `int` does not match type `nothing`
//│ ║  l.332: 	def st1 : (int, )
//│ ╙──       	           ^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.349: 	st1._1 <- 9
//│ ║         	^^^^^^^^^^^
//│ ╟── integer literal of type `9` does not match type `nothing`
//│ ║  l.349: 	st1._1 <- 9
//│ ╙──       	          ^

def am1 : Array[(mut int)]
//│ am1: Array[(int .. int,)]

def map : Array['a] -> ('a -> unit) -> Array['a]
//│ map: Array['a] -> ('a -> unit) -> Array['a]

map am1 (fun x -> x[0] <- 1)
//│ res: Array[(int .. int,)]
