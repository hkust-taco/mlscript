:w
class Seq[A]: { size: int }
//│ Defined class Seq[±A]
//│ ╔══[WARNING] Type definition Seq has bivariant type parameters:
//│ ║  l.2: 	class Seq[A]: { size: int }
//│ ║       	      ^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.2: 	class Seq[A]: { size: int }
//│ ╙──     	          ^

:w
class ListBase[A]: Seq[A]
//│ Defined class ListBase[±A]
//│ ╔══[WARNING] Type definition ListBase has bivariant type parameters:
//│ ║  l.12: 	class ListBase[A]: Seq[A]
//│ ║        	      ^^^^^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.12: 	class ListBase[A]: Seq[A]
//│ ╙──      	               ^

class Nil: ListBase[nothing] & {}
class Cons[A]: ListBase[A] & { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons[+A]
//│ Defined type alias List[+A]

:e
Nil{}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.29: 	Nil{}
//│ ║        	^^^^^
//│ ╟── record literal of type `anything` does not have field 'size'
//│ ║  l.29: 	Nil{}
//│ ╙──      	   ^^
//│ res: error | Nil & {size: nothing}
//│    = Nil { size: undefined }

def Nil = Nil { size = 0 }
//│ Nil: Nil & {size: 0}
//│    = [Function: Nil1]

:e
:re
Cons 1 Nil
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.45: 	Cons 1 Nil
//│ ║        	^^^^^^
//│ ╟── integer literal of type `1` is not a record (expected a record with fields: size, tail, head)
//│ ║  l.45: 	Cons 1 Nil
//│ ╙──      	     ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.45: 	Cons 1 Nil
//│ ║        	^^^^^^^^^^
//│ ╟── application of type `Cons[?A] with {Cons#A = ?A, head: ?head, size: ?size, tail: ?tail}` is not a function
//│ ║  l.45: 	Cons 1 Nil
//│ ╙──      	^^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: (intermediate value) is not a function

Cons
//│ res: {head: 'A & 'head, size: int & 'size, tail: List['A] & 'tail} -> (Cons['A] with {head: 'head, size: 'size, tail: 'tail})
//│    = [Function: res]

// In the old inheritance semantics, this used to be required:
def Cons_old head tail =
  Cons (ListBase (Seq { size = succ tail.size }) with { head; tail })
//│ Cons_old: ('head & 'A) -> (List['A] & {size: int} & 'tail) -> (Cons['A] with {head: 'head, tail: 'tail})
//│         = [Function: Cons_old]

def Cons head tail =
  Cons { size = succ tail.size; head; tail }
//│ Cons: ('head & 'A) -> (List['A] & {size: int} & 'tail) -> (Cons['A] with {head: 'head, tail: 'tail})
//│     = [Function: Cons1]

// * Works thanks to variance analysis
Nil: ListBase[anything]
//│ res: ListBase[?]
//│    = Nil { size: 0 }

c = Cons 1 Nil
//│ c: Cons[1] with {tail: Nil & {size: 0}}
//│  = Cons { size: 1, head: 1, tail: Nil { size: 0 } }

c: ListBase[int]
//│ res: ListBase[?]
//│    = Cons { size: 1, head: 1, tail: Nil { size: 0 } }

c.head
//│ res: 1
//│    = 1

c.tail
//│ res: Nil & {size: 0}
//│    = Nil { size: 0 }

c.size
//│ res: int
//│    = 1

d = Cons 2 c
//│ d: Cons[1 | 2] with {head: 2, tail: Cons[1] with {tail: Nil & {size: 0}}}
//│  = Cons {
//│      size: 2,
//│      head: 2,
//│      tail: Cons { size: 1, head: 1, tail: Nil { size: 0 } }
//│    }

d.head
//│ res: 2
//│    = 2

d.size
//│ res: int
//│    = 2

d.tail
//│ res: Cons[1] with {tail: Nil & {size: 0}}
//│    = Cons { size: 1, head: 1, tail: Nil { size: 0 } }

d.tail.size
//│ res: int
//│    = 1

d.tail.head
d.tail.tail
//│ res: 1
//│    = 1
//│ res: Nil & {size: 0}
//│    = Nil { size: 0 }

