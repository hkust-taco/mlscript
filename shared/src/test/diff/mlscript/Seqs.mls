
class Seq[A]: { size: int }
//│ Defined class Seq

class ListBase[A]: Seq[A]
//│ Defined class ListBase

class Nil: ListBase[nothing] & {}
class Cons[A]: ListBase[A] & { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons
//│ Defined type List

:e
Nil{}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.16: 	Nil{}
//│ ║        	^^^^^
//│ ╟── expression of type `anything` does not have field 'size'
//│ ║  l.16: 	Nil{}
//│ ╙──      	   ^^
//│ res: nil & {size: nothing} | error

def Nil = Nil { size = 0 }
//│ Nil: nil & {size: 0}

// FIXME
Cons 1 Nil
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.29: 	Cons 1 Nil
//│ ║        	^^^^^^
//│ ╟── expression of type `1` does not match type `{head: ?a & ?b, size: int & ?c, tail: nil & {size: int} & ?d | (cons & {head: ?b, size: int, tail: ?f & (nil & {size: int} | ?e)}) as ?e & ?d}`
//│ ║  l.29: 	Cons 1 Nil
//│ ╙──      	     ^
//│ /!!!\ Uncaught error: scala.MatchError: ({head: (α24 & α23), size: (int & α25), tail: (List[α24] & α26)},|Some(([[α39]] -> α41))|None) (of class scala.Tuple2)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$5(ConstraintSolver.scala:105)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)
//│ 	at: mlscript.ConstraintSolver.annoyingImpl$1(ConstraintSolver.scala:50)
//│ 	at: mlscript.ConstraintSolver.annoying$1(ConstraintSolver.scala:47)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$5(ConstraintSolver.scala:118)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)
//│ 	at: mlscript.ConstraintSolver.annoyingImpl$1(ConstraintSolver.scala:50)
//│ 	at: mlscript.ConstraintSolver.annoying$1(ConstraintSolver.scala:47)

// TODO: figure out why the overcomplicated type!!
Cons
//│ res: {head: 'a & 'b, size: int & 'c, tail: nil & {size: int} & 'd | (cons & {head: 'b, size: int, tail: 'f & (nil & {size: int} | 'e)}) as 'e & 'd} -> cons & {head: 'b & 'a, size: int & 'c, tail: nil & {size: int} & 'd | (cons & {head: 'b, size: int, tail: 'h | nil & {size: int} | 'g}) as 'g & 'd}

// In the old inheritance semantics, this used to be required:
def Cons_old head tail =
  Cons (ListBase (Seq { size = succ tail.size }) with { head; tail })
//│ Cons_old: 'a -> nil & {size: int} & 'b | (cons & {head: anything, size: int, tail: 'd & (nil & {size: int} | 'c)}) as 'c & 'b -> cons & {head: 'a, size: int, tail: 'b}

def Cons head tail =
  Cons { size = succ tail.size; head; tail }
//│ Cons: 'a -> nil & {size: int} & 'b | (cons & {head: anything, size: int, tail: 'd & (nil & {size: int} | 'c)}) as 'c & 'b -> cons & {head: 'a, size: int, tail: 'b}

Nil: ListBase[anything]
//│ res: listBase & {size: int}

def c = Cons 1 Nil
//│ c: cons & {head: 1, size: int, tail: nil & {size: 0}}

c: ListBase[int]
//│ res: listBase & {size: int}

c.head
//│ res: 1

c.tail
//│ res: nil & {size: 0}

c.size
//│ res: int

def d = Cons 2 c
//│ d: cons & {head: 1 | 2, size: int, tail: cons & {head: 1, size: int, tail: nil & {size: 0}}}

d.head
//│ res: 1 | 2

d.size
//│ res: int

d.tail
//│ res: cons & {head: 1, size: int, tail: nil & {size: 0}}

d.tail.size
//│ res: int

d.tail.head
d.tail.tail
//│ res: 2 | 1
//│ res: nil & {size: 0}

