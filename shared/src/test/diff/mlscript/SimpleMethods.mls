
:e
class C0
  method Foo0[A](a: A) = a + 1
  method Foo1[A](a: A) = { a }
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.4: 	  method Foo0[A](a: A) = a + 1
//│ ║       	                         ^^^
//│ ╟── reference of type `A` does not match type `int`
//│ ║  l.4: 	  method Foo0[A](a: A) = a + 1
//│ ║       	                         ^
//│ ╟── Note: method type parameter A is defined at:
//│ ║  l.4: 	  method Foo0[A](a: A) = a + 1
//│ ╙──     	              ^
//│ Defined class C0
//│ Defined C0.Foo0: C0 -> anything -> (error | int)
//│ Defined C0.Foo1: C0 -> 'A -> {a: 'A}

(C0{}).Foo0
//│ res: anything -> (error | int)
//│    = [Function: Foo0]

f1 = (C0{}).Foo1
//│ f1: 'A -> {a: 'A}
//│   = [Function: Foo1]

f1 1
//│ res: {a: 1}
//│    = { a: 1 }


class C1
  method F: int
  method F = 1
//│ Defined class C1
//│ Declared C1.F: C1 -> int
//│ Defined C1.F: C1 -> 1

class C2: C1
  method F = 2
//│ Defined class C2
//│ Defined C2.F: C2 -> 2


class C3
  method F: 'a -> 'a
  method F = id
//│ Defined class C3
//│ Declared C3.F: C3 -> 'a -> 'a
//│ Defined C3.F: C3 -> 'a -> 'a

class C4: C3
  method F = id
//│ Defined class C4
//│ Defined C4.F: C4 -> 'a -> 'a


:e
:w
class C5[A]
  method F(x: A) = x + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.61: 	  method F(x: A) = x + 1
//│ ║        	                   ^^^
//│ ╟── reference of type `A` does not match type `int`
//│ ║  l.61: 	  method F(x: A) = x + 1
//│ ║        	                   ^
//│ ╟── Note: class type parameter A is defined at:
//│ ║  l.60: 	class C5[A]
//│ ╙──      	         ^
//│ Defined class C5[±A]
//│ Defined C5.F: C5['A] -> 'A -> (error | int)
//│ ╔══[WARNING] Type definition C5 has bivariant type parameters:
//│ ║  l.60: 	class C5[A]
//│ ║        	      ^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.60: 	class C5[A]
//│ ╙──      	         ^


:w
class Tru[A]
    method Test f = true
    method Tru = this.Test (fun x -> error)
//│ Defined class Tru[±A]
//│ Defined Tru.Test: Tru['A] -> anything -> true
//│ Defined Tru.Tru: Tru['A] -> true
//│ ╔══[WARNING] Type definition Tru has bivariant type parameters:
//│ ║  l.82: 	class Tru[A]
//│ ║        	      ^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.82: 	class Tru[A]
//│ ╙──      	          ^


:e
:ge
class Hey
    rec method A = B
    rec method B = 1
//│ ╔══[ERROR] identifier not found: B
//│ ║  l.99: 	    rec method A = B
//│ ╙──      	                   ^
//│ Defined class Hey
//│ Defined Hey.A: Hey -> error
//│ Defined Hey.B: Hey -> 1
//│ Code generation encountered an error:
//│   unresolved symbol B

