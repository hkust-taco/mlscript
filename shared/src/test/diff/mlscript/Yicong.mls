
trait T1
trait T2
//│ Defined trait T1
//│ Defined trait T2

r = if true then T1 1 else T2 2
//│ r: 1 & #T1 | 2 & #T2
//│  = [Number: 1]

case r of { T1 -> r | _ -> 0 }
//│ res: 0 | #T1 & (1 | 2 & #T2)
//│    = [Number: 1]

// TODO also factor ClassTag-s like `2`:
case r of { T1 -> r | T2 -> r }
//│ res: 1 & #T1 | 'a | #T2 & (2 & #T1 | 2 & ~#T1 | 2 & ~#T2 | 2 & ~'a)
//│    = [Number: 1]

r = if true then T1 ((1,2,3)) else T2 ((3,4,5,4))
//│ r: (1, 2, 3,) & #T1 | (3, 4, 5, 4,) & #T2
//│  = [ 1, 2, 3 ]

case r of { T1 -> r | _ -> 0 }
//│ res: 0 | #T1 & ((1, 2, 3,) | (3, 4, 5, 4,) & #T2)
//│    = [ 1, 2, 3 ]

case r of { T1 -> r | T2 -> r }
//│ res: (1, 2, 3,) & #T1 | 'a | #T2 & ((3, 4, 5, 4,) & #T1 | (3, 4, 5, 4,) & ~#T1 | (3, 4, 5, 4,) & ~#T2 | (3, 4, 5, 4,) & ~'a)
//│    = [ 1, 2, 3 ]


x = 1
//│ x: 1
//│  = 1

t2 = T2 x
//│ t2: 1 & #T2
//│   = [Number: 1]

t1 = T1 t2
//│ t1: 1 & #T1 & #T2
//│   = [Number: 1]

t1: T1
t1: T2
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)


class C1[A]: { a: A }
class C2[A]: { a: A }
//│ Defined class C1[+A]
//│ Defined class C2[+A]

r = if true then C1 {a=x} else C2 {a=(3,4,5,4)}
//│ r: C1[1] | C2[(3, 4, 5, 4,)]
//│  = C1 { a: 1 }

case r of { C1 -> r.a | _ -> 0 }
//│ res: 0 | 1
//│    = 1

def x1: (int, bool)
def x2: (string, unit)
//│ x1: (int, bool,)
//│   = <missing implementation>
//│ x2: (string, unit,)
//│   = <missing implementation>


if true then x1 else x2
//│ res: (int | string, bool | unit,)
//│    = <no result>
//│      x1 is not implemented



def f: ((1,2) | (3,4)) -> anything
//│ f: (1 | 3, 2 | 4,) -> anything
//│  = <missing implementation>

fun (x, y) -> f ((x,y))
//│ res: (1 | 3, 2 | 4,) -> anything
//│    = <no result>
//│      f is not implemented

def f: ((1,2)&t1 | (3,4)&t2) -> anything
//│ f: ((1, 2,) & #T1 | (3, 4,) & #T2) -> anything
//│  = <missing implementation>

:e
f ((true,false))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.102: 	f ((true,false))
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── reference of type `true` does not match type `1 | 3`
//│ ║  l.102: 	f ((true,false))
//│ ╙──       	    ^^^^
//│ res: error
//│    = <no result>
//│      f is not implemented

:e
fun (x, y) -> f ((x,y))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.114: 	fun (x, y) -> f ((x,y))
//│ ║         	              ^^^^^^^^^
//│ ╟── tuple literal of type `(?a, ?b,)` does not match type `(1, 2,) & #T1 | (3, 4,) & #T2`
//│ ║  l.114: 	fun (x, y) -> f ((x,y))
//│ ║         	                 ^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.97: 	def f: ((1,2)&t1 | (3,4)&t2) -> anything
//│ ╙──      	       ^^^^^^^^^^^^^^^^^^^^^
//│ res: (nothing, nothing,) -> anything
//│    = <no result>
//│      f is not implemented

fun (x, y) -> f (T1 ((x,y)))
//│ res: (1, 2,) -> anything
//│    = <no result>
//│      f is not implemented

fun (x, y) -> f (T2 ((x,y)))
//│ res: (3, 4,) -> anything
//│    = <no result>
//│      f is not implemented

:ns
res = if true then (1,2, "hello") else (true, 3)
//│ res: forall 'a. 'a
//│   where
//│     'a :> (1, 2, "hello",) | (true, 3,)
//│    = [ 1, 2, 'hello' ]

res = if true then (1, 2, 3, 'hello') else (true, 4, false)
hhh = if false then (45,345, 'bye', true) else (false, 3)
t = if false then res else hhh
g = if true then (6,6,6) else res
gwx = g with {x=123}
gwx.x with {y = gwx}
//│ res: Array["hello" | 1 | 2 | 3 | 4 | false | true] & {_1: 1 | true, _2: 2 | 4, _3: 3 | false}
//│    = [ 1, 2, 3, 'hello' ]
//│ hhh: Array["bye" | 345 | 3 | 45 | false | true] & {_1: 45 | false, _2: 345 | 3}
//│    = [ false, 3 ]
//│ t: Array["bye" | "hello" | 1 | 2 | 345 | 3 | 45 | 4 | false | true] & {_1: 1 | 45 | false | true, _2: 2 | 345 | 3 | 4}
//│  = [ false, 3 ]
//│ g: Array["hello" | 1 | 2 | 3 | 4 | 6 | false | true] & {_1: 1 | 6 | true, _2: 2 | 4 | 6, _3: 3 | 6 | false}
//│  = [ 6, 6, 6 ]
//│ gwx: Array["hello" | 1 | 2 | 3 | 4 | 6 | false | true] & {_1: 1 | 6 | true, _2: 2 | 4 | 6, _3: 3 | 6 | false, x: 123}
//│    = [ 6, 6, 6, x: 123 ]
//│ res: 123 & {y: Array["hello" | 1 | 2 | 3 | 4 | 6 | false | true] & {_1: 1 | 6 | true, _2: 2 | 4 | 6, _3: 3 | 6 | false, x: 123}}
//│    = [Number: 123] { y: [ 6, 6, 6, x: 123 ] }

def f: (int, bool) -> int
def g: (bool, string, int) -> int
// def h x = (f(x), g(x))
//│ f: (int, bool,) -> int
//│  = <missing implementation>
//│ g: (bool, string, int,) -> int
//│  = <missing implementation>

p1 = if true then (1, 2, 2) else (true, false)
//│ p1: Array[1 | 2 | false | true] & {_1: 1 | true, _2: 2 | false}
//│   = [ 1, 2, 2 ]

def q: Array[int]
q = if true then (1,1) else (1,1,1)
//│ q: Array[int]
//│  = <missing implementation>
//│ Array[1] & {_1: 1, _2: 1}
//│   <:  q:
//│ Array[int]
//│  = [ 1, 1 ]

// Note: function with non-tuple domain
def h f = (f (1,2,false), f (1,true))
//│ h: ((1, 2, false,) -> 'a & (1, true,) -> 'b) -> ('a, 'b,)
//│  = [Function: h]

:e
h (fun x -> x[0])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.191: 	h (fun x -> x[0])
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── argument list of type `(1, true,)` does not match type `(?a,)`
//│ ║  l.186: 	def h f = (f (1,2,false), f (1,true))
//│ ╙──       	                            ^^^^^^^^
//│ res: (undefined, undefined,) | error
//│    = [ undefined, undefined ]

:e
h (fun (x, y) -> x)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.202: 	h (fun (x, y) -> x)
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── argument list of type `(1, 2, false,)` does not match type `(?a, ?b,)`
//│ ║  l.186: 	def h f = (f (1,2,false), f (1,true))
//│ ║         	             ^^^^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.202: 	h (fun (x, y) -> x)
//│ ╙──       	       ^^^^^^
//│ res: (nothing, 1,) | error
//│    = [ 1, 1 ]

def h f = (f ((1,2,false)), f ((1,true)))
//│ h: ((1, 2, false,) -> 'a & (1, true,) -> 'b) -> ('a, 'b,)
//│  = [Function: h1]

h (fun x -> x[0])
h (fun x -> x._1)
//│ res: (1 | 2 | false | undefined, 1 | true | undefined,)
//│    = [ 1, 1 ]
//│ res: (1, 1,)
//│    = [ undefined, undefined ]


q1 = (1,1,1,1)
q2 = (1,1)
fx ((a,b,c)) = a + b + c
//│ q1: (1, 1, 1, 1,)
//│   = [ 1, 1, 1, 1 ]
//│ q2: (1, 1,)
//│   = [ 1, 1 ]
//│ fx: (int, int, int,) -> int
//│   = [Function: fx]

:e
fx q1
fx q2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.238: 	fx q1
//│ ║         	^^^^^
//│ ╟── tuple literal of type `(1, 1, 1, 1,)` does not match type `(?a, ?b, ?c,)`
//│ ║  l.227: 	q1 = (1,1,1,1)
//│ ║         	     ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?d, ?e, ?f,)`
//│ ║  l.238: 	fx q1
//│ ║         	   ^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.229: 	fx ((a,b,c)) = a + b + c
//│ ╙──       	    ^^^^^^^
//│ res: error | int
//│    = 3
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.239: 	fx q2
//│ ║         	^^^^^
//│ ╟── tuple literal of type `(1, 1,)` does not match type `(?a, ?b, ?c,)`
//│ ║  l.228: 	q2 = (1,1)
//│ ║         	     ^^^^^
//│ ╟── but it flows into reference with expected type `(?d, ?e, ?f,)`
//│ ║  l.239: 	fx q2
//│ ║         	   ^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.229: 	fx ((a,b,c)) = a + b + c
//│ ╙──       	    ^^^^^^^
//│ res: error | int
//│    = NaN


// :d
q = (1,1)
//│ (1, 1,)
//│   <:  q:
//│ Array[int]
//│  = [ 1, 1 ]

def sum: Array[int] -> int
t1 = (1,2,3,4,5,6)
sum t1
//│ sum: Array[int] -> int
//│    = <missing implementation>
//│ t1: (1, 2, 3, 4, 5, 6,)
//│   = [ 1, 2, 3, 4, 5, 6 ]
//│ res: int
//│    = <no result>
//│      sum is not implemented

:e
t2 = (1,1,2,true)
sum t2
//│ t2: (1, 1, 2, true,)
//│   = [ 1, 1, 2, true ]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.290: 	sum t2
//│ ║         	^^^^^^
//│ ╟── reference of type `true` is not an instance of type `int`
//│ ║  l.289: 	t2 = (1,1,2,true)
//│ ║         	            ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.277: 	def sum: Array[int] -> int
//│ ╙──       	               ^^^
//│ res: error | int
//│    = <no result>
//│      sum is not implemented

t2: (1, 1, 2, bool)
t2: Array[int | bool]
//│ res: (1, 1, 2, bool,)
//│    = [ 1, 1, 2, true ]
//│ res: Array[bool | int]
//│    = [ 1, 1, 2, true ]

class Wrapped[A]: {len: int; inner: Array[A]}
//│ Defined class Wrapped[+A]

def tk: Array['a] -> Wrapped['a]
tk ((1,2,3,true,false))
//│ tk: Array['a] -> Wrapped['a]
//│   = <missing implementation>
//│ res: Wrapped[1 | 2 | 3 | false | true]
//│    = <no result>
//│      tk is not implemented

class Two[A, B]: {fst: Array[A]; snd: Array[B]}
two = Two {fst=(1,2,3); snd=(true,false)}
two.fst
tk (two.snd)
//│ Defined class Two[+A, +B]
//│ two: Two[1 | 2 | 3, bool] & {fst: (1, 2, 3,), snd: (true, false,)}
//│    = Two { fst: [ 1, 2, 3 ], snd: [ true, false ] }
//│ res: (1, 2, 3,)
//│    = [ 1, 2, 3 ]
//│ res: Wrapped[bool]
//│    = <no result>
//│      tk is not implemented

:e
def a1: Array[int]
a1 = (1,2,true,'hello')
a1._2
//│ a1: Array[int]
//│   = <missing implementation>
//│ (1, 2, true, "hello",)
//│   <:  a1:
//│ Array[int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.339: 	a1 = (1,2,true,'hello')
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `int`
//│ ║  l.339: 	a1 = (1,2,true,'hello')
//│ ║         	          ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.338: 	def a1: Array[int]
//│ ╙──       	              ^^^
//│   = [ 1, 2, true, 'hello' ]
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.340: 	a1._2
//│ ║         	^^^^^
//│ ╟── type `Array[int]` does not have field '_2'
//│ ║  l.338: 	def a1: Array[int]
//│ ║         	        ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{_2: ?a}`
//│ ║  l.340: 	a1._2
//│ ╙──       	^^
//│ res: error
//│    = undefined

def getx p = p.x
def a123: Array[int]
a123 = (1,2,3)
getx (a123 with {x=('hello', a123)})
//│ getx: {x: 'x} -> 'x
//│     = [Function: getx]
//│ a123: Array[int]
//│     = <missing implementation>
//│ (1, 2, 3,)
//│   <:  a123:
//│ Array[int]
//│     = [ 1, 2, 3 ]
//│ res: ("hello", Array[int],)
//│    = [ 'hello', [ 1, 2, 3 ] ]

def append: Array['a] -> Array['b] -> Array['a | 'b]
append ((1,2,false)) (((), 'hi'))
//│ append: Array['a] -> Array['a] -> Array['a]
//│       = <missing implementation>
//│ res: Array["hi" | () | 1 | 2 | false]
//│    = <no result>
//│      append is not implemented

def append2: MutArray['aa] -> MutArray['bb] -> MutArray['aa | 'bb]
append2 ((mut 1, mut 2, mut false)) ((mut (), mut 'hi'))
//│ append2: MutArray['aa] -> MutArray['bb] -> MutArray['aa | 'bb]
//│        = <missing implementation>
//│ res: MutArray['aa | 'bb]
//│   where
//│     'bb := 'a
//│     'a :> "hi" | ()
//│     'aa :> 'b
//│         <: 'c & 'b
//│     'b :> 1 | 2 | false
//│        <: 'c
//│     'c <: 'b
//│    = <no result>
//│      append2 is not implemented

:e
append2 ((mut 1, mut 2, mut false)) ((mut (), 'hi'))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.408: 	append2 ((mut 1, mut 2, mut false)) ((mut (), 'hi'))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `(mut ?a, "hi",)` does not match type `MutArray['bb]`
//│ ║  l.408: 	append2 ((mut 1, mut 2, mut false)) ((mut (), 'hi'))
//│ ║         	                                     ^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.391: 	def append2: MutArray['aa] -> MutArray['bb] -> MutArray['aa | 'bb]
//│ ╙──       	                              ^^^^^^^^^^^^^
//│ res: MutArray['aa | 'bb] | error
//│   where
//│     'bb :> "hi" | ()
//│     'aa :> 'a
//│         <: 'b & 'a
//│     'a :> 1 | 2 | false
//│        <: 'b
//│     'b <: 'a
//│    = <no result>
//│      append2 is not implemented

def ta: T1 & Array[int]
ta = T1 a123
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)

def tb: T2 & Array[int]
tb = T2 ((1,2,3))
def tba: (T2 & Array[int | bool]) -> (T2 & int)
tba tb
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)

def k: (true, false, 3) & Array[int | true]
def k2: Array[1 | 2 | 3] & (true, 'hi', 2, 3)
//│ k: (true, nothing, 3,)
//│  = <missing implementation>
//│ k2: (nothing, nothing, 2, 3,)
//│   = <missing implementation>

def gett1 p q = case p of {T1 -> p | _ -> q}
gett1 ta (T1 123)
def gt: (T1 & Array[int | bool]) -> Array[int]
gt ta
def tg: ((T1 & Array[int]) | (T2 & Array[bool])) -> (T1 | T2)
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)

gett1 ta (T1 123)
tg (T1 ((1,2,3,4)))
tg (T2 ((true,false,false)))
//│ res: #T1 & (123 | Array[int])
//│ ╔══[ERROR] identifier not found: tg
//│ ║  l.484: 	tg (T1 ((1,2,3,4)))
//│ ╙──       	^^
//│ res: error
//│ ╔══[ERROR] identifier not found: tg
//│ ║  l.485: 	tg (T2 ((true,false,false)))
//│ ╙──       	^^
//│ res: error
//│ Code generation encountered an error:
//│   unresolved symbol gett1

def fst ((a, b)) = a
def snd ((a, b)) = b
def get: Array['a] -> int -> 'a
//│ fst: ('a, anything,) -> 'a
//│    = [Function: fst]
//│ snd: (anything, 'a,) -> 'a
//│    = [Function: snd]
//│ get: Array['a] -> int -> 'a
//│    = <missing implementation>

fst ((1,2))
snd ((1,2))
get ((1,2,3)) 1
//│ res: 1
//│    = 1
//│ res: 2
//│    = 2
//│ res: 1 | 2 | 3
//│    = <no result>
//│      get is not implemented

def intersect: Array['a] -> Array['b] -> Array['a & 'b]
iarr = intersect ((1,2,3,false)) ((1,5,true,'hi',false))
//│ intersect: Array['a] -> Array['b] -> Array['a & 'b]
//│          = <missing implementation>
//│ iarr: Array[1 | false]
//│     = <no result>
//│       intersect is not implemented

:e
fst iarr
snd (T1 ((1,2,3)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.528: 	fst iarr
//│ ║         	^^^^^^^^
//│ ╟── type `Array['a & 'b]` is not a 2-element tuple
//│ ║  l.519: 	def intersect: Array['a] -> Array['b] -> Array['a & 'b]
//│ ║         	                                         ^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?a, ?b,)`
//│ ║  l.528: 	fst iarr
//│ ║         	    ^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.498: 	def fst ((a, b)) = a
//│ ╙──       	         ^^^^^^
//│ res: error
//│    = <no result>
//│      iarr and intersect are not implemented
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.529: 	snd (T1 ((1,2,3)))
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `(1, 2, 3,)` does not match type `(?a, ?b,) | ~#T1`
//│ ║  l.529: 	snd (T1 ((1,2,3)))
//│ ║         	         ^^^^^^^
//│ ╟── but it flows into application with expected type `(?a, ?b,) | ~#T1`
//│ ║  l.529: 	snd (T1 ((1,2,3)))
//│ ║         	     ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.499: 	def snd ((a, b)) = b
//│ ╙──       	         ^^^^^^
//│ res: error
//│    = 2

v1 = T1 (T2 ((1,2,true)))
v2 = T2 (v1 with {x=v1})
def inn: (T1 & T2 & Array['a]) -> 'a
def inn2: (T2 & Array[Array['a]]) -> Array[T1 & 'a]
inn v1
inn (v2 with {y= T1 ((1,2,3))})
def v3: Array[Array[(int, true)]]
r1 = inn2 (T2 v3)
inn (T1 (T2 v3))
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)

v3: Array[Array[Array[int | bool]]]
inn2 (T2 r1)
//│ ╔══[ERROR] identifier not found: v3
//│ ║  l.581: 	v3: Array[Array[Array[int | bool]]]
//│ ╙──       	^^
//│ res: Array[Array[Array[bool | int]]]
//│ ╔══[ERROR] identifier not found: inn2
//│ ║  l.582: 	inn2 (T2 r1)
//│ ╙──       	^^^^
//│ ╔══[ERROR] identifier not found: r1
//│ ║  l.582: 	inn2 (T2 r1)
//│ ╙──       	         ^^
//│ res: error
//│ Code generation encountered an error:
//│   unresolved symbol v3

:e
inn (T1 v3)
inn2 v1
//│ ╔══[ERROR] identifier not found: v3
//│ ║  l.598: 	inn (T1 v3)
//│ ╙──       	        ^^
//│ res: nothing
//│ ╔══[ERROR] identifier not found: inn2
//│ ║  l.599: 	inn2 v1
//│ ╙──       	^^^^
//│ res: error
//│ Code generation encountered an error:
//│   unresolved symbol inn

def ra: ('a, 'a) as 'a
ra: Array[Array['a]] as 'a
ra: Array[('a, 'a)] as 'a
ra: (Array['a], Array['a]) as 'a
//│ ra: 'a
//│   where
//│     'a :> ('a, 'a,)
//│   = <missing implementation>
//│ res: 'a
//│   where
//│     'a :> Array[Array['a]]
//│    = <no result>
//│      ra is not implemented
//│ res: 'a
//│   where
//│     'a :> Array[('a, 'a,)]
//│    = <no result>
//│      ra is not implemented
//│ res: 'a
//│   where
//│     'a :> (Array['a], Array['a],)
//│    = <no result>
//│      ra is not implemented

:e
ra: ('a, 'a, 'a) as 'a
ra: (Array['a], Array['a], Array['a]) as 'a
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.636: 	ra: ('a, 'a, 'a) as 'a
//│ ║         	^^
//│ ╟── type `('a, 'a,)` does not match type `('a0, 'a0, 'a0,)`
//│ ║  l.611: 	def ra: ('a, 'a) as 'a
//│ ║         	        ^^^^^^^^
//│ ╟── but it flows into reference with expected type `('a1, 'a1, 'a1,)`
//│ ║  l.636: 	ra: ('a, 'a, 'a) as 'a
//│ ║         	^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.636: 	ra: ('a, 'a, 'a) as 'a
//│ ╙──       	    ^^^^^^^^^^^^
//│ res: 'a
//│   where
//│     'a :> ('a, 'a, 'a,)
//│    = <no result>
//│      ra is not implemented
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.637: 	ra: (Array['a], Array['a], Array['a]) as 'a
//│ ║         	^^
//│ ╟── type `('a, 'a,)` does not match type `(Array['a0], Array['a0], Array['a0],)`
//│ ║  l.611: 	def ra: ('a, 'a) as 'a
//│ ║         	        ^^^^^^^^
//│ ╟── but it flows into reference with expected type `(Array['a1], Array['a1], Array['a1],)`
//│ ║  l.637: 	ra: (Array['a], Array['a], Array['a]) as 'a
//│ ║         	^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.637: 	ra: (Array['a], Array['a], Array['a]) as 'a
//│ ╙──       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: 'a
//│   where
//│     'a :> (Array['a], Array['a], Array['a],)
//│    = <no result>
//│      ra is not implemented

def tktup t = (t._2, t._3)
tktup ((1,2,3,true))
//│ tktup: {_2: 'a, _3: 'b} -> ('a, 'b,)
//│      = [Function: tktup]
//│ res: (2, 3,)
//│    = [ undefined, undefined ]

:e
tktup a123
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.681: 	tktup a123
//│ ║         	^^^^^^^^^^
//│ ╟── type `Array[int]` does not have field '_3'
//│ ║  l.369: 	def a123: Array[int]
//│ ║         	          ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{_3: ?a}`
//│ ║  l.681: 	tktup a123
//│ ║         	      ^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.673: 	def tktup t = (t._2, t._3)
//│ ║         	                     ^^^^
//│ ╟── from reference:
//│ ║  l.673: 	def tktup t = (t._2, t._3)
//│ ╙──       	                     ^
//│ res: (nothing, nothing,) | error
//│    = [ undefined, undefined ]


def definedOr x els = case x of {
  | undefined -> els()
  | _ -> x
  }
def defined x = definedOr x (fun () -> error)
def ornull x = definedOr x (fun () -> null)
//│ definedOr: (undefined | 'a & ~undefined) -> (() -> 'a) -> 'a
//│          = [Function: definedOr]
//│ defined: (undefined | 'a & ~undefined) -> 'a
//│        = [Function: defined]
//│ ornull: (undefined | 'a & ~undefined) -> (null | 'a)
//│       = [Function: ornull]

:re
defined ()[0]
//│ res: nothing
//│ Runtime error:
//│   Error: unexpected runtime error


ta1 = (2,3,4,5)
ta1[1]
ta2 = ((1,2,4), (true, false))
(ornull (defined ta2[0])[1+4], defined ta[1])[0]
ta3 = ((1,2,3), "hello", false)
ta3[1-2]
(1,2,3)[4]
//│ ta1: (2, 3, 4, 5,)
//│ res: 2 | 3 | 4 | 5 | undefined
//│ ta2: ((1, 2, 4,), (true, false,),)
//│ res: false | int | null | true | undefined
//│ ta3: ((1, 2, 3,), "hello", false,)
//│ res: "hello" | (1, 2, 3,) | false | undefined
//│ res: 1 | 2 | 3 | undefined
//│ Code generation encountered an error:
//│   unresolved symbol ta

:e
((defined ta2[0])[1+4], ta[1])[0]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.739: 	((defined ta2[0])[1+4], ta[1])[0]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── possibly-undefined array access of type `undefined` does not match type `~undefined`
//│ ║  l.739: 	((defined ta2[0])[1+4], ta[1])[0]
//│ ╙──       	 ^^^^^^^^^^^^^^^^^^^^^
//│ res: error | false | int | true | undefined
//│ Code generation encountered an error:
//│   unresolved symbol ta

:e
def ge x = x + 1
ta3[ge 3][ge (1+2)]
true[false]
4["hello"]
ge[2]
//│ ge: int -> int
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.752: 	ta3[ge 3][ge (1+2)]
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"hello"` does not match type `Array[?a]`
//│ ║  l.725: 	ta3 = ((1,2,3), "hello", false)
//│ ║         	                ^^^^^^^
//│ ╟── but it flows into array access with expected type `Array[?b]`
//│ ║  l.752: 	ta3[ge 3][ge (1+2)]
//│ ╙──       	^^^^^^^^^
//│ res: 1 | 2 | 3 | error | undefined
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.753: 	true[false]
//│ ║         	^^^^^^^^^^^
//│ ╟── reference of type `false` is not an instance of type `int`
//│ ║  l.753: 	true[false]
//│ ╙──       	     ^^^^^
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.753: 	true[false]
//│ ║         	^^^^^^^^^^^
//│ ╟── reference of type `true` does not match type `Array[?a]`
//│ ║  l.753: 	true[false]
//│ ╙──       	^^^^
//│ res: error | undefined
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.754: 	4["hello"]
//│ ║         	^^^^^^^^^^
//│ ╟── string literal of type `"hello"` is not an instance of type `int`
//│ ║  l.754: 	4["hello"]
//│ ╙──       	  ^^^^^^^
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.754: 	4["hello"]
//│ ║         	^^^^^^^^^^
//│ ╟── integer literal of type `4` does not match type `Array[?a]`
//│ ║  l.754: 	4["hello"]
//│ ╙──       	^
//│ res: error | undefined
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.755: 	ge[2]
//│ ║         	^^^^^
//│ ╟── function of type `?a -> (forall ?b. ?b)` does not match type `Array[?c]`
//│ ║  l.751: 	def ge x = x + 1
//│ ║         	       ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Array[?d]`
//│ ║  l.755: 	ge[2]
//│ ╙──       	^^
//│ res: error | undefined
//│ Code generation encountered an error:
//│   unresolved symbol ta3

def mkarr: 'a -> Array['a]
def mkarr x = (x,x,x,x,x)
mk1 = defined (mkarr 6)[ 0]
(mkarr (mk1/3))[(3)]
mkarr (1,true,"hi")[0]
//│ mkarr: 'a -> Array['a]
//│      = <missing implementation>
//│ 'a -> ('a, 'a, 'a, 'a, 'a,)
//│   <:  mkarr:
//│ 'a -> Array['a]
//│      = [Function: mkarr]
//│ mk1: 6
//│    = 6
//│ res: number | undefined
//│    = 2
//│ res: Array["hi" | 1 | true | undefined]
//│    = [ 1, 1, 1, 1, 1 ]

:e 
mkarr 3 [  1]
mk1[2  ]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.825: 	mkarr 3 [  1]
//│ ║         	      ^^^^^^^
//│ ╟── integer literal of type `3` does not match type `Array[?a]`
//│ ║  l.825: 	mkarr 3 [  1]
//│ ╙──       	      ^
//│ res: Array[error | undefined]
//│    = [ undefined, undefined, undefined, undefined, undefined ]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.826: 	mk1[2  ]
//│ ║         	^^^^^^^^
//│ ╟── integer literal of type `6` does not match type `Array[?a]`
//│ ║  l.808: 	mk1 = defined (mkarr 6)[ 0]
//│ ║         	                     ^
//│ ╟── but it flows into reference with expected type `Array[?b]`
//│ ║  l.826: 	mk1[2  ]
//│ ╙──       	^^^
//│ res: error | undefined
//│    = undefined

def s1 a = (defined a[1] + defined a[2], a[(1,2)._2])
def s2 a = (defined (defined a[1])[0])._2 + (defined a[2])._1
def s3 a = defined a._1.t[0] + defined (defined a.x[1])[2]
(defined ((1, "hello"),(2, true, false),(3,3,4))[0])._1
//│ s1: Array[int & 'a] -> (int, undefined | 'a,)
//│   = [Function: s1]
//│ s2: Array[Array[{_2: int} & ~undefined] & {_1: int}] -> int
//│   = [Function: s2]
//│ s3: {_1: {t: Array[int]}, x: Array[Array[int]]} -> int
//│   = [Function: s3]
//│ res: 1 | 2 | 3
//│    = undefined

def ara: Array[(int, bool)]
def arb: Array[Array[(int, int)]]
(defined ara[1])._1
(defined (defined arb[0])[1])._2
def s4 arr = (defined (defined (defined arr.x[0])._3[6])[7])._h.hello
//│ ara: Array[(int, bool,)]
//│    = <missing implementation>
//│ arb: Array[Array[(int, int,)]]
//│    = <missing implementation>
//│ res: int
//│    = <no result>
//│      ara is not implemented
//│ res: int
//│    = <no result>
//│      arb is not implemented
//│ s4: {x: Array[{_3: Array[Array[{_h: {hello: 'hello}} & ~undefined]]} & ~undefined]} -> 'hello
//│   = [Function: s4]

def at1 xs = (defined xs[0])._1
def dup a b = a * 2 + b
dup (defined ara[1])._1 (defined (defined arb[10])[8])._2 + 1
//│ at1: Array[{_1: 'a} & ~undefined] -> 'a
//│    = [Function: at1]
//│ dup: int -> int -> int
//│    = [Function: dup]
//│ res: int
//│    = <no result>
//│      ara is not implemented

:e
(1,2,3)._1[1]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.890: 	(1,2,3)._1[1]
//│ ║         	^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not match type `Array[?a]`
//│ ║  l.890: 	(1,2,3)._1[1]
//│ ║         	 ^
//│ ╟── but it flows into field selection with expected type `Array[?b]`
//│ ║  l.890: 	(1,2,3)._1[1]
//│ ╙──       	^^^^^^^^^^
//│ res: error | undefined
//│ Runtime error:
//│   TypeError: Cannot read properties of undefined (reading '1')
