
// Declare signature:
def f: int -> int
//│ f: int -> int

// Define body:
def f x = x
//│ 'a -> 'a
//│   <:  f:
//│ int -> int
//│  = [Function: f1]

:e
def f = 42
//│ 42
//│   <:  f:
//│ int -> int
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.14: 	def f = 42
//│ ║        	^^^^^^^^^^
//│ ╟── integer literal of type `42` is not a function
//│ ║  l.14: 	def f = 42
//│ ║        	        ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.3: 	def f: int -> int
//│ ╙──     	       ^^^^^^^^^^
//│  = 42

:re
f 1
//│ res: int
//│ Runtime error:
//│   TypeError: f2 is not a function

fun x -> f x
//│ res: int -> int
//│    = [Function: res]



def boom: anything
//│ boom: anything

def boom = 1
//│ 1
//│   <:  boom:
//│ anything
//│     = 1

:e
add boom 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.51: 	add boom 1
//│ ║        	^^^^^^^^
//│ ╟── type `anything` does not match type `int`
//│ ║  l.41: 	def boom: anything
//│ ║        	          ^^^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.51: 	add boom 1
//│ ╙──      	    ^^^^
//│ res: error | int
//│    = 2


def boom: nothing
//│ boom: nothing

:e
def boom = 1
//│ 1
//│   <:  boom:
//│ nothing
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.69: 	def boom = 1
//│ ║        	^^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not match type `nothing`
//│ ║  l.69: 	def boom = 1
//│ ║        	           ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.65: 	def boom: nothing
//│ ╙──      	          ^^^^^^^
//│     = 1


def boom: 'a
//│ boom: nothing

:e
def boom = 1
//│ 1
//│   <:  boom:
//│ nothing
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.89: 	def boom = 1
//│ ║        	^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type 'a
//│ ║  l.89: 	def boom = 1
//│ ║        	           ^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.85: 	def boom: 'a
//│ ╙──      	          ^^
//│     = 1



def id: 'a -> 'a
//│ id: 'a -> 'a

id 1
id true
//│ res: 1
//│ res: true
//│ Unable to execute the code:
//│   value id is not implemented

def id x = x
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a
//│   = [Function: id2]

id 1
id true
//│ res: 1
//│    = 1
//│ res: true
//│    = true


:e
def id n = add n 1
//│ int -> int
//│   <:  id:
//│ 'a -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.131: 	def id n = add n 1
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `'a` does not match type `int`
//│ ║  l.106: 	def id: 'a -> 'a
//│ ║         	        ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.131: 	def id n = add n 1
//│ ╙──       	               ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.131: 	def id n = add n 1
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `int` is not an instance of type 'a
//│ ║  l.131: 	def id n = add n 1
//│ ║         	           ^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.106: 	def id: 'a -> 'a
//│ ╙──       	              ^^
//│   = [Function: id3]

:e
def id (x: int) = x
//│ int -> int
//│   <:  id:
//│ 'a -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.156: 	def id (x: int) = x
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'a` does not match type `int`
//│ ║  l.106: 	def id: 'a -> 'a
//│ ║         	        ^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.156: 	def id (x: int) = x
//│ ╙──       	           ^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.156: 	def id (x: int) = x
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of type 'a
//│ ║  l.156: 	def id (x: int) = x
//│ ║         	           ^^^
//│ ╟── but it flows into reference with expected type `'a`
//│ ║  l.156: 	def id (x: int) = x
//│ ║         	                  ^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.106: 	def id: 'a -> 'a
//│ ╙──       	              ^^
//│   = [Function: id4]



def f: (int & 'a) -> 'a
//│ f: (int & 'a) -> 'a

def impl a = a a
//│ impl: ('a -> 'b & 'a) -> 'b
//│     = [Function: impl]

:e
def f = impl
//│ ('a -> 'b & 'a) -> 'b
//│   <:  f:
//│ (int & 'a) -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.193: 	def f = impl
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `int & 'a` is not a function
//│ ║  l.185: 	def f: (int & 'a) -> 'a
//│ ║         	        ^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.188: 	def impl a = a a
//│ ║         	             ^^^
//│ ╟── from reference:
//│ ║  l.188: 	def impl a = a a
//│ ╙──       	             ^
//│  = [Function: impl]

:re
f 1 
//│ res: 1
//│ Runtime error:
//│   TypeError: a is not a function


def f: (int & 'a) -> (int & 'a) -> 'a 
def f a b = if gt a b then a else b
//│ f: (int & 'a) -> (int & 'a) -> 'a
//│ (int & 'a) -> (int & 'a) -> 'a
//│   <:  f:
//│ (int & 'a) -> (int & 'a) -> 'a
//│  = [Function: f6]

f 1 
//│ res: (int & 'a) -> ('a | 1)
//│    = [Function (anonymous)]

:e
def f a b = if gt a b then a else b b // mistake!
//│ (int & 'a) -> nothing -> 'a
//│   <:  f:
//│ (int & 'a) -> (int & 'a) -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.231: 	def f a b = if gt a b then a else b b // mistake!
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int & 'a` is not a function
//│ ║  l.218: 	def f: (int & 'a) -> (int & 'a) -> 'a 
//│ ║         	                      ^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.231: 	def f a b = if gt a b then a else b b // mistake!
//│ ║         	                                  ^^^
//│ ╟── from reference:
//│ ║  l.231: 	def f a b = if gt a b then a else b b // mistake!
//│ ╙──       	                                  ^
//│  = [Function: f7]

f 1 
//│ res: (int & 'a) -> ('a | 1)
//│    = [Function (anonymous)]

:re
res 2
//│ res: 1 | 2
//│ Runtime error:
//│   TypeError: b is not a function


:e
def g: (int & 'a) -> 'a
def g a = add a 1
//│ g: (int & 'a) -> 'a
//│ int -> int
//│   <:  g:
//│ (int & 'a) -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.262: 	def g a = add a 1
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── application of type `int` is not an instance of type 'a
//│ ║  l.262: 	def g a = add a 1
//│ ║         	          ^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.261: 	def g: (int & 'a) -> 'a
//│ ╙──       	                     ^^
//│  = [Function: g1]



// --- // The Twice Function // --- //


def twice f x = f (f x)
//│ twice: ('a -> ('a & 'b)) -> 'a -> 'b
//│      = [Function: twice]

def ty1: (('b | 'c) -> 'c) -> 'b -> 'c
def ty2: ('b -> ('b & 'd)) -> 'b -> 'd
//│ ty1: (('b | 'c) -> 'c) -> 'b -> 'c
//│ ty2: ('b -> ('b & 'd)) -> 'b -> 'd

ty1 = ty2
//│ ('b -> ('b & 'd)) -> 'b -> 'd
//│   <:  ty1:
//│ (('b | 'c) -> 'c) -> 'b -> 'c
//│ Unable to execute the code:
//│   value ty2 is not implemented

ty2 = ty1
//│ (('b | 'c) -> 'c) -> 'b -> 'c
//│   <:  ty2:
//│ ('b -> ('b & 'd)) -> 'b -> 'd
//│ Unable to execute the code:
//│   value ty1 is not implemented

ty1 = twice
ty2 = twice
//│ ('a -> ('a & 'b)) -> 'a -> 'b
//│   <:  ty1:
//│ (('b | 'c) -> 'c) -> 'b -> 'c
//│    = [Function: twice]
//│ ('a -> ('a & 'b)) -> 'a -> 'b
//│   <:  ty2:
//│ ('b -> ('b & 'd)) -> 'b -> 'd
//│    = [Function: twice]


