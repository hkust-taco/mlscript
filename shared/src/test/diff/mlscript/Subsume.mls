
// Declare signature:
def f: int -> int
//│ f: int -> int
//│  = <missing implementation>

// Define body:
def f x = x
//│ 'a -> 'a
//│   <:  f:
//│ int -> int
//│  = [Function: f]

:e
f = 42
//│ 42
//│   <:  f:
//│ int -> int
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.15: 	f = 42
//│ ║        	^^^^^^
//│ ╟── integer literal of type `42` is not a function
//│ ║  l.15: 	f = 42
//│ ║        	    ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.3: 	def f: int -> int
//│ ╙──     	       ^^^^^^^^^^
//│  = 42

:re
f 1
//│ res: int
//│ Runtime error:
//│ TypeError: f1 is not a function

fun x -> f x
//│ res: int -> int
//│    = [Function: res]



def boom: anything
//│ boom: anything
//│     = <missing implementation>

boom = 1
//│ 1
//│   <:  boom:
//│ anything
//│     = 1

:e
add boom 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.53: 	add boom 1
//│ ║        	^^^^^^^^
//│ ╟── type `anything` is not an instance of type `int`
//│ ║  l.42: 	def boom: anything
//│ ║        	          ^^^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.53: 	add boom 1
//│ ╙──      	    ^^^^
//│ res: error | int
//│    = 2


def boom: nothing
//│ boom: nothing
//│     = <missing implementation>

:e
def boom = 1
//│ 1
//│   <:  boom:
//│ nothing
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.72: 	def boom = 1
//│ ║        	^^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not match type `nothing`
//│ ║  l.72: 	def boom = 1
//│ ║        	           ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.67: 	def boom: nothing
//│ ╙──      	          ^^^^^^^
//│     = [Function: boom1]


def boom: 'a
//│ boom: nothing
//│     = <missing implementation>

:e
boom = 1
//│ 1
//│   <:  boom:
//│ nothing
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.93: 	boom = 1
//│ ║        	^^^^^^^^
//│ ╟── integer literal of type `1` does not match type `'a`
//│ ║  l.93: 	boom = 1
//│ ║        	       ^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.88: 	def boom: 'a
//│ ╙──      	          ^^
//│     = 1



def id: 'a -> 'a
//│ id: 'a -> 'a
//│   = <missing implementation>

id 1
id true
//│ res: 1
//│    = <no result>
//│      id is not implemented
//│ res: true
//│    = <no result>
//│      id is not implemented

def id x = x
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a
//│   = [Function: id1]

id 1
id true
//│ res: 1
//│    = 1
//│ res: true
//│    = true


:e
def id n = add n 1
//│ int -> int
//│   <:  id:
//│ 'a -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.138: 	def id n = add n 1
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `'a` is not an instance of type `int`
//│ ║  l.110: 	def id: 'a -> 'a
//│ ║         	        ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.138: 	def id n = add n 1
//│ ╙──       	               ^
//│   = [Function: id2]

:e
def id (x: int) = x
//│ int -> int
//│   <:  id:
//│ 'a -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.154: 	def id (x: int) = x
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'a` is not an instance of type `int`
//│ ║  l.110: 	def id: 'a -> 'a
//│ ║         	        ^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.154: 	def id (x: int) = x
//│ ╙──       	           ^^^
//│   = [Function: id3]



def f: (int & 'a) -> 'a
//│ f: (int & 'a) -> 'a
//│  = <missing implementation>

def impl a = a a
//│ impl: ('a -> 'b & 'a) -> 'b
//│     = [Function: impl]

:e
def f = impl
//│ ('a -> 'b & 'a) -> 'b
//│   <:  f:
//│ (int & 'a) -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.180: 	def f = impl
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `int & 'a` is not a function
//│ ║  l.171: 	def f: (int & 'a) -> 'a
//│ ║         	       ^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.175: 	def impl a = a a
//│ ║         	             ^^^
//│ ╟── from reference:
//│ ║  l.175: 	def impl a = a a
//│ ╙──       	             ^
//│  = [Function: f2]

:re
f 1 
//│ res: 1
//│ Runtime error:
//│ TypeError: a is not a function


def f: (int & 'a) -> (int & 'a) -> 'a 
def f a b = if gt a b then a else b
//│ f: (int & 'a) -> (int & 'a) -> 'a
//│  = <missing implementation>
//│ (number & 'a) -> (number & 'a) -> 'a
//│   <:  f:
//│ (int & 'a) -> (int & 'a) -> 'a
//│  = [Function: f3]

f 1 
//│ res: (int & 'a) -> (1 | 'a)
//│    = [Function (anonymous)]

:e
def f a b = if gt a b then a else b b // mistake!
//│ (number & 'a) -> nothing -> 'a
//│   <:  f:
//│ (int & 'a) -> (int & 'a) -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.219: 	def f a b = if gt a b then a else b b // mistake!
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int & 'a` is not a function
//│ ║  l.205: 	def f: (int & 'a) -> (int & 'a) -> 'a 
//│ ║         	                     ^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.219: 	def f a b = if gt a b then a else b b // mistake!
//│ ║         	                                  ^^^
//│ ╟── from reference:
//│ ║  l.219: 	def f a b = if gt a b then a else b b // mistake!
//│ ╙──       	                                  ^
//│  = [Function: f4]

f 1 
//│ res: (int & 'a) -> (1 | 'a)
//│    = [Function (anonymous)]

:re
res 2
//│ res: 1 | 2
//│ Runtime error:
//│ TypeError: b is not a function


:e
def g: (int & 'a) -> 'a
def g a = add a 1
//│ g: (int & 'a) -> 'a
//│  = <missing implementation>
//│ int -> int
//│   <:  g:
//│ (int & 'a) -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.250: 	def g a = add a 1
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── application of type `int` does not match type `'a`
//│ ║  l.250: 	def g a = add a 1
//│ ║         	          ^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.249: 	def g: (int & 'a) -> 'a
//│ ╙──       	                     ^^
//│  = [Function: g]



// --- // The Twice Function // --- //


def twice f x = f (f x)
//│ twice: ('a -> 'b & 'b -> 'c) -> 'a -> 'c
//│      = [Function: twice]

def ty1: (('b | 'c) -> 'c) -> 'b -> 'c
def ty2: ('b -> ('b & 'd)) -> 'b -> 'd
//│ ty1: (('b | 'c) -> 'c) -> 'b -> 'c
//│    = <missing implementation>
//│ ty2: ('b -> ('b & 'd)) -> 'b -> 'd
//│    = <missing implementation>

ty1 = ty2
//│ ('b -> ('b & 'd)) -> 'b -> 'd
//│   <:  ty1:
//│ (('b | 'c) -> 'c) -> 'b -> 'c
//│    = <no result>
//│      ty2 is not implemented

ty2 = ty1
//│ (('b | 'c) -> 'c) -> 'b -> 'c
//│   <:  ty2:
//│ ('b -> ('b & 'd)) -> 'b -> 'd
//│    = <no result>
//│      ty1 and ty2 are not implemented

ty1 = twice
ty2 = twice
//│ ('a -> 'b & 'b -> 'c) -> 'a -> 'c
//│   <:  ty1:
//│ (('b | 'c) -> 'c) -> 'b -> 'c
//│    = [Function: twice]
//│ ('a -> 'b & 'b -> 'c) -> 'a -> 'c
//│   <:  ty2:
//│ ('b -> ('b & 'd)) -> 'b -> 'd
//│    = [Function: twice]

twice twice
//│ res: ('a -> 'b & 'b -> ('a & 'c)) -> 'a -> 'c
//│    = [Function (anonymous)]

// * Note: cycle check fails when generalizing curried lambdas
twice twice!
//│ res: ('a -> ('a & 'b) & 'b -> ('a & 'b & 'c)) -> 'a -> 'c
//│    = [Function (anonymous)]


// --- // Self Application // --- //


def self1: ('a -> 'b & 'a) -> 'b
//│ self1: ('a -> 'b & 'a) -> 'b
//│      = <missing implementation>

def self1 a = a a
//│ ('a -> 'b & 'a) -> 'b
//│   <:  self1:
//│ ('a -> 'b & 'a) -> 'b
//│      = [Function: self1]

fun a -> a a
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

self1 = res
//│ ('a -> 'b & 'a) -> 'b
//│   <:  self1:
//│ ('a -> 'b & 'a) -> 'b
//│      = [Function: res]

r = fun a -> a a
//│ r: ('a -> 'b & 'a) -> 'b
//│  = [Function: r]

self1 = r
//│ ('a -> 'b & 'a) -> 'b
//│   <:  self1:
//│ ('a -> 'b & 'a) -> 'b
//│      = [Function: r]

def self2: 'a -> 'b as 'a
//│ self2: 'a
//│   where
//│     'a := 'a -> 'b
//│      = <missing implementation>

// :e // fails since the fix to spurious-TV-cycles // works since assigned TVs
def self2 = self1
//│ ('a -> 'b & 'a) -> 'b
//│   <:  self2:
//│ 'a
//│   where
//│     'a := 'a -> 'b
//│      = [Function: self2]


fun p -> fun q -> p q p
//│ res: ('a -> 'b -> 'c & 'b) -> 'a -> 'c
//│    = [Function: res]

:ns
fun p -> fun q -> p q p
//│ res: forall 'a 'b 'c 'd. 'a -> 'b -> 'd
//│   where
//│     'a <: 'b -> 'c
//│     'c <: 'a -> 'd
//│    = [Function: res]

