trait A: { x: int }
trait B: { y: string }
class C: { x: 0 | 1 }
//│ Defined trait A
//│ Defined trait B
//│ Defined class C


A { x = 1 }
//│ res: {x: 1} & #A
//│    = { x: 1 }

:e
A {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.14: 	A {}
//│ ║        	^^^^
//│ ╟── record literal of type `anything` does not have field 'x'
//│ ║  l.14: 	A {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.1: 	trait A: { x: int }
//│ ╙──     	         ^^^^^^^^^^
//│ res: error | #A
//│    = {}


class D: C & A & B
//│ Defined class D

D
//│ res: {x: 'x & (0 | 1), y: string & 'y} -> (D with {x: 'x, y: 'y})
//│    = [Function: res]

:re
error: A & B
//│ res: nothing
//│ Runtime error:
//│   Error: unexpected runtime error

:e
dv = D{}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.42: 	dv = D{}
//│ ║        	     ^^^
//│ ╟── record literal of type `anything` is not a record (expected a record with fields: y, x)
//│ ║  l.42: 	dv = D{}
//│ ╙──      	      ^^
//│ dv: D & {x: nothing, y: nothing} | error
//│   = D { x: undefined, y: undefined }

dv = D { x = 0; y = "hello" }
//│ dv: D & {x: 0, y: "hello"}
//│   = D { x: 0, y: 'hello' }

:e
dv: nothing
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.57: 	dv: nothing
//│ ║        	^^
//│ ╟── application of type `D with {x: ?x, y: ?y}` does not match type `nothing`
//│ ║  l.52: 	dv = D { x = 0; y = "hello" }
//│ ║        	     ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.57: 	dv: nothing
//│ ║        	^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.57: 	dv: nothing
//│ ╙──      	    ^^^^^^^
//│ res: nothing
//│    = D { x: 0, y: 'hello' }

dv: A & B
//│ res: nothing
//│    = D { x: 0, y: 'hello' }

:e
dv: A & B: nothing
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.78: 	dv: A & B: nothing
//│ ║        	^^
//│ ╟── type `nothing` does not match type `nothing`
//│ ║  l.78: 	dv: A & B: nothing
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.78: 	dv: A & B: nothing
//│ ╙──      	           ^^^^^^^
//│ res: nothing
//│    = D { x: 0, y: 'hello' }


trait Indirect: C
//│ Defined trait Indirect

class E: Indirect
//│ Defined class E

:e
E{}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.99: 	E{}
//│ ║        	^^^
//│ ╟── record literal of type `anything` does not have field 'x'
//│ ║  l.99: 	E{}
//│ ╙──      	 ^^
//│ res: E & {x: nothing} | error
//│    = E {}

ev = E { x = 1 }
ev: C
//│ ev: E & {x: 1}
//│   = E {}
//│ res: C
//│    = E {}


trait T1: C & A
//│ Defined trait T1

:e
def t = T1 (A { x = 1 })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.121: 	def t = T1 (A { x = 1 })
//│ ║         	        ^^^^^^^^^^^^^^^^
//│ ╟── record literal of type `{x: 1}` does not match type `C | ~#A`
//│ ║  l.121: 	def t = T1 (A { x = 1 })
//│ ║         	              ^^^^^^^^^
//│ ╟── but it flows into application with expected type `C | ~#A`
//│ ║  l.121: 	def t = T1 (A { x = 1 })
//│ ║         	            ^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.117: 	trait T1: C & A
//│ ║         	          ^
//│ ╟── from intersection type:
//│ ║  l.117: 	trait T1: C & A
//│ ╙──       	          ^^^^^
//│ t: error | {x: 1} & #A & #T1
//│  = [Function: t]

t = T1 (A (C { x = 1 }))
//│ t: C & {x: 1} & #A & #T1
//│  = C { x: 1 }

class CA: C & A
//│ Defined class CA

t = T1 (CA { x = 1 })
//│ t: CA & {x: 1} & #T1
//│  = CA { x: 1 }


class C1: B & T1 & { y: "hi" | "hello" }
//│ Defined class C1

:e
c1 = C1 { }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.156: 	c1 = C1 { }
//│ ║         	     ^^^^^^
//│ ╟── record literal of type `anything` is not a record (expected a record with fields: y, x)
//│ ║  l.156: 	c1 = C1 { }
//│ ╙──       	        ^^^
//│ c1: C1 & {x: nothing, y: nothing} | error
//│   = C1 { y: undefined, x: undefined }

c1 = C1 { x = 1; y = "hi" }
//│ c1: C1 & {x: 1, y: "hi"}
//│   = C1 { y: 'hi', x: 1 }

c1: T1
//│ res: T1
//│    = C1 { y: 'hi', x: 1 }

c1: A
//│ res: A
//│    = C1 { y: 'hi', x: 1 }

c1.x
c1.y
//│ res: 1
//│    = 1
//│ res: "hi"
//│    = 'hi'

