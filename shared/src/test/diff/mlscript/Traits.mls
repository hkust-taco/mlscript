trait A: { x: int }
trait B: { y: string }
class C: { x: 0 | 1 }
//│ Defined trait A
//│ Defined trait B
//│ Defined class C


A { x = 1 }
//│ res: {x: 1} & a
//│    = { x: 1 }

:e
A {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.14: 	A {}
//│ ║        	^^^^
//│ ╟── expression of type `anything` does not have field 'x'
//│ ║  l.14: 	A {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.1: 	trait A: { x: int }
//│ ╙──     	         ^^^^^^^^^^
//│ res: error | a
//│    = {}


class D: C & A & B
//│ Defined class D

D
//│ res: {x: 0 & 'x | 1 & 'x, y: string & 'y} -> (D with {x: 'x, y: 'y})
//│    = [class D extends C]

error: A & B
//│ res: {x: int, y: string} & a & b
//│ Unexpected runtime error
//│   ReferenceError: error is not defined

:e
def dv = D{}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.41: 	def dv = D{}
//│ ║        	         ^^^
//│ ╟── expression of type `anything` does not match type `{y: ?y, x: ?x}`
//│ ║  l.41: 	def dv = D{}
//│ ╙──      	          ^^
//│ dv: D & {x: nothing, y: nothing} | error
//│   = D { x: undefined }

def dv = D { x = 0; y = "hello" }
//│ dv: D & {x: 0, y: "hello"}
//│   = D { x: 0 }

:e
dv: nothing
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.56: 	dv: nothing
//│ ║        	^^
//│ ╟── expression of type `D with {x: ?x, y: ?y}` does not match type `nothing`
//│ ║  l.51: 	def dv = D { x = 0; y = "hello" }
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.56: 	dv: nothing
//│ ║        	^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.56: 	dv: nothing
//│ ╙──      	    ^^^^^^^
//│ res: nothing
//│    = D { x: 0 }

dv: A & B
//│ res: {x: int, y: string} & a & b
//│    = D { x: 0 }

:e
dv: A & B: nothing
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.77: 	dv: A & B: nothing
//│ ║        	^^
//│ ╟── expression of type `{x: int, y: string} & a & b` does not match type `nothing`
//│ ║  l.77: 	dv: A & B: nothing
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.77: 	dv: A & B: nothing
//│ ╙──      	           ^^^^^^^
//│ res: nothing
//│    = D { x: 0 }


trait Indirect: C
//│ Defined trait Indirect

class E: Indirect
//│ Defined class E

:e
E{}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.98: 	E{}
//│ ║        	^^^
//│ ╟── expression of type `anything` does not have field 'x'
//│ ║  l.98: 	E{}
//│ ╙──      	 ^^
//│ res: E & {x: nothing} | error
//│    = E {}

def ev = E { x = 1 }
ev: C
//│ ev: E & {x: 1}
//│   = E {}
//│ res: C
//│    = E {}


trait T1: C & A
//│ Defined trait T1

:e
def t = T1 (A { x = 1 })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.120: 	def t = T1 (A { x = 1 })
//│ ║         	        ^^^^^^^^^^^^^^^
//│ ╟── expression of type `{x: 1}` does not match type `~a | C`
//│ ║  l.120: 	def t = T1 (A { x = 1 })
//│ ║         	              ^^^^^^^^^
//│ ╟── but it flows into application with expected type `?a`
//│ ║  l.120: 	def t = T1 (A { x = 1 })
//│ ║         	            ^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.116: 	trait T1: C & A
//│ ╙──       	          ^
//│ t: error | {x: 1} & a & t1
//│ Unexpected runtime error
//│   ReferenceError: T1 is not defined

def t = T1 (A (C { x = 1 }))
//│ t: C & {x: 1} & a & t1
//│ Unexpected runtime error
//│   ReferenceError: T1 is not defined

class CA: C & A
//│ Defined class CA

def t = T1 (CA { x = 1 })
//│ t: CA & {x: 1} & t1
//│ Unexpected runtime error
//│   ReferenceError: T1 is not defined


class C1: B & T1 & { y: "hi" | "hello" }
//│ Defined class C1

:e
def c1 = C1 { }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.155: 	def c1 = C1 { }
//│ ║         	         ^^^^^^
//│ ╟── expression of type `anything` does not match type `{y: ?y, x: ?x}`
//│ ║  l.155: 	def c1 = C1 { }
//│ ╙──       	            ^^^
//│ c1: C1 & {x: nothing, y: nothing} | error
//│   = C1 { y: undefined }

def c1 = C1 { x = 1; y = "hi" }
//│ c1: C1 & {x: 1, y: "hi"}
//│   = C1 { y: 'hi' }

c1: T1
//│ res: C & a & t1
//│    = C1 { y: 'hi' }

c1: A
//│ res: {x: int} & a
//│    = C1 { y: 'hi' }

c1.x
c1.y
//│ res: 1
//│    = undefined
//│ res: "hi"
//│    = 'hi'

