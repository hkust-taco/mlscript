// https://github.com/hkust-taco/mlscript/issues/56


def test3 x = case x of
  { 1 -> true
  | true -> true
  | _ -> false
  }
//│ test3: anything -> Bool
//│      = [Function: test3]

:ns
test3
//│ res: forall 'a 'b 'c 'd. 'a -> Bool
//│   where
//│     'a <: 1 & 'b | (true & 'c | 'd & ~true) & ~1
//│    = [Function: test3]


def test3 x = case x of
  { 1 -> x
  | true -> true
  | _ -> false
  }
//│ test3: (1 & 'a | ~1) -> (Bool | 'a)
//│      = [Function: test31]


def ty_1: (1 & 'a | true | ~1 & ~true) -> (false | true | 'a)
//│ ty_1: (1 & 'a | true | ~1 & ~true) -> ('a | false | true)
//│     = <missing implementation>

ty_1 = test3
//│ (1 & 'a | ~1) -> (Bool | 'a)
//│   <:  ty_1:
//│ (1 & 'a | true | ~1 & ~true) -> ('a | false | true)
//│     = [Function: test31]

def ty_2: (1 & 'a | ~1) -> (false | true | 'a)
//│ ty_2: (1 & 'a | ~1) -> ('a | false | true)
//│     = <missing implementation>

ty_2 = ty_1
//│ (1 & 'a | true | ~1 & ~true) -> ('a | false | true)
//│   <:  ty_2:
//│ (1 & 'a | ~1) -> ('a | false | true)
//│     = [Function: test31]


// * Note: it is a bit counter-intuitive that we have:
// *    (1 & 'a | ~1)  <:  (1 & 'a | true | ~1 & ~true)
// *  and in particular:
// *    ~1  <:  (1 & 'a | true | ~1 & ~true)
// *  but the latter can be understood by seeing that it's equivalent (by swapping) to:
// *    (1 | true)  <:  (1 & 'a | true | 1)
// *  ie
// *    (1 | true)  <:  (true | 1)

