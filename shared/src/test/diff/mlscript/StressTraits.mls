:NoJS

trait A[T]: { fA: T }
trait B[T]: { fB: T }
trait C[T]: { fC: T }
trait D[T]: { fD: T }
trait E[T]: { fE: T }
trait F[T]: { fF: T }
trait G[T]: { fG: T }
trait H[T]: { fH: T }
//│ Defined trait A[+T]
//│ Defined trait B[+T]
//│ Defined trait C[+T]
//│ Defined trait D[+T]
//│ Defined trait E[+T]
//│ Defined trait F[+T]
//│ Defined trait G[+T]
//│ Defined trait H[+T]

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | ~#D & ({fE: 'fA} & #E | ~#E & ({fF: 'fA} & #F | ~#F & ({fG: 'fA} & #G | {fH: 'fA} & #H & ~#G))))))) -> 'fA
//│ constrain calls  : 26
//│ annoying  calls  : 0
//│ subtyping calls  : 659


// ====== 1 & all ====== //

:stats
def arg: A[int]
foo arg
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)

:stats
:e
def arg: A[int] | B[int]
foo arg
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)

:stats
:e
def arg: A[int] | B[int] | C[int]
foo arg
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)

:stats
:e
def arg: A[int] | B[int] | D[int]
foo arg
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)


// ====== 2 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  }
def arg: A[int] | B[int]
foo arg
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)


// ====== 3 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  }
def arg: A[int] | B[int] | C[int]
foo arg
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)


// ====== 4 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  }
def arg: A[int] | B[int] | C[int] | D[int]
foo arg
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)

:stats
:e
foo (arg with { x = 1} with { y = 2 })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.176: 	foo (arg with { x = 1} with { y = 2 })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `#B & ({fB: int, x: 1, y: 2} & #A | {fB: int, x: 1, y: 2} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.155: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.154: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 77
//│ annoying  calls  : 128
//│ subtyping calls  : 3370

:stats
:e
foo (arg with { x = 1; y = 2; z = 3 })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.194: 	foo (arg with { x = 1; y = 2; z = 3 })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `#B & ({fB: int, x: 1, y: 2, z: 3} & #A | {fB: int, x: 1, y: 2, z: 3} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.155: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.154: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 77
//│ annoying  calls  : 128
//│ subtyping calls  : 3358


// ====== 5 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int]
foo arg
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)


// ====== 6 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int]
foo arg
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)


// ====== 7 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
foo arg
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)

def foo_manual: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f) -> 'a
//│ foo_manual: ({fA: 'a} & #A | ~#A & ({fB: 'a} & #B | ~#B & ({fC: 'a} & #C | ~#C & ({fD: 'a} & #D | ~#D & ({fE: 'a} & #E | ~#E & ({fF: 'a} & #F | {fG: 'a} & #G & ~#F)))))) -> 'a

:stats
:e
foo_manual arg
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.296: 	foo_manual arg
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── type `{fB: int} & #B` does not match type `{fA: 'a} & #A | ~#A & ({fB: 'a} & #B | ~#B & ({fC: 'a} & #C | ~#C & ({fD: 'a} & #D | ~#D & ({fE: 'a} & #E | ~#E & ({fF: 'a} & #F | {fG: 'a} & #G & ~#F)))))`
//│ ║  l.277: 	def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: 'a0} & #A | ~#A & ({fB: 'a0} & #B | ~#B & ({fC: 'a0} & #C | ~#C & ({fD: 'a0} & #D | ~#D & ({fE: 'a0} & #E | ~#E & ({fF: 'a0} & #F | {fG: 'a0} & #G & ~#F)))))`
//│ ║  l.296: 	foo_manual arg
//│ ║         	           ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.291: 	def foo_manual: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f) -> 'a
//│ ╙──       	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error
//│ constrain calls  : 24
//│ annoying  calls  : 67
//│ subtyping calls  : 5262

:stats
foo_manual = foo
//│ ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | ~#D & ({fE: 'fA} & #E | ~#E & ({fF: 'fA} & #F | {fG: 'fA} & #G & ~#F)))))) -> 'fA
//│   <:  foo_manual:
//│ ({fA: 'a} & #A | ~#A & ({fB: 'a} & #B | ~#B & ({fC: 'a} & #C | ~#C & ({fD: 'a} & #D | ~#D & ({fE: 'a} & #E | ~#E & ({fF: 'a} & #F | {fG: 'a} & #G & ~#F)))))) -> 'a
//│ constrain calls  : 98
//│ annoying  calls  : 183
//│ subtyping calls  : 6065


// ====== 8 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int] | H[int]
foo arg
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:698)


