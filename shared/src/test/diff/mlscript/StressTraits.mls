:NoJS

trait A[T]: { fA: T }
trait B[T]: { fB: T }
trait C[T]: { fC: T }
trait D[T]: { fD: T }
trait E[T]: { fE: T }
trait F[T]: { fF: T }
trait G[T]: { fG: T }
trait H[T]: { fH: T }
//│ Defined trait A[+T]
//│ Defined trait B[+T]
//│ Defined trait C[+T]
//│ Defined trait D[+T]
//│ Defined trait E[+T]
//│ Defined trait F[+T]
//│ Defined trait G[+T]
//│ Defined trait H[+T]

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | ~#D & ({fE: 'fA} & #E | ~#E & ({fF: 'fA} & #F | ~#F & ({fG: 'fA} & #G | {fH: 'fA} & #H & ~#G))))))) -> 'fA
//│ constrain calls  : 26
//│ annoying  calls  : 0
//│ subtyping calls  : 756


// ====== 1 & all ====== //

:stats
def arg: A[int]
foo arg
//│ arg: A[int]
//│ res: int
//│ constrain calls  : 19
//│ annoying  calls  : 10
//│ subtyping calls  : 248

:stats
:e
def arg: A[int] | B[int]
foo arg
//│ arg: A[int] | B[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.51: 	foo arg
//│ ║        	^^^^^^^
//│ ╟── type `{fB: int} & #A & #B` does not have field 'fA'
//│ ║  l.50: 	def arg: A[int] | B[int]
//│ ║        	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: ?fA}`
//│ ║  l.51: 	foo arg
//│ ║        	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.22: 	  | A -> x.fA
//│ ║        	         ^^^^
//│ ╟── from reference:
//│ ║  l.21: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error | int
//│ constrain calls  : 41
//│ annoying  calls  : 41
//│ subtyping calls  : 597

:stats
:e
def arg: A[int] | B[int] | C[int]
foo arg
//│ arg: A[int] | B[int] | C[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.76: 	foo arg
//│ ║        	^^^^^^^
//│ ╟── type `{fB: int} & #A & #B` does not have field 'fA'
//│ ║  l.75: 	def arg: A[int] | B[int] | C[int]
//│ ║        	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: ?fA}`
//│ ║  l.76: 	foo arg
//│ ║        	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.22: 	  | A -> x.fA
//│ ║        	         ^^^^
//│ ╟── from reference:
//│ ║  l.21: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error
//│ constrain calls  : 118
//│ annoying  calls  : 168
//│ subtyping calls  : 1664

:stats
:e
def arg: A[int] | B[int] | D[int]
foo arg
//│ arg: A[int] | B[int] | D[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.101: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── type `{fB: int} & #A & #B` does not have field 'fA'
//│ ║  l.100: 	def arg: A[int] | B[int] | D[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: ?fA}`
//│ ║  l.101: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.22: 	  | A -> x.fA
//│ ║        	         ^^^^
//│ ╟── from reference:
//│ ║  l.21: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error
//│ constrain calls  : 135
//│ annoying  calls  : 226
//│ subtyping calls  : 2257


// ====== 2 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  }
def arg: A[int] | B[int]
foo arg
//│ foo: ({fB: 'fA} & #B & ~#A | {fA: 'fA} & #A) -> 'fA
//│ arg: A[int] | B[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.133: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── type `{fB: int} & #A & #B` does not have field 'fA'
//│ ║  l.132: 	def arg: A[int] | B[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: ?fA}`
//│ ║  l.133: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.129: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from reference:
//│ ║  l.128: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error | int
//│ constrain calls  : 49
//│ annoying  calls  : 41
//│ subtyping calls  : 393


// ====== 3 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  }
def arg: A[int] | B[int] | C[int]
foo arg
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | {fC: 'fA} & #C & ~#B)) -> 'fA
//│ arg: A[int] | B[int] | C[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.167: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── type `{fB: int} & #A & #B` does not have field 'fA'
//│ ║  l.166: 	def arg: A[int] | B[int] | C[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: ?fA}`
//│ ║  l.167: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.162: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from reference:
//│ ║  l.161: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 129
//│ annoying  calls  : 168
//│ subtyping calls  : 1445


// ====== 4 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  }
def arg: A[int] | B[int] | C[int] | D[int]
foo arg
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | {fD: 'fA} & #D & ~#C))) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.202: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── type `{fB: int} & #A & #B` does not have field 'fA'
//│ ║  l.201: 	def arg: A[int] | B[int] | C[int] | D[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: ?fA}`
//│ ║  l.202: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.196: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from reference:
//│ ║  l.195: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 133
//│ annoying  calls  : 168
//│ subtyping calls  : 1664

:stats
:e
foo (arg with { x = 1} with { y = 2 })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.227: 	foo (arg with { x = 1} with { y = 2 })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `with` extension of type `{fB: int, x: 1, y: 2} & #A & #B` does not have field 'fA'
//│ ║  l.227: 	foo (arg with { x = 1} with { y = 2 })
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.196: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from reference:
//│ ║  l.195: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 110
//│ annoying  calls  : 166
//│ subtyping calls  : 1185

:stats
:e
foo (arg with { x = 1; y = 2; z = 3 })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.247: 	foo (arg with { x = 1; y = 2; z = 3 })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `with` extension of type `{fB: int, x: 1, y: 2, z: 3} & #A & #B` does not have field 'fA'
//│ ║  l.247: 	foo (arg with { x = 1; y = 2; z = 3 })
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.196: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from reference:
//│ ║  l.195: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 110
//│ annoying  calls  : 166
//│ subtyping calls  : 1185


// ====== 5 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int]
foo arg
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | {fE: 'fA} & #E & ~#D)))) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.278: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── type `{fB: int} & #A & #B` does not have field 'fA'
//│ ║  l.277: 	def arg: A[int] | B[int] | C[int] | D[int] | E[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: ?fA}`
//│ ║  l.278: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.271: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from reference:
//│ ║  l.270: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 137
//│ annoying  calls  : 168
//│ subtyping calls  : 1936


// ====== 6 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int]
foo arg
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | ~#D & ({fE: 'fA} & #E | {fF: 'fA} & #F & ~#E))))) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.315: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── type `{fB: int} & #A & #B` does not have field 'fA'
//│ ║  l.314: 	def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: ?fA}`
//│ ║  l.315: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.307: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from reference:
//│ ║  l.306: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 141
//│ annoying  calls  : 168
//│ subtyping calls  : 2266


// ====== 7 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
foo arg
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | ~#D & ({fE: 'fA} & #E | ~#E & ({fF: 'fA} & #F | {fG: 'fA} & #G & ~#F)))))) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.353: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── type `{fB: int} & #A & #B` does not have field 'fA'
//│ ║  l.352: 	def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: ?fA}`
//│ ║  l.353: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.344: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from reference:
//│ ║  l.343: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 145
//│ annoying  calls  : 168
//│ subtyping calls  : 2659

def foo_manual: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f) -> 'a
//│ foo_manual: ({fA: 'a} & #A | ~#A & ({fB: 'a} & #B | ~#B & ({fC: 'a} & #C | ~#C & ({fD: 'a} & #D | ~#D & ({fE: 'a} & #E | ~#E & ({fF: 'a} & #F | {fG: 'a} & #G & ~#F)))))) -> 'a

:stats
:e
foo_manual arg
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.381: 	foo_manual arg
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── type `{fB: int} & #B` does not match type `{fA: 'a} & #A | ~#A & ({fB: 'a} & #B | ~#B & ({fC: 'a} & #C | ~#C & ({fD: 'a} & #D | ~#D & ({fE: 'a} & #E | ~#E & ({fF: 'a} & #F | {fG: 'a} & #G & ~#F)))))`
//│ ║  l.352: 	def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: 'a0} & #A | ~#A & ({fB: 'a0} & #B | ~#B & ({fC: 'a0} & #C | ~#C & ({fD: 'a0} & #D | ~#D & ({fE: 'a0} & #E | ~#E & ({fF: 'a0} & #F | {fG: 'a0} & #G & ~#F)))))`
//│ ║  l.381: 	foo_manual arg
//│ ║         	           ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.376: 	def foo_manual: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f) -> 'a
//│ ╙──       	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error
//│ constrain calls  : 24
//│ annoying  calls  : 67
//│ subtyping calls  : 4417

:stats
foo_manual = foo
//│ ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | ~#D & ({fE: 'fA} & #E | ~#E & ({fF: 'fA} & #F | {fG: 'fA} & #G & ~#F)))))) -> 'fA
//│   <:  foo_manual:
//│ ({fA: 'a} & #A | ~#A & ({fB: 'a} & #B | ~#B & ({fC: 'a} & #C | ~#C & ({fD: 'a} & #D | ~#D & ({fE: 'a} & #E | ~#E & ({fF: 'a} & #F | {fG: 'a} & #G & ~#F)))))) -> 'a
//│ constrain calls  : 91
//│ annoying  calls  : 190
//│ subtyping calls  : 3611


// ====== 8 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int] | H[int]
foo arg
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | ~#D & ({fE: 'fA} & #E | ~#E & ({fF: 'fA} & #F | ~#F & ({fG: 'fA} & #G | {fH: 'fA} & #H & ~#G))))))) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int] | H[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.424: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── type `{fB: int} & #A & #B` does not have field 'fA'
//│ ║  l.423: 	def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int] | H[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: ?fA}`
//│ ║  l.424: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.414: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from reference:
//│ ║  l.413: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 149
//│ annoying  calls  : 168
//│ subtyping calls  : 3120


