:NoJS

trait A[T]: { fA: T }
trait B[T]: { fB: T }
trait C[T]: { fC: T }
trait D[T]: { fD: T }
trait E[T]: { fE: T }
trait F[T]: { fF: T }
trait G[T]: { fG: T }
trait H[T]: { fH: T }
//│ Defined trait A
//│ Defined trait B
//│ Defined trait C
//│ Defined trait D
//│ Defined trait E
//│ Defined trait F
//│ Defined trait G
//│ Defined trait H

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
//│ foo: ({fA: 'a} & a | ~a & ({fB: 'a} & b | ~b & ({fC: 'a} & c | ~c & ({fD: 'a} & d | ~d & ({fE: 'a} & e | ~e & ({fF: 'a} & f | ~f & ({fG: 'a} & g | {fH: 'a} & h & ~g))))))) -> 'a
//│ constrain calls  : 26
//│ annoying  calls  : 0
//│ subtyping calls  : 465


// ====== 1 & all ====== //

:stats
def arg: A[int]
foo arg
//│ arg: {fA: int} & a
//│ res: int
//│ constrain calls  : 19
//│ annoying  calls  : 9
//│ subtyping calls  : 67

:stats
:e
def arg: A[int] | B[int]
foo arg
//│ arg: {fA: int} & a | {fB: int} & b
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.51: 	foo arg
//│ ║        	^^^^^^^
//│ ╟── expression of type `b & ({fB: int} & a | {fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.22: 	  | A -> x.fA
//│ ║        	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.21: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error | int
//│ constrain calls  : 42
//│ annoying  calls  : 32
//│ subtyping calls  : 182

:stats
:e
def arg: A[int] | B[int] | C[int]
foo arg
//│ arg: {fC: int} & c | {fA: int} & a | {fB: int} & b
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.71: 	foo arg
//│ ║        	^^^^^^^
//│ ╟── expression of type `b & ({fB: int} & a | {fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.22: 	  | A -> x.fA
//│ ║        	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.21: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error | int
//│ constrain calls  : 94
//│ annoying  calls  : 84
//│ subtyping calls  : 532

:stats
:e
def arg: A[int] | B[int] | D[int]
foo arg
//│ arg: {fA: int} & a | {fB: int} & b | {fD: int} & d
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.91: 	foo arg
//│ ║        	^^^^^^^
//│ ╟── expression of type `b & ({fB: int} & a | {fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.22: 	  | A -> x.fA
//│ ║        	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.21: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error
//│ constrain calls  : 111
//│ annoying  calls  : 109
//│ subtyping calls  : 1222


// ====== 2 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  }
def arg: A[int] | B[int]
foo arg
//│ foo: ({fA: 'a} & a | {fB: 'a} & b & ~a) -> 'a
//│ arg: {fA: int} & a | {fB: int} & b
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.118: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `b & ({fB: int} & a | {fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.114: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.113: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error | int
//│ constrain calls  : 50
//│ annoying  calls  : 32
//│ subtyping calls  : 140


// ====== 3 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  }
def arg: A[int] | B[int] | C[int]
foo arg
//│ foo: ({fA: 'a} & a | ~a & ({fB: 'a} & b | {fC: 'a} & c & ~b)) -> 'a
//│ arg: {fC: int} & c | {fA: int} & a | {fB: int} & b
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.147: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `b & ({fB: int} & a | {fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.142: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.141: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error | int
//│ constrain calls  : 105
//│ annoying  calls  : 84
//│ subtyping calls  : 502


// ====== 4 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  }
def arg: A[int] | B[int] | C[int] | D[int]
foo arg
//│ foo: ({fA: 'a} & a | ~a & ({fB: 'a} & b | ~b & ({fC: 'a} & c | {fD: 'a} & d & ~c))) -> 'a
//│ arg: {fC: int} & c | {fA: int} & a | {fB: int} & b | {fD: int} & d
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.177: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `b & ({fB: int} & a | {fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.171: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.170: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 116
//│ annoying  calls  : 97
//│ subtyping calls  : 565

:stats
:e
foo (arg with { x = 1} with { y = 2 })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.197: 	foo (arg with { x = 1} with { y = 2 })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `b & ({fB: int, x: 1, y: 2} & a | {fB: int, x: 1, y: 2} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.171: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.170: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 91
//│ annoying  calls  : 94
//│ subtyping calls  : 420

:stats
:e
foo (arg with { x = 1; y = 2; z = 3 })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.215: 	foo (arg with { x = 1; y = 2; z = 3 })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `b & ({fB: int, x: 1, y: 2, z: 3} & a | {fB: int, x: 1, y: 2, z: 3} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.171: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.170: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 91
//│ annoying  calls  : 94
//│ subtyping calls  : 408


// ====== 5 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int]
foo arg
//│ foo: ({fA: 'a} & a | ~a & ({fB: 'a} & b | ~b & ({fC: 'a} & c | ~c & ({fD: 'a} & d | {fE: 'a} & e & ~d)))) -> 'a
//│ arg: {fC: int} & c | {fE: int} & e | {fA: int} & a | {fB: int} & b | {fD: int} & d
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.244: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `b & ({fB: int} & a | {fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.237: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.236: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 120
//│ annoying  calls  : 97
//│ subtyping calls  : 654


// ====== 6 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int]
foo arg
//│ foo: ({fA: 'a} & a | ~a & ({fB: 'a} & b | ~b & ({fC: 'a} & c | ~c & ({fD: 'a} & d | ~d & ({fE: 'a} & e | {fF: 'a} & f & ~e))))) -> 'a
//│ arg: {fC: int} & c | {fE: int} & e | {fA: int} & a | {fB: int} & b | {fD: int} & d | {fF: int} & f
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.276: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `b & ({fB: int} & a | {fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.268: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.267: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 124
//│ annoying  calls  : 97
//│ subtyping calls  : 762


// ====== 7 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
foo arg
//│ foo: ({fA: 'a} & a | ~a & ({fB: 'a} & b | ~b & ({fC: 'a} & c | ~c & ({fD: 'a} & d | ~d & ({fE: 'a} & e | ~e & ({fF: 'a} & f | {fG: 'a} & g & ~f)))))) -> 'a
//│ arg: {fC: int} & c | {fE: int} & e | {fG: int} & g | {fA: int} & a | {fB: int} & b | {fD: int} & d | {fF: int} & f
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.309: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `b & ({fB: int} & a | {fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.300: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.299: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 128
//│ annoying  calls  : 97
//│ subtyping calls  : 889

def foo_manual: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f) -> 'a
//│ foo_manual: ({fA: 'a} & a | ~a & ({fB: 'a} & b | ~b & ({fC: 'a} & c | ~c & ({fD: 'a} & d | ~d & ({fE: 'a} & e | ~e & ({fF: 'a} & f | {fG: 'a} & g & ~f)))))) -> 'a

:stats
:e
foo_manual arg
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.332: 	foo_manual arg
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── type `{fB: int} & b` does not match type `{fA: ?a} & a | ~a & ({fB: ?a} & b | {fC: ?a} & c & ~b | {fD: ?a} & d & ~b & ~c | {fE: ?a} & e & ~b & ~c & ~d | {fF: ?a} & f & ~b & ~c & ~d & ~e | {fG: ?a} & g & ~b & ~c & ~d & ~e & ~f)`
//│ ║  l.308: 	def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: ?a0} & a | ~a & ({fB: ?a0} & b | {fC: ?a0} & c & ~b | {fD: ?a0} & d & ~b & ~c | {fE: ?a0} & e & ~b & ~c & ~d | {fF: ?a0} & f & ~b & ~c & ~d & ~e | {fG: ?a0} & g & ~b & ~c & ~d & ~e & ~f)`
//│ ║  l.332: 	foo_manual arg
//│ ║         	           ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.327: 	def foo_manual: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f) -> 'a
//│ ╙──       	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error
//│ constrain calls  : 27
//│ annoying  calls  : 90
//│ subtyping calls  : 877

:stats
foo_manual = foo
//│ ({fA: 'a} & a | ~a & ({fB: 'a} & b | ~b & ({fC: 'a} & c | ~c & ({fD: 'a} & d | ~d & ({fE: 'a} & e | ~e & ({fF: 'a} & f | {fG: 'a} & g & ~f)))))) -> 'a
//│   <:  foo_manual:
//│ ({fA: 'a} & a | ~a & ({fB: 'a} & b | ~b & ({fC: 'a} & c | ~c & ({fD: 'a} & d | ~d & ({fE: 'a} & e | ~e & ({fF: 'a} & f | {fG: 'a} & g & ~f)))))) -> 'a
//│ constrain calls  : 96
//│ annoying  calls  : 183
//│ subtyping calls  : 1098


// ====== 8 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int] | H[int]
foo arg
//│ foo: ({fA: 'a} & a | ~a & ({fB: 'a} & b | ~b & ({fC: 'a} & c | ~c & ({fD: 'a} & d | ~d & ({fE: 'a} & e | ~e & ({fF: 'a} & f | ~f & ({fG: 'a} & g | {fH: 'a} & h & ~g))))))) -> 'a
//│ arg: {fC: int} & c | {fE: int} & e | {fG: int} & g | {fA: int} & a | {fB: int} & b | {fD: int} & d | {fF: int} & f | {fH: int} & h
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.375: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `b & ({fB: int} & a | {fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.365: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.364: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 132
//│ annoying  calls  : 97
//│ subtyping calls  : 1035


