
trait A[T]: { fA: T }
trait B[T]: { fB: T }
trait C[T]: { fC: T }
trait D[T]: { fD: T }
trait E[T]: { fE: T }
trait F[T]: { fF: T }
trait G[T]: { fG: T }
trait H[T]: { fH: T }
//│ Defined trait A
//│ Defined trait B
//│ Defined trait C
//│ Defined trait D
//│ Defined trait E
//│ Defined trait F
//│ Defined trait G
//│ Defined trait H

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
//│ foo: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f | {fH: 'a} & h & ~a & ~b & ~c & ~d & ~e & ~f & ~g) -> 'a
//│ constrain calls  : 26
//│ annoying  calls  : 0
//│ subtyping calls  : 445


// ====== 1 & all ====== //

:stats
def arg: A[int]
foo arg
//│ arg: {fA: int} & a
//│ res: int
//│ constrain calls  : 15
//│ annoying  calls  : 8
//│ subtyping calls  : 68

:stats
:e
def arg: A[int] | B[int]
foo arg
//│ arg: {fA: int} & a | {fB: int} & b
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.50: 	foo arg
//│ ║        	^^^^^^^
//│ ╟── expression of type `{fB: int} & a & b | {fB: int} & b & ~?a` does not match type `{fA: ?b}`
//│ ║  l.49: 	def arg: A[int] | B[int]
//│ ║        	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `a & ?c | b & ?d & ~a | c & ?e & ~a & ~b | d & ?f & ~a & ~b & ~c | e & ?g & ~a & ~b & ~c & ~d | f & ?h & ~a & ~b & ~c & ~d & ~e | g & ?i & ~a & ~b & ~c & ~d & ~e & ~f | h & ?j & ~a & ~b & ~c & ~d & ~e & ~f & ~g`
//│ ║  l.50: 	foo arg
//│ ║        	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.21: 	  | A -> x.fA
//│ ║        	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.20: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error | int
//│ constrain calls  : 30
//│ annoying  calls  : 30
//│ subtyping calls  : 235

:stats
:e
def arg: A[int] | B[int] | C[int]
foo arg
//│ arg: {fC: int} & c | {fA: int} & a | {fB: int} & b
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.75: 	foo arg
//│ ║        	^^^^^^^
//│ ╟── expression of type `{fB: int} & a & b | {fB: int} & b & ~?a` does not match type `{fA: ?b}`
//│ ║  l.74: 	def arg: A[int] | B[int] | C[int]
//│ ║        	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `a & ?c | b & ?d & ~a | c & ?e & ~a & ~b | d & ?f & ~a & ~b & ~c | e & ?g & ~a & ~b & ~c & ~d | f & ?h & ~a & ~b & ~c & ~d & ~e | g & ?i & ~a & ~b & ~c & ~d & ~e & ~f | h & ?j & ~a & ~b & ~c & ~d & ~e & ~f & ~g`
//│ ║  l.75: 	foo arg
//│ ║        	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.21: 	  | A -> x.fA
//│ ║        	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.20: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error | int
//│ constrain calls  : 59
//│ annoying  calls  : 81
//│ subtyping calls  : 787

:stats
:e
def arg: A[int] | B[int] | D[int]
foo arg
//│ arg: {fA: int} & a | {fB: int} & b | {fD: int} & d
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.100: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `{fB: int} & a & b | {fB: int} & b & ~?a` does not match type `{fA: ?b}`
//│ ║  l.99: 	def arg: A[int] | B[int] | D[int]
//│ ║        	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `a & ?c | b & ?d & ~a | c & ?e & ~a & ~b | d & ?f & ~a & ~b & ~c | e & ?g & ~a & ~b & ~c & ~d | f & ?h & ~a & ~b & ~c & ~d & ~e | g & ?i & ~a & ~b & ~c & ~d & ~e & ~f | h & ?j & ~a & ~b & ~c & ~d & ~e & ~f & ~g`
//│ ║  l.100: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.21: 	  | A -> x.fA
//│ ║        	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.20: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error
//│ constrain calls  : 67
//│ annoying  calls  : 106
//│ subtyping calls  : 1898


// ====== 2 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  }
def arg: A[int] | B[int]
foo arg
//│ foo: ({fA: 'a} & a | {fB: 'a} & b & ~a) -> 'a
//│ arg: {fA: int} & a | {fB: int} & b
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.132: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `{fB: int} & a & b | {fB: int} & b & ~?a` does not match type `{fA: ?b}`
//│ ║  l.131: 	def arg: A[int] | B[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `a & ?c | b & ?d & ~a`
//│ ║  l.132: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.128: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.127: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error | int
//│ constrain calls  : 38
//│ annoying  calls  : 30
//│ subtyping calls  : 152


// ====== 3 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  }
def arg: A[int] | B[int] | C[int]
foo arg
//│ foo: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b) -> 'a
//│ arg: {fC: int} & c | {fA: int} & a | {fB: int} & b
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.166: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `{fB: int} & a & b | {fB: int} & b & ~?a` does not match type `{fA: ?b}`
//│ ║  l.165: 	def arg: A[int] | B[int] | C[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `a & ?c | b & ?d & ~a | c & ?e & ~a & ~b`
//│ ║  l.166: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.161: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.160: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error | int
//│ constrain calls  : 70
//│ annoying  calls  : 81
//│ subtyping calls  : 657


// ====== 4 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  }
def arg: A[int] | B[int] | C[int] | D[int]
foo arg
//│ foo: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c) -> 'a
//│ arg: {fC: int} & c | {fA: int} & a | {fB: int} & b | {fD: int} & d
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.201: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `{fB: int} & a & b | {fB: int} & b & ~?a` does not match type `{fA: ?b}`
//│ ║  l.200: 	def arg: A[int] | B[int] | C[int] | D[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `a & ?c | b & ?d & ~a | c & ?e & ~a & ~b | d & ?f & ~a & ~b & ~c`
//│ ║  l.201: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.195: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.194: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 79
//│ annoying  calls  : 93
//│ subtyping calls  : 863

:stats
:e
foo (arg with { x = 1} with { y = 2 })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.226: 	foo (arg with { x = 1} with { y = 2 })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `{fB: int, x: 1, y: 2} & a & b | {fB: int, x: 1, y: 2} & b & ~?a` does not match type `{fA: ?b}`
//│ ║  l.226: 	foo (arg with { x = 1} with { y = 2 })
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.195: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.194: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 51
//│ annoying  calls  : 90
//│ subtyping calls  : 398

:stats
:e
foo (arg with { x = 1; y = 2; z = 3 })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.246: 	foo (arg with { x = 1; y = 2; z = 3 })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `{fB: int, x: 1, y: 2, z: 3} & a & b | {fB: int, x: 1, y: 2, z: 3} & b & ~?a` does not match type `{fA: ?b}`
//│ ║  l.246: 	foo (arg with { x = 1; y = 2; z = 3 })
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.195: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.194: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 51
//│ annoying  calls  : 90
//│ subtyping calls  : 386


// ====== 5 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int]
foo arg
//│ foo: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d) -> 'a
//│ arg: {fC: int} & c | {fE: int} & e | {fA: int} & a | {fB: int} & b | {fD: int} & d
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.277: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `{fB: int} & a & b | {fB: int} & b & ~?a` does not match type `{fA: ?b}`
//│ ║  l.276: 	def arg: A[int] | B[int] | C[int] | D[int] | E[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `a & ?c | b & ?d & ~a | c & ?e & ~a & ~b | d & ?f & ~a & ~b & ~c | e & ?g & ~a & ~b & ~c & ~d`
//│ ║  l.277: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.270: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.269: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 83
//│ annoying  calls  : 93
//│ subtyping calls  : 971


// ====== 6 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int]
foo arg
//│ foo: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e) -> 'a
//│ arg: {fC: int} & c | {fE: int} & e | {fA: int} & a | {fB: int} & b | {fD: int} & d | {fF: int} & f
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.314: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `{fB: int} & a & b | {fB: int} & b & ~?a` does not match type `{fA: ?b}`
//│ ║  l.313: 	def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `a & ?c | b & ?d & ~a | c & ?e & ~a & ~b | d & ?f & ~a & ~b & ~c | e & ?g & ~a & ~b & ~c & ~d | f & ?h & ~a & ~b & ~c & ~d & ~e`
//│ ║  l.314: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.306: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.305: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 87
//│ annoying  calls  : 93
//│ subtyping calls  : 1102


// ====== 7 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
foo arg
//│ foo: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f) -> 'a
//│ arg: {fC: int} & c | {fE: int} & e | {fG: int} & g | {fA: int} & a | {fB: int} & b | {fD: int} & d | {fF: int} & f
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.352: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `{fB: int} & a & b | {fB: int} & b & ~?a` does not match type `{fA: ?b}`
//│ ║  l.351: 	def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `a & ?c | b & ?d & ~a | c & ?e & ~a & ~b | d & ?f & ~a & ~b & ~c | e & ?g & ~a & ~b & ~c & ~d | f & ?h & ~a & ~b & ~c & ~d & ~e | g & ?i & ~a & ~b & ~c & ~d & ~e & ~f`
//│ ║  l.352: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.343: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.342: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 91
//│ annoying  calls  : 93
//│ subtyping calls  : 1256

def foo_manual: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f) -> 'a
//│ foo_manual: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f) -> 'a

:stats
:e
foo_manual arg
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.380: 	foo_manual arg
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── expression of type `{fB: int} & b` does not match type `{fA: ?a} & a | {fB: ?a} & b & ~a | {fC: ?a} & c & ~a & ~b | {fD: ?a} & d & ~a & ~b & ~c | {fE: ?a} & e & ~a & ~b & ~c & ~d | {fF: ?a} & f & ~a & ~b & ~c & ~d & ~e | {fG: ?a} & g & ~a & ~b & ~c & ~d & ~e & ~f`
//│ ║  l.351: 	def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: ?a0} & a | {fB: ?a0} & b & ~a | {fC: ?a0} & c & ~a & ~b | {fD: ?a0} & d & ~a & ~b & ~c | {fE: ?a0} & e & ~a & ~b & ~c & ~d | {fF: ?a0} & f & ~a & ~b & ~c & ~d & ~e | {fG: ?a0} & g & ~a & ~b & ~c & ~d & ~e & ~f`
//│ ║  l.380: 	foo_manual arg
//│ ║         	           ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.375: 	def foo_manual: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f) -> 'a
//│ ╙──       	                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error
//│ constrain calls  : 25
//│ annoying  calls  : 86
//│ subtyping calls  : 877

:stats
foo_manual = foo
//│ ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f) -> 'a
//│   <:  foo_manual:
//│ ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f) -> 'a
//│ constrain calls  : 72
//│ annoying  calls  : 182
//│ subtyping calls  : 1108


// ====== 8 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int] | H[int]
foo arg
//│ foo: ({fA: 'a} & a | {fB: 'a} & b & ~a | {fC: 'a} & c & ~a & ~b | {fD: 'a} & d & ~a & ~b & ~c | {fE: 'a} & e & ~a & ~b & ~c & ~d | {fF: 'a} & f & ~a & ~b & ~c & ~d & ~e | {fG: 'a} & g & ~a & ~b & ~c & ~d & ~e & ~f | {fH: 'a} & h & ~a & ~b & ~c & ~d & ~e & ~f & ~g) -> 'a
//│ arg: {fC: int} & c | {fE: int} & e | {fG: int} & g | {fA: int} & a | {fB: int} & b | {fD: int} & d | {fF: int} & f | {fH: int} & h
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.423: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `{fB: int} & a & b | {fB: int} & b & ~?a` does not match type `{fA: ?b}`
//│ ║  l.422: 	def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int] | H[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `a & ?c | b & ?d & ~a | c & ?e & ~a & ~b | d & ?f & ~a & ~b & ~c | e & ?g & ~a & ~b & ~c & ~d | f & ?h & ~a & ~b & ~c & ~d & ~e | g & ?i & ~a & ~b & ~c & ~d & ~e & ~f | h & ?j & ~a & ~b & ~c & ~d & ~e & ~f & ~g`
//│ ║  l.423: 	foo arg
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.413: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.412: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 95
//│ annoying  calls  : 93
//│ subtyping calls  : 1433


