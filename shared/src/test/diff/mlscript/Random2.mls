:NoJS


// :stdout
// :s
// :d
// :ds
def f: { x: 'a } as 'a
//│ f: 'a
//│   where
//│     'a :> {x: 'a}


// :stdout
// :s
// :d
// :ds
rec def l x = l
//│ l: 'l
//│   where
//│     'l :> anything -> 'l

l
//│ res: 'l
//│   where
//│     'l :> anything -> 'l

:ns
m y = l y
//│ m: forall 'a 'b 'c. 'a -> 'b
//│   where
//│     'b :> forall 'l. 'l
//│     'l := 'c -> 'l
//│     'a <: 'c

m
//│ res: 'l
//│   where
//│     'l :> anything -> 'l


fun a -> a a
//│ res: ('a -> 'b & 'a) -> 'b


// :stdout
// :s
// :d
// :ds
:e
rec def f a = a a
//│ ('a -> 'b & 'a) -> 'b
//│   <:  f:
//│ 'a
//│   where
//│     'a :> {x: 'a}
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.51: 	rec def f a = a a
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `forall ?f. ?f` does not match type `{x: 'a}`
//│ ╟── Note: constraint arises from record type:
//│ ║  l.8: 	def f: { x: 'a } as 'a
//│ ╙──     	       ^^^^^^^^^


// :stdout
// :s
// :d
// :ds
rec def g a = a a
//│ g: ('a -> 'b & 'a) -> 'b


// :ds
def ite x y z = if x then y else z
//│ ite: bool -> 'a -> 'a -> 'a



class Some[A]: { v: A }
//│ Defined class Some[+A]

def Some v = Some{v}
//│ Some: 'v -> Some['v]


def foo(x: Some['a]) =
  let _ = x.v : Some[?]
  in x: Some['a & some]
//│ foo: Some[Some[nothing] & 'a] -> Some[Some[?] & 'a]

def f: Some['a]
//│ f: Some[nothing]



def foo(x: 'a) = (x + 1, x)
//│ foo: (int & 'a) -> (int, 'a,)

// * NOTE: currently each parameter type is typed independently – so these 'a are different!
def foo(x: 'a, y: 'a) = (x + 1, y)
//│ foo: (int, 'a,) -> (int, 'a,)

def foo(f: 'a -> 'a, x: 'a) =
  let _ = x + 1
  in error: Some['a & some]
//│ foo: ('a -> 'a, int,) -> Some[nothing]


