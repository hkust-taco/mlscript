:NoJS

class Foo[A]
  method Inv: A -> A
//│ Defined class Foo[=A]
//│ Declared Foo.Inv: Foo['A] -> 'A -> 'A

trait Bar[A]
  method Inv: A -> A
//│ Defined trait Bar[=A]
//│ Declared Bar.Inv: Bar['A] -> 'A -> 'A

type Baz[A] = Bar[A -> A]
//│ Defined type alias Baz[=A]

def foo: Foo[int] & Bar[int] & Baz[string]
//│ foo: Foo[int] & Bar[int] & Baz[string]

foo: Foo['res]
//│ res: Foo[int]

foo: Baz['res]
//│ res: Baz[string]

// * Note that we don't get a `'res :> string -> string & int` upper bound because it's simplified to bottom:
foo: Bar['res]
//│ res: Bar['res]
//│   where
//│     'res <: int | string -> string

