
class C[A]: { a: A -> A }
//│ Defined class C[=A]

class D: C[int] & { b: int }
//│ Defined class D

d = D{a = id; b = if true then 0 else 1}
//│ d: D with {a: forall 'a. 'a -> 'a, b: 0 | 1}
//│  = D { a: [Function: id], b: 0 }

d.a true
//│ res: true
//│    = true

d.a 0
//│ res: 0
//│    = 0

d : #D
//│ res: D
//│    = D { a: [Function: id], b: 0 }

def foo x = case x of D -> x.b, _ -> 0
//│ foo: ((D\a with {b: 'b}) | ~D) -> (0 | 'b)
//│    = [Function: foo]

// Overloading through intersections: not supported
// foo: ((D\a with {b: 'b}) -> 'b) & (~D -> 0)

foo d
//│ res: 0 | 1
//│    = 0

