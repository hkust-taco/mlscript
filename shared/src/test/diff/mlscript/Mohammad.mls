
def test f = f (fun b -> if b then 1 else 2)
//│ test: ((bool -> (2 | 1)) -> 'a) -> 'a
//│     = [Function: test]

test (fun k -> (k true, k false))
//│ res: (2 | 1, 2 | 1,)
//│    = [ 1, 2 ]


class Class: {x : int}
  method Test = 12
//│ Defined class Class
//│ Defined Class.Test: Class -> 12

c = Class{x = 1}
//│ c: Class & {x: 1}
//│  = Class { x: 1 }

:js
def useCls c = case c of { Class -> c.x | int -> "oops" }
//│ // Query 1
//│ globalThis.useCls = function useCls(c) {
//│   let a;
//│   return (a = c, a instanceof Class ? c.x : Number.isInteger(a) ? "oops" : (() => {
//│     throw new Error("non-exhaustive case expression");
//│   })());
//│ };
//│ // End of generated code
//│ useCls: ((Class with {x: 'x}) | int) -> ('x | "oops")
//│       = [Function: useCls]

useCls c
//│ res: 1 | "oops"
//│    = 1

useCls (c with { x = 2 })
//│ res: 2 | "oops"
//│    = 2

:js
trait T
  method Test2: int
  method Test2 = 1
//│ Defined trait T
//│ Declared T.Test2: T -> int
//│ Defined T.Test2: T -> 1
//│ // Prelude
//│ const T = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│       if (!("Test2" in instance)) {
//│         Object.defineProperty(instance, "Test2", {
//│           get: function () {
//│             return 1;
//│           }
//│         });
//│       }
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ // End of generated code

:js
class D: T & {z: int}
  method Test2 = 2
//│ Defined class D
//│ Defined D.Test2: D -> 2
//│ // Prelude
//│ class D {
//│   constructor(fields) {
//│     T.implement(this);
//│     this.z = fields.z;
//│   }
//│   get Test2() {
//│     return 2;
//│   }
//│ }
//│ // End of generated code

def useTrt t = case t of { T -> t.y | Class -> t.x }
//│ useTrt: ({y: 'y} & #T | (Class with {x: 'y}) & ~#T) -> 'y
//│       = [Function: useTrt]

:e
useTrt c
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.101: 	useTrt c
//│ ║         	^^^^^^^^
//│ ╟── expression of type `Class & {x: ?x} & ~?a | Class & {x: ?x} & #T` does not have field 'y'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.96: 	def useTrt t = case t of { T -> t.y | Class -> t.x }
//│ ║        	                                ^^^
//│ ╟── from refined scrutinee:
//│ ║  l.96: 	def useTrt t = case t of { T -> t.y | Class -> t.x }
//│ ╙──      	                    ^
//│ res: error | 1
//│    = 1

useTrt (c with { y = 1 })
//│ res: 1
//│    = 1

:e
useTrt c
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.120: 	useTrt c
//│ ║         	^^^^^^^^
//│ ╟── expression of type `Class & {x: ?x} & ~?a | Class & {x: ?x} & #T` does not have field 'y'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.96: 	def useTrt t = case t of { T -> t.y | Class -> t.x }
//│ ║        	                                ^^^
//│ ╟── from refined scrutinee:
//│ ║  l.96: 	def useTrt t = case t of { T -> t.y | Class -> t.x }
//│ ╙──      	                    ^
//│ res: error | 1
//│    = 1

d = D{z = 1213}
//│ d: D & {z: 1213}
//│  = D { z: 1213 }

d: {z: 'a}
//│ res: {z: 1213}
//│    = D { z: 1213 }

d.Test2
//│ res: int
//│    = 2

trait T1
  method Test3: int
  method Test3 = 1
  method Test4 = 4
//│ Defined trait T1
//│ Declared T1.Test3: T1 -> int
//│ Defined T1.Test3: T1 -> 1
//│ Defined T1.Test4: T1 -> 4

:js
trait T2: T1
  method Test3: int
  method Test3 = 2
//│ Defined trait T2
//│ Declared T2.Test3: T2 -> int
//│ Defined T2.Test3: T2 -> 2
//│ // Prelude
//│ const T2 = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│       if (!("Test3" in instance)) {
//│         Object.defineProperty(instance, "Test3", {
//│           get: function () {
//│             return 2;
//│           }
//│         });
//│       }
//│       T1.implement(instance);
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ // End of generated code

:js
class C3: T2
//│ Defined class C3
//│ // Prelude
//│ class C3 {
//│   constructor(fields) {
//│     T2.implement(this);
//│   }
//│ }
//│ // End of generated code

(C3{}).Test3
//│ res: int
//│    = 2

(C3{}).Test4
//│ res: 4
//│    = 4


:js
trait Oops
//│ Defined trait Oops
//│ // Prelude
//│ const Oops = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ // End of generated code

:js
oo = Oops 2
//│ // Query 1
//│ globalThis.oo = Oops.build(2);
//│ // End of generated code
//│ oo: 2 & #Oops
//│   = [Number: 2]

:js
case oo of { Oops -> 1 }
//│ // Query 1
//│ let a;
//│ res = (a = oo, Oops.is(a) ? 1 : (() => {
//│   throw new Error("non-exhaustive case expression");
//│ })());
//│ // End of generated code
//│ res: 1
//│    = 1


