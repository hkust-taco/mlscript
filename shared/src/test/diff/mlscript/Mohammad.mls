
def test f = f (fun b -> if b then 1 else 2)
//│ test: ((bool -> (1 | 2)) -> 'a) -> 'a
//│     = [Function: test]

test (fun k -> (k true, k false))
//│ res: (1 | 2, 1 | 2,)
//│    = [ 1, 2 ]


class Class: {x : int}
  method Test = 12
//│ Defined class Class
//│ Defined Class.Test: Class -> 12

c = Class{x = 1}
//│ c: Class & {x: 1}
//│  = Class { x: 1 }

:js
def useCls c = case c of { Class -> c.x | int -> "oops" }
//│ // Query 1
//│ globalThis.useCls = function useCls(c) {
//│   let a;
//│   return (a = c, a instanceof Class ? c.x : Number.isInteger(a) ? "oops" : (() => {
//│     throw new Error("non-exhaustive case expression");
//│   })());
//│ };
//│ // End of generated code
//│ useCls: ((Class with {x: 'x}) | int) -> ("oops" | 'x)
//│       = [Function: useCls]

useCls c
//│ res: "oops" | 1
//│    = 1

useCls (c with { x = 2 })
//│ res: "oops" | 2
//│    = 2

:js
trait T
  method Test2: int
  method Test2 = 1
//│ Defined trait T
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)

:js
class D: T & {z: int}
  method Test2 = 2
//│ Defined class D
//│ Defined D.Test2: D -> 2
//│ Code generation encountered an error:
//│   undeclared type name T when resolving base classes

def useTrt t = case t of { T -> t.y | Class -> t.x }
//│ useTrt: ((Class with {x: 'y}) & ~#T | {y: 'y} & #T) -> 'y
//│ Code generation encountered an error:
//│   unknown match case: T

:e
useTrt c
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.72: 	useTrt c
//│ ║        	^^^^^^^^
//│ ╟── expression of type `Class & {x: ?x} & #T | Class & {x: ?x} & ~?a` does not have field 'y'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.66: 	def useTrt t = case t of { T -> t.y | Class -> t.x }
//│ ║        	                                ^^^
//│ ╟── from refined scrutinee:
//│ ║  l.66: 	def useTrt t = case t of { T -> t.y | Class -> t.x }
//│ ╙──      	                    ^
//│ res: 1 | error
//│ Code generation encountered an error:
//│   unresolved symbol useTrt

useTrt (c with { y = 1 })
//│ res: 1
//│ Code generation encountered an error:
//│   unresolved symbol useTrt

:e
useTrt c
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.93: 	useTrt c
//│ ║        	^^^^^^^^
//│ ╟── expression of type `Class & {x: ?x} & #T | Class & {x: ?x} & ~?a` does not have field 'y'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.66: 	def useTrt t = case t of { T -> t.y | Class -> t.x }
//│ ║        	                                ^^^
//│ ╟── from refined scrutinee:
//│ ║  l.66: 	def useTrt t = case t of { T -> t.y | Class -> t.x }
//│ ╙──      	                    ^
//│ res: 1 | error
//│ Code generation encountered an error:
//│   unresolved symbol useTrt

d = D{z = 1213}
//│ d: D & {z: 1213}
//│ Runtime error:
//│   ReferenceError: D is not defined

d: {z: 'a}
//│ res: {z: 1213}
//│ Runtime error:
//│   ReferenceError: d is not defined

d.Test2
//│ res: int
//│ Runtime error:
//│   ReferenceError: d is not defined

trait T1
  method Test3: int
  method Test3 = 1
  method Test4 = 4
//│ Defined trait T1
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)

:js
trait T2: T1
  method Test3: int
  method Test3 = 2
//│ Defined trait T2
//│ /!!!\ Uncaught error: java.lang.IllegalArgumentException: requirement failed
//│ 	at: scala.Predef$.require(Predef.scala:324)
//│ 	at: mlscript.TypeDefs.clsNameToNomTag(TypeDefs.scala:122)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.$anonfun$mkTag$1(TyperHelpers.scala:1093)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperHelpers$TypeRefImpl.mkTag$(TyperHelpers.scala:1091)
//│ 	at: mlscript.TyperDatatypes$TypeRef.mkTag(TyperDatatypes.scala:363)
//│ 	at: mlscript.NormalForms$DNF$.mk(NormalForms.scala:707)
//│ 	at: mlscript.TypeSimplifier.$anonfun$normalizeTypes_$bang$106(TypeSimplifier.scala:464)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)

:js
class C3: T2
//│ Defined class C3
//│ Code generation encountered an error:
//│   undeclared type name T2 when resolving base classes

(C3{}).Test3
//│ res: int
//│ Runtime error:
//│   ReferenceError: C3 is not defined

(C3{}).Test4
//│ res: 4
//│ Runtime error:
//│   ReferenceError: C3 is not defined


:js
trait Oops
//│ Defined trait Oops
//│ // Prelude
//│ const Oops = function () {
//│   const tag = Symbol();
//│   return ({
//│     implement: function implement(instance) {
//│       if (tag in instance) {
//│         return;
//│       }
//│       Object.defineProperty(instance, tag, { value: {} });
//│     },
//│     build: function build(instance) {
//│       if (typeof instance !== "object") {
//│         instance = Object.assign(instance, {});
//│       }
//│       this.implement(instance);
//│       return instance;
//│     },
//│     is: function is(x) {
//│       return typeof x === "object" && x !== null && tag in x;
//│     }
//│   });
//│ }();
//│ // End of generated code

:js
oo = Oops 2
//│ // Query 1
//│ globalThis.oo = Oops.build(2);
//│ // End of generated code
//│ oo: 2 & #Oops
//│   = [Number: 2]

:js
case oo of { Oops -> 1 }
//│ // Query 1
//│ let a;
//│ res = (a = oo, Oops.is(a) ? 1 : (() => {
//│   throw new Error("non-exhaustive case expression");
//│ })());
//│ // End of generated code
//│ res: 1
//│    = 1


