
:AllowTypeErrors
:ShowRelativeLineNums


rec def f n =
  if n then 0 else f (miss + 1)
//│ ╔══[ERROR] identifier not found: miss
//│ ║  l.+2: 	  if n then 0 else f (miss + 1)
//│ ╙──      	                      ^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.+1: 	rec def f n =
//│ ║        	          ^^^
//│ ║  l.+2: 	  if n then 0 else f (miss + 1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `bool`
//│ ║  l.+2: 	  if n then 0 else f (miss + 1)
//│ ║        	                      ^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.+2: 	  if n then 0 else f (miss + 1)
//│ ╙──      	     ^
//│ f: bool -> 0


class Left: { v: anything }
//│ Defined class Left

// TODO missing prov of `a` in `let Left a`
:e
rec def lefts() =
  let res = Left {v = lefts()}
  in let a = res.v
  in let tmo = log(a + 1)
  in res
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.+1: 	rec def lefts() =
//│ ║        	             ^^^^
//│ ║  l.+2: 	  let res = Left {v = lefts()}
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  in let a = res.v
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  in let tmo = log(a + 1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+5: 	  in res
//│ ║        	^^^^^^^^^
//│ ╟── application of type `Left & {v: ?v}` is not an instance of type `int`
//│ ║  l.+2: 	  let res = Left {v = lefts()}
//│ ║        	            ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.+5: 	  in res
//│ ║        	     ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.+4: 	  in let tmo = log(a + 1)
//│ ║        	                   ^
//│ ╟── from application:
//│ ║  l.+2: 	  let res = Left {v = lefts()}
//│ ╙──      	                      ^^^^^^^
//│ lefts: () -> 'a
//│   where
//│     'a :> Left & {v: forall 'a. 'a}




// * For the record – the errors in Supertype prototype:


///│ ╔══[ERROR]══ identifier not found: miss
///│ ║  l.+2: 	  if n then 0 else f (miss + 1)
///│ ╙──      	                      ^^^^
///│ ╔══[ERROR]══ Type mismatch in member definition:
///│ ║  l.+1: 	f n = ...
///│ ║        	^^^^^^^
///│ ╟────────────── expression of type:  Int
///│ ║  l.+2: 	  if n then 0 else f (miss + 1)
///│ ║        	                     ^^^^^^^^^^
///│ ╟── which flows into
///│ ║  l.+2: 	  if n then 0 else f (miss + 1)
///│ ║        	     ^
///│ ╟──── does not match expected type:  Bool
///│ ╠══════[DETAILS]══════
///│ ╟── Expression of type: 	Int
///│ ║  [predef.sup]
///│ ║  l.129: 	(+): Int -> Int -> Int
///│ ║         	                   ^^^
///│ ╟────► flowing into
///│ ║  l.+2: 	  if n then 0 else f (miss + 1)
///│ ║        	                     ^^^^^^^^^^
///│ ╟────► into
///│ ║  l.+1: 	f n =
///│ ║        	  ^
///│ ╟── does not match expected type: Bool
///│ ║  l.+2: 	  if n then 0 else f (miss + 1)
///│ ╙──      	     ^
///│ f: Bool -> 0


// TODO missing prov of `a` in `let Left a`
///│ ╔══[ERROR]══ Type mismatch in member definition:
///│ ║  l.+1: 	lefts() = ...
///│ ║        	^^^^^^^^^^^
///│ ╟────────────── expression of type:  Left ?a as ?a
///│ ║  l.+2: 	  let res = Left lefts()
///│ ║        	            ^^^^^^^^^^^^
///│ ╟── which flows into
///│ ║  l.+4: 	  println @ a + 1
///│ ║        	            ^
///│ ╟──── does not match expected type:  Int
///│ ║  [predef.sup]
///│ ║  l.129: 	(+): Int -> Int -> Int
///│ ║         	     ^^^
///│ ╠══════[DETAILS]══════
///│ ╟── Expression of type [1] : 	Left ?b as ?b
///│ ║  l.+2: 	  let res = Left lefts()
///│ ║        	            ^^^^^^^^^^^^
///│ ╟────► flowing into
///│ ║  l.+2: 	  let res = Left lefts()
///│ ║        	      ^^^
///│ ╟────► into
///│ ║  l.+5: 	  res
///│ ║        	  ^^^
///│ ╟────► into
///│ ║  l.+2: 	  let res = Left lefts()
///│ ║        	                 ^^^^^^^
///│ ╟────►► flowing into Left's first argument, with type: 	Left (Left ?c as ?c)
///│ ║                                                      	     ^^^^^^^^^^^^^^^
///│ ║  l.+2: 	  let res = Left lefts()
///│ ║        	            ^^^^^^^^^^^^
///│ ╟────►► flowing into
///│ ║  l.+2: 	  let res = Left lefts()
///│ ║        	      ^^^
///│ ╟────►► into
///│ ║  l.+3: 	  let Left a = res
///│ ║        	               ^^^
///│ ╟────►► into
///│ ║  l.+3: 	  let Left a = res
///│ ║        	      ^^^^^^
///│ ╟────► flowing out of Left's first pattern, with type [1] : 	Left ?d as ?d
///│ ║                                                           	^^^^^^^^^^^^^
///│ ║  l.+3: 	  let Left a = res
///│ ║        	           ^
///│ ╟────► flowing into
///│ ║  l.+4: 	  println @ a + 1
///│ ║        	            ^
///│ ╟── does not match expected type: Int
///│ ║  [predef.sup]
///│ ║  l.129: 	(+): Int -> Int -> Int
///│ ╙──       	     ^^^
///│ lefts: 'fun () -> (Left 'a as 'a)


