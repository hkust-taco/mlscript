
class None: {}
def None = None{}
//│ Defined class None
//│ None: None
//│     = None {}

class Some[A]: { value: A }
def Some v = Some { value = v }
//│ Defined class Some
//│ Some: 'a -> (Some['A .. 'A | 'a] with {value: 'a})
//│     = [Function: Some1]

Some 42
(Some 42).value
//│ res: Some['A .. 42 | 'A] with {value: 42}
//│    = Some { value: 42 }
//│ res: 42
//│    = 42

type Option[A] = Some[A] | None
//│ Defined type alias Option

None: Option[int]
Some 42 : Option[int]
//│ res: None | Some[int]
//│    = None {}
//│ res: None | Some[int]
//│    = Some { value: 42 }

:e
res.value
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.32: 	res.value
//│ ║        	^^^^^^^^^
//│ ╟── expression of type `None` does not have field 'value'
//│ ║  l.21: 	type Option[A] = Some[A] | None
//│ ║        	                           ^^^^
//│ ╟── but it flows into reference with expected type `{value: ?a}`
//│ ║  l.32: 	res.value
//│ ╙──      	^^^
//│ res: error | int
//│    = 42

:e
42: Option[int, int]
//│ ╔══[ERROR] Wrong number of type arguments – expected 1, found 2
//│ ║  l.46: 	42: Option[int, int]
//│ ╙──      	    ^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.46: 	42: Option[int, int]
//│ ║        	^^
//│ ╟── expression of type `42` does not match type `Some[int] | None`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.21: 	type Option[A] = Some[A] | None
//│ ║        	                 ^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.46: 	42: Option[int, int]
//│ ╙──      	    ^^^^^^^^^^^^^^^^
//│ res: None | Some[int]
//│    = 42


class Foo1[A]: { x: A }
class Bar1: Foo1[int]
//│ Defined class Foo1
//│ Defined class Bar1

Bar1
//│ res: {x: int & 'x} -> (Bar1 with {x: 'x})
//│    = [class Bar1 extends Foo1]

g = Bar1 { x = 42 }
//│ g: Bar1 & {x: 42}
//│  = Bar1 { x: 42 }

g: Foo1['a]
//│ res: Foo1[int]
//│    = Bar1 { x: 42 }

res.x
//│ res: int
//│    = 42

g: Foo1['a]: Foo1[int]
//│ res: Foo1[int]
//│    = Bar1 { x: 42 }

res.x
//│ res: int
//│    = 42

:e
g: Foo1['a]: Foo1[string]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.94: 	g: Foo1['a]: Foo1[string]
//│ ║        	^
//│ ╟── expression of type `int` does not match type `string`
//│ ║  l.65: 	class Bar1: Foo1[int]
//│ ║        	                 ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.94: 	g: Foo1['a]: Foo1[string]
//│ ║        	                  ^^^^^^
//│ ╟── from record type:
//│ ║  l.64: 	class Foo1[A]: { x: A }
//│ ╙──      	               ^^^^^^^^
//│ res: Foo1[string]
//│    = Bar1 { x: 42 }


class Foo2[A]
//│ Defined class Foo2

Foo2
//│ res: anything -> Foo2['A]
//│    = [class Foo2]

:re
error: Foo2[int]
//│ res: Foo2[int]
//│ Runtime error:
//│   ReferenceError: error is not defined

f = fun x -> case x of { Foo2 -> x }
//│ f: (Foo2[?] & 'a) -> 'a
//│  = [Function: f]

f (Foo2 {})
//│ res: Foo2['A]
//│    = Foo2 {}

:re
error: (Foo2[?] & 'a) -> 'a
//│ res: (Foo2[anything .. nothing] & 'a) -> 'a
//│ Runtime error:
//│   ReferenceError: error is not defined

f: (Foo2[?] & 'a) -> 'a
//│ res: (Foo2[anything .. nothing] & 'a) -> 'a
//│    = [Function: f]

:ns
f: (Foo2[?] & 'a) -> 'a
//│ res: (Foo2[?] & 'a & (~(foo2 & {Foo2#A}) | foo2)) -> ('a | Foo2[?] & 'b as 'b)
//│    = [Function: f]

f
//│ res: (Foo2[?] & 'a) -> 'a
//│    = [Function: f]

