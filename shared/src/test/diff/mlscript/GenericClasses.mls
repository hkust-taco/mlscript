
class None: {}
def None = None{}
//│ Defined class None
//│ None: None
//│     = [Function: None1]

class Some[A]: { value: A }
def Some v = Some { value = v }
//│ Defined class Some[+A]
//│ Some: 'value -> Some['value]
//│     = [Function: Some1]

Some 42
(Some 42).value
//│ res: Some[42]
//│    = Some { value: 42 }
//│ res: 42
//│    = 42

type Option[A] = Some[A] | None
//│ Defined type alias Option[+A]

None: Option[int]
Some 42 : Option[int]
//│ res: Option[int]
//│    = None {}
//│ res: Option[int]
//│    = Some { value: 42 }

:e
res.value
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.32: 	res.value
//│ ║        	^^^^^^^^^
//│ ╟── type `Option[int]` does not have field 'value'
//│ ║  l.25: 	Some 42 : Option[int]
//│ ║        	          ^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{value: ?value}`
//│ ║  l.32: 	res.value
//│ ╙──      	^^^
//│ res: int | error
//│    = 42

:e
42: Option[int, int]
//│ ╔══[ERROR] Wrong number of type arguments – expected 1, found 2
//│ ║  l.46: 	42: Option[int, int]
//│ ╙──      	    ^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.46: 	42: Option[int, int]
//│ ║        	^^
//│ ╟── integer literal of type `42` does not match type `Some[int] | None`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.21: 	type Option[A] = Some[A] | None
//│ ║        	                 ^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.46: 	42: Option[int, int]
//│ ╙──      	    ^^^^^^^^^^^^^^^^
//│ res: Option[int]
//│    = 42



class Foo1[A]: { x: A }
class Bar1: Foo1[int]
//│ Defined class Foo1[+A]
//│ Defined class Bar1

Bar1
//│ res: {x: int & 'x} -> (Bar1 with {x: 'x})
//│    = [Function: res]

g = Bar1 { x = 42 }
//│ g: Bar1 & {x: 42}
//│  = Bar1 { x: 42 }

g: Foo1['a]
//│ res: Foo1[int]
//│    = Bar1 { x: 42 }

res.x
//│ res: int
//│    = 42

g: Foo1['a]: Foo1[int]
//│ res: Foo1[int]
//│    = Bar1 { x: 42 }

res.x
//│ res: int
//│    = 42

:e
g: Foo1['a]: Foo1[string]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.95: 	g: Foo1['a]: Foo1[string]
//│ ║        	^
//│ ╟── type `int` is not an instance of type `string`
//│ ║  l.66: 	class Bar1: Foo1[int]
//│ ║        	                 ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.95: 	g: Foo1['a]: Foo1[string]
//│ ╙──      	                  ^^^^^^
//│ res: Foo1[string]
//│    = Bar1 { x: 42 }



class Foo2[A]
  method Foo2: A -> A
  method Foo2 = id
//│ Defined class Foo2[=A]
//│ Declared Foo2.Foo2: Foo2['A] -> 'A -> 'A
//│ Defined Foo2.Foo2: Foo2['A] -> 'a -> 'a

Foo2
//│ res: anything -> Foo2['A]
//│    = [Function: res]

:re
error: Foo2[int]
//│ res: Foo2[int]
//│ Runtime error:
//│   Error: an error was thrown

f = fun x -> case x of { Foo2 -> x }
//│ f: (Foo2[?] & 'a) -> 'a
//│  = [Function: f]

f (Foo2 {})
//│ res: Foo2['A]
//│    = Foo2 {}

:re
error: (Foo2[?] & 'a) -> 'a
//│ res: (Foo2[?] & 'a) -> 'a
//│ Runtime error:
//│   Error: an error was thrown

f: (Foo2[?] & 'a) -> 'a
//│ res: (Foo2[?] & 'a) -> 'a
//│    = [Function: f]

:ns
f: (Foo2[?] & 'a) -> 'a
//│ res: (Foo2[?] & 'a) -> 'a
//│    = [Function: f]

f
//│ res: (Foo2[?] & 'a) -> 'a
//│    = [Function: f]


def mrg: Foo2[int] & Foo2[string]
//│ mrg: in Foo2[out int | string] out Foo2[in int | string out nothing]
//│    = <missing implementation>

mrg: Foo2[int]
//│ res: Foo2[int]
//│    = <no result>
//│      mrg is not implemented

// * This no longer causes an error because it treats `mrg` as polymorphic and it separately satisfies each side of `Foo2[Int] & Foo2[String]`...
mrg = Foo2{}
//│ Foo2['A]
//│   <:  mrg:
//│ Foo2[out int | string]
//│    = Foo2 {}

// * Even this one works although the LHS is not generalized.
// * It works because the ctor's polymorphic type is pushed in by distributivity,
// * resulting in a generalized value....
mrg2 = Foo2{} : Foo2[int] & Foo2[string]
//│ mrg2: Foo2[in int | string out nothing]
//│     = Foo2 {}

// * Notice how this one doesn't work when we can't distribute foralls.
:DontDistributeForalls
:e
mrg2 = Foo2{} : Foo2[int] & Foo2[string]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.181: 	mrg2 = Foo2{} : Foo2[int] & Foo2[string]
//│ ║         	       ^^^^^^
//│ ╟── type `string` is not an instance of type `int`
//│ ║  l.181: 	mrg2 = Foo2{} : Foo2[int] & Foo2[string]
//│ ║         	                                 ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.181: 	mrg2 = Foo2{} : Foo2[int] & Foo2[string]
//│ ║         	                     ^^^
//│ ╟── Note: class type parameter A is defined at:
//│ ║  l.110: 	class Foo2[A]
//│ ╙──       	           ^
//│ mrg2: Foo2[in int | string out nothing]
//│     = Foo2 {}
:DistributeForalls

mrg.Foo2
//│ res: ('A & (int | string)) -> 'A
//│    = [Function: id]

mrg.Foo2 42
//│ res: 42
//│    = 42


def mrg: Foo2[int] | Foo2[string]
//│ mrg: Foo2[out int | string]
//│    = <missing implementation>



class Foo2_Co[A]
  method Foo2_Co: A
  method Foo2_Co = error
//│ Defined class Foo2_Co[+A]
//│ Declared Foo2_Co.Foo2_Co: Foo2_Co['A] -> 'A
//│ Defined Foo2_Co.Foo2_Co: Foo2_Co[?] -> nothing

Foo2_Co
//│ res: anything -> Foo2_Co[nothing]
//│    = [Function: res]

:re
error: Foo2_Co[int]
//│ res: Foo2_Co[int]
//│ Runtime error:
//│   Error: an error was thrown

f = fun x -> case x of { Foo2_Co -> x }
//│ f: (Foo2_Co[?] & 'a) -> 'a
//│  = [Function: f1]

f (Foo2_Co {})
//│ res: Foo2_Co[nothing]
//│    = Foo2_Co {}

:re
error: (Foo2_Co[?] & 'a) -> 'a
//│ res: (Foo2_Co[nothing] & 'a) -> 'a
//│ Runtime error:
//│   Error: an error was thrown

f: (Foo2_Co[?] & 'a) -> 'a
//│ res: (Foo2_Co[nothing] & 'a) -> 'a
//│    = [Function: f1]

:ns
f: (Foo2_Co[?] & 'a) -> 'a
//│ res: (Foo2_Co[?] & 'a) -> 'a
//│    = [Function: f1]

f
//│ res: (Foo2_Co[?] & 'a) -> 'a
//│    = [Function: f1]


def mrg: Foo2_Co[int] & Foo2_Co[string]
//│ mrg: Foo2_Co[nothing]
//│    = <missing implementation>

mrg: Foo2_Co[int]
//│ res: Foo2_Co[int]
//│    = <no result>
//│      mrg is not implemented

mrg = Foo2_Co{}
//│ Foo2_Co[nothing]
//│   <:  mrg:
//│ Foo2_Co[nothing]
//│    = Foo2_Co {}

def mrg: Foo2_Co[int] | Foo2_Co[string]
//│ mrg: in Foo2_Co[nothing] out Foo2_Co[int | string]
//│    = <missing implementation>



:w
class Foo2_Bi[A]
//│ Defined class Foo2_Bi[±A]
//│ ╔══[WARNING] Type definition Foo2_Bi has bivariant type parameters:
//│ ║  l.280: 	class Foo2_Bi[A]
//│ ║         	      ^^^^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.280: 	class Foo2_Bi[A]
//│ ╙──       	              ^

Foo2_Bi
//│ res: anything -> Foo2_Bi[?]
//│    = [Function: res]

:re
error: Foo2_Bi[int]
//│ res: Foo2_Bi[?]
//│ Runtime error:
//│   Error: an error was thrown

f = fun x -> case x of { Foo2_Bi -> x }
//│ f: (Foo2_Bi[?] & 'a) -> 'a
//│  = [Function: f2]

f (Foo2_Bi {})
//│ res: Foo2_Bi[?]
//│    = Foo2_Bi {}

:re
error: (Foo2_Bi[?] & 'a) -> 'a
//│ res: (Foo2_Bi[?] & 'a) -> 'a
//│ Runtime error:
//│   Error: an error was thrown

f: (Foo2_Bi[?] & 'a) -> 'a
//│ res: (Foo2_Bi[?] & 'a) -> 'a
//│    = [Function: f2]

:ns
f: (Foo2_Bi[?] & 'a) -> 'a
//│ res: (Foo2_Bi[?] & 'a) -> 'a
//│    = [Function: f2]

f
//│ res: (Foo2_Bi[?] & 'a) -> 'a
//│    = [Function: f2]


def mrg: Foo2_Bi[int] & Foo2_Bi[string]
//│ mrg: Foo2_Bi[?]
//│    = <missing implementation>

mrg: Foo2_Bi[int]
//│ res: Foo2_Bi[?]
//│    = <no result>
//│      mrg is not implemented

mrg = Foo2_Bi{}
//│ Foo2_Bi[?]
//│   <:  mrg:
//│ Foo2_Bi[?]
//│    = Foo2_Bi {}

def mrg: Foo2_Bi[int] | Foo2_Bi[string]
//│ mrg: Foo2_Bi[?]
//│    = <missing implementation>

