
class A: { fA: int }
class B: { fB: string }
class C: { fC: bool }
//│ Defined class A
//│ Defined class B
//│ Defined class C

def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  }
//│ foo: ((A with {fA: 'a}) | (B with {fB: 'a}) | (C with {fC: 'a})) -> 'a
//│    = [Function: foo]

def arg: A | B | C
//│ arg: A | B | C

:re
foo arg
//│ res: bool | int | string
//│ Runtime error:
//│   ReferenceError: arg is not defined

:re
foo (arg with { fC = true })
//│ res: int | string | true
//│ Runtime error:
//│   ReferenceError: arg is not defined


def foo x = case x of {
  | A -> add x.fA x.payload
  | B -> x.fB
  | C -> { l = x.fC; r = x.payload }
  }
//│ foo: (A & {payload: int} | (B with {fB: 'a}) | (C with {fC: 'b, payload: 'c})) -> (int | {l: 'b, r: 'c} | 'a)
//│    = [Function: foo1]

:e
foo arg
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.42: 	foo arg
//│ ║        	^^^^^^^
//│ ╟── expression of type `A` does not match type `{payload: ?a}`
//│ ║  l.17: 	def arg: A | B | C
//│ ║        	         ^
//│ ╟── but it flows into reference with expected type `A & ?b | B & ?c | C & ?d`
//│ ║  l.42: 	foo arg
//│ ║        	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.34: 	  | A -> add x.fA x.payload
//│ ║        	                  ^^^^^^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.33: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error | int | string | {l: bool, r: nothing}
//│ Runtime error:
//│   ReferenceError: arg is not defined

:re
foo (arg with { payload = 1 })
//│ res: int | string | {l: bool, r: 1}
//│ Runtime error:
//│   ReferenceError: arg is not defined

