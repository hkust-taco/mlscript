
class A: { fA: int }
class B: { fB: string }
class C: { fC: bool }
//│ Defined class A
//│ Defined class B
//│ Defined class C

def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  }
//│ foo: ((A with {fA: 'a}) | (B with {fB: 'a}) | (C with {fC: 'a})) -> 'a


b = B { fB = "test" }
//│ b: B & {fB: "test"}

:stats
foo b
//│ res: "test"
//│ constrain calls: 35
//│ annoying  calls: 86


def arg: A | B | C
//│ arg: A | B | C

:stats
foo arg
//│ res: bool | int | string
//│ constrain calls: 86
//│ annoying  calls: 252

:stats
foo (arg with { fC = true })
//│ res: int | string | true
//│ constrain calls: 76
//│ annoying  calls: 254


def foo x = case x of {
  | A -> add x.fA x.payload
  | B -> x.fB
  | C -> { l = x.fC; r = x.payload }
  }
//│ foo: (A & {payload: int} | (B with {fB: 'a}) | (C with {fC: 'b, payload: 'c})) -> (int | {l: 'b, r: 'c} | 'a)

:e
:stats
foo arg
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.52: 	foo arg
//│ ║        	^^^^^^^
//│ ╟── expression of type `A` does not match type `{payload: ?a}`
//│ ║  l.27: 	def arg: A | B | C
//│ ║        	         ^
//│ ╟── but it flows into reference with expected type `A & ?b | B & ?c | C & ?d`
//│ ║  l.52: 	foo arg
//│ ║        	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.44: 	  | A -> add x.fA x.payload
//│ ║        	                  ^^^^^^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.43: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error | int | string | {l: bool, r: nothing}
//│ constrain calls: 148
//│ annoying  calls: 437

:stats
foo (arg with { payload = 1 })
//│ res: int | string | {l: bool, r: 1}
//│ constrain calls: 141
//│ annoying  calls: 439

