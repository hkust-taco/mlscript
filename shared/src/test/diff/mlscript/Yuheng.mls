
1 + 2
//│ res: int
//│    = 3

def foo(x) = x + 1
//│ foo: int -> int
//│    = [Function: foo]

class A: { x: number }
//│ Defined class A

def f v = v.x
//│ f: {x: 'x} -> 'x
//│  = [Function: f]

// def f: (A & {x: int} | anything) -> int

def f v = case v of {
    A -> (v.x : int)
  | _ -> 0
 }
//│ f: (A & {x: int} | ~A) -> int
//│  = [Function: f1]

a1 = A { x = 0 }
//│ a1: A & {x: 0}
//│   = A { x: 0 }

f a1
//│ res: int
//│    = 0

a2 = A { x = 0: number }
//│ a2: A
//│   = A { x: 0 }

:e
f a2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.39: 	f a2
//│ ║        	^^^^
//│ ╟── type `number` is not an instance of `int`
//│ ║  l.34: 	a2 = A { x = 0: number }
//│ ║        	                ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.20: 	    A -> (v.x : int)
//│ ║        	                ^^^
//│ ╟── from field selection:
//│ ║  l.20: 	    A -> (v.x : int)
//│ ╙──      	          ^^^
//│ res: error | int
//│    = 0

def f2: (A & {x: int} | anything) -> int
//│ f2: anything -> int
//│   = <missing implementation>

f2 a2
//│ res: int
//│    = <no result>
//│      f2 is not implemented


// const x: [0, 1] = [0, 1]

a = (0, 1)
//│ a: (0, 1,)
//│  = [ 0, 1 ]


1 : 1
//│ res: 1
//│    = 1

// def f(x) =
//   x : x
//   f2 x : f2 x

:w
class Expr[A]
//│ Defined class Expr[±A]
//│ ╔══[WARNING] Type definition Expr has bivariant type parameters:
//│ ║  l.81: 	class Expr[A]
//│ ║        	      ^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.81: 	class Expr[A]
//│ ╙──      	           ^

class IntLit: Expr[int] & { value: int }
//│ Defined class IntLit

:w
class Pair[A, B]: Expr[(A, B)] & { lhs: Expr[A]; rhs: Expr[B] }
//│ Defined class Pair[±A, ±B]
//│ ╔══[WARNING] Type definition Pair has bivariant type parameters:
//│ ║  l.94: 	class Pair[A, B]: Expr[(A, B)] & { lhs: Expr[A]; rhs: Expr[B] }
//│ ║        	      ^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.94: 	class Pair[A, B]: Expr[(A, B)] & { lhs: Expr[A]; rhs: Expr[B] }
//│ ║        	           ^
//│ ╟── B is irrelevant and may be removed
//│ ║  l.94: 	class Pair[A, B]: Expr[(A, B)] & { lhs: Expr[A]; rhs: Expr[B] }
//│ ╙──      	              ^

rec def eval(e) = case e of
  { IntLit -> e.value
  | Pair -> (eval e.lhs, eval e.rhs)
  }
//│ eval: 'a -> 'value
//│   where
//│     'a <: (IntLit with {value: 'value}) | (Pair[?, ?] with {lhs: 'a, rhs: 'a})
//│     'value :> ('value, 'value,)
//│     = [Function: eval]

rec def eval(e) = case e of
  { IntLit -> e.value
  | Pair -> (eval e.lhs, eval e.rhs)
  | _ -> error
  }
//│ eval: 'a -> 'value
//│   where
//│     'a <: (IntLit with {value: 'value}) | (Pair[?, ?] with {lhs: 'a, rhs: 'a}) | ~IntLit & ~Pair[?, ?]
//│     'value :> ('value, 'value,)
//│     = [Function: eval1]

eval (IntLit { value = 1 })
//│ res: 'a
//│   where
//│     'a :> ('a, 'a,) | 1
//│    = 1

eval (Pair {
  lhs = IntLit { value = 1 };
  rhs = IntLit { value = 2 } })
//│ res: 'a
//│   where
//│     'a :> ('a, 'a,) | 1 | 2
//│    = [ 1, 2 ]

p = Pair {
  lhs = IntLit { value = 1 };
  rhs = Pair {
    lhs = IntLit { value = 2 };
    rhs = IntLit { value = 3 } } }
//│ p: Pair[int, (int, int,)] with {lhs: IntLit & {value: 1}, rhs: Pair[int, int] with {lhs: IntLit & {value: 2}, rhs: IntLit & {value: 3}}}
//│  = Pair {
//│      lhs: IntLit { value: 1 },
//│      rhs: Pair { lhs: IntLit { value: 2 }, rhs: IntLit { value: 3 } }
//│    }

ep = eval p
//│ ep: 'a
//│   where
//│     'a :> ('a, 'a,) | 1 | 2 | 3
//│   = [ 1, [ 2, 3 ] ]


// FUTURE:

// class Expr[type A]

// def eval['a]: Expr['a] -> 'a
// rec def eval(e: Expr['a]) = case e of
//   { IntLit -> e.value
//   | Pair -> (eval e.lhs, eval[e.rhs] (e.rhs: Expr[e.rhs.A]))
//   | _ -> error
//   }

// class Vector[A, N: nat]
// class Nil: Vector['a, 0]
// class Cons[A, m]: Vector[A, S m]



// === === === ERROR CASES === === === //



:w
class Pair2[A, B]: Expr[(A, B)] & { lhs: Expr[A]; rhs: Expr[A] }
//│ Defined class Pair2[±A, ±B]
//│ ╔══[WARNING] Type definition Pair2 has bivariant type parameters:
//│ ║  l.181: 	class Pair2[A, B]: Expr[(A, B)] & { lhs: Expr[A]; rhs: Expr[A] }
//│ ║         	      ^^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.181: 	class Pair2[A, B]: Expr[(A, B)] & { lhs: Expr[A]; rhs: Expr[A] }
//│ ║         	            ^
//│ ╟── B is irrelevant and may be removed
//│ ║  l.181: 	class Pair2[A, B]: Expr[(A, B)] & { lhs: Expr[A]; rhs: Expr[A] }
//│ ╙──       	               ^



:ShowRelativeLineNums
:AllowTypeErrors



ep + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.+1: 	ep + 1
//│ ║        	^^^^
//│ ╟── tuple literal of type `(?a, ?b,)` does not match type `int`
//│ ║  l.118: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.+1: 	ep + 1
//│ ╙──      	^^
//│ res: error | int

ep[0]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.+1: 	ep[0]
//│ ║        	^^^^^
//│ ╟── integer literal of type `1` does not match type `Array[?a]`
//│ ║  l.142: 	  lhs = IntLit { value = 1 };
//│ ║         	                         ^
//│ ╟── but it flows into reference with expected type `Array[?b]`
//│ ║  l.+1: 	ep[0]
//│ ╙──      	^^
//│ res: error | undefined | 'a
//│   where
//│     'a :> ('a, 'a,) | 1 | 2 | 3


eval (Pair {
  lhs = IntLit { value = 1 };
  rhs = IntLit { value = Pair {
    lhs = IntLit { value = 2 };
    rhs = IntLit { value = 3 } } } })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+3: 	  rhs = IntLit { value = Pair {
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	    lhs = IntLit { value = 2 };
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+5: 	    rhs = IntLit { value = 3 } } } })
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Pair[?A, ?B] & {lhs: ?lhs, rhs: ?rhs}` does not match type `int`
//│ ║  l.+3: 	  rhs = IntLit { value = Pair {
//│ ║        	                         ^^^^^^
//│ ║  l.+4: 	    lhs = IntLit { value = 2 };
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+5: 	    rhs = IntLit { value = 3 } } } })
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.90: 	class IntLit: Expr[int] & { value: int }
//│ ╙──      	                                   ^^^
//│ res: 'a
//│   where
//│     'a :> ('a, 'a,) | 1 | (Pair[int, int] with {lhs: IntLit & {value: 2}, rhs: IntLit & {value: 3}})


p = Pair2 {
  lhs = IntLit { value = 1 };
  rhs = Pair2 {
    lhs = IntLit { value = 2 };
    rhs = IntLit { value = 3 } } }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	p = Pair2 {
//│ ║        	    ^^^^^^^
//│ ║  l.+2: 	  lhs = IntLit { value = 1 };
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  rhs = Pair2 {
//│ ║        	^^^^^^^^^^^^^^^
//│ ║  l.+4: 	    lhs = IntLit { value = 2 };
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+5: 	    rhs = IntLit { value = 3 } } }
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a 2-element tuple
//│ ║  l.90: 	class IntLit: Expr[int] & { value: int }
//│ ║        	                   ^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.181: 	class Pair2[A, B]: Expr[(A, B)] & { lhs: Expr[A]; rhs: Expr[A] }
//│ ╙──       	                        ^^^^^^
//│ p: error | (Pair2[in (int, 'B,) | int out nothing, 'B0] with {Expr#A :> ((int, 'B,) | int, 'B0,) <: (nothing, 'B0,), lhs: IntLit & {value: 1}, rhs: Pair2[int, 'B] with {lhs: IntLit & {value: 2}, rhs: IntLit & {value: 3}}})



def eval: Expr['a] -> 'a
//│ eval: Expr['a] -> 'a

rec def eval(e) = case e of
  { IntLit -> e.value
  | Pair -> (eval e.lhs, eval e.rhs)
  }
//│ 'a -> 'value
//│   where
//│     'a <: (IntLit with {value: 'value}) | (Pair[?, ?] with {lhs: 'a, rhs: 'a})
//│     'value :> ('value, 'value,)
//│   <:  eval:
//│ Expr['a] -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  { IntLit -> e.value
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  }
//│ ║        	^^^
//│ ╟── type `Expr['a]` does not match type `IntLit & ?a | Pair[?, ?] & ?b`
//│ ║  l.280: 	def eval: Expr['a] -> 'a
//│ ║         	          ^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ╙──      	                       ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  { IntLit -> e.value
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  }
//│ ║        	^^^
//│ ╟── expression of type `Expr['a] & ~intLit` does not have field 'rhs'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	                              ^^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ╙──      	                       ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  { IntLit -> e.value
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  }
//│ ║        	^^^
//│ ╟── expression of type `Expr['a] & ~intLit` does not have field 'lhs'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	                  ^^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ╙──      	                       ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  { IntLit -> e.value
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  }
//│ ║        	^^^
//│ ╟── expression of type `Expr['a] & ~pair | Expr['a] & ~?a` does not have field 'value'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.+2: 	  { IntLit -> e.value
//│ ║        	              ^^^^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ╙──      	                       ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  { IntLit -> e.value
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  }
//│ ║        	^^^
//│ ╟── tuple literal of type `(?a, ?b,)` is not an instance of type 'a
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.280: 	def eval: Expr['a] -> 'a
//│ ╙──       	                      ^^

rec def eval(e) = case e of
  { IntLit -> e.value
  | Pair -> (eval e.lhs, eval e.rhs)
  | _ -> error
  }
//│ 'a -> 'value
//│   where
//│     'a <: (IntLit with {value: 'value}) | (Pair[?, ?] with {lhs: 'a, rhs: 'a}) | ~IntLit & ~Pair[?, ?]
//│     'value :> ('value, 'value,)
//│   <:  eval:
//│ Expr['a] -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  { IntLit -> e.value
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  | _ -> error
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.+5: 	  }
//│ ║        	^^^
//│ ╟── expression of type `Expr['a] & ~intLit & ~?a | (Pair[?, ?]\lhs\rhs with {Expr#A = 'a})` does not have field 'rhs'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	                              ^^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ╙──      	                       ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  { IntLit -> e.value
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  | _ -> error
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.+5: 	  }
//│ ║        	^^^
//│ ╟── expression of type `Expr['a] & ~intLit & ~?a | (Pair[?, ?]\lhs\rhs with {Expr#A = 'a})` does not have field 'lhs'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	                  ^^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ╙──      	                       ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  { IntLit -> e.value
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  | _ -> error
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.+5: 	  }
//│ ║        	^^^
//│ ╟── expression of type `Expr['a] & ~pair & ~?a | (IntLit\value with {Expr#A = 'a}) | (Pair[?, ?]\lhs\rhs with {Expr#A = 'a}) & ~pair | ~?b & (Expr['a] & ~?a | (Pair[?, ?]\lhs\rhs with {Expr#A = 'a}))` does not have field 'value'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.+2: 	  { IntLit -> e.value
//│ ║        	              ^^^^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ╙──      	                       ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	rec def eval(e) = case e of
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  { IntLit -> e.value
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  | _ -> error
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.+5: 	  }
//│ ║        	^^^
//│ ╟── tuple literal of type `(?a, ?b,)` is not an instance of type 'a
//│ ║  l.+3: 	  | Pair -> (eval e.lhs, eval e.rhs)
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.280: 	def eval: Expr['a] -> 'a
//│ ╙──       	                      ^^
