
class Foo1[A]: { x: A }
class Bar1: Foo1[int]
//│ Defined class Foo1[+A]
//│ Defined class Bar1

Foo1
//│ res: {x: 'x} -> Foo1['x]
//│    = [Function: res]

Bar1
//│ res: {x: int & 'x} -> (Bar1 with {x: 'x})
//│    = [Function: res]

b = Bar1{x = 1}
//│ b: Bar1 & {x: 1}
//│  = Bar1 { x: 1 }

:e
b: Foo1[string]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.20: 	b: Foo1[string]
//│ ║        	^
//│ ╟── integer literal of type `1` is not an instance of type `string`
//│ ║  l.15: 	b = Bar1{x = 1}
//│ ║        	             ^
//│ ╟── but it flows into reference with expected type `string`
//│ ║  l.20: 	b: Foo1[string]
//│ ║        	^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.20: 	b: Foo1[string]
//│ ║        	        ^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.20: 	b: Foo1[string]
//│ ╙──      	   ^^^^^^^^^^^^
//│ res: Foo1[string]
//│    = Bar1 { x: 1 }


class Foo2[A]
  method M2: A
class Bar2: Foo2[int] & { x: int }
  method M2 = 1
//│ Defined class Foo2[+A]
//│ Declared Foo2.M2: Foo2['A] -> 'A
//│ Defined class Bar2
//│ Defined Bar2.M2: Bar2 -> 1

class Bar3: Foo2[int]
//│ Defined class Bar3

:e
:ns
Bar2
Bar3
//│ res: {x: 'x} -> (#Bar2 & {Foo2#A = int, x: 'x})
//│   where
//│     'x <: int
//│    = [Function: res]
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.55: 	Bar3
//│ ║        	^^^^
//│ ╟── Note that class Bar3 is abstract:
//│ ║  l.49: 	class Bar3: Foo2[int]
//│ ║        	      ^^^^^^^^^^^^^^^
//│ ╟── Hint: method M2 is abstract
//│ ║  l.41: 	  method M2: A
//│ ╙──      	         ^^^^^
//│ res: error
//│    = [Function: res]

:e
Bar2
Bar3
//│ res: {x: int & 'x} -> (Bar2 with {x: 'x})
//│    = [Function: res]
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.74: 	Bar3
//│ ║        	^^^^
//│ ╟── Note that class Bar3 is abstract:
//│ ║  l.49: 	class Bar3: Foo2[int]
//│ ║        	      ^^^^^^^^^^^^^^^
//│ ╟── Hint: method M2 is abstract
//│ ║  l.41: 	  method M2: A
//│ ╙──      	         ^^^^^
//│ res: error
//│    = [Function: res]

:e
{A = 1}
//│ ╔══[ERROR] Field identifiers must start with a small letter
//│ ║  l.90: 	{A = 1}
//│ ╙──      	^^^^^^^
//│ res: {A <: 1}
//│    = { A: 1 }

:e
error: {A: 1}
//│ ╔══[ERROR] Field identifiers must start with a small letter
//│ ║  l.98: 	error: {A: 1}
//│ ╙──      	        ^
//│ res: {A <: 1}
//│ Runtime error:
//│   Error: unexpected runtime error

b = Bar2{x = 1}
//│ b: Bar2 & {x: 1}
//│  = Bar2 { x: 1 }

:e
c = b: Foo2[string]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.111: 	c = b: Foo2[string]
//│ ║         	    ^
//│ ╟── type `int` is not an instance of type `string`
//│ ║  l.42: 	class Bar2: Foo2[int] & { x: int }
//│ ║        	                 ^^^
//│ ╟── but it flows into reference with expected type `string`
//│ ║  l.111: 	c = b: Foo2[string]
//│ ║         	    ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.111: 	c = b: Foo2[string]
//│ ║         	            ^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.111: 	c = b: Foo2[string]
//│ ╙──       	       ^^^^^^^^^^^^
//│ c: Foo2[string]
//│  = Bar2 { x: 1 }

c.M2
//│ res: string
//│    = 1

d = b: Bar2
//│ d: Bar2
//│  = Bar2 { x: 1 }

d.M2
//│ res: int
//│    = 1

d: Foo2['a]
//│ res: Foo2[int]
//│    = Bar2 { x: 1 }

:e
d: Foo2[string]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.147: 	d: Foo2[string]
//│ ║         	^
//│ ╟── type `int` is not an instance of type `string`
//│ ║  l.42: 	class Bar2: Foo2[int] & { x: int }
//│ ║        	                 ^^^
//│ ╟── but it flows into reference with expected type `string`
//│ ║  l.147: 	d: Foo2[string]
//│ ║         	^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.147: 	d: Foo2[string]
//│ ║         	        ^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.147: 	d: Foo2[string]
//│ ╙──       	   ^^^^^^^^^^^^
//│ res: Foo2[string]
//│    = Bar2 { x: 1 }

