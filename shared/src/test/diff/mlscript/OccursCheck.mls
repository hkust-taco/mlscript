
:OccursCheck


rec def f x = (x, x)
//│ f: 'a -> ('a, 'a,)
//│  = [Function: f]

rec def f x = f x
//│ f: anything -> nothing
//│  = [Function: f1]

:e
rec def f x = f
//│ ╔══[ERROR] Inferred recursive type: 'f
//│   where
//│     'f :> ? -> 'f
//│ ╙──
//│ f: 'f
//│   where
//│     'f :> anything -> 'f
//│  = [Function: f2]

:e
rec def f x = (f x, f x)
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> ('a, 'a,)
//│ ║  l.25: 	rec def f x = (f x, f x)
//│ ╙──      	               ^^^
//│ f: anything -> 'a
//│   where
//│     'a :> ('a, 'a,)
//│  = [Function: f3]

:e
rec def f x = f x.a
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: {a: 'a}
//│ ║  l.37: 	rec def f x = f x.a
//│ ╙──      	                ^^^
//│ f: 'a -> nothing
//│   where
//│     'a <: {a: 'a}
//│  = [Function: f4]


// class Foo[A] method Id: A -> A
class Foo[A] method Get: A
//│ Defined class Foo[+A]
//│ Declared Foo.Get: Foo['A] -> 'A

:e
rec def foo(x: Foo['a]) = foo(x.Get)
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: Foo['a]
//│ ║  l.55: 	rec def foo(x: Foo['a]) = foo(x.Get)
//│ ╙──      	                              ^^^^^
//│ foo: 'a -> nothing
//│   where
//│     'a <: Foo['a]
//│    = [Function: foo]


type Bar[A] = A
def get: Bar['a] -> 'a
//│ Defined type alias Bar[+A]
//│ get: Bar['a] -> 'a
//│    = <missing implementation>

// * Note that this is not truly a recursive type,
// * since `a <: Bar['a]` is equivalent to `'a <: 'a`!
// * But our analysis omits expanding type aliases,
// * for performance and simplicity (sidesteps infinite expansion problems).
:e
rec def bar(x: Bar['a]) = bar(get(x))
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: Bar['a]
//│ ║  l.78: 	rec def bar(x: Bar['a]) = bar(get(x))
//│ ╙──      	                              ^^^^^^
//│ bar: 'a -> nothing
//│   where
//│     'a <: Bar['a]
//│    = <no result>
//│      get is not implemented

