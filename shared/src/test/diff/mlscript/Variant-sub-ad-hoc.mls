class None
class Some
//│ Defined class None
//│ Defined class Some

def Some v = Some{} with {v}
def None = None{}
//│ Some: 'a -> (Some & {v: 'a})
//│     = [Function: Some1]
//│ None: None
//│     = [Function: None1]

def flatMap = fun f -> fun opt ->
  case opt of { Some -> f opt.v | _ -> opt }
//│ flatMap: ('v -> 'a) -> (Some & {v: 'v} | 'a & ~#Some) -> 'a
//│        = [Function: flatMap]

f = fun x -> Some x
res = flatMap f (Some 1)
res = flatMap f None
//│ f: 'a -> (Some & {v: 'a})
//│  = [Function: f]
//│ res: Some & {v: 1}
//│    = Some { v: 1 }
//│ res: None | Some & {v: nothing}
//│    = None {}

class Lit
class Neg
class Var
class Plus
//│ Defined class Lit
//│ Defined class Neg
//│ Defined class Var
//│ Defined class Plus

:stats
rec def evalOpt = fun x -> case x of {
  | Lit ->
      Some x.v
  | Neg ->
      flatMap (fun s -> Some (0 - s)) (evalOpt x.sub)
  | Var ->
      None with {err = concat "free var: " x.nme}
  | Plus ->
      flatMap (fun l -> flatMap (fun r ->
        Some (l + r)
      ) (evalOpt x.rhs)) (evalOpt x.lhs)
  }
//│ evalOpt: 'a -> (None & {err: string} | Some & {v: int})
//│   where
//│     'a <: Lit & {v: int} | Neg & {sub: 'a} | Plus & {lhs: 'a, rhs: 'a} | Var & {nme: string}
//│        = [Function: evalOpt]
//│ constrain calls  : 630
//│ annoying  calls  : 156
//│ subtyping calls  : 4810

:stats
evalOpt (Plus{} with {lhs = Lit{} with {v=2}; rhs = Lit{} with {v=2}})
//│ res: None & {err: string} | Some & {v: int}
//│    = Some { v: 4 }
//│ constrain calls  : 105
//│ annoying  calls  : 34
//│ subtyping calls  : 1163

