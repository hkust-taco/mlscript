class Base1[A]
  method M1: A -> Base1[A]
class Derived1: Base1[int] & { x: int }
  method M1 y = Derived1 { x = add this.x y }
  method M2 = Derived1 { x = add this.x 1 }
class Derived2[C, D]: Base1[{ c: C; d: D }]
  // method M1 { c, d } = Derived2 { c; d }
  method M1 r = Derived2 { c = r.c; d = r.d }
type Type1[A] = Derived1 | Derived2['a, 'b]
//│ Defined class Base1
//│ Declared Base1.M1: Base1['A] -> 'A -> Base1['A]
//│ Defined class Derived1
//│ Defined Derived1.M1: Derived1 -> int -> Derived1
//│ Defined Derived1.M2: Derived1 -> Derived1
//│ Defined class Derived2
//│ Defined Derived2.M1: Derived2['C, 'D] -> {c: anything, d: anything} -> Derived2['C0, 'D0]
//│ Defined type alias Type1
// class Derived2[C, D]: Base1[C -> D]

def foo b x = case b of {
  | Derived1 -> b.M2
  | Base1 -> b.M1 x
  }
//│ foo: (Base1['A] & ~derived1 | Derived1) -> 'A -> (Base1['A] | Derived1)
//│    = [Function: foo]

d1 = Derived1 { x = 1 }
//│ d1: Derived1 & {x: 1}
//│   = Derived1 { x: 1 }

foo d1
foo d1 0
//│ res: 'A -> (Base1['A] | Derived1)
//│    = [Function (anonymous)]
//│ res: Base1['A .. 0 | 'A] | Derived1
//│    = Uncaught ReferenceError: add is not defined
//│          at Derived1.get M2 [as M2] (REPL1:1:581)
//│          at REPL2:1:90

def bar0: Base1[int] -> int -> Base1[int]
bar0 d1
bar0 d1 0
//│ bar0: Base1[int] -> int -> Base1[int]
//│ res: int -> Base1[int]
//│    = Uncaught ReferenceError: bar0 is not defined
//│ res: Base1[int]
//│    = Uncaught ReferenceError: bar0 is not defined

// This is ill-typed because type `Base1[int]` includes things like `Derived1\x` (a `Derived` instance without an `x` field)
:e
def bar0 = foo
//│ (Base1['A] & ~derived1 | Derived1) -> 'A -> (Base1['A] | Derived1)
//│   <:  bar0:
//│ Base1[int] -> int -> Base1[int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.51: 	def bar0 = foo
//│ ║        	           ^^^
//│ ╟── expression of type `Base1[int] & ~?a | Derived1` does not match type `{x: int}`
//│ ║  l.40: 	def bar0: Base1[int] -> int -> Base1[int]
//│ ║        	          ^^^^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.3: 	class Derived1: Base1[int] & { x: int }
//│ ║       	                             ^^^^^^^^^^
//│ ╟── from method definition:
//│ ║  l.4: 	  method M1 y = Derived1 { x = add this.x y }
//│ ║       	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.21: 	  | Derived1 -> b.M2
//│ ║        	                ^
//│ ╟── from refined scrutinee:
//│ ║  l.20: 	def foo b x = case b of {
//│ ╙──      	                   ^

def bar1: Type1[int] -> int -> Type1[int]
bar1 d1
bar1 d1 0
//│ bar1: (Derived1 | Derived2['a, 'b]) -> int -> (Derived1 | Derived2['a0, 'b0])
//│ res: int -> (Derived1 | Derived2['a, 'b])
//│    = Uncaught ReferenceError: bar1 is not defined
//│ res: Derived1 | Derived2['a, 'b]
//│    = Uncaught ReferenceError: bar1 is not defined

:e
def bar1 = foo
//│ (Base1['A] & ~derived1 | Derived1) -> 'A -> (Base1['A] | Derived1)
//│   <:  bar1:
//│ (Derived1 | Derived2['a, 'b]) -> int -> (Derived1 | Derived2['a0, 'b0])
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── expression of type `int` does not match type `{c: ?a, d: ?b}`
//│ ║  l.74: 	def bar1: Type1[int] -> int -> Type1[int]
//│ ║        	                        ^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.6: 	class Derived2[C, D]: Base1[{ c: C; d: D }]
//│ ║       	                            ^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.22: 	  | Base1 -> b.M1 x
//│ ╙──      	                  ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── expression of type `int` does not match type `{c: ?a, d: ?b}`
//│ ║  l.74: 	def bar1: Type1[int] -> int -> Type1[int]
//│ ║        	                        ^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.6: 	class Derived2[C, D]: Base1[{ c: C; d: D }]
//│ ║       	                            ^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.22: 	  | Base1 -> b.M1 x
//│ ╙──      	                  ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── expression of type `Base1[?A]` does not match type `Derived1 | Derived2[?a, ?b]`
//│ ║  l.2: 	  method M1: A -> Base1[A]
//│ ║       	                  ^^^^^^^^
//│ ╟── but it flows into reference of type `?c -> ?d -> (?e | ?f)`
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── which does not match type `Type1[int] -> int -> Type1[int]`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.9: 	type Type1[A] = Derived1 | Derived2['a, 'b]
//│ ║       	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.74: 	def bar1: Type1[int] -> int -> Type1[int]
//│ ╙──      	                               ^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── expression of type `int` does not match type `{c: ?a, d: ?b}`
//│ ║  l.74: 	def bar1: Type1[int] -> int -> Type1[int]
//│ ║        	                        ^^^
//│ ╟── but it flows into reference of type `?c -> ?d -> (?e | ?f)`
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── which does not match type `Type1[int] -> int -> Type1[int]`
//│ ╟── Note: constraint arises from record type:
//│ ║  l.6: 	class Derived2[C, D]: Base1[{ c: C; d: D }]
//│ ║       	                            ^^^^^^^^^^^^^^
//│ ╟── from union type:
//│ ║  l.9: 	type Type1[A] = Derived1 | Derived2['a, 'b]
//│ ║       	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.74: 	def bar1: Type1[int] -> int -> Type1[int]
//│ ╙──      	                               ^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── expression of type `Base1[?A]` does not match type `Derived1 | Derived2[?a, ?b]`
//│ ║  l.2: 	  method M1: A -> Base1[A]
//│ ║       	                  ^^^^^^^^
//│ ╟── but it flows into reference of type `?c -> ?d -> (?e | ?f)`
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── which does not match type `Type1[int] -> int -> Type1[int]`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.9: 	type Type1[A] = Derived1 | Derived2['a, 'b]
//│ ║       	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.74: 	def bar1: Type1[int] -> int -> Type1[int]
//│ ╙──      	                               ^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── expression of type `Base1[?A]` does not match type `Derived1 | Derived2[?a, ?b]`
//│ ║  l.2: 	  method M1: A -> Base1[A]
//│ ║       	                  ^^^^^^^^
//│ ╟── but it flows into reference of type `?c -> ?d -> (?e | ?f)`
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── which does not match type `Type1[int] -> int -> Type1[int]`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.9: 	type Type1[A] = Derived1 | Derived2['a, 'b]
//│ ║       	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.74: 	def bar1: Type1[int] -> int -> Type1[int]
//│ ╙──      	                               ^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── expression of type `{c: ?a, d: ?b}` does not match type `int`
//│ ║  l.6: 	class Derived2[C, D]: Base1[{ c: C; d: D }]
//│ ║       	                            ^^^^^^^^^^^^^^
//│ ╟── but it flows into reference of type `?c -> ?d -> (?e | ?f)`
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── which does not match type `Type1[int] -> int -> Type1[int]`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.3: 	class Derived1: Base1[int] & { x: int }
//│ ║       	                      ^^^
//│ ╟── from union type:
//│ ║  l.9: 	type Type1[A] = Derived1 | Derived2['a, 'b]
//│ ║       	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.74: 	def bar1: Type1[int] -> int -> Type1[int]
//│ ╙──      	                               ^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── expression of type `{c: ?a, d: ?b}` does not match type `int`
//│ ║  l.6: 	class Derived2[C, D]: Base1[{ c: C; d: D }]
//│ ║       	                            ^^^^^^^^^^^^^^
//│ ╟── but it flows into reference of type `?c -> ?d -> (?e | ?f)`
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── which does not match type `Type1[int] -> int -> Type1[int]`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.3: 	class Derived1: Base1[int] & { x: int }
//│ ║       	                      ^^^
//│ ╟── from union type:
//│ ║  l.9: 	type Type1[A] = Derived1 | Derived2['a, 'b]
//│ ║       	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.74: 	def bar1: Type1[int] -> int -> Type1[int]
//│ ╙──      	                               ^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── expression of type `{c: ?a, d: ?b}` does not match type `int`
//│ ║  l.6: 	class Derived2[C, D]: Base1[{ c: C; d: D }]
//│ ║       	                            ^^^^^^^^^^^^^^
//│ ╟── but it flows into reference of type `?c -> ?d -> (?e | ?f)`
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── which does not match type `Type1[int] -> int -> Type1[int]`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.3: 	class Derived1: Base1[int] & { x: int }
//│ ║       	                      ^^^
//│ ╟── from union type:
//│ ║  l.9: 	type Type1[A] = Derived1 | Derived2['a, 'b]
//│ ║       	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.74: 	def bar1: Type1[int] -> int -> Type1[int]
//│ ╙──      	                               ^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── expression of type `Base1[?A]` does not match type `Derived1 | Derived2[?a, ?b]`
//│ ║  l.2: 	  method M1: A -> Base1[A]
//│ ║       	                  ^^^^^^^^
//│ ╟── but it flows into reference of type `?c -> ?d -> (?e | ?f)`
//│ ║  l.84: 	def bar1 = foo
//│ ║        	           ^^^
//│ ╟── which does not match type `Type1[int] -> int -> Type1[int]`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.9: 	type Type1[A] = Derived1 | Derived2['a, 'b]
//│ ║       	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.74: 	def bar1: Type1[int] -> int -> Type1[int]
//│ ╙──      	                               ^^^^^^^^^^

def bar2: Base1['a] -> 'a -> Base1['a]
bar2 d1
bar2 d1 0
//│ bar2: Base1['a] -> 'a -> Base1['a]
//│ res: int -> Base1[int]
//│    = Uncaught ReferenceError: bar2 is not defined
//│ res: Base1[int]
//│    = Uncaught ReferenceError: bar2 is not defined

// Note that typing this would require GADT reasoning! Though it also suffers from the previous "Derived1 with missing x field" problem.
:e
def bar2 = foo
//│ (Base1['A] & ~derived1 | Derived1) -> 'A -> (Base1['A] | Derived1)
//│   <:  bar2:
//│ Base1['a] -> 'a -> Base1['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.264: 	def bar2 = foo
//│ ║         	           ^^^
//│ ╟── expression of type `int` does not match type `'a`
//│ ║  l.3: 	class Derived1: Base1[int] & { x: int }
//│ ║       	                      ^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.253: 	def bar2: Base1['a] -> 'a -> Base1['a]
//│ ╙──       	                ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.264: 	def bar2 = foo
//│ ║         	           ^^^
//│ ╟── expression of type `'a` does not match type `int`
//│ ║  l.253: 	def bar2: Base1['a] -> 'a -> Base1['a]
//│ ║         	                ^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.3: 	class Derived1: Base1[int] & { x: int }
//│ ║       	                      ^^^
//│ ╟── from method definition:
//│ ║  l.4: 	  method M1 y = Derived1 { x = add this.x y }
//│ ║       	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.21: 	  | Derived1 -> b.M2
//│ ║        	                ^
//│ ╟── from refined scrutinee:
//│ ║  l.20: 	def foo b x = case b of {
//│ ╙──      	                   ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.264: 	def bar2 = foo
//│ ║         	           ^^^
//│ ╟── expression of type `Base1['a] & ~?a | Derived1` does not match type `{x: int}`
//│ ║  l.253: 	def bar2: Base1['a] -> 'a -> Base1['a]
//│ ║         	          ^^^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.3: 	class Derived1: Base1[int] & { x: int }
//│ ║       	                             ^^^^^^^^^^
//│ ╟── from method definition:
//│ ║  l.4: 	  method M1 y = Derived1 { x = add this.x y }
//│ ║       	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.21: 	  | Derived1 -> b.M2
//│ ║        	                ^
//│ ╟── from refined scrutinee:
//│ ║  l.20: 	def foo b x = case b of {
//│ ╙──      	                   ^

