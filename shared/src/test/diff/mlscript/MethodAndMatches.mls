:w
class Base1[A]
  method M1: A -> Base1[A]
class Derived1: Base1[int] & { x: int }
  method M1 y = Derived1 { x = add this.x y }
  method M2 = Derived1 { x = add this.x 1 }
class Derived2[C, D]: Base1[{ c: C; d: D }]
  // method M1 { c, d } = Derived2 { c; d }
  method M1 r = Derived2 { c = r.c; d = r.d }
class Derived3[C, D]: Base1[{ c: C; d: D }] & { c: C; d: D }
  method M1 r = Derived3 { c = r.c; d = r.d }
type Type1[A] = Derived1 | Derived3['a, 'b]
//│ Defined class Base1[-A]
//│ Declared Base1.M1: Base1['A] -> 'A -> Base1['A]
//│ Defined class Derived1
//│ Defined Derived1.M1: Derived1 -> int -> Derived1
//│ Defined Derived1.M2: Derived1 -> Derived1
//│ Defined class Derived2[-C, -D]
//│ Defined Derived2.M1: Derived2[?, ?] -> {c: anything, d: anything} -> Derived2[anything, anything]
//│ Defined class Derived3[=C, =D]
//│ Defined Derived3.M1: Derived3['C, 'D] -> {c: 'c & 'C0, d: 'd & 'D0} -> (Derived3['C0, 'D0] with {c: 'c, d: 'd})
//│ Defined type alias Type1[±A]
//│ ╔══[WARNING] Type definition Type1 has bivariant type parameters:
//│ ║  l.12: 	type Type1[A] = Derived1 | Derived3['a, 'b]
//│ ║        	     ^^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.12: 	type Type1[A] = Derived1 | Derived3['a, 'b]
//│ ╙──      	           ^
// class Derived2[C, D]: Base1[C -> D]

def foo b x = case b of {
  | Derived1 -> b.M2
  | Base1 -> b.M1 x
  }
//│ foo: (Base1['A] & ~#Derived1 | Derived1) -> 'A -> (Base1['A] | Derived1)
//│    = [Function: foo]

d1 = Derived1 { x = 1 }
//│ d1: Derived1 & {x: 1}
//│   = Derived1 { x: 1 }

foo d1
foo d1 0
//│ res: anything -> (Base1[anything] | Derived1)
//│    = [Function (anonymous)]
//│ res: Base1[anything] | Derived1
//│    = Derived1 { x: 2 }

def bar0: Base1[int] -> int -> Base1[int]
bar0 d1
bar0 d1 0
//│ bar0: Base1[int] -> int -> Base1[int]
//│     = <missing implementation>
//│ res: int -> Base1[int]
//│    = <no result>
//│      bar0 is not implemented
//│ res: Base1[int]
//│    = <no result>
//│      bar0 is not implemented

// This is ill-typed because type `Base1[int]` includes things like `Derived1\x` (a `Derived` instance without an `x` field)
:e
def bar0 = foo
//│ (Base1['A] & ~#Derived1 | Derived1) -> 'A -> (Base1['A] | Derived1)
//│   <:  bar0:
//│ Base1[int] -> int -> Base1[int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.63: 	def bar0 = foo
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── expression of type `Base1[int] & ~?a | Derived1` does not have field 'x'
//│ ╟── Note: constraint arises from record type:
//│ ║  l.4: 	class Derived1: Base1[int] & { x: int }
//│ ║       	                             ^^^^^^^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.31: 	def foo b x = case b of {
//│ ╙──      	                   ^
//│     = [Function: bar0]

def bar1: Type1[int] -> int -> Type1[int]
bar1 d1
bar1 d1 0
//│ bar1: Type1[?] -> int -> Type1[?]
//│     = <missing implementation>
//│ res: int -> Type1[?]
//│    = <no result>
//│      bar1 is not implemented
//│ res: Type1[?]
//│    = <no result>
//│      bar1 is not implemented

:e
def bar1 = foo
//│ (Base1['A] & ~#Derived1 | Derived1) -> 'A -> (Base1['A] | Derived1)
//│   <:  bar1:
//│ Type1[?] -> int -> Type1[?]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.92: 	def bar1 = foo
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── type `int` is not a record (expected a record with fields: c, d)
//│ ║  l.79: 	def bar1: Type1[int] -> int -> Type1[int]
//│ ║        	                        ^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.10: 	class Derived3[C, D]: Base1[{ c: C; d: D }] & { c: C; d: D }
//│ ║        	                            ^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.33: 	  | Base1 -> b.M1 x
//│ ╙──      	                  ^
//│     = [Function: bar1]

def bar2: Base1['a] -> 'a -> Base1['a]
bar2 d1
bar2 d1 0
//│ bar2: Base1['a] -> 'a -> Base1['a]
//│     = <missing implementation>
//│ res: int -> Base1[int]
//│    = <no result>
//│      bar2 is not implemented
//│ res: Base1[int]
//│    = <no result>
//│      bar2 is not implemented

// Note that typing this would require GADT reasoning! Though it also suffers from the previous "Derived1 with missing x field" problem.
:e
def bar2 = foo
//│ (Base1['A] & ~#Derived1 | Derived1) -> 'A -> (Base1['A] | Derived1)
//│   <:  bar2:
//│ Base1['a] -> 'a -> Base1['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.124: 	def bar2 = foo
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `'a`
//│ ║  l.4: 	class Derived1: Base1[int] & { x: int }
//│ ║       	                      ^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.110: 	def bar2: Base1['a] -> 'a -> Base1['a]
//│ ╙──       	                ^^
//│     = [Function: bar2]

