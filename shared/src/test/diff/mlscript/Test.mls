
class Person: { name: string; age: int }
def Person = fun n -> fun a -> Person { name = n; age = a }
//│ Defined class Person
//│ Person: (string & 'name) -> (int & 'age) -> (Person with {age: 'age, name: 'name})
//│       = [Function: Person1]

class Animal: {}
//│ Defined class Animal

def test = fun x -> case x of
  { Person -> x.age
  | Animal -> 0
  }
//│ test: (Animal | (Person\name with {age: 'age})) -> (0 | 'age)
//│     = [Function: test]

test: Person & {age: 'a} | Animal -> 'a | 0
//│ res: 0 | Person & {age: 0} | Animal -> 0
//│    = [Function: test]

test: (Person & {age: int} | Animal) -> int
//│ res: (Animal | Person) -> int
//│    = [Function: test]

a = Animal{}
//│ a: Animal
//│  = Animal {}

a: {}
//│ res: anything
//│    = Animal {}

p = Person "Bob" 42
//│ p: Person & {age: 42, name: "Bob"}
//│  = Person { name: 'Bob', age: 42 }

p: { age: int }
//│ res: {age: int}
//│    = Person { name: 'Bob', age: 42 }

test a
//│ res: 0
//│    = 0

test p
//│ res: 0 | 42
//│    = 42

1: int
//│ res: int
//│    = 1


def f: 'a -> 'a & string
//│ f: nothing
//│  = <missing implementation>

def f: 'a -> ('a & string)
//│ f: 'a -> (string & 'a)
//│  = <missing implementation>

