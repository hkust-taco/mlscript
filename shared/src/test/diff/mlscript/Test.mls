
class Person: { name: string; age: int }
def Person = fun n -> fun a -> Person { name = n; age = a }
//│ Defined class Person
//│ Person: string & 'a -> int & 'b -> person & {name: 'a, age: 'b}

class Animal: {}
//│ Defined class Animal

def test = fun x -> case x of
  { Person -> x.age
  | Animal -> 0
  }
//│ test: person & {age: 'a} | animal -> 'a | 0

// TODO simplify type to : test: Person & {age: 'a} | Animal -> 'a | 0

test: Person & {age: 'a} | Animal -> 'a | 0
//│ res: person & {name: string, age: 0} | (animal -> 0) | 0

test: (Person & {age: int} | Animal) -> int
//│ res: person & {name: string, age: int} | animal -> int

def a = Animal{}
//│ a: animal

a: {}
//│ res: anything

def p = Person "Bob" 42
//│ p: person & {name: "Bob", age: 42}

p: { age: int }
//│ res: {age: int}

test a
//│ res: 0

test p
//│ res: 42 | 0

1: int
//│ res: int

