
class Person: { name: string; age: int }
def Person = fun n -> fun a -> Person { name = n; age = a }
//│ Defined class Person
//│ Person: (string & 'a) -> (int & 'b) -> (Person with {age: 'b, name: 'a})

class Animal: {}
//│ Defined class Animal

def test = fun x -> case x of
  { Person -> x.age
  | Animal -> 0
  }
//│ test: (Animal | (Person\name with {age: 'a})) -> (0 | 'a)

// TODO simplify type to : test: Person & {age: 'a} | Animal -> 'a | 0

test: Person & {age: 'a} | Animal -> 'a | 0
//│ res: Animal -> 0 | 0 | Person & {age: 0}

test: (Person & {age: int} | Animal) -> int
//│ res: (Animal | Person) -> int

def a = Animal{}
//│ a: Animal

a: {}
//│ res: anything

def p = Person "Bob" 42
//│ p: Person & {age: 42, name: "Bob"}

p: { age: int }
//│ res: {age: int}

test a
//│ res: 0

test p
//│ res: 0 | 42

1: int
//│ res: int

