
:RecursiveTypes


def foo: ('a,) as 'a
//│ foo: 'a
//│   where
//│     'a :> ('a,)
//│    = <missing implementation>

def bar: (('b,) as 'b) -> ()
//│ bar: 'b -> ()
//│   where
//│     'b <: ('b,)
//│    = <missing implementation>


bar foo
//│ res: ()
//│    = <no result>
//│      bar is not implemented


:ns
id1 = id
//│ id1: forall 'a. 'a -> 'a
//│    = [Function: id]

:ns
// def f x = id x
def f = id : 'c -> 'c
//│ f: forall 'c 'a. 'c -> 'c
//│   where
//│     'c <: 'a
//│     'a <: 'c
//│  = [Function: f]

f 1 + 2
//│ res: int
//│    = 3



:NoRecursiveTypes


:e
bar foo
//│ ╔══[ERROR] Inferred recursive type: 'b
//│   where
//│     'b :> ('b,)
//│ ║  l.11: 	def bar: (('b,) as 'b) -> ()
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.48: 	bar foo
//│ ║        	^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error | ()
//│    = <no result>
//│      bar is not implemented


f 1 + 2
//│ res: int
//│    = 3


