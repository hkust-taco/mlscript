// TL;DR we need a special form of function types that does NOT merge
//    (as merging approximates unsoundly in the presence of first-class polymorphism)


def foo1: (int -> int & string -> string)
//│ foo1: int -> int & string -> string
//│     = <missing implementation>

def foo: (int -> int & string -> string) -> ()
//│ foo: (int -> int & string -> string) -> ()
//│    = <missing implementation>

fooImpl f = f 1
//│ fooImpl: (1 -> 'a) -> 'a
//│        = [Function: fooImpl]

:e
foo = fooImpl
//│ (1 -> 'a) -> 'a
//│   <:  foo:
//│ (int -> int & string -> string) -> ()
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.18: 	foo = fooImpl
//│ ║        	^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `string`
//│ ║  l.13: 	fooImpl f = f 1
//│ ║        	              ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.9: 	def foo: (int -> int & string -> string) -> ()
//│ ╙──     	                       ^^^^^^
//│    = [Function: fooImpl]

foo id
//│ res: ()
//│    = 1

fooImpl id
//│ res: 1
//│    = 1


:e
fooImpl2 (f: int -> int & string -> string) = f 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.43: 	fooImpl2 (f: int -> int & string -> string) = f 1
//│ ║        	                                              ^^^
//│ ╟── integer literal of type `1` is not an instance of type `string`
//│ ║  l.43: 	fooImpl2 (f: int -> int & string -> string) = f 1
//│ ║        	                                                ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.43: 	fooImpl2 (f: int -> int & string -> string) = f 1
//│ ╙──      	                          ^^^^^^
//│ fooImpl2: (int -> int & string -> string) -> (error | int | string)
//│         = [Function: fooImpl2]

fooImpl2 id
//│ res: error | int | string
//│    = 1

:e
:re
res "oops"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.62: 	res "oops"
//│ ║        	^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.43: 	fooImpl2 (f: int -> int & string -> string) = f 1
//│ ║        	                    ^^^
//│ ╟── but it flows into reference with expected type `"oops" -> ?a`
//│ ║  l.62: 	res "oops"
//│ ╙──      	^^^
//│ res: error
//│ Runtime error:
//│ TypeError: res is not a function



// Currently we remove the unsoundness by approximating positive function type intersections.
// But this leads to things not type checking when they clearly should:
//    (Basically we lose the property that A & B <: A for all A, B.)

def bar1: int -> int & string -> string
//│ bar1: int -> int & string -> string
//│     = <missing implementation>

// :e // * Did not work before when added subtype checking to constraining...
bar1 = bar1
//│ int -> int & string -> string
//│   <:  bar1:
//│ int -> int & string -> string
//│     = <no result>
//│       bar1 is not implemented


:re
error: int -> int & string -> string : (int & string) -> (int | string)
//│ res: nothing -> (int | string)
//│ Runtime error:
//│ Error: an error was thrown

// :e // * Did not work before when added subtype checking to constraining...
:re
error: int -> int & string -> string : int -> int
//│ res: int -> int
//│ Runtime error:
//│ Error: an error was thrown

:re
error: number -> int & string -> string : int -> number
//│ res: int -> number
//│ Runtime error:
//│ Error: an error was thrown

// * The tricky thing in these tests is that we currently lossily merge function types
// * in constraint solving, so the best-effort subtyping check may actually accept things
// * that fail to constrain. But in this case we try to make the check fail by using a type alias.
// * It somehow still seems to work well...

type Als = number -> int
//│ Defined type alias Als

:re
error: Als & string -> string : int -> number
//│ res: int -> number
//│ Runtime error:
//│ Error: an error was thrown

type Id[A] = A
//│ Defined type alias Id[+A]

:re
error: Id[Id[Als] & bool -> bool] & string -> string : int -> number
//│ res: int -> number
//│ Runtime error:
//│ Error: an error was thrown


