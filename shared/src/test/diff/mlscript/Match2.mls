
class Test: { value: int }
//│ Defined class Test

def foo x = case x of
  { Test -> x.value
  | _ -> 1
  }
//│ foo: test & {value: 'a} | ~test -> 'a | 1

// Q: why type of `value` widened?
def t = Test { value = 0 }
//│ t: test & {value: 0}

foo Test
//│ res: 1

foo t
//│ res: 0 | 1


class Toast: { name: string }
//│ Defined class Toast

def bar x = case x of
  { Test -> x.value
  | Toast -> x.name
  }
//│ bar: test & {value: 'a} | toast & {name: 'a} -> 'a

:e
bar Test
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.32: 	bar Test
//│ ║        	^^^^^^^^
//│ ╟── expression of type `{value: int & ?a} -> test & {value: int & ?a}` does not match type `test & {value: ?b} & ?c | toast & {name: ?d} & ?e`
//│ ║  l.32: 	bar Test
//│ ║        	    ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.25: 	def bar x = case x of
//│ ╙──      	                 ^
//│ res: error

:e
bar "ops"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.45: 	bar "ops"
//│ ║        	^^^^^^^^^
//│ ╟── expression of type `"ops"` does not match type `test & {value: ?a} & ?b | toast & {name: ?c} & ?d`
//│ ║  l.45: 	bar "ops"
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.25: 	def bar x = case x of
//│ ╙──      	                 ^
//│ res: error


def baz x = case x of
  { Test -> x
  | Toast -> x
  }
//│ baz: test & 'a | toast & 'a -> 'a

:e
baz "oops"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.65: 	baz "oops"
//│ ║        	^^^^^^^^^^
//│ ╟── expression of type `"oops"` does not match type `test & ?a | toast & ?b`
//│ ║  l.65: 	baz "oops"
//│ ║        	    ^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.58: 	def baz x = case x of
//│ ╙──      	                 ^
//│ res: "oops" | error

