
class Test: { value: int }
//│ Defined class Test

def foo x = case x of
  { Test -> x.value
  | _ -> 1
  }
//│ foo: ((Test with {value: 'a}) | ~Test) -> (1 | 'a)
//│    = [Function: foo]

// Q: why type of `value` widened?
def t = Test { value = 0 }
//│ t: Test & {value: 0}
//│  = Test { value: 0 }

foo Test
//│ res: 1
//│    = 1

foo t
//│ res: 0 | 1
//│    = 0


class Toast: { name: string }
//│ Defined class Toast

def bar x = case x of
  { Test -> x.value
  | Toast -> x.name
  }
//│ bar: ((Test with {value: 'a}) | (Toast with {name: 'a})) -> 'a
//│    = [Function: bar]

:e
bar Test
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.37: 	bar Test
//│ ║        	^^^^^^^^
//│ ╟── expression of type `{value: ?value} -> (Test & {value: ?value})` does not match type `Test & ?a | Toast & ?b`
//│ ║  l.37: 	bar Test
//│ ║        	    ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.29: 	def bar x = case x of
//│ ╙──      	                 ^
//│ res: error
//│    = Uncaught Error: non-exhaustive case expression
//│          at REPL7:1:145
//│          at bar (REPL7:1:194)

:e
bar "ops"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.53: 	bar "ops"
//│ ║        	^^^^^^^^^
//│ ╟── expression of type `"ops"` does not match type `Test & ?a | Toast & ?b`
//│ ║  l.53: 	bar "ops"
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.29: 	def bar x = case x of
//│ ╙──      	                 ^
//│ res: error
//│    = Uncaught Error: non-exhaustive case expression
//│          at REPL7:1:145
//│          at bar (REPL7:1:194)


def baz x = case x of
  { Test -> x
  | Toast -> x
  }
//│ baz: (Test & 'a | Toast & 'a) -> 'a
//│    = [Function: baz]

:e
baz "oops"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.77: 	baz "oops"
//│ ║        	^^^^^^^^^^
//│ ╟── expression of type `"oops"` does not match type `Test & ?a | Toast & ?b`
//│ ║  l.77: 	baz "oops"
//│ ║        	    ^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.69: 	def baz x = case x of
//│ ╙──      	                 ^
//│ res: "oops" | error
//│    = Uncaught Error: non-exhaustive case expression
//│          at REPL10:1:134
//│          at baz (REPL10:1:183)

