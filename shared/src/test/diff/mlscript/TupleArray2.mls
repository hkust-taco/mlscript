
:e
(1,2): (2,1)
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.3: 	(1,2): (2,1)
//│ ║       	^^^^^
//│ ╟── integer literal of type `1` does not match type `2`
//│ ║  l.3: 	(1,2): (2,1)
//│ ║       	 ^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.3: 	(1,2): (2,1)
//│ ╙──     	        ^
//│ res: (2, 1,)
//│    = [ 1, 2 ]

:e
(1,2): (2,1,0)
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.17: 	(1,2): (2,1,0)
//│ ║        	^^^^^
//│ ╟── tuple literal of type `(1, 2,)` does not match type `(2, 1, 0,)`
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.17: 	(1,2): (2,1,0)
//│ ╙──      	       ^^^^^^^
//│ res: (2, 1, 0,)
//│    = [ 1, 2 ]

:e
(1,2) with { x = 1 } : (2,1,0)
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.29: 	(1,2) with { x = 1 } : (2,1,0)
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── `with` extension of type `(1, 2,) & {x: 1}` is not a 3-element tuple
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.29: 	(1,2) with { x = 1 } : (2,1,0)
//│ ╙──      	                       ^^^^^^^
//│ res: (2, 1, 0,)
//│    = [ 1, 2, x: 1 ]

trait T
//│ Defined trait T

:e
(1,2) with { x = 1 } : (2,1,0) | t
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.44: 	(1,2) with { x = 1 } : (2,1,0) | t
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── `with` extension of type `(1, 2,) & {x: 1}` does not match type `(2, 1, 0,) | #T`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.44: 	(1,2) with { x = 1 } : (2,1,0) | t
//│ ╙──      	                       ^^^^^^^^^^^
//│ res: (2, 1, 0,) | #T
//│    = [ 1, 2, x: 1 ]

:e
(1,2) with { x = 1 } : (2,1)
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.56: 	(1,2) with { x = 1 } : (2,1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not match type `2`
//│ ║  l.56: 	(1,2) with { x = 1 } : (2,1)
//│ ║        	 ^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.56: 	(1,2) with { x = 1 } : (2,1)
//│ ╙──      	                        ^
//│ res: (2, 1,)
//│    = [ 1, 2, x: 1 ]

(1,2) with { x = 1 } : (1,2)
//│ res: (1, 2,)
//│    = [ 1, 2, x: 1 ]


:re
error: (1,2) & t | Array[3]
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.TyperDatatypes$BaseType.comparePartial(TyperDatatypes.scala:189)
//│ 	at: mlscript.NormalForms$LhsNf.comparePartial(NormalForms.scala:37)
//│ 	at: mlscript.NormalForms$Conjunct.comparePartialImpl(NormalForms.scala:500)
//│ 	at: mlscript.NormalForms$Conjunct.$anonfun$comparePartial$2(NormalForms.scala:498)
//│ 	at: scala.runtime.java8.JFunction0$mcI$sp.apply(JFunction0$mcI$sp.scala:17)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)
//│ 	at: mlscript.NormalForms$Conjunct.comparePartial(NormalForms.scala:498)
//│ 	at: mlscript.NormalForms$ConjunctPartialOrdering$.compare(NormalForms.scala:492)
//│ 	at: mlscript.NormalForms$ConjunctPartialOrdering$.compare(NormalForms.scala:491)


def arr: Array[1]
//│ arr: Array[1]
//│    = <missing implementation>

arr: Array[2] | (1, 1)
//│ res: Array[1 | 2]
//│    = <no result>
//│      arr is not implemented

arr: Array[2] | (1, 2)
//│ res: Array[1 | 2]
//│    = <no result>
//│      arr is not implemented

:e
arr: Array[2] & t | (1, 1)
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.TyperDatatypes$BaseType.comparePartial(TyperDatatypes.scala:189)
//│ 	at: mlscript.NormalForms$LhsNf.comparePartial(NormalForms.scala:37)
//│ 	at: mlscript.NormalForms$Conjunct.comparePartialImpl(NormalForms.scala:500)
//│ 	at: mlscript.NormalForms$Conjunct.$anonfun$comparePartial$2(NormalForms.scala:498)
//│ 	at: scala.runtime.java8.JFunction0$mcI$sp.apply(JFunction0$mcI$sp.scala:17)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)
//│ 	at: mlscript.NormalForms$Conjunct.comparePartial(NormalForms.scala:498)
//│ 	at: mlscript.NormalForms$ConjunctPartialOrdering$.compare(NormalForms.scala:492)
//│ 	at: mlscript.NormalForms$ConjunctPartialOrdering$.compare(NormalForms.scala:491)

def arrt: Array[1] & t
//│ arrt: Array[1] & #T
//│     = <missing implementation>

arrt: Array[2] & t | (1, 1)
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.TyperDatatypes$BaseType.comparePartial(TyperDatatypes.scala:189)
//│ 	at: mlscript.NormalForms$LhsNf.comparePartial(NormalForms.scala:37)
//│ 	at: mlscript.NormalForms$Conjunct.comparePartialImpl(NormalForms.scala:500)
//│ 	at: mlscript.NormalForms$Conjunct.$anonfun$comparePartial$2(NormalForms.scala:498)
//│ 	at: scala.runtime.java8.JFunction0$mcI$sp.apply(JFunction0$mcI$sp.scala:17)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)
//│ 	at: mlscript.NormalForms$Conjunct.comparePartial(NormalForms.scala:498)
//│ 	at: mlscript.NormalForms$ConjunctPartialOrdering$.compare(NormalForms.scala:492)
//│ 	at: mlscript.NormalForms$ConjunctPartialOrdering$.compare(NormalForms.scala:491)


def f_1: 'a -> (Array['a] & t)
//│ f_1: 'a -> (Array['a] & #T)
//│    = <missing implementation>

def f_2: 'a -> (Array['a] & t | (1,))
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.TyperDatatypes$BaseType.comparePartial(TyperDatatypes.scala:189)
//│ 	at: mlscript.NormalForms$LhsNf.comparePartial(NormalForms.scala:37)
//│ 	at: mlscript.NormalForms$Conjunct.comparePartialImpl(NormalForms.scala:500)
//│ 	at: mlscript.NormalForms$Conjunct.$anonfun$comparePartial$2(NormalForms.scala:498)
//│ 	at: scala.runtime.java8.JFunction0$mcI$sp.apply(JFunction0$mcI$sp.scala:17)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)
//│ 	at: mlscript.NormalForms$Conjunct.comparePartial(NormalForms.scala:498)
//│ 	at: mlscript.NormalForms$ConjunctPartialOrdering$.compare(NormalForms.scala:492)
//│ 	at: mlscript.NormalForms$ConjunctPartialOrdering$.compare(NormalForms.scala:491)

:e
f_1 = f_2
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.TyperDatatypes$BaseType.comparePartial(TyperDatatypes.scala:189)
//│ 	at: mlscript.NormalForms$LhsNf.comparePartial(NormalForms.scala:37)
//│ 	at: mlscript.NormalForms$Conjunct.comparePartialImpl(NormalForms.scala:500)
//│ 	at: mlscript.NormalForms$Conjunct.$anonfun$comparePartial$2(NormalForms.scala:498)
//│ 	at: scala.runtime.java8.JFunction0$mcI$sp.apply(JFunction0$mcI$sp.scala:17)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)
//│ 	at: mlscript.NormalForms$Conjunct.comparePartial(NormalForms.scala:498)
//│ 	at: mlscript.NormalForms$ConjunctPartialOrdering$.compare(NormalForms.scala:492)
//│ 	at: mlscript.NormalForms$ConjunctPartialOrdering$.compare(NormalForms.scala:491)

f_2 = f_1
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.TyperDatatypes$BaseType.comparePartial(TyperDatatypes.scala:189)
//│ 	at: mlscript.NormalForms$LhsNf.comparePartial(NormalForms.scala:37)
//│ 	at: mlscript.NormalForms$Conjunct.comparePartialImpl(NormalForms.scala:500)
//│ 	at: mlscript.NormalForms$Conjunct.$anonfun$comparePartial$2(NormalForms.scala:498)
//│ 	at: scala.runtime.java8.JFunction0$mcI$sp.apply(JFunction0$mcI$sp.scala:17)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)
//│ 	at: mlscript.NormalForms$Conjunct.comparePartial(NormalForms.scala:498)
//│ 	at: mlscript.NormalForms$ConjunctPartialOrdering$.compare(NormalForms.scala:492)
//│ 	at: mlscript.NormalForms$ConjunctPartialOrdering$.compare(NormalForms.scala:491)



def test: (string, 1) & { 0: "hello" }
//│ test: ("hello", 1,)
//│     = <missing implementation>

:e
test = ("hi", 1)
//│ ("hi", 1,)
//│   <:  test:
//│ ("hello", 1,)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.186: 	test = ("hi", 1)
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"hi"` does not match type `"hello"`
//│ ║  l.186: 	test = ("hi", 1)
//│ ║         	        ^^^^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.181: 	def test: (string, 1) & { 0: "hello" }
//│ ╙──       	                             ^^^^^^^
//│     = [ 'hi', 1 ]

test = ("hello", 1)
//│ ("hello", 1,)
//│   <:  test:
//│ ("hello", 1,)
//│     = [ 'hello', 1 ]

(fun ((a, b)) -> a) test
//│ res: string
//│    = 'hello'

test: { 0: 'a }
//│ res: {0: "hello"}
//│    = [ 'hello', 1 ]

test: ('a, 1)
//│ res: (string, 1,)
//│    = [ 'hello', 1 ]

:e
class A: (1,2)
//│ ╔══[ERROR] cannot inherit from a tuple type
//│ ║  l.220: 	class A: (1,2)
//│ ╙──       	      ^^^^^^^^


:re
error: Array[1] & { 0: int }
//│ res: Array[1] & {0: int}
//│ Runtime error:
//│   Error: an error was thrown
