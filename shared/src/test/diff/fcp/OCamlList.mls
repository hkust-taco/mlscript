:NoJS

// From https://github.com/ocaml/ocaml/blob/5312b4d7b913cde2a69fc0eb5e97e353865b82df/stdlib/list.ml
// and https://github.com/ocaml/ocaml/blob/5312b4d7b913cde2a69fc0eb5e97e353865b82df/stdlib/list.mli



// *** Signatures of required definitions ***


// `compare` and (=) in OCaml are polymorphic
def compare' : 'a -> 'a -> int
def eq' : 'a -> 'a -> bool
//│ compare': anything -> anything -> int
//│ eq': anything -> anything -> bool

def asr: int -> int -> int
//│ asr: int -> int -> int

def fst: (('a, 'b),) -> 'a
def snd: (('a, 'b),) -> 'b
//│ fst: (('a, anything,),) -> 'a
//│ snd: ((anything, 'b,),) -> 'b

def assert: { fail: anything -> nothing }
//│ assert: {fail: anything -> nothing}

def failwith: string -> nothing
def failwith s = assert.fail (concat "Failure: " s)
def invalid_arg: string -> nothing
def invalid_arg s = assert.fail (concat "Invalid argument: " s)
//│ failwith: string -> nothing
//│ string -> nothing
//│   <:  failwith:
//│ string -> nothing
//│ invalid_arg: string -> nothing
//│ string -> nothing
//│   <:  invalid_arg:
//│ string -> nothing

class Exn
def Not_found: Exn
def raise: Exn -> nothing
//│ Defined class Exn
//│ Not_found: Exn
//│ raise: Exn -> nothing

datatype Option[A] = Some(A) | None
//│ Defined class Option[+A]
//│ Declared Option.Some: Option['A] -> ('A,)
//│ Declared Option.None: Option[?] -> anything
//│ Defined class Some[+A]
//│ Defined class None[+A]
//│ Some: 'a -> Option['a]
//│ None: Option[nothing]

datatype Either[A, B] = Left(A) | Right(B)
//│ Defined class Either[+A, +B]
//│ Declared Either.Left: Either['A, ?] -> ('A,)
//│ Declared Either.Right: Either[?, 'B] -> ('B,)
//│ Defined class Left[+A, +B]
//│ Defined class Right[+A, +B]
//│ Left: 'a -> Either['a, nothing]
//│ Right: 'a -> Either[nothing, 'a]

datatype List[A] = Cons(A, List[A]) | Nil
//│ Defined class List[+A]
//│ Declared List.Cons: List['A] -> ('A, List['A],)
//│ Declared List.Nil: List[?] -> anything
//│ Defined class Cons[+A]
//│ Defined class Nil[+A]
//│ Cons: ('a, List['a],) -> List['a]
//│ Nil: List[nothing]

datatype Node[A] = SeqNil | SeqCons(A, Seq[A])
type Seq[A] = unit -> Node[A]
//│ Defined class Node[+A]
//│ Declared Node.SeqNil: Node[?] -> anything
//│ Declared Node.SeqCons: Node['A] -> ('A, Seq['A],)
//│ Defined class SeqNil[+A]
//│ Defined class SeqCons[+A]
//│ Defined type alias Seq[+A]
//│ SeqNil: Node[nothing]
//│ SeqCons: ('a, Seq['a],) -> Node['a]



// *** Signatures ported from List.mli ***


def length: List['a] -> int
//│ length: List[?] -> int

def compare_lengths: List['a] -> List['b] -> int
//│ compare_lengths: List[?] -> List[?] -> int

def compare_length_with: List['a] -> int -> int
//│ compare_length_with: List[?] -> int -> int

def is_empty: List['a] -> bool
//│ is_empty: List[?] -> bool

def cons: 'a -> List['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]

def hd: List['a] -> 'a
//│ hd: List['a] -> 'a

def tl: List['a] -> List['a]
//│ tl: List['a] -> List['a]

def nth: List['a] -> int -> 'a
//│ nth: List['a] -> int -> 'a

def nth_opt: List['a] -> int -> Option['a]
//│ nth_opt: List['a] -> int -> Option['a]

def rev: List['a] -> List['a]
//│ rev: List['a] -> List['a]

def init: int -> (int -> 'a) -> List['a]
//│ init: int -> (int -> 'a) -> List['a]

def append: List['a] -> List['a] -> List ['a]
//│ append: List['a] -> List['a] -> List['a]

def rev_append: List['a] -> List['a] -> List ['a]
//│ rev_append: List['a] -> List['a] -> List['a]

def concat: List[List['a]] -> List['a]
//│ concat: List[List['a]] -> List['a]

def flatten: List[List['a]] -> List['a]
//│ flatten: List[List['a]] -> List['a]

def equal: ('a -> 'a -> bool) -> List['a] -> List['a] -> bool
//│ equal: ('a -> 'a -> bool) -> List['a] -> List['a] -> bool

def compare: ('a -> 'a -> int) -> List['a] -> List['a] -> int
//│ compare: ('a -> 'a -> int) -> List['a] -> List['a] -> int

def iter: ('a -> unit) -> List['a] -> unit
//│ iter: ('a -> unit) -> List['a] -> unit

def iteri: (int -> 'a -> unit) -> List['a] -> unit
//│ iteri: (int -> 'a -> unit) -> List['a] -> unit

def map: ('a -> 'b) -> List['a] -> List['b]
//│ map: ('a -> 'b) -> List['a] -> List['b]

def mapi: (int -> 'a -> 'b) -> List['a] -> List['b]
//│ mapi: (int -> 'a -> 'b) -> List['a] -> List['b]

def rev_map: ('a -> 'b) -> List['a] -> List['b]
//│ rev_map: ('a -> 'b) -> List['a] -> List['b]

def filter_map: ('a -> Option['b]) -> List['a] -> List['b]
//│ filter_map: ('a -> Option['b]) -> List['a] -> List['b]

def concat_map: ('a -> List['b]) -> List['a] -> List['b]
//│ concat_map: ('a -> List['b]) -> List['a] -> List['b]

def fold_left_map: ('acc -> 'a -> ('acc, 'b)) -> 'acc -> List['a] -> ('acc, List['b])
//│ fold_left_map: ('acc -> 'a -> ('acc, 'b,)) -> 'acc -> List['a] -> ('acc, List['b],)

def fold_left: ('acc -> 'a -> 'acc) -> 'acc -> List['a] -> 'acc
//│ fold_left: ('acc -> 'a -> 'acc) -> 'acc -> List['a] -> 'acc

def fold_right: ('a -> 'acc -> 'acc) -> List['a] -> 'acc -> 'acc
//│ fold_right: ('a -> 'acc -> 'acc) -> List['a] -> 'acc -> 'acc

def iter2: ('a -> 'b -> unit) -> List['a] -> List['b] -> unit
//│ iter2: ('a -> 'b -> unit) -> List['a] -> List['b] -> unit

def map2: ('a -> 'b -> 'c) -> List['a] -> List['b] -> List['c]
//│ map2: ('a -> 'b -> 'c) -> List['a] -> List['b] -> List['c]

def rev_map2: ('a -> 'b -> 'c) -> List['a] -> List['b] -> List['c]
//│ rev_map2: ('a -> 'b -> 'c) -> List['a] -> List['b] -> List['c]

def fold_left2: ('acc -> 'a -> 'b -> 'acc) -> 'acc -> List['a] -> List['b] -> 'acc
//│ fold_left2: ('acc -> 'a -> 'b -> 'acc) -> 'acc -> List['a] -> List['b] -> 'acc

def fold_right2: ('a -> 'b -> 'acc -> 'acc) -> List['a] -> List['b] -> 'acc -> 'acc
//│ fold_right2: ('a -> 'b -> 'acc -> 'acc) -> List['a] -> List['b] -> 'acc -> 'acc

def for_all: ('a -> bool) -> List['a] -> bool
//│ for_all: ('a -> bool) -> List['a] -> bool

def exists: ('a -> bool) -> List['a] -> bool
//│ exists: ('a -> bool) -> List['a] -> bool

def for_all2: ('a -> 'b -> bool) -> List['a] -> List['b] -> bool
//│ for_all2: ('a -> 'b -> bool) -> List['a] -> List['b] -> bool

def exists2: ('a -> 'b -> bool) -> List['a] -> List['b] -> bool
//│ exists2: ('a -> 'b -> bool) -> List['a] -> List['b] -> bool

def mem: 'a -> List['a] -> bool
//│ mem: anything -> List[?] -> bool

def memq: 'a -> List['a] -> bool
//│ memq: anything -> List[?] -> bool

def find: ('a -> bool) -> List['a] -> 'a
//│ find: ('a -> bool) -> List['a] -> 'a

def find_opt: ('a -> bool) -> List['a] -> Option['a]
//│ find_opt: ('a -> bool) -> List['a] -> Option['a]

def find_index: ('a -> bool) -> List['a] -> Option[int]
//│ find_index: ('a -> bool) -> List['a] -> Option[int]

def find_map: ('a -> Option['b]) -> List['a] -> Option['b]
//│ find_map: ('a -> Option['b]) -> List['a] -> Option['b]

def find_mapi: (int -> 'a -> Option['b]) -> List['a] -> Option['b]
//│ find_mapi: (int -> 'a -> Option['b]) -> List['a] -> Option['b]

def filter: ('a -> bool) -> List['a] -> List['a]
//│ filter: ('a -> bool) -> List['a] -> List['a]

def find_all: ('a -> bool) -> List['a] -> List['a]
//│ find_all: ('a -> bool) -> List['a] -> List['a]

def filteri: (int -> 'a -> bool) -> List['a] -> List['a]
//│ filteri: (int -> 'a -> bool) -> List['a] -> List['a]

def partition: ('a -> bool) -> List['a] -> (List['a], List['a])
//│ partition: ('a -> bool) -> List['a] -> (List['a], List['a],)

def partition_map: ('a -> Either['b, 'c]) -> List['a] -> (List['b], List['c])
//│ partition_map: ('a -> Either['b, 'c]) -> List['a] -> (List['b], List['c],)

def assoc: 'a -> List[('a, 'b)] -> 'b
//│ assoc: anything -> List[(anything, 'b,)] -> 'b

def assoc_opt: 'a -> List[('a, 'b)] -> Option['b]
//│ assoc_opt: anything -> List[(anything, 'b,)] -> Option['b]

def assq: 'a -> List[('a, 'b)] -> 'b
//│ assq: anything -> List[(anything, 'b,)] -> 'b

def assq_opt: 'a -> List[('a, 'b)] -> Option['b]
//│ assq_opt: anything -> List[(anything, 'b,)] -> Option['b]

def mem_assoc: 'a -> List[('a, 'b)] -> bool
//│ mem_assoc: anything -> List[(anything, anything,)] -> bool

def mem_assq: 'a -> List[('a, 'b)] -> bool
//│ mem_assq: anything -> List[(anything, anything,)] -> bool

def remove_assoc: 'a -> List[('a, 'b)] -> List[('a, 'b)]
//│ remove_assoc: 'a -> List[('a, 'b,)] -> List[('a, 'b,)]

def remove_assq: 'a -> List[('a, 'b)] -> List[('a, 'b)]
//│ remove_assq: 'a -> List[('a, 'b,)] -> List[('a, 'b,)]

def split: List[('a, 'b)] -> (List['a], List['b])
//│ split: List[('a, 'b,)] -> (List['a], List['b],)

def combine: List['a] -> List['b] -> List[('a, 'b)]
//│ combine: List['a] -> List['b] -> List[('a, 'b,)]

def sort: ('a -> 'a -> int) -> List['a] -> List['a]
//│ sort: ('a -> 'a -> int) -> List['a] -> List['a]

def stable_sort: ('a -> 'a -> int) -> List['a] -> List['a]
//│ stable_sort: ('a -> 'a -> int) -> List['a] -> List['a]

def fast_sort: ('a -> 'a -> int) -> List['a] -> List['a]
//│ fast_sort: ('a -> 'a -> int) -> List['a] -> List['a]

def sort_uniq: ('a -> 'a -> int) -> List['a] -> List['a]
//│ sort_uniq: ('a -> 'a -> int) -> List['a] -> List['a]

def merge: ('a -> 'a -> int) -> List['a] -> List['a] -> List['a]
//│ merge: ('a -> 'a -> int) -> List['a] -> List['a] -> List['a]

def to_seq: List['a] -> Seq['a]
//│ to_seq: List['a] -> Seq['a]

def of_seq: Seq['a] -> List['a]
//│ of_seq: Seq['a] -> List['a]



// *** Implementations ported from List.ml ***


rec def length_aux len = fun x -> match x with
  | Nil -> len
  | Cons(_, l) -> length_aux (len + 1) l
//│ length_aux: int -> List[?] -> int

def length l = length_aux 0 l
//│ List[?] -> int
//│   <:  length:
//│ List[?] -> int

def cons a l = Cons(a, l)
//│ 'a -> List['a] -> List['a]
//│   <:  cons:
//│ 'a -> List['a] -> List['a]

def hd = fun x -> match x with
  | Nil -> failwith "hd"
  | Cons(a, _) -> a
//│ List['a] -> 'a
//│   <:  hd:
//│ List['a] -> 'a

def tl = fun x -> match x with
  | Nil -> failwith "tl"
  | Cons(_, l) -> l
//│ List['A] -> List['A]
//│   <:  tl:
//│ List['a] -> List['a]

def nth l n =
  if n < 0 then invalid_arg "List.nth" else
  let rec nth_aux l n =
    match l with
    | Nil -> failwith "nth"
    | Cons(a, l) -> if n == 0 then a else nth_aux l (n-1)
  in nth_aux l n
//│ List['a] -> int -> 'a
//│   <:  nth:
//│ List['a] -> int -> 'a

def nth_opt l n =
  if n < 0 then invalid_arg "List.nth" else
  let rec nth_aux l n =
    match l with
    | Nil -> None
    | Cons(a, l) -> if n == 0 then Some(a) else nth_aux l (n-1)
  in nth_aux l n
//│ List['a] -> int -> Option['a]
//│   <:  nth_opt:
//│ List['a] -> int -> Option['a]

// https://github.com/ocaml/ocaml/blob/5312b4d7b913cde2a69fc0eb5e97e353865b82df/stdlib/stdlib.ml#L298
rec def append l1 l2 =
  match l1 with
  | Nil -> l2
  | Cons(h1, Nil) -> Cons(h1, l2)
  | Cons(h1, Cons(h2, Nil)) -> Cons(h1, Cons(h2, l2))
  | Cons(h1, Cons(h2, Cons(h3, tl))) -> Cons(h1, Cons(h2, Cons(h3, append tl l2)))
//│ List['a] -> List['a] -> List['a]
//│   <:  append:
//│ List['a] -> List['a] -> List['a]

rec def rev_append l1 l2 =
  match l1 with
    Nil -> l2
  | Cons(a, l) -> rev_append l (Cons(a, l2))
//│ List['a] -> List['a] -> List['a]
//│   <:  rev_append:
//│ List['a] -> List['a] -> List['a]

def rev l = rev_append l Nil
//│ List['a] -> List['a]
//│   <:  rev:
//│ List['a] -> List['a]

// overloaded with `init` in OCaml
rec def init_aux i last f =
  if i > last then Nil
  else if i == last then Cons(f i, Nil)
  else
    let r1 = f i in
    let r2 = f (i+1) in
    Cons(r1, Cons(r2, init_aux (i+2) last f))
//│ init_aux: int -> number -> (int -> 'a) -> List['a]

def init len f =
  if len < 0 then invalid_arg "List.init" else
  init_aux 0 (len - 1) f
//│ int -> (int -> 'a) -> List['a]
//│   <:  init:
//│ int -> (int -> 'a) -> List['a]

rec def flatten = fun x -> match x with
    Nil -> Nil
  | Cons(l, r) -> append l (flatten r)
//│ List[List['a]] -> List['a]
//│   <:  flatten:
//│ List[List['a]] -> List['a]

def concat = flatten
//│ List[List['a]] -> List['a]
//│   <:  concat:
//│ List[List['a]] -> List['a]

rec def map f = fun x -> match x with
    Nil -> Nil
  | Cons(a1, Nil) ->
      let r1 = f a1 in
      Cons(r1, Nil)
  | Cons(a1, Cons(a2, l)) ->
      let r1 = f a1 in
      let r2 = f a2 in
      Cons(r1, Cons(r2, map f l))
//│ ('A -> 'a) -> List['A] -> List['a]
//│   <:  map:
//│ ('a -> 'b) -> List['a] -> List['b]

// overloaded with mapi in OCaml
rec def mapi_aux i f = fun x -> match x with
    Nil -> Nil
  | Cons(a1, Nil) ->
      let r1 = f i a1 in
      Cons(r1, Nil)
  | Cons(a1, Cons(a2, l)) ->
      let r1 = f i a1 in
      let r2 = f (i+1) a2 in
      Cons(r1, Cons(r2, mapi_aux (i+2) f l))
//│ mapi_aux: int -> (int -> 'A -> 'a) -> List['A] -> List['a]

def mapi f l = mapi_aux 0 f l
//│ (int -> 'A -> 'a) -> List['A] -> List['a]
//│   <:  mapi:
//│ (int -> 'a -> 'b) -> List['a] -> List['b]

def rev_map f l =
  let rec rmap_f accu = fun x -> match x with
    | Nil -> accu
    | Cons(a, l) -> rmap_f (Cons(f a, accu)) l
  in
  rmap_f Nil l
//│ ('A -> 'a) -> List['A] -> List['a]
//│   <:  rev_map:
//│ ('a -> 'b) -> List['a] -> List['b]

rec def iter f = fun x -> match x with
    Nil -> Unit
  | Cons(a, l) -> let _ = f a in iter f l
//│ ('A -> anything) -> List['A] -> unit
//│   <:  iter:
//│ ('a -> unit) -> List['a] -> unit

// overloaded with iteri in OCaml
rec def iteri_aux i f = fun x -> match x with
    Nil -> Unit
  | Cons(a, l) -> let _ = f i a in iteri_aux (i + 1) f l
//│ iteri_aux: int -> (int -> 'A -> anything) -> List['A] -> unit

def iteri f l = iteri_aux 0 f l
//│ (int -> 'A -> anything) -> List['A] -> unit
//│   <:  iteri:
//│ (int -> 'a -> unit) -> List['a] -> unit

rec def fold_left f accu l =
  match l with
    Nil -> accu
  | Cons(a, l) -> fold_left f (f accu a) l
//│ ('a -> 'A -> 'a) -> 'a -> List['A] -> 'a
//│   <:  fold_left:
//│ ('acc -> 'a -> 'acc) -> 'acc -> List['a] -> 'acc

rec def fold_right f l accu =
  match l with
    Nil -> accu
  | Cons(a, l) -> f a (fold_right f l accu)
//│ ('A -> 'a -> 'a) -> List['A] -> 'a -> 'a
//│   <:  fold_right:
//│ ('a -> 'acc -> 'acc) -> List['a] -> 'acc -> 'acc

rec def map2 f l1 l2 =
  match (l1, l2) with
    (Nil, Nil) -> Nil
  | (Cons(a1, Nil), Cons(b1, Nil)) ->
      let r1 = f a1 b1 in
      Cons(r1, Nil)
  | (Cons(a1, Cons(a2, l1)), Cons(b1, Cons(b2, l2))) ->
      let r1 = f a1 b1 in
      let r2 = f a2 b2 in
      Cons(r1, Cons(r2, map2 f l1 l2))
  | (_, _) -> invalid_arg "List.map2"
//│ ('A -> 'A0 -> 'a) -> List['A] -> List['A0] -> List['a]
//│   <:  map2:
//│ ('a -> 'b -> 'c) -> List['a] -> List['b] -> List['c]

def rev_map2 f l1 l2 =
  let rec rmap2_f accu l1 l2 =
    match (l1, l2) with
    | (Nil, Nil) -> accu
    | (Cons(a1, l1), Cons(a2, l2)) -> rmap2_f (Cons(f a1 a2, accu)) l1 l2
    | (_, _) -> invalid_arg "List.rev_map2"
  in
  rmap2_f Nil l1 l2
//│ ('A -> 'A0 -> 'a) -> List['A] -> List['A0] -> List['a]
//│   <:  rev_map2:
//│ ('a -> 'b -> 'c) -> List['a] -> List['b] -> List['c]

rec def iter2 f l1 l2 =
  match (l1, l2) with
    (Nil, Nil) -> Unit
  | (Cons(a1, l1), Cons(a2, l2)) -> let _ = f a1 a2 in iter2 f l1 l2
  | (_, _) -> invalid_arg "List.iter2"
//│ ('A -> 'A0 -> anything) -> List['A] -> List['A0] -> unit
//│   <:  iter2:
//│ ('a -> 'b -> unit) -> List['a] -> List['b] -> unit

rec def fold_left2 f accu l1 l2 =
  match (l1, l2) with
    (Nil, Nil) -> accu
  | (Cons(a1, l1), Cons(a2, l2)) -> fold_left2 f (f accu a1 a2) l1 l2
  | (_, _) -> invalid_arg "List.fold_left2"
//│ ('a -> 'A -> 'A0 -> 'a) -> 'a -> List['A] -> List['A0] -> 'a
//│   <:  fold_left2:
//│ ('acc -> 'a -> 'b -> 'acc) -> 'acc -> List['a] -> List['b] -> 'acc

rec def fold_right2 f l1 l2 accu =
  match (l1, l2) with
    (Nil, Nil) -> accu
  | (Cons(a1, l1), Cons(a2, l2)) -> f a1 a2 (fold_right2 f l1 l2 accu)
  | (_, _) -> invalid_arg "List.fold_right2"
//│ ('A -> 'A0 -> 'a -> 'a) -> List['A] -> List['A0] -> 'a -> 'a
//│   <:  fold_right2:
//│ ('a -> 'b -> 'acc -> 'acc) -> List['a] -> List['b] -> 'acc -> 'acc

rec def for_all p = fun x -> match x with
    Nil -> true
  | Cons(a, l) -> p a && for_all p l
//│ ('A -> bool) -> List['A] -> bool
//│   <:  for_all:
//│ ('a -> bool) -> List['a] -> bool

rec def exists p = fun x -> match x with
    Nil -> false
  | Cons(a, l) -> p a || exists p l
//│ ('A -> bool) -> List['A] -> bool
//│   <:  exists:
//│ ('a -> bool) -> List['a] -> bool

rec def for_all2 p l1 l2 =
  match (l1, l2) with
    (Nil, Nil) -> true
  | (Cons(a1, l1), Cons(a2, l2)) -> p a1 a2 && for_all2 p l1 l2
  | (_, _) -> invalid_arg "List.for_all2"
//│ ('A -> 'A0 -> bool) -> List['A] -> List['A0] -> bool
//│   <:  for_all2:
//│ ('a -> 'b -> bool) -> List['a] -> List['b] -> bool

rec def exists2 p l1 l2 =
  match (l1, l2) with
    (Nil, Nil) -> false
  | (Cons(a1, l1), Cons(a2, l2)) -> p a1 a2 || exists2 p l1 l2
  | (_, _) -> invalid_arg "List.exists2"
//│ ('A -> 'A0 -> bool) -> List['A] -> List['A0] -> bool
//│   <:  exists2:
//│ ('a -> 'b -> bool) -> List['a] -> List['b] -> bool

rec def mem x = fun y -> match y with
    Nil -> false
  | Cons(a, l) -> compare' a x == 0 || mem x l
//│ anything -> List[?] -> bool
//│   <:  mem:
//│ anything -> List[?] -> bool

rec def memq x = fun y -> match y with
    Nil -> false
  | Cons(a, l) -> eq a x || memq x l
//│ anything -> List[?] -> bool
//│   <:  memq:
//│ anything -> List[?] -> bool

rec def assoc x = fun y -> match y with
    Nil -> raise Not_found
  | Cons((a, b), l) -> if compare' a x == 0 then b else assoc x l
//│ anything -> List[(anything, 'a,)] -> 'a
//│   <:  assoc:
//│ anything -> List[(anything, 'b,)] -> 'b

rec def assoc_opt x = fun y -> match y with
    Nil -> None
  | Cons((a, b), l) -> if compare' a x == 0 then Some(b) else assoc_opt x l
//│ anything -> List[(anything, 'a,)] -> Option['a]
//│   <:  assoc_opt:
//│ anything -> List[(anything, 'b,)] -> Option['b]

rec def assq x = fun y -> match y with
    Nil -> raise Not_found
  | Cons((a, b), l) -> if eq a x then b else assq x l
//│ anything -> List[(anything, 'a,)] -> 'a
//│   <:  assq:
//│ anything -> List[(anything, 'b,)] -> 'b

rec def assq_opt x = fun y -> match y with
    Nil -> None
  | Cons((a, b), l) -> if eq a x then Some(b) else assq_opt x l
//│ anything -> List[(anything, 'a,)] -> Option['a]
//│   <:  assq_opt:
//│ anything -> List[(anything, 'b,)] -> Option['b]

rec def mem_assoc x = fun y -> match y with
  | Nil -> false
  | Cons((a, _), l) -> compare' a x == 0 || mem_assoc x l
//│ anything -> List[(anything, anything,)] -> bool
//│   <:  mem_assoc:
//│ anything -> List[(anything, anything,)] -> bool

rec def mem_assq x = fun y -> match y with
  | Nil -> false
  | Cons((a, _), l) -> eq a x || mem_assq x l
//│ anything -> List[(anything, anything,)] -> bool
//│   <:  mem_assq:
//│ anything -> List[(anything, anything,)] -> bool

rec def remove_assoc x = fun y -> match y with
  | Nil -> Nil
  | Cons((a, _) as pair, l) ->
      if compare' a x == 0 then l else Cons(pair, remove_assoc x l)
//│ anything -> List[(anything, anything,) & 'A] -> List['A]
//│   <:  remove_assoc:
//│ 'a -> List[('a, 'b,)] -> List[('a, 'b,)]

rec def remove_assq x = fun y -> match y with
  | Nil -> Nil
  | Cons((a, _) as pair, l) ->
      if eq a x then l else Cons(pair, remove_assq x l)
//│ anything -> List[(anything, anything,) & 'A] -> List['A]
//│   <:  remove_assq:
//│ 'a -> List[('a, 'b,)] -> List[('a, 'b,)]

rec def find p = fun x -> match x with
  | Nil -> raise Not_found
  | Cons(x, l) -> if p x then x else find p l
//│ ('A -> bool) -> List['A] -> 'A
//│   <:  find:
//│ ('a -> bool) -> List['a] -> 'a

rec def find_opt p = fun x -> match x with
  | Nil -> None
  | Cons(x, l) -> if p x then Some(x) else find_opt p l
//│ ('A -> bool) -> List['A] -> Option['A]
//│   <:  find_opt:
//│ ('a -> bool) -> List['a] -> Option['a]

def find_index p =
  let rec aux i = fun x -> match x with
    Nil -> None
    | Cons(a, l) -> if p a then Some(i) else aux (i+1) l in
  aux 0
//│ ('A -> bool) -> List['A] -> Option[int]
//│   <:  find_index:
//│ ('a -> bool) -> List['a] -> Option[int]

rec def find_map f = fun x -> match x with
  | Nil -> None
  | Cons(x, l) ->
      match f x with
        | Some(_) as result -> result
        | None -> find_map f l
//│ ('A -> (Option[?] & 'a)) -> List['A] -> (Option[nothing] | 'a)
//│   <:  find_map:
//│ ('a -> Option['b]) -> List['a] -> Option['b]

def find_mapi f =
  let rec aux i = fun x -> match x with
  | Nil -> None
  | Cons(x, l) ->
      match f i x with
        | Some(_) as result -> result
        | None -> aux (i+1) l
      in
  aux 0
//│ (int -> 'A -> (Option[?] & 'a)) -> List['A] -> (Option[nothing] | 'a)
//│   <:  find_mapi:
//│ (int -> 'a -> Option['b]) -> List['a] -> Option['b]

rec def find_all p = fun x -> match x with
  | Nil -> Nil
  | Cons(x, l) -> if p x then Cons(x, find_all p l) else find_all p l
//│ ('A -> bool) -> List['A] -> List['A]
//│   <:  find_all:
//│ ('a -> bool) -> List['a] -> List['a]

def filter = find_all
//│ ('a -> bool) -> List['a] -> List['a]
//│   <:  filter:
//│ ('a -> bool) -> List['a] -> List['a]

// overloaded with filter in OCaml
rec def filteri_aux p i = fun x -> match x with
  | Nil -> Nil
  | Cons(x, l) ->
      let i' = i + 1 in
      if p i x then Cons(x, filteri_aux p i' l) else filteri_aux p i' l
//│ filteri_aux: (int -> 'A -> bool) -> int -> List['A] -> List['A]

def filteri p l = filteri_aux p 0 l
//│ (int -> 'A -> bool) -> List['A] -> List['A]
//│   <:  filteri:
//│ (int -> 'a -> bool) -> List['a] -> List['a]

rec def filter_map f = fun x -> match x with
  | Nil -> Nil
  | Cons(x, l) ->
      match f x with
      | None -> filter_map f l
      | Some(v) -> Cons(v, filter_map f l)
//│ ('A -> Option['a]) -> List['A] -> List['a]
//│   <:  filter_map:
//│ ('a -> Option['b]) -> List['a] -> List['b]

def concat_map = let rec r = {
    concat_map = fun f -> fun x -> match x with
      | Nil -> Nil
      | Cons(x, xs) -> r.prepend_concat_map (f x) f xs,
    prepend_concat_map = fun ys -> fun f -> fun xs ->
      match ys with
      | Nil -> r.concat_map f xs
      | Cons(y, ys) -> r.prepend_concat_map ys f xs
  } in r.concat_map
//│ ('A -> List[?]) -> List['A] -> 'a
//│   where
//│     'a :> List[nothing]
//│   <:  concat_map:
//│ ('a -> List['b]) -> List['a] -> List['b]

def fold_left_map f accu l =
  let rec aux accu l_accu = fun x -> match x with
    | Nil -> (accu, rev l_accu)
    | Cons(x, l) -> 
        match f accu x with (accu, x) ->
        aux accu (Cons(x, l_accu)) l in
  aux accu Nil l
//│ ('a -> 'A -> ('a, 'b,)) -> 'a -> List['A] -> ('a, List['b],)
//│   <:  fold_left_map:
//│ ('acc -> 'a -> ('acc, 'b,)) -> 'acc -> List['a] -> ('acc, List['b],)

def partition p l =
  let rec part yes no = fun x -> match x with
  | Nil -> (rev yes, rev no)
  | Cons(x, l) -> if p x then part (Cons(x, yes)) no l else part yes (Cons(x, no)) l in
  part Nil Nil l
//│ ('A -> bool) -> List['A] -> (List['A], List['A],)
//│   <:  partition:
//│ ('a -> bool) -> List['a] -> (List['a], List['a],)

def partition_map p l =
  let rec part left right = fun x -> match x with
  | Nil -> (rev left, rev right)
  | Cons(x, l) ->
      match p x with
        | Left(v) -> part (Cons(v, left)) right l
        | Right(v) -> part left (Cons(v, right)) l
  in
  part Nil Nil l
//│ ('A -> Either['A0, 'B]) -> List['A] -> (List['A0], List['B],)
//│   <:  partition_map:
//│ ('a -> Either['b, 'c]) -> List['a] -> (List['b], List['c],)

rec def split = fun x -> match x with
    Nil -> (Nil, Nil)
  | Cons((x, y), l) ->
      match split l with (rx, ry) -> (Cons(x, rx), Cons(y, ry))
//│ List[('a, 'b,)] -> (List['a], List['b],)
//│   <:  split:
//│ List[('a, 'b,)] -> (List['a], List['b],)

rec def combine l1 l2 =
  match (l1, l2) with
    (Nil, Nil) -> Nil
  | (Cons(a1, l1), Cons(a2, l2)) -> Cons((a1, a2), combine l1 l2)
  | (_, _) -> invalid_arg "List.combine"
//│ List['A] -> List['A0] -> List[('A, 'A0,)]
//│   <:  combine:
//│ List['a] -> List['b] -> List[('a, 'b,)]

rec def merge cmp l1 l2 =
  match (l1, l2) with
  | (Nil, l2) -> l2
  | (l1, Nil) -> l1
  | (Cons(h1, t1), Cons(h2, t2)) ->
      if cmp h1 h2 <= 0
      then Cons(h1, merge cmp t1 l2)
      else Cons(h2, merge cmp l1 t2)
//│ ('A -> 'A0 -> number) -> List['A & 'a] -> List['A0 & 'a] -> List['A | 'A0 | 'a]
//│   <:  merge:
//│ ('a -> 'a -> int) -> List['a] -> List['a] -> List['a]

def stable_sort cmp l =
  let rec rev_merge l1 l2 accu =
    match (l1, l2) with
    | (Nil, l2) -> rev_append l2 accu
    | (l1, Nil) -> rev_append l1 accu
    | (Cons(h1, t1), Cons(h2, t2)) ->
        if cmp h1 h2 <= 0
        then rev_merge t1 l2 (Cons(h1, accu))
        else rev_merge l1 t2 (Cons(h2, accu))
  in
  let rec rev_merge_rev l1 l2 accu =
    match (l1, l2) with
    | (Nil, l2) -> rev_append l2 accu
    | (l1, Nil) -> rev_append l1 accu
    | (Cons(h1, t1), Cons(h2, t2)) ->
        if cmp h1 h2 > 0
        then rev_merge_rev t1 l2 (Cons(h1, accu))
        else rev_merge_rev l1 t2 (Cons(h2, accu))
  in
  let rec r = {
  sort = fun n -> fun l ->
    match (n, l) with
    | (2, Cons(x1, Cons(x2, tl))) ->
        let s = if cmp x1 x2 <= 0 then Cons(x1, Cons(x2, Nil)) else Cons(x2, Cons(x1, Nil)) in
        (s, tl)
    | (3, Cons(x1, Cons(x2, Cons(x3, tl)))) ->
        let s =
          if cmp x1 x2 <= 0 then
            if cmp x2 x3 <= 0 then Cons(x1, Cons(x2, Cons(x3, Nil)))
            else if cmp x1 x3 <= 0 then Cons(x1, Cons(x3, Cons(x2, Nil)))
            else Cons(x3, Cons(x1, Cons(x2, Nil)))
          else if cmp x1 x3 <= 0 then Cons(x2, Cons(x1, Cons(x3, Nil)))
          else if cmp x2 x3 <= 0 then Cons(x2, Cons(x3, Cons(x1, Nil)))
          else Cons(x3, Cons(x2, Cons(x1, Nil)))
        in
        (s, tl)
    | (n, l) ->
      let n1 = asr n 1 in
      let n2 = n - n1 in
      match r.rev_sort n1 l with (s1, l2) ->
      match r.rev_sort n2 l2 with (s2, tl) ->
      (rev_merge_rev s1 s2 Nil, tl),
  rev_sort = fun n -> fun l ->
    match (n, l) with
    | (2, Cons(x1, Cons(x2, tl))) ->
        let s = if cmp x1 x2 > 0 then Cons(x1, Cons(x2, Nil)) else Cons(x2, Cons(x1, Nil)) in
        (s, tl)
    | (3, Cons(x1, Cons(x2, Cons(x3, tl)))) ->
        let s =
          if cmp x1 x2 > 0 then
            if cmp x2 x3 > 0 then Cons(x1, Cons(x2, Cons(x3, Nil)))
            else if cmp x1 x3 > 0 then Cons(x1, Cons(x3, Cons(x2, Nil)))
            else Cons(x3, Cons(x1, Cons(x2, Nil)))
          else if cmp x1 x3 > 0 then Cons(x2, Cons(x1, Cons(x3, Nil)))
          else if cmp x2 x3 > 0 then Cons(x2, Cons(x3, Cons(x1, Nil)))
          else Cons(x3, Cons(x2, Cons(x1, Nil)))
        in
        (s, tl)
    | (n, l) ->
      let n1 = asr n 1 in
      let n2 = n - n1 in
      match r.sort n1 l with (s1, l2) ->
      match r.sort n2 l2 with (s2, tl) ->
      (rev_merge s1 s2 Nil, tl)
  }
  in let sort = r.sort
  in let rev_sort = r.rev_sort
  in
  let len = length l in
  if len < 2 then l else fst (sort len l)
//│ ('A -> 'A -> number) -> (List['A & 'A0] & 'a & List['A & 'A1]) -> (List['A1 | 'A0] | 'a)
//│   <:  stable_sort:
//│ ('a -> 'a -> int) -> List['a] -> List['a]

def sort = stable_sort
def fast_sort = stable_sort
//│ ('a -> 'a -> int) -> List['a] -> List['a]
//│   <:  sort:
//│ ('a -> 'a -> int) -> List['a] -> List['a]
//│ ('a -> 'a -> int) -> List['a] -> List['a]
//│   <:  fast_sort:
//│ ('a -> 'a -> int) -> List['a] -> List['a]

def sort_uniq cmp l =
  let rec rev_merge l1 l2 accu =
    match (l1, l2) with
    | (Nil, l2) -> rev_append l2 accu
    | (l1, Nil) -> rev_append l1 accu
    | (Cons(h1, t1), Cons(h2, t2)) ->
        let c = cmp h1 h2 in
        if c == 0 then rev_merge t1 t2 (Cons(h1, accu))
        else if c < 0
        then rev_merge t1 l2 (Cons(h1, accu))
        else rev_merge l1 t2 (Cons(h2, accu))
  in
  let rec rev_merge_rev l1 l2 accu =
    match (l1, l2) with
    | (Nil, l2) -> rev_append l2 accu
    | (l1, Nil) -> rev_append l1 accu
    | (Cons(h1, t1), Cons(h2, t2)) ->
        let c = cmp h1 h2 in
        if c == 0 then rev_merge_rev t1 t2 (Cons(h1, accu))
        else if c > 0
        then rev_merge_rev t1 l2 (Cons(h1, accu))
        else rev_merge_rev l1 t2 (Cons(h2, accu))
  in
  let rec r = {
  sort = fun n -> fun l ->
    match (n, l) with
    | (2, Cons(x1, Cons(x2, tl))) ->
        let s =
          let c = cmp x1 x2 in
          if c == 0 then Cons(x1, Nil) else if c < 0 then Cons(x1, Cons(x2, Nil)) else Cons(x2, Cons(x1, Nil)) in
        (s, tl)
    | (3, Cons(x1, Cons(x2, Cons(x3, tl)))) ->
        let s =
          let c = cmp x1 x2 in
          if c == 0 then
            let c = cmp x2 x3 in
            if c == 0 then Cons(x2, Nil) else if c < 0 then Cons(x2, Cons(x3, Nil)) else Cons(x3, Cons(x2, Nil))
          else if c < 0 then
            let c = cmp x2 x3 in
            if c == 0 then Cons(x1, Cons(x2, Nil))
            else if c < 0 then Cons(x1, Cons(x2, Cons(x3, Nil)))
            else
              let c = cmp x1 x3 in
              if c == 0 then Cons(x1, Cons(x2, Nil))
              else if c < 0 then Cons(x1, Cons(x3, Cons(x2, Nil)))
              else Cons(x3, Cons(x1, Cons(x2, Nil)))
          else
            let c = cmp x1 x3 in
            if c == 0 then Cons(x2, Cons(x1, Nil))
            else if c < 0 then Cons(x2, Cons(x1, Cons(x3, Nil)))
            else
              let c = cmp x2 x3 in
              if c == 0 then Cons(x2, Cons(x1, Nil))
              else if c < 0 then Cons(x2, Cons(x3, Cons(x1, Nil)))
              else Cons(x3, Cons(x2, Cons(x1, Nil)))
        in
        (s, tl)
    | (n, l) ->
      let n1 = asr n 1 in
      let n2 = n - n1 in
      match r.rev_sort n1 l with (s1, l2) ->
      match r.rev_sort n2 l2 with (s2, tl) ->
      (rev_merge_rev s1 s2 Nil, tl),
  rev_sort = fun n -> fun l ->
    match (n, l) with
    | (2, Cons(x1, Cons(x2, tl))) ->
        let s =
          let c = cmp x1 x2 in
          if c == 0 then Cons(x1, Nil) else if c > 0 then Cons(x1, Cons(x2, Nil)) else Cons(x2, Cons(x1, Nil)) in
        (s, tl)
    | (3, Cons(x1, Cons(x2, Cons(x3, tl)))) ->
        let s =
          let c = cmp x1 x2 in
          if c == 0 then
            let c = cmp x2 x3 in
            if c == 0 then Cons(x2, Nil) else if c > 0 then Cons(x2, Cons(x3, Nil)) else Cons(x3, Cons(x2, Nil))
          else if c > 0 then
            let c = cmp x2 x3 in
            if c == 0 then Cons(x1, Cons(x2, Nil))
            else if c > 0 then Cons(x1, Cons(x2, Cons(x3, Nil)))
            else
              let c = cmp x1 x3 in
              if c == 0 then Cons(x1, Cons(x2, Nil))
              else if c > 0 then Cons(x1, Cons(x3, Cons(x2, Nil)))
              else Cons(x3, Cons(x1, Cons(x2, Nil)))
          else
            let c = cmp x1 x3 in
            if c == 0 then Cons(x2, Cons(x1, Nil))
            else if c > 0 then Cons(x2, Cons(x1, Cons(x3, Nil)))
            else
              let c = cmp x2 x3 in
              if c == 0 then Cons(x2, Cons(x1, Nil))
              else if c > 0 then Cons(x2, Cons(x3, Cons(x1, Nil)))
              else Cons(x3, Cons(x2, Cons(x1, Nil)))
        in
        (s, tl)
    | (n, l) ->
      let n1 = asr n 1 in
      let n2 = n - n1 in
      match r.sort n1 l with (s1, l2) ->
      match r.sort n2 l2 with (s2, tl) ->
      (rev_merge s1 s2 Nil, tl)
  }
  in let sort = r.sort
  in let rev_sort = r.rev_sort
  in
  let len = length l in
  if len < 2 then l else fst (sort len l)
//│ ('A -> 'A -> number) -> (List['A & 'A0] & 'a & List['A & 'A1]) -> (List['A1 | 'A0] | 'a)
//│   <:  sort_uniq:
//│ ('a -> 'a -> int) -> List['a] -> List['a]

rec def compare_lengths l1 l2 =
  match (l1, l2) with
  | (Nil, Nil) -> 0
  | (Nil, _) -> negate 1
  | (_, Nil) -> 1
  | (Cons(_, l1), Cons(_, l2)) -> compare_lengths l1 l2
//│ List[?] -> List[?] -> int
//│   <:  compare_lengths:
//│ List[?] -> List[?] -> int

rec def compare_length_with l n =
  match l with
  | Nil ->
    if n == 0 then 0 else
      if n > 0 then negate 1 else 1
  | Cons(_, l) ->
    if n <= 0 then 1 else
      compare_length_with l (n-1)
//│ List[?] -> int -> int
//│   <:  compare_length_with:
//│ List[?] -> int -> int

def is_empty = fun x -> match x with
  | Nil -> true
  | Cons(_, _) -> false
//│ List[?] -> Bool
//│   <:  is_empty:
//│ List[?] -> bool

rec def equal eq l1 l2 =
  match (l1, l2) with
  | (Nil, Nil) -> true
  | (Nil, Cons(_, _)) -> false
  | (Cons(_, _), Nil) -> false
  | (Cons(a1, l1), Cons(a2, l2)) -> eq a1 a2 && equal eq l1 l2
//│ ('A -> 'A0 -> bool) -> List['A] -> List['A0] -> (bool | false)
//│   <:  equal:
//│ ('a -> 'a -> bool) -> List['a] -> List['a] -> bool

rec def compare cmp l1 l2 =
  match (l1, l2) with
  | (Nil, Nil) -> 0
  | (Nil, Cons(_, _)) -> negate 1
  | (Cons(_, _), Nil) -> 1
  | (Cons(a1, l1), Cons(a2, l2)) ->
    let c = cmp a1 a2 in
    if c <> 0 then c
    else compare cmp l1 l2
//│ ('A -> 'A0 -> (number & 'a)) -> List['A] -> List['A0] -> (int | 'a)
//│   <:  compare:
//│ ('a -> 'a -> int) -> List['a] -> List['a] -> int

def to_seq l =
  let rec aux l Unit = match l with
    | Nil -> SeqNil
    | Cons(x, tail) -> SeqCons(x, aux tail)
  in
  aux l
//│ List['a] -> unit -> Node['a]
//│   <:  to_seq:
//│ List['a] -> Seq['a]

rec def of_seq seq =
  match seq Unit with
  | SeqNil -> Nil
  | SeqCons(x1, seq) ->
      match seq Unit with
      | SeqNil -> Cons(x1, Nil)
      | SeqCons(x2, seq) -> Cons(x1, Cons(x2, of_seq seq))
//│ (unit -> Node['A]) -> List['A]
//│   <:  of_seq:
//│ Seq['a] -> List['a]


