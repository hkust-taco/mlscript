:NoRecursiveTypes
:NoConstrainedTypes
:DontDistributeForalls


// * Negation
type Not[A] = A -> nothing
//│ Defined type alias Not[-A]

// * Disjunction
class Left: { v: anything }
class Right: { v: anything }
type Either[A, B] = Left & { v: A } | Right & { v: B }
//│ Defined class Left
//│ Defined class Right
//│ Defined type alias Either[+A, +B]

// * Type of: excluded middle (EM)
type EM = forall 'a. Either['a, Not['a]]
//│ Defined type alias EM

// * Type of double negation elimination (DNE)
type DNE = forall 'a. Not[Not['a]] -> 'a
//│ Defined type alias DNE


// * Proof that EN implies DNE
// * In explicit type parameters syntax:
// *   fun (em: forall[A]. Either[A, Not[A]]) ->
// *      forall[A]. fun (nna: Not[Not[A]]) -> (em[A] match Left a -> a; Right na -> nna na)
def EM_to_DNE em nna =
  case em of Left -> em.v, Right -> nna em.v
//│ EM_to_DNE: ((Left with {v: 'v}) | (Right with {v: 'v0})) -> (forall 'a. ('v0 -> 'a) -> ('v | 'a))
//│          = [Function: EM_to_DNE]

// * This requires distributivity or retyping with constrained types
:e
EM_to_DNE: EM -> DNE
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.38: 	EM_to_DNE: EM -> DNE
//│ ║        	^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.23: 	type DNE = forall 'a. Not[Not['a]] -> 'a
//│ ║        	                              ^^
//│ ╟── back into type variable `'a`
//│ ║  l.23: 	type DNE = forall 'a. Not[Not['a]] -> 'a
//│ ║        	                                      ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this field selection:
//│ ║  l.32: 	  case em of Left -> em.v, Right -> nna em.v
//│ ║        	                                        ^^^^
//│ ╟── • this reference:
//│ ║  l.38: 	EM_to_DNE: EM -> DNE
//│ ║        	^^^^^^^^^
//│ ╟── • this applied expression:
//│ ║  l.32: 	  case em of Left -> em.v, Right -> nna em.v
//│ ║        	                                    ^^^
//│ ╟── • this field selection:
//│ ║  l.32: 	  case em of Left -> em.v, Right -> nna em.v
//│ ╙──      	                     ^^^^
//│ res: EM -> DNE
//│    = [Function: EM_to_DNE]


// * Proof that EN implies DNE, annotated
def EM_to_DNE_A0 (em: EM) nna =
  case em of Left -> em.v, Right -> nna em.v
//│ EM_to_DNE_A0: EM -> (forall 'v. (Not['v] -> 'v) -> 'v)
//│             = [Function: EM_to_DNE_A0]

EM_to_DNE_A0: EM -> DNE
//│ res: EM -> DNE
//│    = [Function: EM_to_DNE_A0]


// * This one still requires distributivity or constrained types

def EM_to_DNE_A1 em =
  let poly (nna: Not[Not['A]]) = case em of Left -> em.v, Right -> nna em.v
  in poly
//│ EM_to_DNE_A1: ((Left with {v: 'v}) | Right & {v: Not['A]}) -> Not[Not['A]] -> 'v
//│             = [Function: EM_to_DNE_A1]

:e
EM_to_DNE_A1: EM -> DNE
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.85: 	EM_to_DNE_A1: EM -> DNE
//│ ║        	^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.23: 	type DNE = forall 'a. Not[Not['a]] -> 'a
//│ ║        	                              ^^
//│ ╟── back into type variable `'a`
//│ ║  l.23: 	type DNE = forall 'a. Not[Not['a]] -> 'a
//│ ║        	                                      ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.80: 	  in poly
//│ ║        	     ^^^^
//│ ╟── • this reference:
//│ ║  l.85: 	EM_to_DNE_A1: EM -> DNE
//│ ║        	^^^^^^^^^^^^
//│ ╟── • this field selection:
//│ ║  l.79: 	  let poly (nna: Not[Not['A]]) = case em of Left -> em.v, Right -> nna em.v
//│ ╙──      	                                                    ^^^^
//│ res: EM -> DNE
//│    = [Function: EM_to_DNE_A1]


// * Proof that DNE implies EM
// * In explicit type parameters syntax:
// *   (dne: forall[A]. Not[Not[A]] -> A) -> forall[A].
// *      dne[Either[A, Not[A]]] (fun (not_em: Not[Either[A, Not[A]]]) ->
// *        not_em (Right (fun a -> n_em (Left a)))
// *      )
def DNE_to_EM dne =
  dne (fun not_em -> not_em (Right { v = fun a -> not_em (Left { v = a }) }))
//│ DNE_to_EM: ((forall 'v 'a 'b. ((Left with {v: 'v}) -> 'a & (Right & {v: 'v -> 'a}) -> 'b) -> 'b) -> 'c) -> 'c
//│          = [Function: DNE_to_EM]

// * Requires distributivity because we currently don't generalize function bodies
:e
DNE_to_EM: DNE -> EM
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.122: 	DNE_to_EM: DNE -> EM
//│ ║         	^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.19: 	type EM = forall 'a. Either['a, Not['a]]
//│ ║        	                                    ^^
//│ ╟── back into type variable `'a0`
//│ ║  l.19: 	type EM = forall 'a. Either['a, Not['a]]
//│ ║        	                 ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.122: 	DNE_to_EM: DNE -> EM
//│ ║         	^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.116: 	  dne (fun not_em -> not_em (Right { v = fun a -> not_em (Left { v = a }) }))
//│ ╙──       	                                                          ^^^^^^^^^^^^^^
//│ res: DNE -> EM
//│    = [Function: DNE_to_EM]

def DNE_to_EM_let dne =
  let poly = dne (fun not_em -> not_em (Right { v = fun a -> not_em (Left { v = a }) }))
  in poly
//│ DNE_to_EM_let: ((forall 'v 'a 'b. ((Left with {v: 'v}) -> 'a & (Right & {v: 'v -> 'a}) -> 'b) -> 'b) -> 'c) -> 'c
//│              = [Function: DNE_to_EM_let]

// * This one used to work because we used let polymorphism
// * Stopped working after "sound extrusion", but works with distrib (see below)
:e
DNE_to_EM_let: DNE -> EM
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.151: 	DNE_to_EM_let: DNE -> EM
//│ ║         	^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.19: 	type EM = forall 'a. Either['a, Not['a]]
//│ ║        	                                    ^^
//│ ╟── back into type variable `'a`
//│ ║  l.19: 	type EM = forall 'a. Either['a, Not['a]]
//│ ║        	                 ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.143: 	  let poly = dne (fun not_em -> not_em (Right { v = fun a -> not_em (Left { v = a }) }))
//│ ║         	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.144: 	  in poly
//│ ║         	     ^^^^
//│ ╟── • this reference:
//│ ║  l.151: 	DNE_to_EM_let: DNE -> EM
//│ ╙──       	^^^^^^^^^^^^^
//│ res: DNE -> EM
//│    = [Function: DNE_to_EM_let]


// * Note: this doesn't help

def DNE_to_EM_A0 (dne: DNE) =
  dne (fun not_em -> not_em (Right { v = fun a -> not_em (Left { v = a }) }))
//│ DNE_to_EM_A0: DNE -> ((Left with {v: 'v}) | Right & {v: 'v -> nothing})
//│             = [Function: DNE_to_EM_A0]

:e
DNE_to_EM_A0: DNE -> EM
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.183: 	DNE_to_EM_A0: DNE -> EM
//│ ║         	^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.19: 	type EM = forall 'a. Either['a, Not['a]]
//│ ║        	                                    ^^
//│ ╟── back into type variable `'a0`
//│ ║  l.19: 	type EM = forall 'a. Either['a, Not['a]]
//│ ║        	                 ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.183: 	DNE_to_EM_A0: DNE -> EM
//│ ║         	^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.178: 	  dne (fun not_em -> not_em (Right { v = fun a -> not_em (Left { v = a }) }))
//│ ╙──       	                                                          ^^^^^^^^^^^^^^
//│ res: DNE -> EM
//│    = [Function: DNE_to_EM_A0]


// * Note: this doesn't help either

type EM_of[A] = Either[A, Not[A]]
//│ Defined type alias EM_of[=A]

def DNE_to_EM_A1 dne =
  (dne: Not[Not[EM_of['a]]] -> EM_of['a]) (fun not_em -> not_em (Right { v = fun a -> not_em (Left { v = a }) }))
//│ DNE_to_EM_A1: (Not[Not[EM_of['a]]] -> EM_of['a]) -> EM_of['a]
//│             = [Function: DNE_to_EM_A1]

:e
DNE_to_EM_A1: DNE -> EM
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.215: 	DNE_to_EM_A1: DNE -> EM
//│ ║         	^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.19: 	type EM = forall 'a. Either['a, Not['a]]
//│ ║        	                                    ^^
//│ ╟── back into type variable `'a0`
//│ ║  l.210: 	  (dne: Not[Not[EM_of['a]]] -> EM_of['a]) (fun not_em -> not_em (Right { v = fun a -> not_em (Left { v = a }) }))
//│ ║         	                                     ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.210: 	  (dne: Not[Not[EM_of['a]]] -> EM_of['a]) (fun not_em -> not_em (Right { v = fun a -> not_em (Left { v = a }) }))
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.215: 	DNE_to_EM_A1: DNE -> EM
//│ ╙──       	^^^^^^^^^^^^
//│ res: DNE -> EM
//│    = [Function: DNE_to_EM_A1]


// * Note: this doesn't help either

def helper: Not[Either['A, Not['A]]] -> 'A -> nothing
def helper not_em = fun a -> not_em (Left { v = a })
//│ helper: Not[Either['A, Not['A]]] -> 'A -> nothing
//│       = <missing implementation>
//│ ((Left with {v: 'v}) -> 'a) -> 'v -> 'a
//│   <:  helper:
//│ Not[Either['A, Not['A]]] -> 'A -> nothing
//│       = [Function: helper]

def DNE_to_EM_A2 (dne: DNE) =
  dne (fun (not_em: Not[Either['A, Not['A]]]) -> not_em (Right { v = helper not_em }))
//│ DNE_to_EM_A2: DNE -> Either['A, Not['A]]
//│             = [Function: DNE_to_EM_A2]

// * ^ Note how this is not `DNE -> forall 'A. (Either['A, Not['A]] | 'a)`?

:e
DNE_to_EM_A2: DNE -> EM
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.255: 	DNE_to_EM_A2: DNE -> EM
//│ ║         	^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.19: 	type EM = forall 'a. Either['a, Not['a]]
//│ ║        	                                    ^^
//│ ╟── back into type variable `'a0`
//│ ║  l.248: 	  dne (fun (not_em: Not[Either['A, Not['A]]]) -> not_em (Right { v = helper not_em }))
//│ ║         	                                       ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.248: 	  dne (fun (not_em: Not[Either['A, Not['A]]]) -> not_em (Right { v = helper not_em }))
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.255: 	DNE_to_EM_A2: DNE -> EM
//│ ╙──       	^^^^^^^^^^^^
//│ res: DNE -> EM
//│    = [Function: DNE_to_EM_A2]



// * === Usages ===


:NoJS

def dne: DNE
def em: EM
//│ dne: DNE
//│ em: EM


EM_to_DNE em
//│ res: (Not['v] -> 'a) -> ('v | 'a)

DNE_to_EM dne
//│ res: (Left with {v: 'v}) | Right & {v: 'v -> nothing}


EM_to_DNE_A0 em
//│ res: (Not['v] -> 'v) -> 'v

EM_to_DNE_A1 em
//│ res: Not[Not['v]] -> 'v


DNE_to_EM_A0 dne
//│ res: (Left with {v: 'v}) | Right & {v: 'v -> nothing}

DNE_to_EM_A1 dne
//│ res: EM_of['a]

DNE_to_EM_A2 dne
//│ res: Either['A, Not['A]]


def to_DNE: DNE
to_DNE nna = case em of Left -> em.v, Right -> nna em.v
//│ to_DNE: DNE
//│ (Not['v] -> 'v) -> 'v
//│   <:  to_DNE:
//│ DNE

def to_EM: EM
to_EM = dne (fun not_em -> not_em (Right { v = fun a -> not_em (Left { v = a }) }))
//│ to_EM: EM
//│ (Left with {v: 'v}) | Right & {v: 'v -> nothing}
//│   <:  to_EM:
//│ EM



// * === With Distributivity ===

:DistributeForalls


EM_to_DNE: EM -> DNE
DNE_to_EM: DNE -> EM
DNE_to_EM_let: DNE -> EM
//│ res: EM -> DNE
//│ res: DNE -> EM
//│ res: DNE -> EM

EM_to_DNE_A0: EM -> DNE
DNE_to_EM_A0: DNE -> EM
//│ res: EM -> DNE
//│ res: DNE -> EM

EM_to_DNE_A1: EM -> DNE
//│ res: EM -> DNE

DNE_to_EM_A1: DNE -> EM
//│ res: DNE -> EM


EM_to_DNE em
//│ res: (Not['v] -> 'a) -> ('v | 'a)

DNE_to_EM dne
//│ res: (Left with {v: 'v}) | Right & {v: 'v -> nothing}




// * === With Constrained Types ===

:DontDistributeForalls
:ConstrainedTypes


// * We still need to retype these definitions

:e
EM_to_DNE: EM -> DNE
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.370: 	EM_to_DNE: EM -> DNE
//│ ║         	^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.23: 	type DNE = forall 'a. Not[Not['a]] -> 'a
//│ ║        	                              ^^
//│ ╟── back into type variable `'a`
//│ ║  l.32: 	  case em of Left -> em.v, Right -> nna em.v
//│ ║        	                     ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this field selection:
//│ ║  l.32: 	  case em of Left -> em.v, Right -> nna em.v
//│ ║        	                                        ^^^^
//│ ╟── • this reference:
//│ ║  l.370: 	EM_to_DNE: EM -> DNE
//│ ║         	^^^^^^^^^
//│ ╟── • this field selection:
//│ ║  l.32: 	  case em of Left -> em.v, Right -> nna em.v
//│ ║        	                     ^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.19: 	type EM = forall 'a. Either['a, Not['a]]
//│ ╙──      	                                    ^^
//│ res: EM -> DNE

:e
EM_to_DNE: EM -> DNE
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.396: 	EM_to_DNE: EM -> DNE
//│ ║         	^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.23: 	type DNE = forall 'a. Not[Not['a]] -> 'a
//│ ║        	                              ^^
//│ ╟── back into type variable `'a`
//│ ║  l.32: 	  case em of Left -> em.v, Right -> nna em.v
//│ ║        	                     ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this field selection:
//│ ║  l.32: 	  case em of Left -> em.v, Right -> nna em.v
//│ ║        	                                        ^^^^
//│ ╟── • this reference:
//│ ║  l.396: 	EM_to_DNE: EM -> DNE
//│ ║         	^^^^^^^^^
//│ ╟── • this field selection:
//│ ║  l.32: 	  case em of Left -> em.v, Right -> nna em.v
//│ ║        	                     ^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.19: 	type EM = forall 'a. Either['a, Not['a]]
//│ ╙──      	                                    ^^
//│ res: EM -> DNE


// * Now retyping them

def EM_to_DNE em nna =
  case em of Left -> em.v, Right -> nna em.v
//│ EM_to_DNE: 'a -> (forall 'v 'v0. ('v0 -> 'v) -> 'v
//│   where
//│     'a <: (Left with {v: 'v}) | (Right with {v: 'v0}))

:e // * Still needs distrib! (after "sound extrusion")
EM_to_DNE: EM -> DNE
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.431: 	EM_to_DNE: EM -> DNE
//│ ║         	^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.23: 	type DNE = forall 'a. Not[Not['a]] -> 'a
//│ ║        	                              ^^
//│ ╟── back into type variable `'a`
//│ ║  l.23: 	type DNE = forall 'a. Not[Not['a]] -> 'a
//│ ║        	                                      ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.424: 	def EM_to_DNE em nna =
//│ ║         	                 ^^^^^
//│ ║  l.425: 	  case em of Left -> em.v, Right -> nna em.v
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.431: 	EM_to_DNE: EM -> DNE
//│ ║         	^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.19: 	type EM = forall 'a. Either['a, Not['a]]
//│ ╙──      	                                    ^^
//│ res: EM -> DNE

def DNE_to_EM dne =
  dne (fun not_em -> not_em (Right { v = fun a -> not_em (Left { v = a }) }))
//│ DNE_to_EM: ((forall 'a 'b. ((Right & {v: forall 'v 'c. 'v -> 'c
//│   where
//│     'b <: (Left with {v: 'v}) -> 'c}) -> 'a & 'b) -> 'a) -> 'd) -> 'd

:e // * Still needs distrib! (after "sound extrusion")
DNE_to_EM: DNE -> EM
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.462: 	DNE_to_EM: DNE -> EM
//│ ║         	^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.19: 	type EM = forall 'a. Either['a, Not['a]]
//│ ║        	                                    ^^
//│ ╟── back into type variable `'a0`
//│ ║  l.456: 	  dne (fun not_em -> not_em (Right { v = fun a -> not_em (Left { v = a }) }))
//│ ║         	                                                                     ^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.462: 	DNE_to_EM: DNE -> EM
//│ ║         	^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.456: 	  dne (fun not_em -> not_em (Right { v = fun a -> not_em (Left { v = a }) }))
//│ ╙──       	                                                          ^^^^^^^^^^^^^^
//│ res: DNE -> EM

// * They work with distrib:
:DistributeForalls
EM_to_DNE: EM -> DNE
DNE_to_EM: DNE -> EM
//│ res: EM -> DNE
//│ res: DNE -> EM
:DontDistributeForalls



// * === === ===



// * [Some old notes, using obsolete notation:]
// Type inference for:  DNE_to_EM dne
//    'fun (('a -> bot) -> bot) -> 'a  <:  (''fun ((Left ''a -> ''b) & (Right (''a -> ''b) -> ''c)) -> ''c) -> ?d
//    ((?a -> bot) -> bot) -> ?a  <:  (''fun ((Left ''a -> ''b) & (Right (''a -> ''b) -> ''c)) -> ''c) -> ?d)
//    ?a  <:  ?d  AND  ''fun ((Left ''a -> ''b) & (Right (''a -> ''b) -> ''c)) -> ''c  <:  ((?a -> bot) -> bot)
//    ((Left ?a2 -> ?b) & (Right (?a2 -> ?b) -> ?c)) -> ?c  <:  ((?a2 -> bot) -> bot)
//    ?c  <:  bot  AND  (?a -> bot)  <:  (Left ?a2 -> ?b) & (Right (?a2 -> ?b) -> ?c)
//    (?a -> bot)  <:  (Left ?a2 -> ?b)  AND  (?a -> bot)  <:  (Right (?a2 -> ?b) -> ?c)
//    Left ?a2  <:  ?a  AND  Right (?a2 -> ?b)  <:  ?a
// Result (generalized):
//    Left 'a | Right ('a -> Bot)
// i.e., the excluded middle for any 'a !!


