:NoRecursiveTypes


class Ls[A]
  method HeadTail: (A, Ls[A]) | undefined
//│ Defined class Ls[+A]
//│ Declared Ls.HeadTail: Ls['A] -> (undefined | ('A, Ls['A],))

// * Note that a more structural type such as this will raise cycle errors due to `:NoRecursiveTypes`
// class Ls[A]: { head: A | undefined; tail: Ls[A] | undefined }

class Nil: Ls[nothing]
  method HeadTail = undefined
//│ Defined class Nil
//│ Defined Nil.HeadTail: Nil -> undefined

class Cons[A]: Ls[A] & { head: A; tail: Ls[A] }
  method HeadTail = (this.head, this.tail)
//│ Defined class Cons[+A]
//│ Defined Cons.HeadTail: Cons['A] -> ('A, Ls['A],)

def nil: Ls['a]
def cons: ('a, Ls['a]) -> Ls['a]
def single: 'a -> Ls['a]
//│ nil: Ls[nothing]
//│    = <missing implementation>
//│ cons: ('a, Ls['a],) -> Ls['a]
//│     = <missing implementation>
//│ single: 'a -> Ls['a]
//│       = <missing implementation>

nil = Nil {}
cons (head, tail) = Cons { head; tail }
//│ Nil
//│   <:  nil:
//│ Ls[nothing]
//│    = Nil {}
//│ ('head & 'A, Ls['A] & 'tail,) -> (Cons['A] with {head: 'head, tail: 'tail})
//│   <:  cons:
//│ ('a, Ls['a],) -> Ls['a]
//│     = [Function: cons]



// * Random minimized trials:


def build0 (g: forall 'b. ('a -> 'b) -> 'b) = g single
//│ build0: (forall 'b. ('a -> 'b) -> 'b) -> Ls['a]
//│       = <no result>
//│         single is not implemented

build0 (fun s -> s 1)
//│ res: Ls[1]
//│    = <no result>
//│      build0 and single are not implemented

res: Ls[int]
//│ res: Ls[int]
//│    = undefined


def build0 (g: forall 'b. ('a -> 'b) -> 'b) = g (fun x -> single((x, x)))
//│ build0: (forall 'b. ('a -> 'b) -> 'b) -> Ls[('a, 'a,)]
//│       = <no result>
//│         single is not implemented

def build0 (g: forall 'b. ('a -> 'a -> 'b) -> 'b) = g (fun x -> fun y -> single((x, y)))
//│ build0: (forall 'b. ('a -> 'a -> 'b) -> 'b) -> Ls[('a, 'a,)]
//│       = <no result>
//│         single is not implemented

:e // * This is recursive because we place the list-typed value inside a new list along with the head
def build0 (g: forall 'b. ('a -> 'b -> 'b) -> 'b) = g (fun x -> fun y -> single((x, y)))
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> Ls[(?, 'a,)]
//│ ╙──
//│ build0: (forall 'b. ('a -> 'b -> 'b) -> 'b) -> 'c
//│   where
//│     'c :> Ls[('a, 'c,)]
//│       = <no result>
//│         single is not implemented

def build0 (g: forall 'b. (('a, 'b) -> 'b) -> 'b) = g cons
//│ build0: (forall 'b. (('a, 'b,) -> 'b) -> 'b) -> Ls['a]
//│       = [Function: build01]

def build0 (g: forall 'b. (('a, 'b) -> 'b) -> 'b) = g (fun (x, xs) -> cons (x, xs))
//│ build0: (forall 'b. (('a, 'b,) -> 'b) -> 'b) -> Ls['a]
//│       = [Function: build02]

def g: forall 'b. (('a, 'b) -> 'b) -> 'b
//│ g: ((nothing, 'b,) -> 'b) -> 'b
//│  = <missing implementation>

g (fun (x, xs) -> cons (x, xs))
//│ res: Ls[nothing]
//│    = <no result>
//│      g is not implemented

def g: ((int, 'b) -> 'b) -> 'b
//│ g: ((int, 'b,) -> 'b) -> 'b
//│  = <missing implementation>

g (fun (x, xs) -> cons (x, xs))
//│ res: Ls[int]
//│    = <no result>
//│      g is not implemented

def cons2: ('a, {x:'a}) -> {x:'a}
// def cons2: ('a, 'a) -> 'a
//│ cons2: ('a, {x: 'a},) -> {x: 'a}
//│      = <missing implementation>

f (x, xs) = cons2 (x, xs)
//│ f: ('a, {x: 'a},) -> {x: 'a}
//│  = <no result>
//│    cons2 is not implemented

g f
//│ res: {x: int}
//│    = <no result>
//│      g is not implemented


def build0 (g: forall 'b. ('a -> 'b -> 'b) -> 'b) = g (fun x -> fun xs -> cons (x, xs))
//│ build0: (forall 'b. ('a -> 'b -> 'b) -> 'b) -> Ls['a]
//│       = [Function: build03]

:re
build0 (fun k -> k 1 error)
//│ res: Ls[1]
//│ Runtime error:
//│ Error: an error was thrown



// * The Real Deal:


def build = fun (g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> g (fun x -> fun xs -> cons (x, xs)) nil
//│ build: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│      = [Function: build]

xs0 = build (fun c -> fun n -> n)
//│ xs0: Ls[nothing]
//│    = Nil {}

xs1 = build (fun c -> fun n -> c 1 n)
//│ xs1: Ls[1]
//│    = Cons { head: 1, tail: Nil {} }

xs3 = build (fun c -> fun n -> c 1 (c 2 (c 3 n)))
//│ xs3: Ls[1 | 2 | 3]
//│    = Cons {
//│        head: 1,
//│        tail: Cons { head: 2, tail: Cons { head: 3, tail: Nil {} } }
//│      }



build: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│ res: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│    = [Function: build]

def build_ty: forall 'a. (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│ build_ty: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│         = <missing implementation>

build_ty = build_ty
//│ (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│   <:  build_ty:
//│ (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│         = <no result>
//│           build_ty is not implemented

build: forall 'a. (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│ res: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│    = [Function: build]


// * This `build` type is _too_ general as it lets the continuation assume it will handle lists instead of some unknown 'b
:e
build: (('a -> Ls['a] -> Ls['a]) -> Ls['a] -> Ls['a]) -> Ls['a]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.185: 	build: (('a -> Ls['a] -> Ls['a]) -> Ls['a] -> Ls['a]) -> Ls['a]
//│ ║         	^^^^^
//│ ╟── type `Ls['a]` does not match type `'b`
//│ ║  l.185: 	build: (('a -> Ls['a] -> Ls['a]) -> Ls['a] -> Ls['a]) -> Ls['a]
//│ ║         	               ^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.142: 	def build = fun (g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> g (fun x -> fun xs -> cons (x, xs)) nil
//│ ╙──       	                                      ^^
//│ res: (('a -> Ls['a] -> Ls['a]) -> Ls['a] -> Ls['a]) -> Ls['a]
//│    = [Function: build]



// * It also Just Works without type annotations!


def build_ = fun g -> g (fun x -> fun xs -> cons (x, xs)) nil
//│ build_: ((forall 'a. 'a -> Ls['a] -> Ls['a]) -> Ls[nothing] -> 'b) -> 'b
//│       = [Function: build_]

build_ (fun c -> fun n -> n)
//│ res: Ls[nothing]
//│    = Nil {}

build_ (fun c -> fun n -> c 1 n)
//│ res: Ls[1]
//│    = Cons { head: 1, tail: Nil {} }

build_ (fun c -> fun n -> c 1 (c 2 (c 3 n)))
//│ res: Ls[1 | 2 | 3]
//│    = Cons {
//│        head: 1,
//│        tail: Cons { head: 2, tail: Cons { head: 3, tail: Nil {} } }
//│      }



def g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ g: (nothing -> 'b -> 'b) -> 'b -> 'b
//│  = <missing implementation>

g : ('a -> Ls['a] -> Ls['a]) -> Ls['a] -> Ls['a]
//│ res: ('a -> Ls['a] -> Ls['a]) -> Ls['a] -> Ls['a]
//│    = <no result>
//│      g is not implemented


build_ : (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│ res: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│    = [Function: build_]


def b: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│ b: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│  = <missing implementation>

b = build_
//│ ((forall 'a. 'a -> Ls['a] -> Ls['a]) -> Ls[nothing] -> 'b) -> 'b
//│   <:  b:
//│ (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│  = [Function: build_]

b g = build_ g
//│ ((forall 'a. 'a -> Ls['a] -> Ls['a]) -> Ls[nothing] -> 'b) -> 'b
//│   <:  b:
//│ (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│  = [Function: b1]

b g = build_ (fun x -> g x)
//│ ((forall 'a. 'a -> Ls['a] -> Ls['a]) -> Ls[nothing] -> 'b) -> 'b
//│   <:  b:
//│ (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│  = [Function: b2]

:e
b g x = build_ g x
//│ ((forall 'a. 'a -> Ls['a] -> Ls['a]) -> Ls[nothing] -> 'b -> 'c) -> 'b -> 'c
//│   <:  b:
//│ (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.262: 	b g x = build_ g x
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `Ls['a]` is not a function
//│ ║  l.22: 	def nil: Ls['a]
//│ ║        	         ^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.262: 	b g x = build_ g x
//│ ║         	        ^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.203: 	def build_ = fun g -> g (fun x -> fun xs -> cons (x, xs)) nil
//│ ╙──       	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│  = [Function: b3]



rec def fold f z xs =
  let ht = xs.HeadTail in case ht of {
  | undefined -> z
  | _ -> (fun ((h, t)) -> f h (fold f z t)) ht
  }
//│ fold: ('a -> 'b -> 'b) -> 'b -> Ls['a] -> 'b
//│     = [Function: fold]

fold add 0 xs0
//│ res: int
//│    = 0

fold add 0 xs1
//│ res: int
//│    = 1

fold add 0 xs3
//│ res: int
//│    = 6



