:NoRecursiveTypes
:NoConstrainedTypes
:DontDistributeForalls


// --------- //


def test (f: forall 'a. 'a -> 'a) =
  f
//│ test: (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│     = [Function: test]

test(f: forall 'a. 'a -> 'a) =
  f 1
//│ test: (forall 'a. 'a -> 'a) -> 1
//│     = [Function: test1]

test(f: forall 'a. 'a -> 'a) =
  (f 1, f true)
//│ test: (forall 'a. 'a -> 'a) -> (1, true,)
//│     = [Function: test2]


test id
//│ res: (1, true,)
//│    = [ 1, true ]

test(fun x -> x)
//│ res: (1, true,)
//│    = [ 1, true ]

test(fun x ->
  let tmp = log x
  in x)
//│ res: (1, true,)
//│    = [ 1, true ]
//│ // Output
//│ 1
//│ true

:e
test(fun x -> x + 1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.43: 	test(fun x -> x + 1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'a` is not an instance of type `int`
//│ ║  l.19: 	test(f: forall 'a. 'a -> 'a) =
//│ ║        	                   ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.43: 	test(fun x -> x + 1)
//│ ║        	              ^
//│ ╟── Note: quantified type variable 'a is defined at:
//│ ║  l.19: 	test(f: forall 'a. 'a -> 'a) =
//│ ╙──      	               ^^
//│ res: error | (1, true,)
//│    = [ 2, 2 ]

:e
test succ
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.60: 	test succ
//│ ║        	^^^^^^^^^
//│ ╟── type `'a` is not an instance of type `int`
//│ ║  l.19: 	test(f: forall 'a. 'a -> 'a) =
//│ ║        	                   ^^
//│ ╟── Note: quantified type variable 'a is defined at:
//│ ║  l.19: 	test(f: forall 'a. 'a -> 'a) =
//│ ╙──      	               ^^
//│ res: error | (1, true,)
//│    = [ 2, 2 ]


// --------- //


test f =
  ((f: forall 'a. 'a -> 'a) 1, f 2)
//│ test: (forall 'a. 'a -> 'a & 2 -> 'b) -> (1, 'b,)
//│     = [Function: test3]

def pair x y = test id
//│ pair: anything -> anything -> (1, 2,)
//│     = [Function: pair]

def pair x y = test (fun x -> (let tmp = log x in x))
//│ pair: anything -> anything -> (1, 2,)
//│     = [Function: pair1]


def test f =
  pair (f 1) (f true)
//│ test: ((1 | true) -> anything) -> (1, 2,)
//│     = [Function: test4]

test id
//│ res: (1, 2,)
//│    = [ 1, 2 ]
//│ // Output
//│ 1
//│ 2

:e
test (fun x -> x + 1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.104: 	test (fun x -> x + 1)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `int`
//│ ║  l.92: 	  pair (f 1) (f true)
//│ ║        	                ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.104: 	test (fun x -> x + 1)
//│ ╙──       	               ^
//│ res: error | (1, 2,)
//│    = [ 1, 2 ]
//│ // Output
//│ 1
//│ 2


