// * Adaptation of QML's original existentials example; using encoded existentials and plain records

:NoRecursiveTypes



// *** Type definitions *** //

type ArraysImpl[A, Rep] = {
    init: A -> Rep;
    sub: Rep -> int -> A;
    update: Rep -> int -> A -> Rep;
    fold: forall 'b. (A -> 'b -> 'b) -> 'b -> Rep -> 'b
  }
//│ Defined type alias ArraysImpl[=A, =Rep]

type ArraysImplConsumer[A, R] = forall 'rep. ArraysImpl[A, 'rep] -> R
//│ Defined type alias ArraysImplConsumer[=A, +R]

type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ Defined type alias Arrays[=A]



// *** Base *** //


baseImpl = {
    init   = fun a -> a;
    sub    = fun r -> fun i -> r;
    update = fun r -> fun i -> fun a -> a;
    fold   = fun f -> fun b -> fun r -> f r b
  }
//│ baseImpl: {
//│   fold: forall 'a 'b 'c. ('a -> 'b -> 'c) -> 'b -> 'a -> 'c,
//│   init: forall 'd. 'd -> 'd,
//│   sub: forall 'e. 'e -> anything -> 'e,
//│   update: forall 'f. anything -> anything -> 'f -> 'f
//│ }
//│         = {
//│             init: [Function: init],
//│             sub: [Function: sub],
//│             update: [Function: update],
//│             fold: [Function: fold]
//│           }

baseImpl : ArraysImpl['a, 'a]
//│ res: ArraysImpl['a, 'a]
//│    = {
//│        init: [Function: init],
//│        sub: [Function: sub],
//│        update: [Function: update],
//│        fold: [Function: fold]
//│      }

def base: Arrays['a]
//│ base: Arrays['a]
//│     = <missing implementation>

// * This works because `f` is used immediately, at the top level
// * (not within a more polymorphic context),
// * so we do not need first-class parametric polymorphism to type check the definition.
def base f = f baseImpl
//│ ({
//│   fold: forall 'a 'b 'c. ('a -> 'b -> 'c) -> 'b -> 'a -> 'c,
//│   init: forall 'd. 'd -> 'd,
//│   sub: forall 'e. 'e -> anything -> 'e,
//│   update: forall 'f. anything -> anything -> 'f -> 'f
//│ } -> 'g) -> 'g
//│   <:  base:
//│ Arrays['a]
//│     = [Function: base]

// * Also works, but not necessary
def base (f: ArraysImplConsumer['a, 'res]) = f baseImpl
//│ ArraysImplConsumer['a, 'b] -> 'b
//│   <:  base:
//│ Arrays['a]
//│     = [Function: base1]



// *** Step *** //


def stepImpl_ty: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ stepImpl_ty: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│            = <missing implementation>

// * `arrImpl` is meant to be used polymorphically under lambdas, so it needs an annotation
def stepImpl (arrImpl: ArraysImpl['a, 'r]) = {
    init   = fun a -> (arrImpl.init a, "hi");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.update r0 i a, "hey");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.fold f b r0
  }
//│ stepImpl: ArraysImpl['a, 'r] -> {
//│   fold: forall 'b. ('a -> 'b -> 'b) -> 'b -> (('r, anything,),) -> 'b,
//│   init: 'a -> ('r, "hi",),
//│   sub: (('r, anything,),) -> int -> 'a,
//│   update: (('r, anything,),) -> int -> 'a -> ('r, "hey",)
//│ }
//│         = [Function: stepImpl]

stepImpl_ty = stepImpl
//│ ArraysImpl['a, 'r] -> {
//│   fold: forall 'b. ('a -> 'b -> 'b) -> 'b -> (('r, anything,),) -> 'b,
//│   init: 'a -> ('r, "hi",),
//│   sub: (('r, anything,),) -> int -> 'a,
//│   update: (('r, anything,),) -> int -> 'a -> ('r, "hey",)
//│ }
//│   <:  stepImpl_ty:
//│ ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│            = [Function: stepImpl]


def step: Arrays['a] -> Arrays['a]
//│ step: Arrays['a] -> Arrays['a]
//│     = <missing implementation>


def helper impl (k: ArraysImplConsumer['a, '_]) = k (stepImpl impl)
// * Or equivalently:
// def helper impl (k: forall 'rep. ArraysImpl['a, 'rep] -> 'r) = k (stepImpl impl)
//│ helper: ArraysImpl['a, 'r] -> ArraysImplConsumer['a, 'b] -> 'b
//│       = [Function: helper]

// * Note: these versions where we annotate `impl` instead don't work
// * (cause problem in later definition of step)
// def helper (impl: ArraysImpl['a, 'rep]) k = k (stepImpl impl)
// def helper (impl: ArraysImpl['a, 'rep]) = let f = fun k -> k (stepImpl impl) in f
// def helper (impl: ArraysImpl['a, 'rep]) k = k (let tmp = stepImpl impl in tmp)

def step arr = arr helper
//│ ((forall 'a 'r 'b. ArraysImpl['a, 'r] -> ArraysImplConsumer['a, 'b] -> 'b) -> 'c) -> 'c
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step]

// * Also works, but not necessary
def step (arr: Arrays['a]) = arr helper
//│ Arrays['a] -> ArraysImplConsumer['a, 'b] -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step1]

// * In one go:  <------------------------ this is probably the most canonical definition of `step` in this file

// * With `stepImpl`
def step arr = arr (fun impl -> fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl impl))
//│ ((forall 'a 'r 'b. ArraysImpl['a, 'r] -> ArraysImplConsumer['a, 'b] -> 'b) -> 'c) -> 'c
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step2]

// * With `stepImpl_ty`
def step arr = arr (fun impl -> fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl_ty impl))
//│ ((forall 'a 'r 'b. ArraysImpl['a, 'r] -> ArraysImplConsumer['a, 'b] -> 'b) -> 'c) -> 'c
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step3]

// * With one more annotation (not needed)
def step (arr: Arrays['a0]) = arr (fun impl -> fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl impl))
//│ Arrays['a0] -> ArraysImplConsumer['a0, 'a] -> 'a
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step4]



// *** Uses *** //


ssb = step (step base)
//│ ssb: Arrays['a]
//│    = [Function (anonymous)]

ssb (fun arr ->
    let r2 = arr.update (arr.init true) 1 false
    in (arr.sub r2 0, arr.sub r2 1)
  )
//│ res: (Bool, Bool,)
//│    = [ false, false ]


rec def mkMonoArray n =
  if n == 0 then base else step (mkMonoArray (n - 1))
//│ mkMonoArray: int -> Arrays['a]
//│            = [Function: mkMonoArray]

snb = mkMonoArray 3
//│ snb: Arrays['a]
//│    = [Function (anonymous)]

// * Here we are trying to leak the internally-quantified representation, resulting in `anything` being returned
snb (fun arr -> arr.init true)
//│ res: anything
//│    = [ [ [ true, 'hi' ], 'hi' ], 'hi' ]



// *** An alternative way of defining Step! *** //


// * Use another name to clarify this is an alternative way of defining it
def step2: Arrays['a] -> Arrays['a]
//│ step2: Arrays['a] -> Arrays['a]
//│      = <missing implementation>


def step2 (arr: Arrays['a]) (k: ArraysImplConsumer['a2, 'rep]) = arr (fun impl -> k (stepImpl impl))
//│ Arrays['a] -> ArraysImplConsumer['a, 'rep] -> 'rep
//│   where
//│     'a := 'a0
//│     'a0 :> 'a
//│   <:  step2:
//│ Arrays['a] -> Arrays['a]
//│      = [Function: step21]


// * Removing the `arr` annotation still works:

def step2 = forall 'a. fun arr ->
  fun (k: ArraysImplConsumer['a, 'rep]) -> arr (fun impl -> k (stepImpl impl))
//│ ((forall 'r. ArraysImpl['a, 'r] -> 'rep) -> 'b) -> ArraysImplConsumer['a, 'rep] -> 'b
//│   <:  step2:
//│ Arrays['a] -> Arrays['a]
//│      = [Function: step22]

// * Or just:
def step2 arr (k: ArraysImplConsumer['a, 'rep]) = arr (fun impl -> k (stepImpl impl))
//│ ((forall 'r. ArraysImpl[in 'a & 'a0 out 'a, 'r] -> 'rep) -> 'b) -> ArraysImplConsumer['a, 'rep] -> 'b
//│   where
//│     'a := 'a0
//│     'a0 :> 'a
//│   <:  step2:
//│ Arrays['a] -> Arrays['a]
//│      = [Function: step23]



// *** Uses *** //


ssb = step2 (step2 base)
//│ ssb: Arrays['a]
//│    = [Function (anonymous)]

ssb (fun arr ->
    let r2 = arr.update (arr.init true) 1 false
    in (arr.sub r2 0, arr.sub r2 1)
  )
//│ res: (Bool, Bool,)
//│    = [ false, false ]


rec def mkMonoArray n =
  if n == 0 then base else step2 (mkMonoArray (n - 1))
//│ mkMonoArray: int -> Arrays['a]
//│            = [Function: mkMonoArray1]

snb = mkMonoArray 3
//│ snb: Arrays['a]
//│    = [Function (anonymous)]

// * Here we are trying to leak the internally-quantified representation, resulting in `anything` being returned
snb (fun arr -> arr.init true)
//│ res: anything
//│    = [ [ [ true, 'hi' ], 'hi' ], 'hi' ]



// *** Alternative definitions of `step` that do and don't work *** //


// * Removing the `k` annotation breaks `step2`, even with `stepImpl_ty`, as before:
:e
def step2 = forall 'a. fun (arr: Arrays['a]) -> fun k -> arr (fun impl -> k (stepImpl_ty impl))
//│ Arrays['a] -> (ArraysImpl['a, in (??rep, string,) out (anything, string,)] -> 'b) -> 'b
//│   <:  step2:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.279: 	def step2 = forall 'a. fun (arr: Arrays['a]) -> fun k -> arr (fun impl -> k (stepImpl_ty impl))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'rep` leaks out of its scope
//│ ║  l.17: 	type ArraysImplConsumer[A, R] = forall 'rep. ArraysImpl[A, 'rep] -> R
//│ ║        	                                                           ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.279: 	def step2 = forall 'a. fun (arr: Arrays['a]) -> fun k -> arr (fun impl -> k (stepImpl_ty impl))
//│ ║         	                                                                                         ^^^^
//│ ╟── • this reference:
//│ ║  l.279: 	def step2 = forall 'a. fun (arr: Arrays['a]) -> fun k -> arr (fun impl -> k (stepImpl_ty impl))
//│ ║         	                                                         ^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.86: 	def stepImpl_ty: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ ╙──      	                                                       ^^
//│      = [Function: step24]


// * `step` not work with no annotations (even with stepImpl_ty),
// * because that makes `k` leak its argument type
:e
def step arr = arr (fun impl -> fun k -> k (stepImpl_ty impl))
//│ ((forall 'a 'r 'b. ArraysImpl['a, 'r] -> (ArraysImpl['a, ('r, string,)] -> 'b) -> 'b) -> 'c) -> 'c
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.305: 	def step arr = arr (fun impl -> fun k -> k (stepImpl_ty impl))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'rep` leaks out of its scope
//│ ║  l.17: 	type ArraysImplConsumer[A, R] = forall 'rep. ArraysImpl[A, 'rep] -> R
//│ ║        	                                                           ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this applied expression:
//│ ║  l.305: 	def step arr = arr (fun impl -> fun k -> k (stepImpl_ty impl))
//│ ║         	               ^^^
//│ ╟── • this function:
//│ ║  l.305: 	def step arr = arr (fun impl -> fun k -> k (stepImpl_ty impl))
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.86: 	def stepImpl_ty: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ ╙──      	                                                       ^^
//│     = [Function: step5]

// * Still doesn't work if we only annotate `arr`, as `k` still leaks the internal repr
:e
def step (arr: Arrays['a]) = arr (fun impl -> fun k -> k (stepImpl impl))
//│ Arrays['a] -> ({
//│   fold: forall 'b. ('a -> 'b -> 'b) -> 'b -> ((??rep, anything,),) -> 'b,
//│   init: 'a -> (anything, "hi",),
//│   sub: ((??rep, anything,),) -> int -> 'a,
//│   update: ((??rep, anything,),) -> int -> 'a -> (anything, "hey",)
//│ } -> 'c) -> 'c
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.329: 	def step (arr: Arrays['a]) = arr (fun impl -> fun k -> k (stepImpl impl))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'rep` leaks out of its scope
//│ ║  l.17: 	type ArraysImplConsumer[A, R] = forall 'rep. ArraysImpl[A, 'rep] -> R
//│ ║        	                                                           ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.329: 	def step (arr: Arrays['a]) = arr (fun impl -> fun k -> k (stepImpl impl))
//│ ║         	                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.329: 	def step (arr: Arrays['a]) = arr (fun impl -> fun k -> k (stepImpl impl))
//│ ║         	                             ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.93: 	    sub    = fun ((r0, r1)) -> fun i -> arrImpl.sub r0 i;
//│ ╙──      	                                                    ^^
//│     = [Function: step6]


// * Works. Note: removing `forall 'a.` here leads to badness
def step arr = arr (forall 'a. fun impl -> forall 'r. fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl impl))
//│ ((forall 'a 'r 'r0. ArraysImpl['a, 'r] -> ArraysImplConsumer['a, 'r0] -> 'r0) -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step7]

// * ...unless we use `stepImpl_ty` instead of `stepImpl`
def step arr = arr (fun impl -> forall 'r. fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl_ty impl))
//│ ((forall 'a 'a0 'r 'a1 'r0. ArraysImpl[in 'a & 'a0 out 'a | 'a0, 'r] -> ArraysImplConsumer['a1, 'r0] -> 'r0) -> 'b) -> 'b
//│   where
//│     'a1 :> 'a
//│         <: 'a0
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step8]


def step arr = arr (fun impl -> (fun k -> k (stepImpl impl)) : Arrays['a])
//│ ((forall 'a 'a0 'r. ArraysImpl[in 'a & 'a0 out 'a, 'r] -> Arrays['a0]) -> 'b) -> 'b
//│   where
//│     'a :> 'a0
//│     'a0 := 'a
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step9]

def step arr = arr (fun impl -> (fun k -> k (stepImpl_ty impl)) : Arrays['a])
//│ ((forall 'a 'r. ArraysImpl['a, 'r] -> Arrays['a]) -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step10]

def step = forall 'a. fun (arr : Arrays['a]) -> arr (fun impl -> (fun k -> k (stepImpl impl)) : Arrays['a])
//│ Arrays['a] -> Arrays['a]
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step11]

def step = forall 'a. fun arr -> arr (forall 'rep. fun (impl : ArraysImpl['a, 'rep]) -> (fun k -> k (stepImpl impl)) : Arrays['a])
//│ ((forall 'rep. ArraysImpl['a, 'rep] -> Arrays['a]) -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step12]


// * The following `arrayRepToArray` definition can help type check `step`:

def arrayRepToArray impl (k: forall 'rep. ArraysImpl['a, 'rep] -> 'r) = k impl
//│ arrayRepToArray: ArraysImpl['a, 'rep] -> (forall 'rep0. ArraysImpl['a, 'rep0] -> 'b) -> 'b
//│                = [Function: arrayRepToArray]

def arrayRepToArray_A : ArraysImpl['a, 'rep] -> Arrays['a]
//│ arrayRepToArray_A: ArraysImpl['a, 'rep] -> Arrays['a]
//│                  = <missing implementation>

def arrayRepToArray_A impl k = k impl
//│ 'a -> ('a -> 'b) -> 'b
//│   <:  arrayRepToArray_A:
//│ ArraysImpl['a, 'rep] -> Arrays['a]
//│                  = [Function: arrayRepToArray_A]


def step arr = arr (fun impl -> arrayRepToArray_A (stepImpl_ty impl))
//│ ((forall 'a 'r. ArraysImpl['a, 'r] -> Arrays['a]) -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step13]

def step arr = arr (fun impl -> arrayRepToArray (stepImpl_ty impl))
//│ ((forall 'a 'r 'b. ArraysImpl['a, 'r] -> (forall 'rep. ArraysImpl['a, 'rep] -> 'b) -> 'b) -> 'c) -> 'c
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step14]

def step (arr: Arrays['a]) = arr (fun impl -> arrayRepToArray_A (stepImpl impl))
//│ Arrays['a] -> Arrays['a]
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step15]

def step arr = arr (fun impl -> arrayRepToArray (stepImpl impl))
//│ ((forall 'a 'r 'b. ArraysImpl['a, 'r] -> (forall 'rep. ArraysImpl['a, 'rep] -> 'b) -> 'b) -> 'c) -> 'c
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step16]


// * We can get away with not annotating `arrImpl` as long as we annotate its polymorphic field use:

type Fold[A, Rep] = forall 'b. (A -> 'b -> 'b) -> 'b -> Rep -> 'b
//│ Defined type alias Fold[+A, -Rep]

def stepImpl_Ann = forall 'a 'rep. fun arrImpl -> {
    init   = fun a -> (arrImpl.init a, "hi");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.update r0 i a, "hey");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> (arrImpl.fold: Fold['a, 'rep]) f b r0
  }
//│ stepImpl_Ann: {
//│   fold: Fold['a, 'rep],
//│   init: 'c -> 'd,
//│   sub: 'e -> 'f -> 'g,
//│   update: 'h -> 'i -> 'j -> 'k
//│ } -> {
//│   fold: forall 'b. ('a -> 'b -> 'b) -> 'b -> (('rep, anything,),) -> 'b,
//│   init: 'c -> ('d, "hi",),
//│   sub: (('e, anything,),) -> 'f -> 'g,
//│   update: (('h, anything,),) -> 'i -> 'j -> ('k, "hey",)
//│ }
//│             = [Function: stepImpl_Ann]

def step arr = arr (fun impl -> fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl_Ann impl))
//│ ((forall 'a 'rep 'b. {
//│   fold: Fold['a, 'rep],
//│   init: 'a -> 'rep,
//│   sub: 'rep -> int -> 'a,
//│   update: 'rep -> int -> 'a -> 'rep
//│ } -> ArraysImplConsumer['a, 'b] -> 'b) -> 'c) -> 'c
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step17]



