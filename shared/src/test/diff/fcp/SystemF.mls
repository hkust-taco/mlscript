// * From https://crypto.stanford.edu/~blynn/lambda/systemf.html

:NoRecursiveTypes
:NoConstrainedTypes
:DontDistributeForalls


def succ: int -> int
//│ succ: int -> int
//│     = <missing implementation>


(fun f -> f succ(f 0)) (fun x -> x)
//│ res: int
//│    = <no result>
//│      succ is not implemented

// Note: does not type check without precise function type intersections
(fun f -> f succ (f 0)) (fun x -> x)
//│ res: int
//│    = <no result>
//│      succ is not implemented


// [Reset]

// Polymorphic identity.
id x = x
def id_ty: forall 'A. 'A -> 'A
//│ id: 'a -> 'a
//│   = [Function: id]
//│ id_ty: 'A -> 'A
//│      = <missing implementation>

id_ty = id
//│ 'a -> 'a
//│   <:  id_ty:
//│ 'A -> 'A
//│      = [Function: id]

// Self-application.
xx = fun x -> x x
def xx_ty: (forall 'X. 'X -> 'X) -> (forall 'X. 'X -> 'X)
//│ xx: ('a -> 'b & 'a) -> 'b
//│   = [Function: xx]
//│ xx_ty: (forall 'X. 'X -> 'X) -> (forall 'X0. 'X0 -> 'X0)
//│      = <missing implementation>

xx_ty = xx
//│ ('a -> 'b & 'a) -> 'b
//│   <:  xx_ty:
//│ (forall 'X. 'X -> 'X) -> (forall 'X0. 'X0 -> 'X0)
//│      = [Function: xx]

xx id
iter2 f x = f(f x)
def iter2_ty: forall 'X. ('X -> 'X) -> 'X -> 'X
//│ res: 'a -> 'a
//│    = [Function: id]
//│ iter2: ('a -> 'b & 'b -> 'c) -> 'a -> 'c
//│      = [Function: iter2]
//│ iter2_ty: ('X -> 'X) -> 'X -> 'X
//│         = <missing implementation>

iter2_ty = iter2
//│ ('a -> 'b & 'b -> 'c) -> 'a -> 'c
//│   <:  iter2_ty:
//│ ('X -> 'X) -> 'X -> 'X
//│         = [Function: iter2]

iter4() = iter2 iter2
//│ iter4: () -> ('a -> 'b & 'b -> ('a & 'c)) -> 'a -> 'c
//│      = [Function: iter4]

def iter4_ty: () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ iter4_ty: () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│         = <missing implementation>

// * Needs distributivity or constrained types
:e
iter4_ty() = iter2_ty iter2_ty
iter4_ty = iter4
//│ () -> ('X -> 'X) -> 'X -> 'X
//│   <:  iter4_ty:
//│ () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.81: 	iter4_ty() = iter2_ty iter2_ty
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'X` leaks out of its scope
//│ ║  l.75: 	def iter4_ty: () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ ║        	                                       ^^
//│ ╟── back into type variable `'X`
//│ ║  l.75: 	def iter4_ty: () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ ║        	                                 ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.81: 	iter4_ty() = iter2_ty iter2_ty
//│ ║        	             ^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.57: 	def iter2_ty: forall 'X. ('X -> 'X) -> 'X -> 'X
//│ ╙──      	                                ^^
//│         = [Function: iter4_ty]
//│ () -> ('a -> 'b & 'b -> ('a & 'c)) -> 'a -> 'c
//│   <:  iter4_ty:
//│ () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.82: 	iter4_ty = iter4
//│ ║        	^^^^^^^^^^^^^^^^
//│ ╟── type variable `'X` leaks out of its scope
//│ ║  l.75: 	def iter4_ty: () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ ║        	                                       ^^
//│ ╟── back into type variable `'X`
//│ ║  l.75: 	def iter4_ty: () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ ║        	                                 ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.56: 	iter2 f x = f(f x)
//│ ║        	        ^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.71: 	iter4() = iter2 iter2
//│ ║        	          ^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.82: 	iter4_ty = iter4
//│ ╙──      	           ^^^^^
//│         = [Function: iter4]

:DistributeForalls

iter4_ty = iter4
//│ () -> ('a -> 'b & 'b -> ('a & 'c)) -> 'a -> 'c
//│   <:  iter4_ty:
//│ () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│         = [Function: iter4]

iter4_ty() = iter2_ty iter2_ty
//│ () -> ('X -> 'X) -> 'X -> 'X
//│   <:  iter4_ty:
//│ () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│         = [Function: iter4_ty3]


// :e // * Started failing after better distrib, not sure why...
// 4^4 = 256.
iter256() = iter4() (iter4())
def iter256_ty: () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
iter256_ty() = iter4_ty() (iter4_ty())
iter256_ty = iter256
//│ iter256: () -> ('a -> ('a & 'b) & ('b | 'c) -> ('a & 'c)) -> 'a -> 'c
//│   where
//│     'a :> 'c
//│        = [Function: iter256]
//│ iter256_ty: () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│           = <missing implementation>
//│ () -> ('X -> 'X) -> 'X -> 'X
//│   <:  iter256_ty:
//│ () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│           = [Function: iter256_ty]
//│ () -> ('a -> ('a & 'b) & ('b | 'c) -> ('a & 'c)) -> 'a -> 'c
//│   where
//│     'a :> 'c
//│   <:  iter256_ty:
//│ () -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│           = [Function: iter256]

// Church numerals.
Z s z = z
def Z_ty: forall 'X. ('X -> 'X) -> 'X -> 'X
Z_ty = Z
//│ Z: anything -> 'a -> 'a
//│  = [Function: Z]
//│ Z_ty: ('X -> 'X) -> 'X -> 'X
//│     = <missing implementation>
//│ anything -> 'a -> 'a
//│   <:  Z_ty:
//│ ('X -> 'X) -> 'X -> 'X
//│     = [Function: Z]

S n s z = s (n s z)
def S_ty: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
S_ty = S
//│ S: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│  = [Function: S]
//│ S_ty: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X0. ('X0 -> 'X0) -> 'X0 -> 'X0)
//│     = <missing implementation>
//│ ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│   <:  S_ty:
//│ (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X0. ('X0 -> 'X0) -> 'X0 -> 'X0)
//│     = [Function: S]

res1() = iter4() S Z
res2() = iter256() S Z
//│ res1: () -> ('a -> ('b & 'c) & 'c -> 'a) -> 'c -> 'b
//│     = [Function: res1]
//│ res2: () -> ('a -> ('a & 'b & 'c) & 'c -> ('a & 'c)) -> 'c -> 'b
//│     = [Function: res2]

res1_ty() = iter4_ty() S_ty Z_ty
res2_ty() = iter256_ty() S_ty Z_ty
//│ res1_ty: () -> ('X -> 'X & 'X0 -> 'X0) -> ('X & 'X0) -> ('X | 'X0)
//│        = [Function: res1_ty]
//│ res2_ty: () -> ('X -> 'X & 'X0 -> 'X0) -> ('X & 'X0) -> ('X | 'X0)
//│        = [Function: res2_ty]


S (S Z)
//│ res: ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│    = [Function (anonymous)]


// [Pair]

pair x y f = f x y
def pair_ty: forall 'X. forall 'Y. 'X -> 'Y -> (forall 'Z. ('X -> 'Y -> 'Z) -> 'Z)
pair_ty = pair
fst p = p (fun x -> fun y -> x)
def fst_ty: forall 'X. forall 'Y. (forall 'Z. ('X -> 'Y -> 'Z) -> 'Z) -> 'X
fst_ty = fst
snd p = p (fun x -> fun y -> y)
def snd_ty: forall 'X. forall 'Y. (forall 'Z. ('X -> 'Y -> 'Z) -> 'Z) -> 'Y
snd_ty = snd
//│ pair: 'a -> 'b -> ('a -> 'b -> 'c) -> 'c
//│     = [Function: pair]
//│ pair_ty: 'X -> 'Y -> ('X -> 'Y -> 'Z) -> 'Z
//│        = <missing implementation>
//│ 'a -> 'b -> ('a -> 'b -> 'c) -> 'c
//│   <:  pair_ty:
//│ 'X -> 'Y -> ('X -> 'Y -> 'Z) -> 'Z
//│        = [Function: pair]
//│ fst: ((forall 'a. 'a -> anything -> 'a) -> 'b) -> 'b
//│    = [Function: fst]
//│ fst_ty: (forall 'Z. ('X -> anything -> 'Z) -> 'Z) -> 'X
//│       = <missing implementation>
//│ ((forall 'a. 'a -> anything -> 'a) -> 'b) -> 'b
//│   <:  fst_ty:
//│ (forall 'Z. ('X -> anything -> 'Z) -> 'Z) -> 'X
//│       = [Function: fst]
//│ snd: ((forall 'a. anything -> 'a -> 'a) -> 'b) -> 'b
//│    = [Function: snd]
//│ snd_ty: (forall 'Z. (anything -> 'Y -> 'Z) -> 'Z) -> 'Y
//│       = <missing implementation>
//│ ((forall 'a. anything -> 'a -> 'a) -> 'b) -> 'b
//│   <:  snd_ty:
//│ (forall 'Z. (anything -> 'Y -> 'Z) -> 'Z) -> 'Y
//│       = [Function: snd]

p02 = pair Z (S (S Z))
//│ p02: ((forall 'a. anything -> 'a -> 'a) -> (('b -> 'c & 'd -> 'b) -> 'd -> 'c) -> 'e) -> 'e
//│    = [Function (anonymous)]

p02_ty = pair_ty Z_ty (S_ty (S_ty Z_ty))
//│ p02_ty: ((forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X0. ('X0 -> 'X0) -> 'X0 -> 'X0) -> 'Z) -> 'Z
//│       = [Function (anonymous)]

fp = fst p02
sp = snd p02
//│ fp: anything -> 'a -> 'a
//│   = [Function: Z]
//│ sp: ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│   = [Function (anonymous)]


def fp_ty: forall 'a. ('a -> 'a) -> 'a -> 'a
fp_ty = fst_ty p02_ty
fp_ty = fp
def sp_ty: forall 'a. ('a -> 'a) -> 'a -> 'a
sp_ty = snd_ty p02_ty
sp_ty = sp
//│ fp_ty: ('a -> 'a) -> 'a -> 'a
//│      = <missing implementation>
//│ ('X -> 'X) -> 'X -> 'X
//│   <:  fp_ty:
//│ ('a -> 'a) -> 'a -> 'a
//│      = [Function: Z]
//│ anything -> 'a -> 'a
//│   <:  fp_ty:
//│ ('a -> 'a) -> 'a -> 'a
//│      = [Function: Z]
//│ sp_ty: ('a -> 'a) -> 'a -> 'a
//│      = <missing implementation>
//│ ('X -> 'X) -> 'X -> 'X
//│   <:  sp_ty:
//│ ('a -> 'a) -> 'a -> 'a
//│      = [Function (anonymous)]
//│ ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│   <:  sp_ty:
//│ ('a -> 'a) -> 'a -> 'a
//│      = [Function (anonymous)]

p01 = pair (()) Z
//│ p01: (() -> (forall 'a. anything -> 'a -> 'a) -> 'b) -> 'b
//│    = [Function (anonymous)]

p = pair (())
//│ p: 'a -> (() -> 'a -> 'b) -> 'b
//│  = [Function (anonymous)]

p01 = p Z
//│ p01: (() -> (forall 'a. anything -> 'a -> 'a) -> 'b) -> 'b
//│    = [Function (anonymous)]


(fun p -> p (fun x -> fun y -> x)) : forall 'X. forall 'Y. (forall 'Z. ('X -> 'Y -> 'Z) -> 'Z) -> 'X
//│ res: (forall 'Z. ('X -> anything -> 'Z) -> 'Z) -> 'X
//│    = [Function: res]


p02 = pair Z (S (S Z))
p02_ty = pair_ty Z_ty (S_ty (S_ty Z_ty))
p02_ty = p02
//│ p02: ((forall 'a. anything -> 'a -> 'a) -> (('b -> 'c & 'd -> 'b) -> 'd -> 'c) -> 'e) -> 'e
//│    = [Function (anonymous)]
//│ p02_ty: ((forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X0. ('X0 -> 'X0) -> 'X0 -> 'X0) -> 'Z) -> 'Z
//│       = [Function (anonymous)]
//│ p02_ty: ((forall 'a. anything -> 'a -> 'a) -> (('b -> 'c & 'd -> 'b) -> 'd -> 'c) -> 'e) -> 'e
//│       = [Function (anonymous)]

fp02 = fst p02
def fp02_ty: forall 'X. ('X -> 'X) -> 'X -> 'X
fp02_ty = fst_ty p02_ty
fp02_ty = fp02
//│ fp02: anything -> 'a -> 'a
//│     = [Function: Z]
//│ fp02_ty: ('X -> 'X) -> 'X -> 'X
//│        = <missing implementation>
//│ anything -> 'a -> 'a
//│   <:  fp02_ty:
//│ ('X -> 'X) -> 'X -> 'X
//│        = [Function: Z]
//│ anything -> 'a -> 'a
//│   <:  fp02_ty:
//│ ('X -> 'X) -> 'X -> 'X
//│        = [Function: Z]

:ns
fp02
//│ res: forall 'a. 'a
//│   where
//│     'a :> forall 'b 'c. 'b -> 'c -> 'c
//│    = [Function: Z]

sp02 = snd p02
def sp02_ty: forall 'X. ('X -> 'X) -> 'X -> 'X
sp02_ty = snd_ty p02_ty
sp02_ty = sp02
//│ sp02: ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│     = [Function (anonymous)]
//│ sp02_ty: ('X -> 'X) -> 'X -> 'X
//│        = <missing implementation>
//│ ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│   <:  sp02_ty:
//│ ('X -> 'X) -> 'X -> 'X
//│        = [Function (anonymous)]
//│ ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│   <:  sp02_ty:
//│ ('X -> 'X) -> 'X -> 'X
//│        = [Function (anonymous)]


// * TODO try:

// [Booleans, Integers, Pairs, Lists]
// true  = \X x:X y:X.x
// false = \X x:X y:X.y
// not   = \b:forall X.X->X->X X t:X f:X.b [X] f t
// 0    = \X s:X->X z:X.z
// succ = \n:(forall X.(X->X)->X->X) X s:X->X z:X.s(n[X] s z)
// pair = \X Y x:X y:Y Z f:X->Y->Z.f x y
// fst  = \X Y p:forall Z.(X->Y->Z)->Z.p [X] (\x:X y:Y.x)
// snd  = \X Y p:forall Z.(X->Y->Z)->Z.p [Y] (\x:X y:Y.y)
// nil  = \X.(\R.\c:X->R->R.\n:R.n)
// cons = \X h:X t:forall R.(X->R->R)->R->R.(\R c:X->R->R n:R.c h (t [R] c n))


// [Surprise!]
// -- See Brown and Palsberg, "Breaking Through the Normalization Barrier:
// -- A Self-Interpreter for F-omega": "Several books, papers, and web pages"
// -- claim the following program cannot exist! That is, self-interpreters are
// -- supposedly impossible in strongly normalizing languages.

// id=\X x:X.x -- Polymorphic identity.
// true  = \X x:X y:X.x  -- Church booleans.
// false = \X x:X y:X.y
// not   = \b:forall X.X->X->X X t:X f:X.b [X] f t
tru x y = x
fls x y = y
not b t f = b f t
//│ tru: 'a -> anything -> 'a
//│    = [Function: tru]
//│ fls: anything -> 'a -> 'a
//│    = [Function: fls]
//│ not: ('a -> 'b -> 'c) -> 'b -> 'a -> 'c
//│    = [Function: not]

// E=\T q:(forall X.X->X)->T.q id  -- Self-interpreter.
E q = q id
//│ E: ((forall 'a. 'a -> 'a) -> 'b) -> 'b
//│  = [Function: E]

// shallow (not (not true))        -- Shallow encoding.
// λid.id(λb t f.b f t)(id(λb t f.b f t)(λx y.x))
sh id = (id not) ((id not) tru)
//│ sh: ((forall 'a 'b 'c. ('b -> 'c -> 'a) -> 'c -> 'b -> 'a) -> ('d -> 'e & (forall 'f. 'f -> anything -> 'f) -> 'd)) -> 'e
//│   = [Function: sh]

// E[forall X.X->X->X](shallow (not( not true)))
E sh
//│ res: 'a -> anything -> 'a
//│    = [Function (anonymous)]

u = E
pu x y = (u x) x
sh_pu id x y = id (id u x) x
//│ u: ((forall 'a. 'a -> 'a) -> 'b) -> 'b
//│  = [Function: E]
//│ pu: ((forall 'a. 'a -> 'a) -> 'b -> 'c & 'b) -> anything -> 'c
//│   = [Function: pu]
//│ sh_pu: ((forall 'a. ((forall 'b. 'b -> 'b) -> 'a) -> 'a) -> 'c -> 'd & 'd -> 'c -> 'e) -> 'c -> anything -> 'e
//│      = [Function: sh_pu]

:e
pu sh_pu
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.421: 	pu sh_pu
//│ ║         	^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: anything -> anything -> anything -> nothing | error
//│    = [Function (anonymous)]

// * "Of course, self-application of self-application ((\x.x x)(\x.x x)) remains untypable, because it has no normal form."
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.431: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


