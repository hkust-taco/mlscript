:NoRecursiveTypes



def id: forall 'a. 'a -> 'a
//│ id: 'a -> 'a
//│   = <missing implementation>

def id x = x
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a
//│   = [Function: id1]


test1 f =
  (f 0, f true)
//│ test1: (0 -> 'a & true -> 'b) -> ('a, 'b,)
//│      = [Function: test1]

test1 (fun value -> { value })
//│ res: ({value: 0}, {value: true},)
//│    = [ { value: 0 }, { value: true } ]

test2 f =
  let r x = f x
  in (r 0, r true)
//│ test2: ((0 | true) -> 'a) -> ('a, 'a,)
//│      = [Function: test2]

test2 (fun value -> { value })
//│ res: ({value: true | 0}, {value: true | 0},)
//│    = [ { value: 0 }, { value: true } ]



// * From supertype's `freeze-ml.sup`

def poly f = (f 42, f true)
//│ poly: (42 -> 'a & true -> 'b) -> ('a, 'b,)
//│     = [Function: poly]

def bad1 f = (poly f, f 42 + 1)
def bad2 f = (f 42 + 1, poly f)
//│ bad1: (42 -> (int & 'a) & true -> 'b) -> (('a, 'b,), int,)
//│     = [Function: bad1]
//│ bad2: (42 -> (int & 'a) & true -> 'b) -> (int, ('a, 'b,),)
//│     = [Function: bad2]



def example f = (f: forall 'a. 'a -> 'a)
//│ example: (forall 'a. 'a -> 'a) -> 'a0 -> 'a0
//│        = [Function: example]

:e
example 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.57: 	example 1
//│ ║        	^^^^^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.57: 	example 1
//│ ║        	        ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.52: 	def example f = (f: forall 'a. 'a -> 'a)
//│ ║        	                               ^^^^^^^^
//│ ╟── from reference:
//│ ║  l.52: 	def example f = (f: forall 'a. 'a -> 'a)
//│ ╙──      	                 ^
//│ res: error | 'a -> 'a
//│    = 1

:e
example succ
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.74: 	example succ
//│ ║        	^^^^^^^^^^^^
//│ ╟── type `'a` is not an instance of type `int`
//│ ║  l.52: 	def example f = (f: forall 'a. 'a -> 'a)
//│ ║        	                               ^^
//│ ╟── Note: quantified type variable 'a is defined at:
//│ ║  l.52: 	def example f = (f: forall 'a. 'a -> 'a)
//│ ╙──      	                           ^^
//│ res: error | 'a -> 'a
//│    = [Function: succ]

example id
//│ res: 'a -> 'a
//│    = [Function: id1]


def example f = (f: forall 'a. 'a -> int -> 'b) f
//│ example: (anything -> int -> 'b) -> int -> 'b
//│        = [Function: example1]

def example f = ((fun x -> x, f) : forall 'a. ('a -> 'a, 'a -> 'a))
//│ example: (??a -> ??a0) -> ('a -> 'a, 'a -> 'a,)
//│        = [Function: example2]

def example f = ((0, f) : forall 'a. (0, 'a))
//│ example: ??a -> (0, nothing,)
//│        = [Function: example3]

def ex = example
//│ ex: ??a -> (0, nothing,)
//│   = [Function: ex]

def ex x = example x
//│ ex: ??a -> (0, nothing,)
//│   = [Function: ex1]

:e
ex 1
//│ ╔══[ERROR] Type error in application
//│ ║  l.113: 	ex 1
//│ ║         	^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.113: 	ex 1
//│ ║         	   ^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.100: 	def example f = ((0, f) : forall 'a. (0, 'a))
//│ ║         	                     ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.108: 	def ex x = example x
//│ ╙──       	                   ^
//│ res: error | (0, nothing,)
//│    = [ 0, 1 ]

def example f = ((0, f) : forall 'a. (0, 'a -> 'a))
//│ example: (??a -> ??a0) -> (0, 'a -> 'a,)
//│        = [Function: example4]


