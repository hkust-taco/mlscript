// * Some minimized failures

:NoRecursiveTypes


class ArraysRep[A, Rep]
  method Update: Rep -> int -> A -> Rep
//│ Defined class ArraysRep[-A, =Rep]
//│ Declared ArraysRep.Update: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep

class ArraysImpl[A, Rep]: ArraysRep[A, Rep] & {
    update: Rep -> int -> A -> Rep
  }
  method Update = this.update
//│ Defined class ArraysImpl[-A, =Rep]
//│ Defined ArraysImpl.Update: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep

type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ Defined type alias Arrays[-A]


def simpleStepImpl arrImpl = ArraysImpl {
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.Update r0 i a, "updated")
  }
//│ simpleStepImpl: ArraysRep['A, in 'Rep & 'a out 'Rep | 'Rep0] -> (ArraysImpl['A, 'Rep1] with {
//│   update: forall 'b. (('Rep0 & 'b, anything,),) -> int -> 'A -> ('Rep | 'b, "updated",)
//│ })
//│ where
//│   'Rep1 :> ('c, "updated",)
//│         <: ('a, anything,)
//│   'a <: 'Rep0 & 'c
//│   'c :> 'Rep
//│      <: 'a
//│               = [Function: simpleStepImpl]


def arr: Arrays[int]
//│ arr: Arrays[int]
//│    = <missing implementation>


def mkArrays: ArraysImpl['a, 'r] -> Arrays['a]
mkArrays impl k = k impl
//│ mkArrays: ArraysImpl['a, 'r] -> Arrays['a]
//│         = <missing implementation>
//│ 'a -> ('a -> 'b) -> 'b
//│   <:  mkArrays:
//│ ArraysImpl['a, 'r] -> Arrays['a]
//│         = [Function: mkArrays]


// * Inconsistent bounds on 'Rep after type avoidance during extrusion (<- not sure comment is still current)
:e
def stepped = arr (fun arrImpl -> fun k -> k (simpleStepImpl arrImpl))
//│ ╔══[ERROR] Type error in application
//│ ║  l.54: 	def stepped = arr (fun arrImpl -> fun k -> k (simpleStepImpl arrImpl))
//│ ║        	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.18: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.54: 	def stepped = arr (fun arrImpl -> fun k -> k (simpleStepImpl arrImpl))
//│ ║        	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.54: 	def stepped = arr (fun arrImpl -> fun k -> k (simpleStepImpl arrImpl))
//│ ║        	              ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.23: 	    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.Update r0 i a, "updated")
//│ ╙──      	                                                                 ^^
//│ stepped: error
//│        = <no result>
//│          arr is not implemented


def stepped = arr (fun arrImpl -> fun (k: forall 'Rep. ArraysRep[int, 'Rep] -> 'r) -> k (simpleStepImpl arrImpl))
//│ stepped: (forall 'Rep. ArraysRep[int, 'Rep] -> 'a) -> 'a
//│        = <no result>
//│          arr is not implemented

stepped: Arrays[int]
//│ res: Arrays[int]
//│    = <no result>
//│      stepped and arr are not implemented


