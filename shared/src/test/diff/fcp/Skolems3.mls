:NoConstrainedTypes
:DontDistributeForalls
:NoCycleCheck
:NoRecursiveTypes



// *** Here are interesting examples of (relatively minor) limitations of the current extrusion scheme. ***


// * Here we essentially extrude skolem `a` in a constraint similar to `'y <: (a, a) -> a`
// * which is correctly approximated as `'y <: (anything, anything) -> nothing`.
def bar y =
  (fun x -> y (x, x)) : forall 'a. 'a -> 'a
//│ bar: ((??a, ??a,) -> ??a0) -> (forall 'a. 'a -> 'a)
//│    = [Function: bar]

// * In fact, what happens above is that local TV 'x is extruded into 'x0 (where 'x <: 'x0)
// * when passed to the lower-polymorphic-level TV 'y, as in `'y <: ('x0, 'x0) -> 'r0`.
// * Then we get constraint `a <: 'x` leading to `a <: 'x0` extruded into `anything <: 'x0`
// * and constraint `'r0 <: a` which is extruded into `'r0 <: nothing`.
// * Hence the inferred type.
// * This is all dandy and fine because we at no point try to unify `a` with a lower-level TV.

// * But in the following contrived example, we want to extrude `a` through **the same**
// * lower-polymorphic-level TV 's, resulting in extruded `a <: anything <: 's <: nothing <: a`
// * which is inconsistent because of the implied `anything <: nothing` constraint.
:e
def baz x =
  (x: 's -> 's): forall 'a. 'a -> 'a
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.30: 	  (x: 's -> 's): forall 'a. 'a -> 'a
//│ ║        	  ^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.30: 	  (x: 's -> 's): forall 'a. 'a -> 'a
//│ ║        	                            ^^
//│ ╟── back into type variable `'a`
//│ ║  l.30: 	  (x: 's -> 's): forall 'a. 'a -> 'a
//│ ╙──      	                                  ^^
//│ baz: (anything -> ??a) -> (forall 'a. 'a -> 'a)
//│    = [Function: baz]

// * Thankfully, it turns out this kind of situations just doesn't seem to arise very often.
// * Usually, we extrude things through **different** lower-level TVs which represent the
// * approximants of an extruded type variable, as in bar above as well as baz below:
def baz x =
  (x: 's -> 't): forall 'a. 'a -> 'a
//│ baz: (??a -> ??a0) -> (forall 'a. 'a -> 'a)
//│    = [Function: baz1]


// * Even when involving invariant type constructors, things just seem to work out fine.

def bar y =
  (fun x -> y (mut x)) : forall 'a. 'a -> 'a
//│ bar: (??a -> ??a0) -> (forall 'a. 'a -> 'a)
//│    = [Function: bar1]

def lift: 'a -> MutArray['a]
def lift x = (mut x)
//│ lift: 'a -> MutArray['a]
//│     = <missing implementation>
//│ 'a -> (mut 'a,)
//│   <:  lift:
//│ 'a -> MutArray['a]
//│     = [Function: lift]

def bar y =
  (fun x -> y (lift x)) : forall 'a. 'a -> 'a
//│ bar: (MutArray[anything] -> ??a) -> (forall 'a. 'a -> 'a)
//│    = [Function: bar2]

def bar y =
  (fun x -> y (x, x)) : forall 'a. MutArray['a] -> 'a
//│ bar: ((MutArray[in ??a out ??a0], MutArray[in ??a out ??a0],) -> ??a) -> (forall 'a. MutArray['a] -> 'a)
//│    = [Function: bar3]

def bar y =
  (fun x -> y (x, x)) : forall 'a. MutArray['a] -> MutArray['a]
//│ bar: ((MutArray[in ??a out ??a0], MutArray[in ??a out ??a0],) -> MutArray[in ??a0 out ??a]) -> (forall 'a. MutArray['a] -> MutArray['a])
//│    = [Function: bar4]

def bar y =
  (fun x -> y (mut x)) : forall 'a. MutArray['a] -> 'a
//│ bar: (MutArray[in ??a out ??a0] -> ??a) -> (forall 'a. MutArray['a] -> 'a)
//│    = [Function: bar5]

def bar y =
  (fun x -> y (lift x)) : forall 'a. MutArray['a] -> 'a
//│ bar: (MutArray[in 'a out 'a | MutArray[in ??a out ??a0]] -> ??a) -> (forall 'a0. MutArray['a0] -> 'a0)
//│    = [Function: bar6]

def bar y =
  (fun x -> y (lift x)) : forall 'a. MutArray['a] -> MutArray['a]
//│ bar: (MutArray[in 'a out 'a | MutArray[in ??a out ??a0]] -> MutArray[in ??a0 out ??a]) -> (forall 'a0. MutArray['a0] -> MutArray['a0])
//│    = [Function: bar7]

// * Again, we can still make it fail using contrived annotations.
:e
def baz x =
  (x: MutArray['s] -> 't): forall 'a. 'a -> 'a
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.101: 	  (x: MutArray['s] -> 't): forall 'a. 'a -> 'a
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'a` does not match type `MutArray['s]`
//│ ║  l.101: 	  (x: MutArray['s] -> 't): forall 'a. 'a -> 'a
//│ ║         	                                      ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.101: 	  (x: MutArray['s] -> 't): forall 'a. 'a -> 'a
//│ ║         	      ^^^^^^^^^^^^
//│ ╟── Note: quantified type variable 'a is defined at:
//│ ║  l.101: 	  (x: MutArray['s] -> 't): forall 'a. 'a -> 'a
//│ ╙──       	                                  ^^
//│ baz: (MutArray['s] -> ??a) -> (forall 'a. 'a -> 'a)
//│    = [Function: baz2]
:e
def baz x =
  (x: MutArray['s] -> 't): forall 'a. MutArray['a] -> 'a
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.118: 	  (x: MutArray['s] -> 't): forall 'a. MutArray['a] -> 'a
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.118: 	  (x: MutArray['s] -> 't): forall 'a. MutArray['a] -> 'a
//│ ╙──       	                                               ^^
//│ baz: (MutArray['s] -> ??a) -> (forall 'a. MutArray['a] -> 'a)
//│   where
//│     's :> ??a0
//│        <: ??a
//│    = [Function: baz3]



// *** Other various tests and tweaks. ***


// * Here, the polymorphic nested let binding introduces more intermediate extrusions,
// * but things still work out similarly as before.
def bar y =
  (fun x -> let tmp = y (x, x) in x) : forall 'a. 'a -> 'a
//│ bar: ((??a, ??a,) -> anything) -> (forall 'a. 'a -> 'a)
//│    = [Function: bar8]

def bar y =
  (fun x -> let tmp = (fun x0 -> y (x0, x0)) x in x) : forall 'a. 'a -> 'a
//│ bar: ((??a, ??a,) -> anything) -> (forall 'a. 'a -> 'a)
//│    = [Function: bar9]

def id2: (forall 's. 's -> 's) -> (forall 't. 't -> 't)
id2 = id
//│ id2: (forall 's. 's -> 's) -> (forall 't. 't -> 't)
//│    = <missing implementation>
//│ 'a -> 'a
//│   <:  id2:
//│ (forall 's. 's -> 's) -> (forall 't. 't -> 't)
//│    = [Function: id]

:e // * Legit (rigid var not a function)
def bar y =
  (fun x -> y (id2 x, x)) : forall 'a. 'a -> 'a
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.159: 	  (fun x -> y (id2 x, x)) : forall 'a. 'a -> 'a
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'a` is not a function
//│ ║  l.159: 	  (fun x -> y (id2 x, x)) : forall 'a. 'a -> 'a
//│ ║         	                                       ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.148: 	def id2: (forall 's. 's -> 's) -> (forall 't. 't -> 't)
//│ ║         	                     ^^^^^^^^
//│ ╟── from reference:
//│ ║  l.159: 	  (fun x -> y (id2 x, x)) : forall 'a. 'a -> 'a
//│ ║         	                   ^
//│ ╟── Note: quantified type variable 'a is defined at:
//│ ║  l.159: 	  (fun x -> y (id2 x, x)) : forall 'a. 'a -> 'a
//│ ╙──       	                                   ^^
//│ bar: ((forall 't. 't -> 't, ??a,) -> ??a0) -> (forall 'a. 'a -> 'a)
//│    = [Function: bar10]

:e // * Legit (rigid var function can't be used as polymorphic function)
def bar y =
  (fun x -> y (id2 x, x)) : forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.180: 	  (fun x -> y (id2 x, x)) : forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'s` does not match type `'a`
//│ ║  l.148: 	def id2: (forall 's. 's -> 's) -> (forall 't. 't -> 't)
//│ ║         	                     ^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.180: 	  (fun x -> y (id2 x, x)) : forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                                        ^^
//│ ╟── Note: quantified type variable 's is defined at:
//│ ║  l.148: 	def id2: (forall 's. 's -> 's) -> (forall 't. 't -> 't)
//│ ╙──       	                 ^^
//│ bar: ((forall 't. 't -> 't, ??a -> ??a0,) -> ??a0 -> ??a) -> (forall 'a. ('a -> 'a) -> 'a -> 'a)
//│    = [Function: bar11]

def id3: ('s -> 's) -> ('s -> 's)
id3 = id
//│ id3: ('s -> 's) -> 's -> 's
//│    = <missing implementation>
//│ 'a -> 'a
//│   <:  id3:
//│ ('s -> 's) -> 's -> 's
//│    = [Function: id]

def bar y =
  (fun x -> y (id3 x, 0)) : forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ bar: ((??a -> anything, 0,) -> ??a0 -> ??a) -> (forall 'a. ('a -> 'a) -> 'a -> 'a)
//│    = [Function: bar12]


:e // * Legit (similar to previous baz example)
def baz x =
  (x: ('s -> 's) -> 0): forall 'a. ('a -> 'a) -> 0
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.213: 	  (x: ('s -> 's) -> 0): forall 'a. ('a -> 'a) -> 0
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.213: 	  (x: ('s -> 's) -> 0): forall 'a. ('a -> 'a) -> 0
//│ ║         	                                          ^^
//│ ╟── back into type variable `'a`
//│ ║  l.213: 	  (x: ('s -> 's) -> 0): forall 'a. ('a -> 'a) -> 0
//│ ║         	                                    ^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.213: 	  (x: ('s -> 's) -> 0): forall 'a. ('a -> 'a) -> 0
//│ ╙──       	             ^^
//│ baz: ((??a -> anything) -> 0) -> (forall 'a. ('a -> 'a) -> 0)
//│    = [Function: baz4]


:e
def boo =
  let tmp = (id: 's -> 's): forall 'a. 'a -> 'a
  in 0
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.232: 	  let tmp = (id: 's -> 's): forall 'a. 'a -> 'a
//│ ║         	            ^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.232: 	  let tmp = (id: 's -> 's): forall 'a. 'a -> 'a
//│ ║         	                                       ^^
//│ ╟── back into type variable `'a`
//│ ║  l.232: 	  let tmp = (id: 's -> 's): forall 'a. 'a -> 'a
//│ ╙──       	                                             ^^
//│ boo: 0
//│    = [Function: boo]

def boo =
  let tmp = (error: 's -> 't): forall 'a. ('a -> 'a) -> 0
  in 0
//│ boo: 0
//│    = [Function: boo1]

def boo x =
  let tmp = (x: 's -> 't): forall 'a. ('a -> 'a) -> 0
  in 0
//│ boo: ((??a -> ??a0) -> 0) -> 0
//│    = [Function: boo2]

:e
def boo x =
  let tmp = (x: ('s -> 's) -> 't): forall 'a. ('a -> 'a) -> 0
  in 0
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.260: 	  let tmp = (x: ('s -> 's) -> 't): forall 'a. ('a -> 'a) -> 0
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.260: 	  let tmp = (x: ('s -> 's) -> 't): forall 'a. ('a -> 'a) -> 0
//│ ║         	                                                     ^^
//│ ╟── back into type variable `'a`
//│ ║  l.260: 	  let tmp = (x: ('s -> 's) -> 't): forall 'a. ('a -> 'a) -> 0
//│ ║         	                                               ^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.260: 	  let tmp = (x: ('s -> 's) -> 't): forall 'a. ('a -> 'a) -> 0
//│ ╙──       	                       ^^
//│ boo: ((??a -> anything) -> 0) -> 0
//│    = [Function: boo3]


