:NoRecursiveTypes



(forall 'A. fun (x: 'A) -> x) : forall 'X. 'X -> 'X
//│ res: 'X -> 'X
//│    = [Function: res]


f = forall 'A. fun (x: 'A) -> x
//│ f: 'A -> 'A
//│  = [Function: f]

f 0
f true
f: forall 'X. 'X -> 'X
//│ res: 0
//│    = 0
//│ res: true
//│    = true
//│ res: 'X -> 'X
//│    = [Function: f]


r = { f = forall 'A. fun (x: 'A) -> x }
//│ r: {f: forall 'A. 'A -> 'A}
//│  = { f: [Function: f] }

r.f 0
r.f true
//│ res: 0
//│    = 0
//│ res: true
//│    = true


def k1(f: forall 'X. 'X -> 'X) = (f 0, f true)
//│ k1: (forall 'X. 'X -> 'X) -> (0, true,)
//│   = [Function: k1]

k1 f
//│ res: (0, true,)
//│    = [ 0, true ]

k1 r.f
//│ res: (0, true,)
//│    = [ 0, true ]


def k2(f) = (f 0, f true)
//│ k2: (0 -> 'a & true -> 'b) -> ('a, 'b,)
//│   = [Function: k2]

k2 f
//│ res: (0, true,)
//│    = [ 0, true ]

k2 r.f
//│ res: (0, true,)
//│    = [ 0, true ]


// * Interesting trick: can use an empty `forall` to force generalization of curried lambdas:
:ns
f = fun x -> fun y -> (x, y)
g = fun x -> forall. fun y -> (x, y)
//│ f: forall 'a 'b. 'a -> 'b -> ('a, 'b,)
//│  = [Function: f1]
//│ g: forall 'a. 'a -> (forall 'b. 'b -> ('a, 'b,))
//│  = [Function: g]

// * They still appear the same after simplification, due to distributivity of `forall` over `->`:
f
g
//│ res: 'a -> 'b -> ('a, 'b,)
//│    = [Function: f1]
//│ res: 'a -> 'b -> ('a, 'b,)
//│    = [Function: g]



// * Explicitly-bound type variables are rigid (like in OCaml)
:e
f = forall 'A. fun (x: 'A) -> x + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.84: 	f = forall 'A. fun (x: 'A) -> x + 1
//│ ║        	                              ^^^
//│ ╟── rigid type variable of type `'A` is not an instance of type `int`
//│ ║  l.84: 	f = forall 'A. fun (x: 'A) -> x + 1
//│ ║        	           ^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.84: 	f = forall 'A. fun (x: 'A) -> x + 1
//│ ╙──      	                              ^
//│ f: anything -> (error | int)
//│  = [Function: f2]



