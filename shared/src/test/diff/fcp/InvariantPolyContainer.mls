:NoRecursiveTypes
:NoJS


def single: 'a -> MutArray['a]
//│ single: 'a -> MutArray['a]

sid = single id
//│ sid: MutArray['a]
//│   where
//│     'a :> forall 'b. 'b -> 'b

def ty1: MutArray[forall 'X. 'X -> 'X]
def ty1 = sid
//│ ty1: MutArray[forall 'X. 'X -> 'X]
//│ MutArray['a]
//│   where
//│     'a :> forall 'b. 'b -> 'b
//│   <:  ty1:
//│ MutArray[forall 'X. 'X -> 'X]

def ty2: forall 'A. MutArray['A -> 'A]
def ty2 = sid
//│ ty2: MutArray['A -> 'A]
//│ MutArray['a]
//│   where
//│     'a :> forall 'b. 'b -> 'b
//│   <:  ty2:
//│ MutArray['A -> 'A]

:e
ty1 = ty2
//│ MutArray['A -> 'A]
//│   <:  ty1:
//│ MutArray[forall 'X. 'X -> 'X]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.32: 	ty1 = ty2
//│ ║        	^^^^^^^^^
//│ ╟── type variable `'X` leaks out of its scope
//│ ║  l.13: 	def ty1: MutArray[forall 'X. 'X -> 'X]
//│ ║        	                             ^^
//│ ╟── back into type variable `'X`
//│ ║  l.13: 	def ty1: MutArray[forall 'X. 'X -> 'X]
//│ ║        	                                   ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.32: 	ty1 = ty2
//│ ╙──      	      ^^^

:e
ty2 = ty1
//│ MutArray[forall 'X. 'X -> 'X]
//│   <:  ty2:
//│ MutArray['A -> 'A]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.51: 	ty2 = ty1
//│ ║        	^^^^^^^^^
//│ ╟── type `'X` does not match type `'A`
//│ ║  l.13: 	def ty1: MutArray[forall 'X. 'X -> 'X]
//│ ║        	                             ^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.22: 	def ty2: forall 'A. MutArray['A -> 'A]
//│ ║        	                             ^^
//│ ╟── Note: quantified type variable 'X is defined at:
//│ ║  l.13: 	def ty1: MutArray[forall 'X. 'X -> 'X]
//│ ╙──      	                         ^^






