:NoRecursiveTypes


class L
class A: { f: anything }
//│ Defined class L
//│ Defined class A



def eval eval x = case x of
  L -> 0,
  A -> eval eval x.f
//│ eval: ('a -> 'f -> 'b & 'a) -> (L | (A with {f: 'f})) -> (0 | 'b)
//│     = [Function: eval]


:e
e = eval eval
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.19: 	e = eval eval
//│ ║        	    ^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ e: error | (L | A & {f: L | A}) -> 0
//│  = [Function (anonymous)]

e (A{f = L{}})
//│ res: 0 | error
//│    = 0


:e
e = eval eval!
//│ ╔══[ERROR] Inferred recursive type: 'f
//│   where
//│     'f <: A with {f: 'f}
//│ ║  l.13: 	  A -> eval eval x.f
//│ ╙──      	                 ^^^
//│ e: 'a -> 0
//│   where
//│     'a <: L | (A with {f: 'a})
//│  = [Function (anonymous)]

:e
e (A{f = L{}})
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: {f: A & 'a}
//│ ║  l.11: 	def eval eval x = case x of
//│ ╙──      	                       ^
//│ res: 0
//│    = 0

:e
// * Note: this computation will diverge
rec def v = A{f = v}
//│ ╔══[ERROR] Inferred recursive type: 'f
//│   where
//│     'f :> A with {f: 'f}
//│ ╙──
//│ v: 'f
//│   where
//│     'f :> A with {f: 'f}
//│  = [Function: v]

:e
e v
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: {f: A & 'a}
//│ ║  l.11: 	def eval eval x = case x of
//│ ╙──      	                       ^
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.67: 	e v
//│ ║        	^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error | 0
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:RecursiveTypes

// * Note: Expected divergence
:re
e v
//│ res: 0
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



def eval eval x = case x of
  L -> 0,
  A -> { x = eval eval x.f }
//│ eval: ('a -> 'f -> 'b & 'a) -> (L | (A with {f: 'f})) -> (0 | {x: 'b})
//│     = [Function: eval1]


:e
e = eval eval
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.100: 	e = eval eval
//│ ║         	    ^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ e: error | (L | A & {f: L | A}) -> (0 | {x: 0 | {x: nothing}})
//│  = [Function (anonymous)]

:re
e v
//│ res: 0 | {x: 0 | {x: nothing}} | error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


e = eval eval!
//│ e: 'a -> 'b
//│   where
//│     'b :> 0 | {x: 'b}
//│     'a <: L | A & {f: 'a}
//│  = [Function (anonymous)]

:re
e v
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

