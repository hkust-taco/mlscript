:ConstrainedTypes


def f n = n 0
//│ f: (0 -> 'a) -> 'a
//│  = [Function: f]

:e
f {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.9: 	f {}
//│ ║       	^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.9: 	f {}
//│ ║       	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.4: 	def f n = n 0
//│ ║       	          ^^^
//│ ╟── from reference:
//│ ║  l.4: 	def f n = n 0
//│ ╙──     	          ^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function

// :d
:e
f {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.28: 	f {} {}
//│ ║        	^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.28: 	f {} {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.4: 	def f n = n 0
//│ ║       	          ^^^
//│ ╟── from reference:
//│ ║  l.4: 	def f n = n 0
//│ ╙──     	          ^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function


def f n m = n 0
//│ f: 'a -> (anything -> 'b
//│   where
//│     'a <: 0 -> 'b)
//│  = [Function: f1]

// :e // Error delayed by inconsistent constrained types
f {}
//│ res: anything -> 'a
//│   where
//│     anything <: 0 -> 'a
//│    = [Function (anonymous)]

:e
f {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.60: 	f {} {}
//│ ║        	^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.60: 	f {} {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.46: 	def f n m = n 0
//│ ╙──      	            ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function



def test extr =
  let f n m = n 0
  in let _ = extr f
  in f 0
//│ test: ((forall 'a 'b. 'a -> (anything -> 'b
//│   where
//│     'a <: 0 -> 'b)) -> anything) -> (anything -> 'c
//│   where
//│     0 <: 0 -> 'c)
//│     = [Function: test]

:e
test 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.88: 	test 1
//│ ║        	^^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.88: 	test 1
//│ ║        	     ^
//│ ╟── Note: constraint arises from application:
//│ ║  l.78: 	  in let _ = extr f
//│ ╙──      	             ^^^^^^
//│ res: anything -> 'a | error
//│   where
//│     0 <: 0 -> 'a
//│ Runtime error:
//│   TypeError: extr is not a function

// * Note: this extrudes a Constrainedtype referring to a higher-level variable (x)
def test extr x =
  let f n m = x (n 0)
  in let _ = extr f
  in f 0
//│ test: ((forall 'a 'b 'c. 'a -> (anything -> 'c
//│   where
//│     'a <: 0 -> 'b
//│     'd <: 'b -> 'c)) -> anything) -> 'd -> (anything -> 'e
//│   where
//│     0 <: 0 -> 'f
//│     'd <: 'f -> 'e)
//│     = [Function: test1]

:e
test 0
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.119: 	test 0
//│ ║         	^^^^^^
//│ ╟── integer literal of type `0` is not a function
//│ ║  l.119: 	test 0
//│ ║         	     ^
//│ ╟── Note: constraint arises from application:
//│ ║  l.107: 	  in let _ = extr f
//│ ╙──       	             ^^^^^^
//│ res: 'a -> (anything -> 'b
//│   where
//│     'a <: 'c -> 'b
//│     0 <: 0 -> 'c) | error
//│    = [Function (anonymous)]

def test extr x =
  let f n m = x (n 0)
  in f 0
//│ test: anything -> 'a -> (anything -> 'b
//│   where
//│     'a <: 'c -> 'b
//│     0 <: 0 -> 'c)
//│     = [Function: test2]

// Error delayed by inconsistent constrained types
test 0 1
//│ res: anything -> 'a
//│   where
//│     1 <: 'b -> 'a
//│     0 <: 0 -> 'b
//│    = [Function (anonymous)]

:e
test 0 1 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.153: 	test 0 1 2
//│ ║         	^^^^^^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.153: 	test 0 1 2
//│ ║         	       ^
//│ ╟── Note: constraint arises from application:
//│ ║  l.136: 	  let f n m = x (n 0)
//│ ╙──       	              ^^^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function

def test extr x =
  let f n m = (n x 0)
  in f 0
//│ test: anything -> 'a -> (anything -> 'b
//│   where
//│     0 <: 'a -> 0 -> 'b)
//│     = [Function: test3]

// Error delayed by inconsistent constrained types
test 0 1
//│ res: anything -> 'a
//│   where
//│     0 <: 1 -> 0 -> 'a
//│    = [Function (anonymous)]

:e
test 0 1 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.183: 	test 0 1 2
//│ ║         	^^^^^^^^^^
//│ ╟── integer literal of type `0` is not a function
//│ ║  l.169: 	  in f 0
//│ ║         	       ^
//│ ╟── Note: constraint arises from application:
//│ ║  l.168: 	  let f n m = (n x 0)
//│ ╙──       	               ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function


