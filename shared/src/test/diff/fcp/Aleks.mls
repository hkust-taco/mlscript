:NoJS


// ∀x. (x -> x, x -> x)  <:  ∀y. (y -> y, a)
//   SKOLEM y
//   FLEX x
//   x < y < x
//   x -> x < a -- wrong level
//     x_L -> x_U < a
//     where
//       x_L < x_U
//       x < x_U
//       x > x_L
//       x_U > Top ( > y )
//       x_L < Bot ( < y )


def foo: forall 'x. ('x -> 'x, 'x -> 'x)
//│ foo: ('x -> 'x, 'x -> 'x,)


def bar: (forall 'y. ('y -> 'y, 'a)) -> 'a
//│ bar: (forall 'y. ('y -> 'y, 'a,)) -> 'a

r1 = bar foo
//│ r1: (??y & 'x) -> ('x | ??y0)


def baz: (forall 'y. ('a, 'y -> 'y)) -> 'a
//│ baz: (forall 'y. ('a, 'y -> 'y,)) -> 'a

r2 = bar foo
//│ r2: (??y & 'x) -> ('x | ??y0)



:e
r1 id
//│ ╔══[ERROR] Type error in application
//│ ║  l.38: 	r1 id
//│ ║        	^^^^^
//│ ╟── type variable `'y` leaks out of its scope
//│ ║  l.38: 	r1 id
//│ ║        	   ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.25: 	r1 = bar foo
//│ ║        	         ^^^
//│ ╟── • this reference:
//│ ║  l.25: 	r1 = bar foo
//│ ║        	     ^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.18: 	def foo: forall 'x. ('x -> 'x, 'x -> 'x)
//│ ╙──      	                               ^^
//│ res: error | 'a -> 'a | ??y

:e
r2 id
//│ ╔══[ERROR] Type error in application
//│ ║  l.58: 	r2 id
//│ ║        	^^^^^
//│ ╟── type variable `'y` leaks out of its scope
//│ ║  l.58: 	r2 id
//│ ║        	   ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.32: 	r2 = bar foo
//│ ║        	         ^^^
//│ ╟── • this reference:
//│ ║  l.32: 	r2 = bar foo
//│ ║        	     ^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.18: 	def foo: forall 'x. ('x -> 'x, 'x -> 'x)
//│ ╙──      	                               ^^
//│ res: error | 'a -> 'a | ??y


