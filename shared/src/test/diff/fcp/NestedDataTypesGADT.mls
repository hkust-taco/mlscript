:NoRecursiveTypes
:IrregularTypes


// * Perfect Trees (https://www.cis.upenn.edu/~plclub/blog/2020-12-04-nested-datatypes/)

// * Representing perfect trees with GADTs

// data HTree (h :: Nat) (a :: Type) where
//   DLeaf :: a -> HTree Z a
//   DNode :: Two (HTree h a) -> HTree (S h) a


type Two[A] = (A, A)
//│ Defined type alias Two[+A]

def mapTwo f ((a, b)) = (f a, f b)
//│ mapTwo: ('a -> 'b & 'c -> 'd) -> (('a, 'c,),) -> ('b, 'd,)
//│       = [Function: mapTwo]

// class Z
// class S: { value: Nat }
// type NAT = S | Z
class Z
class S[P]
  method Inv: P -> P
  method Inv = id
//│ Defined class Z
//│ Defined class S[=P]
//│ Declared S.Inv: S['P] -> 'P -> 'P
//│ Defined S.Inv: S['P] -> 'a -> 'a

:w
class HTreeBase[N, A]: { n: N }
class DLeaf[A]: HTreeBase[Z, A] & { value: A }
class DNode[N, A]: HTreeBase[S[N], A] & { subTree: Two[HTree[N, A]] }
type HTree[N, A] = forall 'r. (forall 'p. (DLeaf[A] | DNode[S['p], A] & DNode[N, A]) -> 'r) -> 'r
//│ Defined class HTreeBase[+N, ±A]
//│ Defined class DLeaf[+A]
//│ Defined class DNode[=N, +A]
//│ Defined type alias HTree[=N, +A]
//│ ╔══[WARNING] Type definition HTreeBase has bivariant type parameters:
//│ ║  l.34: 	class HTreeBase[N, A]: { n: N }
//│ ║        	      ^^^^^^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.34: 	class HTreeBase[N, A]: { n: N }
//│ ╙──      	                   ^


d1 = DLeaf { value = 1; n = Z{} }
//│ d1: DLeaf[1]
//│   = DLeaf { n: Z {}, value: 1 }
d1: HTreeBase[Z, int]
//│ res: HTreeBase[Z, ?]
//│    = DLeaf { n: Z {}, value: 1 }

d1_ k = k d1
//│ d1_: (DLeaf[1] -> 'a) -> 'a
//│    = [Function: d1_]

d1_ : HTree[Z, int]
//│ res: HTree[Z, int]
//│    = [Function: d1_]

d2 = DNode { subTree = (d1_, d1_); n = S{} }
//│ d2: DNode['N, 1] with {
//│   n: forall 'P. S['P],
//│   subTree: (forall 'a. (DLeaf[1] -> 'a) -> 'a, forall 'a. (DLeaf[1] -> 'a) -> 'a,)
//│ }
//│   = DNode { n: S {}, subTree: [ [Function: d1_], [Function: d1_] ] }

def d1_ty: HTree[Z, int]
//│ d1_ty: HTree[Z, int]
//│      = <missing implementation>

d2 = DNode { subTree = (d1_ty, d1_ty); n = S{} }
//│ d2: DNode[Z, int] with {n: forall 'P. S['P], subTree: (HTree[Z, int], HTree[Z, int],)}
//│   = <no result>
//│     d1_ty is not implemented
d2: DNode[Z, int]
d2: HTreeBase[S[Z], int]
//│ res: DNode[Z, int]
//│    = <no result>
//│      d2 and d1_ty are not implemented
//│ res: HTreeBase[S[Z], ?]
//│    = <no result>
//│      d2 and d1_ty are not implemented

d2_ k = k d2
//│ d2_: ((DNode[Z, int] with {n: forall 'P. S['P], subTree: (HTree[Z, int], HTree[Z, int],)}) -> 'a) -> 'a
//│    = <no result>
//│      d2 and d1_ty are not implemented

:e // FIXME
d2_ : HTree[S[Z], int]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.95: 	d2_ : HTree[S[Z], int]
//│ ║        	^^^
//│ ╟── expression of type `S[in Z | 'p out Z & 'p]` is not an instance of type `Z`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.72: 	def d1_ty: HTree[Z, int]
//│ ║        	                 ^
//│ ╟── Note: class type parameter N is defined at:
//│ ║  l.36: 	class DNode[N, A]: HTreeBase[S[N], A] & { subTree: Two[HTree[N, A]] }
//│ ╙──      	            ^
//│ res: HTree[S[Z], int]
//│    = <no result>
//│      d2_, d2 and d1_ty are not implemented

:e // FIXME
d2_ k = k (d2:HTreeBase[S[Z], int])
d2_ : HTree[S[Z], int]
//│ d2_: (HTreeBase[S[Z], ?] -> 'a) -> 'a
//│    = <no result>
//│      d2 and d1_ty are not implemented
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.112: 	d2_ : HTree[S[Z], int]
//│ ║         	^^^
//│ ╟── type `HTreeBase[S[Z], ?]` does not match type `DLeaf[int] | DNode[S[in Z | 'p out Z & 'p], int]`
//│ ║  l.111: 	d2_ k = k (d2:HTreeBase[S[Z], int])
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.37: 	type HTree[N, A] = forall 'r. (forall 'p. (DLeaf[A] | DNode[S['p], A] & DNode[N, A]) -> 'r) -> 'r
//│ ╙──      	                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: HTree[S[Z], int]
//│    = <no result>
//│      d2_, d2 and d1_ty are not implemented




