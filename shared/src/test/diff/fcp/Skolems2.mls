:NoRecursiveTypes
:ConstrainedTypes
:DontDistributeForalls
// 


// * This asks for a polymorphic function and leverages that polymorphism
def oops (i: forall 'c. ('c -> 'c, 0)) =
  let _ = log "Hi!"
  in let _ = (fun ((f, 0)) ->
    let _ = log f
    in let r = (f id) "hello"
    in log r) i
  in (fun ((f, 0)) -> f) i
//│ oops: (forall 'c. ('c -> 'c, 0,)) -> 'c0 -> 'c0
//│     = [Function: oops]

// * Notice the skolem extrusion/leakage which extrudes into `anything -> nothing`
def extrude f = oops((f, 0))
//│ extrude: (??c -> ??c0) -> 'c -> 'c
//│        = [Function: extrude]

:e
extrude(id)
//│ ╔══[ERROR] Type error in application
//│ ║  l.24: 	extrude(id)
//│ ║        	^^^^^^^^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.8: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	                         ^^
//│ ╟── back into type variable `'c`
//│ ║  l.8: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	                               ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this tuple literal:
//│ ║  l.19: 	def extrude f = oops((f, 0))
//│ ║        	                     ^^^^^^
//│ ╟── • this function:
//│ ║  l.8: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.9: 	  let _ = log "Hi!"
//│ ║       	^^^^^^^^^^^^^^^^^^^
//│ ║  l.10: 	  in let _ = (fun ((f, 0)) ->
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.11: 	    let _ = log f
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.12: 	    in let r = (f id) "hello"
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.13: 	    in log r) i
//│ ║        	^^^^^^^^^^^^^^^
//│ ║  l.14: 	  in (fun ((f, 0)) -> f) i
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.19: 	def extrude f = oops((f, 0))
//│ ╙──      	                ^^^^
//│ res: error | 'c -> 'c
//│    = [Function: id]
//│ // Output
//│ Hi!
//│ [Function: id]
//│ hello

:e
extrude(id)(42)
//│ ╔══[ERROR] Type error in application
//│ ║  l.64: 	extrude(id)(42)
//│ ║        	^^^^^^^^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.8: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	                         ^^
//│ ╟── back into type variable `'c`
//│ ║  l.8: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	                               ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this tuple literal:
//│ ║  l.19: 	def extrude f = oops((f, 0))
//│ ║        	                     ^^^^^^
//│ ╟── • this function:
//│ ║  l.8: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.9: 	  let _ = log "Hi!"
//│ ║       	^^^^^^^^^^^^^^^^^^^
//│ ║  l.10: 	  in let _ = (fun ((f, 0)) ->
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.11: 	    let _ = log f
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.12: 	    in let r = (f id) "hello"
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.13: 	    in log r) i
//│ ║        	^^^^^^^^^^^^^^^
//│ ║  l.14: 	  in (fun ((f, 0)) -> f) i
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.19: 	def extrude f = oops((f, 0))
//│ ╙──      	                ^^^^
//│ res: 42 | error
//│    = 42
//│ // Output
//│ Hi!
//│ [Function: id]
//│ hello

:e
extrude(id)(id)(42)
//│ ╔══[ERROR] Type error in application
//│ ║  l.104: 	extrude(id)(id)(42)
//│ ║         	^^^^^^^^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.8: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	                         ^^
//│ ╟── back into type variable `'c`
//│ ║  l.8: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	                               ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this tuple literal:
//│ ║  l.19: 	def extrude f = oops((f, 0))
//│ ║        	                     ^^^^^^
//│ ╟── • this function:
//│ ║  l.8: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.9: 	  let _ = log "Hi!"
//│ ║       	^^^^^^^^^^^^^^^^^^^
//│ ║  l.10: 	  in let _ = (fun ((f, 0)) ->
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.11: 	    let _ = log f
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.12: 	    in let r = (f id) "hello"
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.13: 	    in log r) i
//│ ║        	^^^^^^^^^^^^^^^
//│ ║  l.14: 	  in (fun ((f, 0)) -> f) i
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.19: 	def extrude f = oops((f, 0))
//│ ╙──      	                ^^^^
//│ res: 42 | error
//│    = 42
//│ // Output
//│ Hi!
//│ [Function: id]
//│ hello

// * This clearly shouldn't be possible – it passes one skolem as the other
:e
f = extrude (fun x -> extrude (fun y -> x) x)
//│ ╔══[ERROR] Type error in application
//│ ║  l.145: 	f = extrude (fun x -> extrude (fun y -> x) x)
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.8: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	                         ^^
//│ ╟── back into type variable `'c`
//│ ║  l.8: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	                               ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this tuple literal:
//│ ║  l.19: 	def extrude f = oops((f, 0))
//│ ║        	                     ^^^^^^
//│ ╟── • this function:
//│ ║  l.8: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.9: 	  let _ = log "Hi!"
//│ ║       	^^^^^^^^^^^^^^^^^^^
//│ ║  l.10: 	  in let _ = (fun ((f, 0)) ->
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.11: 	    let _ = log f
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.12: 	    in let r = (f id) "hello"
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.13: 	    in log r) i
//│ ║        	^^^^^^^^^^^^^^^
//│ ║  l.14: 	  in (fun ((f, 0)) -> f) i
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.19: 	def extrude f = oops((f, 0))
//│ ║        	                ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.145: 	f = extrude (fun x -> extrude (fun y -> x) x)
//│ ╙──       	                                        ^
//│ f: error | 'c -> 'c
//│  = [Function (anonymous)]
//│ // Output
//│ Hi!
//│ [Function (anonymous)]
//│ Hi!
//│ [Function (anonymous)]
//│ hello
//│ hello

// * Boom! (exhibits crash using ill-typed `f` above)
:re
f 42
//│ res: 42 | error
//│ Runtime error:
//│   TypeError: f(...) is not a function
//│ // Output
//│ Hi!
//│ [Function (anonymous)]

// * Note: parser parses this the same as `oops((f, 0)._1)`
def extrude f = oops((f, 0))._1
//│ extrude: (forall 'c. ('c -> 'c, 0,)) -> 'c0 -> 'c0
//│        = [Function: extrude1]



// *** Other random tests ***



def oops (i: forall 'c. ('c -> 'c, 0)) =
  let _ = (i._1 id) "hello"
  in i._1
//│ oops: (forall 'c. ('c -> 'c, 0,)) -> 'c0 -> 'c0
//│     = [Function: oops1]

def oops (i: forall 'c. ('c -> 'c, 0)) =
  let _ = log "Hi!"
  in (fun ((f, 0)) ->
    let _ = log f
    in let r = (f id) "hello"
    in let _ = log r
    in f) i
//│ oops: (forall 'c. ('c -> 'c, 0,)) -> ("hello" -> anything & 'c0) -> (forall 'a. 'c0 | 'a -> 'a)
//│     = [Function: oops2]



def foo(a, b) = (a, b) : forall 'c. ('c, 'c)
//│ foo: (??c, ??c,) -> (nothing, nothing,)
//│    = [Function: foo]

:re
foo(error, error)
//│ res: (nothing, nothing,)
//│ Runtime error:
//│   Error: an error was thrown

def foo(a, b) = (a, b) : forall 'c. ('c, 'c -> 'c)
//│ foo: (??c, ??c0 -> ??c,) -> (forall 'c. ('c, 'c -> 'c,))
//│    = [Function: foo1]

def foo(a, b) = (a, b) : forall 'c. ('c -> 'c, 'c -> 'c)
//│ foo: (??c -> ??c0, ??c -> ??c0,) -> (forall 'c. ('c -> 'c, 'c -> 'c,))
//│    = [Function: foo2]

:e
foo(id, id)
//│ ╔══[ERROR] Type error in application
//│ ║  l.248: 	foo(id, id)
//│ ║         	^^^^^^^^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.243: 	def foo(a, b) = (a, b) : forall 'c. ('c -> 'c, 'c -> 'c)
//│ ║         	                                     ^^
//│ ╟── back into type variable `'c`
//│ ║  l.243: 	def foo(a, b) = (a, b) : forall 'c. ('c -> 'c, 'c -> 'c)
//│ ╙──       	                                           ^^
//│ res: error | ('c -> 'c, 'c -> 'c,)
//│    = [ [Function: id], [Function: id] ]


def foo(f) = (fun a -> f a) : forall 'c. 'c -> 'c
//│ foo: (??c -> ??c0) -> (forall 'c. 'c -> 'c)
//│    = [Function: foo3]

:e
foo(id)
//│ ╔══[ERROR] Type error in application
//│ ║  l.267: 	foo(id)
//│ ║         	^^^^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.262: 	def foo(f) = (fun a -> f a) : forall 'c. 'c -> 'c
//│ ║         	                                         ^^
//│ ╟── back into type variable `'c`
//│ ║  l.262: 	def foo(f) = (fun a -> f a) : forall 'c. 'c -> 'c
//│ ║         	                                               ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.262: 	def foo(f) = (fun a -> f a) : forall 'c. 'c -> 'c
//│ ╙──       	                       ^^^
//│ res: error | 'c -> 'c
//│    = [Function (anonymous)]


def foo(a, b) = let tmp = (a, b) : forall 'c. ('c -> 'c, 0) in a
//│ foo: (??c -> ??c0 & 'a, 0,) -> 'a
//│    = [Function: foo4]

:e
foo(id, 0)
//│ ╔══[ERROR] Type error in application
//│ ║  l.289: 	foo(id, 0)
//│ ║         	^^^^^^^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.284: 	def foo(a, b) = let tmp = (a, b) : forall 'c. ('c -> 'c, 0) in a
//│ ║         	                                               ^^
//│ ╟── back into type variable `'c`
//│ ║  l.284: 	def foo(a, b) = let tmp = (a, b) : forall 'c. ('c -> 'c, 0) in a
//│ ╙──       	                                                     ^^
//│ res: error | 'a -> 'a
//│    = [Function: id]

:e
foo(fun x -> foo(fun y -> x, 0) x, 0)
//│ ╔══[ERROR] Type error in application
//│ ║  l.303: 	foo(fun x -> foo(fun y -> x, 0) x, 0)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.284: 	def foo(a, b) = let tmp = (a, b) : forall 'c. ('c -> 'c, 0) in a
//│ ║         	                                               ^^
//│ ╟── back into type variable `'c`
//│ ║  l.284: 	def foo(a, b) = let tmp = (a, b) : forall 'c. ('c -> 'c, 0) in a
//│ ║         	                                                     ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.303: 	foo(fun x -> foo(fun y -> x, 0) x, 0)
//│ ╙──       	                          ^
//│ res: error | (??c & 'a) -> 'a
//│    = [Function (anonymous)]


:e
def foo((a, b) : forall 'c. ('c -> 'c, 0)) = ()
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.321: 	def foo((a, b) : forall 'c. ('c -> 'c, 0)) = ()
//│ ║         	        ^^^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.321: 	def foo((a, b) : forall 'c. ('c -> 'c, 0)) = ()
//│ ║         	                             ^^
//│ ╟── back into type variable `'c`
//│ ║  l.321: 	def foo((a, b) : forall 'c. ('c -> 'c, 0)) = ()
//│ ╙──       	                                   ^^
//│ foo: (forall 'c. ('c -> 'c, 0,)) -> ()
//│    = [Function: foo5]

foo((id, 0))
//│ res: ()
//│    = []

:e
foo((fun x -> foo((fun y -> x, 0)), 0))
//│ ╔══[ERROR] Type error in application
//│ ║  l.339: 	foo((fun x -> foo((fun y -> x, 0)), 0))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.321: 	def foo((a, b) : forall 'c. ('c -> 'c, 0)) = ()
//│ ╙──       	                             ^^
//│ res: error | ()
//│    = []




