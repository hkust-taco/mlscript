// * This creates a funny TV cycle which used to throw off type simplification into a SOF
// * ie:
// * 		'a29_51'' <: 'a29_52''
// * 		'a29_52'' :> 'a29_51''
// *  whose bounds were inlined in a loop alternating between the positive and negative polarity

:NoRecursiveTypes
:DontDistributeForalls
:NoJS


type ArraysImpl[A, Rep] = {
    init: A -> Rep;
    sub: Rep -> A
  }
//│ Defined type alias ArraysImpl[=A, =Rep]

type ArraysImplConsumer[A, R] = forall 'rep. ArraysImpl[A, 'rep] -> R
//│ Defined type alias ArraysImplConsumer[=A, +R]

type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ Defined type alias Arrays[=A]

def stepImpl_ty: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ stepImpl_ty: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]


:ns
def helper impl (k: ArraysImplConsumer['a2, 'res]) = k (stepImpl_ty impl)
//│ helper: forall 'a 'r 'r0 'b 'a0. 'b -> (forall 'a2 'res 'a1 'c. ArraysImplConsumer['a2, 'res] -> 'c)
//│   where
//│     'res <: 'c
//│     'a2 :> 'a
//│         <: 'a1
//│     'a1 :> 'a
//│         <: 'a2 & 'a0
//│     'b <: ArraysImpl[in 'a out 'a0, in 'r0 out 'r]
//│     'r :> 'r0
//│     'a <: 'a0
//│     'a0 :> 'a

// * Used to SOF in simplif:
helper
//│ res: ArraysImpl[in 'a & 'a0 out 'a | 'a0, 'r] -> (forall 'a2 'b. ArraysImplConsumer['a2, 'b] -> 'b)
//│   where
//│     'a2 :> 'a
//│         <: 'a0


