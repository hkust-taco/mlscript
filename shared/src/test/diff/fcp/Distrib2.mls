:NoRecursiveTypes
:DistributeForalls
:NoJS



type BTB = forall 'b. 'b -> 'b
//│ Defined type alias BTB



// * ========= This first version works fine because the LHS `forall 'a.` can be distributed. =========


def ty_1: (nothing -> 'a) -> 'a
//│ ty_1: (nothing -> 'a) -> 'a

def ty_2: (forall 'c. 'c -> 'c -> 'c) -> BTB
//│ ty_2: (forall 'c. 'c -> 'c -> 'c) -> BTB

// * Works thanks to `:DistributeForalls`, distributing the LHS (`forall 'a`)
ty_2 = ty_1
//│ (nothing -> 'a) -> 'a
//│   <:  ty_2:
//│ (forall 'c. 'c -> 'c -> 'c) -> BTB

def ty_1_2: (nothing -> BTB) -> BTB
//│ ty_1_2: (nothing -> BTB) -> BTB

ty_1_2 = ty_1
//│ (nothing -> 'a) -> 'a
//│   <:  ty_1_2:
//│ (nothing -> BTB) -> BTB

ty_2 = ty_1_2
//│ (nothing -> BTB) -> BTB
//│   <:  ty_2:
//│ (forall 'c. 'c -> 'c -> 'c) -> BTB



// * ========= Here the `forall 'a.` can't be distributed. =========
// * (Unless we somehow knew to widen the function to `nothing -> ...` and then distribute.)


def ty_1: 'a -> (nothing -> 'a) -> 'a
//│ ty_1: 'a -> (nothing -> 'a) -> 'a

def ty_2: nothing -> (forall 'c. 'c -> 'c -> 'c) -> BTB
//│ ty_2: nothing -> (forall 'c. 'c -> 'c -> 'c) -> BTB

// * But this still works thanks to `:DistributeForalls`, distributing the RHS (`forall 'b` out of BTB)
ty_2 = ty_1
//│ 'a -> (nothing -> 'a) -> 'a
//│   <:  ty_2:
//│ nothing -> (forall 'c. 'c -> 'c -> 'c) -> BTB



// * ========= Now without distributivity. =========


:DontDistributeForalls


// * This fails to constrain, as expected
:e
ty_2 = ty_1
//│ 'a -> (nothing -> 'a) -> 'a
//│   <:  ty_2:
//│ nothing -> (forall 'c. 'c -> 'c -> 'c) -> BTB
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.68: 	ty_2 = ty_1
//│ ║        	^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.7: 	type BTB = forall 'b. 'b -> 'b
//│ ║       	                      ^^
//│ ╟── back into type variable `'b`
//│ ║  l.7: 	type BTB = forall 'b. 'b -> 'b
//│ ║       	                            ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.68: 	ty_2 = ty_1
//│ ╙──      	       ^^^^


// * We can manually take ty_1 closer to ty_2

def ty_1_2: BTB -> (nothing -> BTB) -> BTB
//│ ty_1_2: BTB -> (nothing -> BTB) -> BTB

ty_1_2 = ty_1
//│ 'a -> (nothing -> 'a) -> 'a
//│   <:  ty_1_2:
//│ BTB -> (nothing -> BTB) -> BTB

// * But it still need distributivity for the inner comparison
:e
ty_2 = ty_1_2
//│ BTB -> (nothing -> BTB) -> BTB
//│   <:  ty_2:
//│ nothing -> (forall 'c. 'c -> 'c -> 'c) -> BTB
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.99: 	ty_2 = ty_1_2
//│ ║        	^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.7: 	type BTB = forall 'b. 'b -> 'b
//│ ║       	                      ^^
//│ ╟── back into type variable `'b`
//│ ║  l.7: 	type BTB = forall 'b. 'b -> 'b
//│ ╙──     	                            ^^

// * Note
def ty_1_3: BTB -> (nothing -> anything -> nothing) -> BTB
//│ ty_1_3: BTB -> (nothing -> anything -> nothing) -> BTB
ty_1_3 = ty_1_2
//│ BTB -> (nothing -> BTB) -> BTB
//│   <:  ty_1_3:
//│ BTB -> (nothing -> anything -> nothing) -> BTB


// * Again, with distrib.

:DistributeForalls

ty_2 = ty_1_2
//│ BTB -> (nothing -> BTB) -> BTB
//│   <:  ty_2:
//│ nothing -> (forall 'c. 'c -> 'c -> 'c) -> BTB



// * ========= Some additional semi-random tests. =========


def ty_0: nothing -> BTB
//│ ty_0: nothing -> BTB


ty_0 = id
//│ 'a -> 'a
//│   <:  ty_0:
//│ nothing -> BTB

ty_0 = (fun x -> fun y -> y)
//│ anything -> 'a -> 'a
//│   <:  ty_0:
//│ nothing -> BTB

idid = id (fun x -> id (fun y -> id y))
//│ idid: anything -> 'a -> 'a

def foo: 'a -> 'a -> 'a
//│ foo: 'a -> 'a -> 'a

idid x = foo (x (fun y -> y))
//│ idid: ((forall 'b. 'b -> 'b) -> 'a) -> 'a -> 'a

ty_0 = idid
//│ ((forall 'b. 'b -> 'b) -> 'a) -> 'a -> 'a
//│   <:  ty_0:
//│ nothing -> BTB

// ∀𝛼{𝛽≤𝛼}.𝛼→𝛼 ≤ ⊤→(∀𝛾.𝛾→𝛾)
ty_0 = idid id
//│ 'a -> ('b -> 'b | 'a)
//│   <:  ty_0:
//│ nothing -> BTB

def idid = let x = (fun y -> y) : 'a in id : 'a -> 'a
//│ idid: 'a -> 'a

ty_0 = idid id
//│ 'a -> 'a
//│   <:  ty_0:
//│ nothing -> BTB


