
// * This test demonstrates how unions and intersections can interfere withb FCP type inference


def foo: forall 'a 'b. 'a | 1 -> 'b -> 'b
//│ foo: 1 -> 'b -> 'b
//│    = <missing implementation>

foo
//│ res: 1 -> 'b -> 'b
//│    = <no result>
//│      foo is not implemented

def bar(f: 1 -> ('d | (forall 'c. 'c -> 'c))) = 1
//│ bar: (1 -> anything) -> 1
//│    = [Function: bar]

// * Still works because we distribute from the right
bar foo
//│ res: 1
//│    = <no result>
//│      foo is not implemented

def bar(f: 1 -> ('d & (forall 'c. 'c -> 'c))) = 1
//│ bar: (1 -> (forall 'c. 'c -> 'c)) -> 1
//│    = [Function: bar1]

bar
//│ res: (1 -> (forall 'c. 'c -> 'c)) -> 1
//│    = [Function: bar1]

// * Doesn't works because we are forced into DNF constraining where no distrib is currently done
:e
bar foo
//│ ╔══[ERROR] Type error in application
//│ ║  l.34: 	bar foo
//│ ║        	^^^^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.24: 	def bar(f: 1 -> ('d & (forall 'c. 'c -> 'c))) = 1
//│ ║        	                                  ^^
//│ ╟── back into type variable `'c`
//│ ║  l.24: 	def bar(f: 1 -> ('d & (forall 'c. 'c -> 'c))) = 1
//│ ║        	                                        ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.34: 	bar foo
//│ ║        	    ^^^
//│ ╟── • this function:
//│ ║  l.24: 	def bar(f: 1 -> ('d & (forall 'c. 'c -> 'c))) = 1
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.34: 	bar foo
//│ ╙──      	^^^
//│ res: 1 | error
//│    = <no result>
//│      foo is not implemented

