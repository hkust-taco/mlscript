
:NoConstrainedTypes
:DontDistributeForalls
:NoCycleCheck
:NoRecursiveTypes


// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]

class ST[S, A]
  method Inv_S: S -> S
  method Cov_A: A
//│ Defined class ST[=S, +A]
//│ Declared ST.Inv_S: ST['S, ?] -> 'S -> 'S
//│ Declared ST.Cov_A: ST['S, 'A] -> 'A


// ============ Type signatures for functions used in the examples ============

def head: List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ List['a] -> 'a
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ List['a] -> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

// Used to represent `[]` in the papers
def nil: List['a]
nil = Nil {}
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

def cons: 'a -> List['a] -> List['a]
def cons head tail = Cons { head; tail }
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'a 'tail. (List['a] & 'tail) -> (Cons['a | 'b] with {head: 'b, tail: 'tail}))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

def is_empty: List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ anything -> bool
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]

def single: 'a -> List['a]
def single x = cons x nil
//│ single: 'a -> List['a]
//│       = <missing implementation>
//│ 'a -> List['a]
//│   <:  single:
//│ 'a -> List['a]
//│       = [Function: single]

def append: List['a] -> List['a] -> List['a]
rec def append l1 l2 =
  if is_empty l1 then l2
  else cons (head l1) (append (tail l1) l2)
//│ append: List['a] -> List['a] -> List['a]
//│       = <missing implementation>
//│ List['a] -> List['a] -> List['a]
//│   <:  append:
//│ List['a] -> List['a] -> List['a]
//│       = [Function: append]

def length: List['a] -> int
rec def length l =
  if is_empty l then 0
  else succ (length (tail l))
//│ length: List[?] -> int
//│       = <missing implementation>
//│ List[?] -> int
//│   <:  length:
//│ List[?] -> int
//│       = [Function: length1]

def id: 'a -> 'a
def id x = x
//│ id: 'a -> 'a
//│   = <missing implementation>
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a
//│   = [Function: id1]

def ids: List[forall 'a. 'a -> 'a]
def ids = single id
//│ ids: List[forall 'a. 'a -> 'a]
//│    = <missing implementation>
//│ List[forall 'a. 'a -> 'a]
//│   <:  ids:
//│ List[forall 'a. 'a -> 'a]
//│    = [Function: ids]

def inc: int -> int
def inc = succ
//│ inc: int -> int
//│    = <missing implementation>
//│ int -> int
//│   <:  inc:
//│ int -> int
//│    = [Function: inc]

def choose: 'a -> 'a -> 'a
def choose x y = if true then x else y
//│ choose: 'a -> 'a -> 'a
//│       = <missing implementation>
//│ 'a -> (forall 'b. 'b -> ('a | 'b))
//│   <:  choose:
//│ 'a -> 'a -> 'a
//│       = [Function: choose]

def poly: (forall 'a. 'a -> 'a) -> (int, bool)
def poly f = (f 1, f true)
//│ poly: (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = <missing implementation>
//│ (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│   <:  poly:
//│ (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = [Function: poly]

def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
def auto x = x x
//│ auto: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│     = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto:
//│ (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│     = [Function: auto]

def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
def auto_ x = x x
//│ auto_: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto_:
//│ (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = [Function: auto_]

def map: ('a -> 'b) -> List['a] -> List['b]
rec def map f l =
  if is_empty l then nil
  else cons (f (head l)) (map f (tail l))
//│ map: ('a -> 'b) -> List['a] -> List['b]
//│    = <missing implementation>
//│ ('b -> 'a) -> List['b] -> List['a]
//│   <:  map:
//│ ('a -> 'b) -> List['a] -> List['b]
//│    = [Function: map]

def app: ('a -> 'b) -> 'a -> 'b
def app f x = f x
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = <missing implementation>
//│ ('a -> 'b) -> 'a -> 'b
//│   <:  app:
//│ ('a -> 'b) -> 'a -> 'b
//│    = [Function: app]

def revapp: 'a -> ('a -> 'b) -> 'b
def revapp x f = f x
//│ revapp: 'a -> ('a -> 'b) -> 'b
//│       = <missing implementation>
//│ 'a -> (forall 'b. ('a -> 'b) -> 'b)
//│   <:  revapp:
//│ 'a -> ('a -> 'b) -> 'b
//│       = [Function: revapp]

:ng
def runST: (forall 's. ST['s, 'v]) -> 'v
//│ runST: (forall 's. ST['s, 'v]) -> 'v

:ng
def argST: ST['s, int]
//│ argST: ST['s, int]

// A9
:ng
def f: ('a -> 'a) -> List['a] -> 'a
//│ f: ('a -> 'a) -> List['a] -> 'a

// C8
:ng
def g: List['a] -> List['a] -> 'a
//│ g: List['a] -> List['a] -> 'a

// E1, E2
:ng
def h: int -> (forall 'a. 'a -> 'a)
def k: 'a -> List['a] -> 'a
def lst: List[forall 'a. int -> 'a -> 'a]
//│ h: int -> (forall 'a. 'a -> 'a)
//│ k: 'a -> List['a] -> 'a
//│ lst: List[forall 'a. int -> 'a -> 'a]

// E3
:ng
def r: (forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> int
//│ r: (anything -> (forall 'b. 'b -> 'b)) -> int


type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

type Pair[A, B] = (A, B)
//│ Defined type alias Pair[+A, +B]

def fst: forall 'a 'b. Pair['a, 'b] -> 'a
def fst((x, y)) = x
//│ fst: Pair['a, ?] -> 'a
//│    = <missing implementation>
//│ (('a, anything,),) -> 'a
//│   <:  fst:
//│ Pair['a, ?] -> 'a
//│    = [Function: fst]

def zero: ChurchInt
def zero f x = x
//│ zero: ChurchInt
//│     = <missing implementation>
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: zero]

def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ (n: ChurchInt) f x = f (n f x)
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>
//│ ChurchInt -> (forall 'N 'N0 'a. ('N -> ('N & 'N0) & 'N0 -> 'a) -> ('N & 'N0) -> 'a)
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: succ1]




// ================================================================
// ======================== Vanilla SuperF ========================
// ================================================================


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
choose id auto_
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│  = [Function: s]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'b -> 'c & 'c -> 'd) -> 'a -> 'd
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z]

:e
// G2A
s: ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.528: 	s: ChurchInt -> ChurchInt
//│ ║         	^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.243: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.243: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.512: 	def s n f x = f (n f x)
//│ ║         	        ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.528: 	s: ChurchInt -> ChurchInt
//│ ╙──       	^
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

(s (s z)) (s (s z))
//│ res: ('a -> ('a & 'b) & 'b -> ('a & 'b & 'c)) -> 'a -> 'c
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'c. ('b & 'c) -> ('c | 'a)))
//│      = [Function: to_ch]

:e
// G7A
to_ch: int -> ChurchInt
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.573: 	to_ch: int -> ChurchInt
//│ ║         	^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.243: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.243: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.512: 	def s n f x = f (n f x)
//│ ║         	        ^^^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.567: 	rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ ║         	                                        ^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.573: 	to_ch: int -> ChurchInt
//│ ║         	^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.512: 	def s n f x = f (n f x)
//│ ╙──       	              ^^^^^^^^^
//│ res: int -> ChurchInt
//│    = [Function: to_ch]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: 'b -> 'c
//│     'b :> 'b -> 'c
//│        <: 'c
//│     'c :> 'b -> 'c
//│        <: 'a
//│ ║  l.601: 	rec def id1 x = if true then x else id1 id1 x
//│ ╙──       	                                    ^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: ?id1` exceeded recursion depth limit (250)
//│ ║  l.601: 	rec def id1 x = if true then x else id1 id1 x
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ id1: 'id1
//│   where
//│     'id1 :> 'a -> 'b
//│     'a :> 'id1
//│        <: 'b
//│     'b :> 'id1
//│        <: 'a -> 'b
//│    = [Function: id11]

:e
// G9
id1 id1
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b 'c. ('d & 'b) -> ('a | 'c)
//│        <: 'd -> 'a
//│     'd :> forall 'b 'c. ('d & 'b) -> ('a | 'c)
//│        <: 'a & 'e
//│     'e :> forall 'b 'c. ('b & 'e) -> ('c | 'f)
//│        <: 'f & 'g
//│     'g :> forall 'b 'c. ('b & 'g) -> ('c | 'h)
//│        <: 'h & 'i
//│     'i :> forall 'b 'c. ('b & 'i) -> ('c | 'j)
//│        <: 'j & 'k
//│     'k :> forall 'b 'c. ('b & 'k) -> ('c | 'l)
//│        <: 'l & 'm
//│     'm :> forall 'b 'c. ('b & 'm) -> ('c | 'n)
//│        <: 'n & 'o
//│     'o :> forall 'b 'c. ('b & 'o) -> ('c | 'p)
//│        <: 'p & 'q
//│     'q :> forall 'b 'c. ('b & 'q) -> ('c | 'r)
//│        <: 'r & 's
//│     's :> 's -> 't
//│        <: 't
//│     't := 's -> 't
//│     'r :> forall 'b 'c. ('b & 'q) -> ('c | 'r)
//│        <: 'q -> 'r
//│     'p :> forall 'b 'c. ('b & 'o) -> ('c | 'p)
//│        <: 'o -> 'p
//│     'n :> forall 'b 'c. ('b & 'm) -> ('c | 'n)
//│        <: 'm -> 'n
//│     'l :> forall 'b 'c. ('b & 'k) -> ('c | 'l)
//│        <: 'k -> 'l
//│     'j :> forall 'b 'c. ('b & 'i) -> ('c | 'j)
//│        <: 'i -> 'j
//│     'h :> forall 'b 'c. ('b & 'g) -> ('c | 'h)
//│        <: 'g -> 'h
//│     'f :> forall 'b 'c. ('b & 'e) -> ('c | 'f)
//│        <: 'e -> 'f
//│     'b :> 'b -> 'c
//│        <: 'c
//│     'c := 'b -> 'c
//│ ║  l.601: 	rec def id1 x = if true then x else id1 id1 x
//│ ╙──       	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?id1. ?id1 <: (forall ?id10. ?id10) -> ?a` exceeded recursion depth limit (250)
//│ ║  l.626: 	id1 id1
//│ ║         	^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error
//│    = [Function: id11]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.678: 	auto auto
//│ ║         	^^^^^^^^^
//│ ╟── type `'a` is not a function
//│ ║  l.163: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                       ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.163: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                       ^^^^^^^^
//│ ╟── Note: quantified type variable 'a is defined at:
//│ ║  l.163: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                   ^^
//│ res: error | 'b -> 'b
//│    Runtime error:
//│      RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: (forall ?c ?d. ?c -> ?d) -> ?e` exceeded recursion depth limit (250)
//│ ║  l.697: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error
//│    Runtime error:
//│      RangeError: Maximum call stack size exceeded

:e
:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> 'a -> 'b
//│        <: 'a -> (? & 'b)
//│ ╙──
//│ res: nothing
//│    Runtime error:
//│      RangeError: Maximum call stack size exceeded



// ===========================================================
// ======================== SuperF +D ========================
// ===========================================================

:DistributeForalls


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> 'a -> 'a
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
choose id auto_
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> 'a -> 'a

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> 'a -> 'a

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> 'a -> 'a
//│  = [Function: z1]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│  = [Function: s1]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z1]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s1]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

(s (s z)) (s (s z))
//│ res: ('a -> ('a & 'b & 'c) & 'c -> ('a & 'c)) -> 'c -> 'b
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b
//│      = [Function: to_ch1]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch1]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: 'b -> 'c
//│     'b :> 'b -> 'c
//│        <: 'c
//│     'c :> 'b -> 'c
//│        <: 'a
//│ ║  l.1005: 	rec def id1 x = if true then x else id1 id1 x
//│ ╙──        	                                    ^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: ?id1` exceeded recursion depth limit (250)
//│ ║  l.1005: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ id1: 'id1
//│   where
//│     'id1 :> 'a -> 'b
//│     'a :> 'id1
//│        <: 'b
//│     'b :> 'id1
//│        <: 'a -> 'b
//│    = [Function: id12]

:e
// G9
id1 id1
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b 'c. ('d & 'b) -> ('a | 'c)
//│        <: 'd -> 'a
//│     'd :> forall 'b 'c. ('d & 'b) -> ('a | 'c)
//│        <: 'a & 'e
//│     'e :> forall 'b 'c. ('b & 'e) -> ('c | 'f)
//│        <: 'f & 'g
//│     'g :> forall 'b 'c. ('b & 'g) -> ('c | 'h)
//│        <: 'h & 'i
//│     'i :> forall 'b 'c. ('b & 'i) -> ('c | 'j)
//│        <: 'j & 'k
//│     'k :> forall 'b 'c. ('b & 'k) -> ('c | 'l)
//│        <: 'l & 'm
//│     'm :> forall 'b 'c. ('b & 'm) -> ('c | 'n)
//│        <: 'n & 'o
//│     'o :> forall 'b 'c. ('b & 'o) -> ('c | 'p)
//│        <: 'p & 'q
//│     'q :> forall 'b 'c. ('b & 'q) -> ('c | 'r)
//│        <: 'r & 's
//│     's :> 's -> 't
//│        <: 't
//│     't := 's -> 't
//│     'r :> forall 'b 'c. ('b & 'q) -> ('c | 'r)
//│        <: 'q -> 'r
//│     'p :> forall 'b 'c. ('b & 'o) -> ('c | 'p)
//│        <: 'o -> 'p
//│     'n :> forall 'b 'c. ('b & 'm) -> ('c | 'n)
//│        <: 'm -> 'n
//│     'l :> forall 'b 'c. ('b & 'k) -> ('c | 'l)
//│        <: 'k -> 'l
//│     'j :> forall 'b 'c. ('b & 'i) -> ('c | 'j)
//│        <: 'i -> 'j
//│     'h :> forall 'b 'c. ('b & 'g) -> ('c | 'h)
//│        <: 'g -> 'h
//│     'f :> forall 'b 'c. ('b & 'e) -> ('c | 'f)
//│        <: 'e -> 'f
//│     'b :> 'b -> 'c
//│        <: 'c
//│     'c := 'b -> 'c
//│ ║  l.1005: 	rec def id1 x = if true then x else id1 id1 x
//│ ╙──        	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?id1. ?id1 <: (forall ?id10. ?id10) -> ?a` exceeded recursion depth limit (250)
//│ ║  l.1030: 	id1 id1
//│ ║          	^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error
//│    = [Function: id12]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1082: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `'a` is not a function
//│ ║  l.163: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                       ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.163: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                       ^^^^^^^^
//│ ╟── Note: quantified type variable 'a is defined at:
//│ ║  l.163: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                   ^^
//│ res: error | 'b -> 'b
//│    Runtime error:
//│      RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: (forall ?c ?d. ?c -> ?d) -> ?e` exceeded recursion depth limit (250)
//│ ║  l.1101: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error
//│    Runtime error:
//│      RangeError: Maximum call stack size exceeded

:e
:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> 'a -> 'b
//│        <: 'a -> (? & 'b)
//│ ╙──
//│ res: nothing
//│    Runtime error:
//│      RangeError: Maximum call stack size exceeded



// ==============================================================
// ======================== SuperF +D+CC ========================
// ==============================================================

:CycleCheck


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> 'a -> 'a
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
choose id auto_
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> 'a -> 'a

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> 'a -> 'a

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> 'a -> 'a
//│  = [Function: z2]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│  = [Function: s2]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z2]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s2]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

(s (s z)) (s (s z))
//│ res: ('a -> ('a & 'b & 'c) & 'c -> ('a & 'c)) -> 'c -> 'b
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b
//│      = [Function: to_ch2]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch2]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: 'b -> 'c
//│     'b :> 'b -> 'c
//│        <: 'c
//│     'c :> 'b -> 'c
//│        <: 'a
//│ ║  l.1409: 	rec def id1 x = if true then x else id1 id1 x
//│ ╙──        	                                    ^^^^^^^
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.1409: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ id1: 'id1
//│   where
//│     'id1 :> 'a -> 'b
//│     'a :> 'id1
//│        <: 'b
//│     'b :> 'id1
//│        <: 'a -> 'b
//│    = [Function: id13]

:e
// G9
id1 id1
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b 'c. ('d & 'b) -> ('a | 'c)
//│        <: 'd -> 'a
//│     'd :> forall 'b 'c. ('d & 'b) -> ('a | 'c)
//│        <: 'a & 'e & 'f
//│     'f :> ('d & 'f) -> ('a | 'g)
//│        <: 'd & 'g
//│     'g :> ('d & 'f) -> ('a | 'g)
//│        <: 'f -> 'g
//│     'e :> ('d & 'e) -> ('a | 'h)
//│        <: 'd & 'h
//│     'h :> ('d & 'e) -> ('a | 'h)
//│        <: 'e -> 'h
//│     'b :> 'b -> 'c
//│        <: 'c
//│     'c := 'b -> 'c
//│ ║  l.1409: 	rec def id1 x = if true then x else id1 id1 x
//│ ╙──        	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1434: 	id1 id1
//│ ║          	^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error
//│    = [Function: id13]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1463: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `'a` is not a function
//│ ║  l.163: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                       ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.163: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                       ^^^^^^^^
//│ ╟── Note: quantified type variable 'a is defined at:
//│ ║  l.163: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                   ^^
//│ res: error | 'b -> 'b
//│    Runtime error:
//│      RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1482: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error
//│    Runtime error:
//│      RangeError: Maximum call stack size exceeded

:e
:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> 'a -> 'b
//│        <: 'a -> (? & 'b)
//│ ╙──
//│ res: nothing
//│    Runtime error:
//│      RangeError: Maximum call stack size exceeded



// =================================================================
// ======================== SuperF +D+CC+RT ========================
// =================================================================

:RecursiveTypes


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> 'a -> 'a
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
choose id auto_
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> 'a -> 'a

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> 'a -> 'a

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> 'a -> 'a
//│  = [Function: z3]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│  = [Function: s3]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z3]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s3]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

(s (s z)) (s (s z))
//│ res: ('a -> ('a & 'b & 'c) & 'c -> ('a & 'c)) -> 'c -> 'b
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b
//│      = [Function: to_ch3]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch3]

// G8
rec def id1 x = if true then x else id1 id1 x
//│ id1: 'id1
//│   where
//│     'id1 :> 'a -> 'b
//│     'a :> 'id1
//│        <: 'b
//│     'b :> 'id1
//│        <: 'a -> 'b
//│    = [Function: id14]

// G9
id1 id1
//│ res: 'a -> 'b | 'id1
//│   where
//│     'a :> forall 'id1 'c 'd. 'a -> 'b | 'id1
//│        <: 'b
//│     'b :> forall 'id1 'c 'd. 'id1
//│        <: 'a -> 'b
//│     'id1 :> 'c -> 'd
//│     'c :> 'id1
//│        <: 'd
//│     'd :> 'id1
//│        <: 'c -> 'd
//│    = [Function: id14]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1816: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `'a` is not a function
//│ ║  l.163: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                       ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.163: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                       ^^^^^^^^
//│ ╟── Note: quantified type variable 'a is defined at:
//│ ║  l.163: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                   ^^
//│ res: error | 'b -> 'b
//│    Runtime error:
//│      RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1835: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error
//│    Runtime error:
//│      RangeError: Maximum call stack size exceeded

:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ res: nothing
//│    Runtime error:
//│      RangeError: Maximum call stack size exceeded


