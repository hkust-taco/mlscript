

def foo =
  forall 'a. fun (x: 'a) -> x
//│ foo: 'a -> 'a
//│    = [Function: foo]


def foo esc =
  forall 'T. fun (x: 'T) -> esc x
//│ foo: (??T -> 'a) -> anything -> 'a
//│    = [Function: foo1]

tmp = foo (fun x -> 1)
//│ tmp: anything -> 1
//│    = [Function (anonymous)]

tmp 0
//│ res: 1
//│    = 1

foo (fun x -> 1) "2"
//│ res: 1
//│    = 1

foo id
//│ res: anything -> ??T
//│    = [Function (anonymous)]

r = foo id true
//│ r: ??T
//│  = true

:e
not r
//│ ╔══[ERROR] Type error in application
//│ ║  l.35: 	not r
//│ ║        	^^^^^
//│ ╟── type variable `'T` leaks out of its scope
//│ ║  l.10: 	  forall 'T. fun (x: 'T) -> esc x
//│ ║        	         ^^
//│ ╟── into type `bool`
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.10: 	  forall 'T. fun (x: 'T) -> esc x
//│ ╙──      	                            ^^^
//│ res: error | bool
//│    = false


def foo esc =
  forall 'T. fun (x: 'T) -> esc x : 'T
//│ foo: (??T -> ??T0) -> 'T -> 'T
//│    = [Function: foo2]

:e
foo id
//│ ╔══[ERROR] Type error in application
//│ ║  l.57: 	foo id
//│ ║        	^^^^^^
//│ ╟── type variable `'T` leaks out of its scope
//│ ║  l.52: 	  forall 'T. fun (x: 'T) -> esc x : 'T
//│ ║        	         ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.52: 	  forall 'T. fun (x: 'T) -> esc x : 'T
//│ ║        	                            ^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.52: 	  forall 'T. fun (x: 'T) -> esc x : 'T
//│ ╙──      	                            ^^^^^
//│ res: error | 'T -> 'T
//│    = [Function (anonymous)]

foo (fun x -> error)
//│ res: 'T -> 'T
//│    = [Function (anonymous)]

def foo (esc: forall 'a. 'a -> 'a) =
  forall 'T. fun (x: 'T) -> esc x : 'T
//│ foo: (forall 'a. 'a -> 'a) -> (forall 'T. 'T -> 'T)
//│    = [Function: foo3]

foo id
//│ res: 'T -> 'T
//│    = [Function (anonymous)]


