:NoRecursiveTypes
:NoConstrainedTypes
:DistributeForalls



I x = x
K x y = x
//│ I: 'a -> 'a
//│  = [Function: I]
//│ K: 'a -> anything -> 'a
//│  = [Function: K]

id x = x
iter2 f x = f(f x)
//│ id: 'a -> 'a
//│   = [Function: id]
//│ iter2: ('a -> 'b & 'b -> 'c) -> 'a -> 'c
//│      = [Function: iter2]

iter2 K
//│ res: 'a -> anything -> anything -> 'a
//│    = [Function (anonymous)]

iter2 iter2
//│ res: ('a -> 'b & 'b -> ('a & 'c)) -> 'a -> 'c
//│    = [Function (anonymous)]

id iter2 iter2
//│ res: ('a -> 'b & 'b -> ('a & 'c)) -> 'a -> 'c
//│    = [Function (anonymous)]

// * The following occurs-check failure is legit.
// * We have `K: 'A -> anything -> 'A` which flows into `'a -> 'b & ('c | 'b) -> 'a`
// *  which implies `anything -> 'A <: 'b <: 'A`, a nested cycle.
// * The cycle displayed below is a 1-unrolling of the one above.
:e
iter2 iter2 K
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> ? -> ? -> 'a
//│ ╙──
//│ res: 'a -> anything -> 'b
//│   where
//│     'a :> anything -> 'b
//│     'b :> anything -> 'a
//│    = [Function (anonymous)]

iter2 iter2 iter2
//│ res: ('a -> ('a & 'b) & 'b -> ('a & 'b & 'c)) -> 'a -> 'c
//│    = [Function (anonymous)]

iter2 K iter2 iter2 iter2
//│ res: ('a -> 'b & 'b -> 'c) -> 'a -> 'c
//│    = [Function: iter2]



// (λzy. y(zI)(zK))(λx. xx).
foo = (fun z -> fun y -> y (z I) (z K))
//│ foo: ((forall 'a. 'a -> 'a) -> 'b & (forall 'c. 'c -> anything -> 'c) -> 'd) -> ('b -> 'd -> 'e) -> 'e
//│    = [Function: foo]

foo (fun x -> x x)
//│ res: ((forall 'a. 'a -> 'a) -> (forall 'b. anything -> 'b -> anything -> 'b) -> 'c) -> 'c
//│    = [Function (anonymous)]

n0_ s z = z
def n0: forall 'X. ('X -> 'X) -> 'X -> 'X
n0 = n0_
//│ n0_: anything -> 'a -> 'a
//│    = [Function: n0_]
//│ n0: ('X -> 'X) -> 'X -> 'X
//│   = <missing implementation>
//│ anything -> 'a -> 'a
//│   <:  n0:
//│ ('X -> 'X) -> 'X -> 'X
//│   = [Function: n0_]

succ_ n s z = s (n s z)
def succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
succ = succ_
//│ succ_: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│      = [Function: succ_]
//│ succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X0. ('X0 -> 'X0) -> 'X0 -> 'X0)
//│     = <missing implementation>
//│ ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│   <:  succ:
//│ (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X0. ('X0 -> 'X0) -> 'X0 -> 'X0)
//│     = [Function: succ_]

c2 = succ (succ n0)
//│ c2: ('X -> 'X) -> 'X -> 'X
//│   = [Function (anonymous)]

:e
c2 c2 K
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> ? -> 'a
//│ ╙──
//│ res: ('a & 'X) -> ('X | anything -> 'a)
//│   where
//│     'X :> anything -> 'X
//│    = [Function (anonymous)]

def c2_ n0 = succ_ (succ_ n0)
//│ c2_: ('a -> 'b -> 'c) -> ('d -> 'e & 'c -> 'd & 'a) -> 'b -> 'e
//│    = [Function: c2_]

c2_ = succ_ (succ_ n0)
//│ c2_: ('a -> 'b & 'X -> ('a & 'X)) -> 'X -> 'b
//│    = [Function (anonymous)]

// * Note: cycle check fails when generalizing curried lambdas
c2_ c2_
//│ res: ('a -> ('X & 'X0 & 'b) & 'X0 -> ('a & 'X & 'X0) & 'c -> ('a & 'X & 'X0 & 'b & 'c) & 'X -> ('X & 'c)) -> ('X & 'X0) -> 'b
//│    = [Function (anonymous)]

// * Idem
c2_ c2_!
//│ res: ('a -> ('a & 'b & 'X) & 'X -> ('a & 'X)) -> 'X -> 'b
//│    = [Function (anonymous)]

// * Note: cycle check fails when generalizing curried lambdas
:e // occurs-check
c2_ c2_ K
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> ? -> ('a | 'b | 'c | 'd)
//│     'c :> ? -> ('b | 'c | 'd)
//│     'd :> ? -> ('b | 'c)
//│     'b :> ? -> ('a | 'b)
//│ ╙──
//│ res: ('a & 'b) -> anything -> ('c | 'd)
//│   where
//│     'a :> anything -> ('a | 'c | 'b | 'd)
//│     'b :> anything -> ('c | 'b | 'd)
//│     'd :> anything -> ('c | 'b)
//│     'c :> anything -> ('a | 'c)
//│    = [Function (anonymous)]

c2__ = succ_ (succ_ n0_)
//│ c2__: ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│     = [Function (anonymous)]

c2__ c2__
//│ res: ('a -> ('b & 'c) & 'b -> 'a) -> 'b -> 'c
//│    = [Function (anonymous)]

:e
c2__ c2__ K
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> ? -> ? -> 'a
//│ ╙──
//│ res: 'a -> anything -> 'b
//│   where
//│     'a :> anything -> 'b
//│     'b :> anything -> 'a
//│    = [Function (anonymous)]


// --------------
:RecursiveTypes

iter2 iter2 K
//│ res: 'a -> anything -> 'b
//│   where
//│     'a :> anything -> 'b
//│     'b :> anything -> 'a
//│    = [Function (anonymous)]

res id
//│ res: anything -> 'a
//│   where
//│     'a :> forall 'b. anything -> 'b -> ('a | 'b)
//│    = [Function (anonymous)]

r1 = res id id id id id
//│ r1: 'a -> ('b | 'a)
//│   where
//│     'b :> forall 'c. 'c -> (anything -> 'b | 'c)
//│   = [Function: id]

r1 iter2 iter2 K
//│ res: ('a & 'b & 'c) -> (anything -> (anything -> 'b | 'd) | 'e | 'c)
//│   where
//│     'e :> forall 'f. anything -> 'f -> ('e | 'f)
//│     'a :> anything -> 'd
//│     'd :> anything -> 'a
//│    = [Function (anonymous)]

r = r1 iter2 iter2
//│ r: ('a -> 'b & 'b -> 'c & 'd -> 'e & 'e -> ('d & 'f)) -> (('a & 'd) -> ('c | 'f) | 'g)
//│   where
//│     'g :> forall 'h. 'h -> (anything -> 'g | 'h)
//│  = [Function (anonymous)]

r iter2
//│ res: ('a -> ('a & 'b) & 'b -> ('a & 'b & 'c) & 'd -> 'e & 'e -> ('d & 'f) & 'g) -> (('a & 'd) -> ('c | 'f) | 'h | 'g)
//│   where
//│     'h :> forall 'i. anything -> 'i -> ('h | 'i)
//│    = [Function (anonymous)]

:NoRecursiveTypes
// --------------



// ==============

:ConstrainedTypes
:DontDistributeForalls

// ==============



id x = x
iter2 f x = f(f x)
//│ id: 'a -> 'a
//│   = [Function: id1]
//│ iter2: 'a -> (forall 'b 'c 'd. 'b -> 'd
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd)
//│      = [Function: iter21]

iter2 iter2
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd 'e 'f. 'd -> 'f
//│       where
//│         'c <: 'd -> 'e & 'e -> 'f) <: 'a -> 'g & 'g -> 'b
//│    = [Function (anonymous)]

id iter2 iter2
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd 'e 'f. 'd -> 'f
//│       where
//│         'c <: 'd -> 'e & 'e -> 'f) <: 'a -> 'g & 'g -> 'b
//│    = [Function (anonymous)]


iter2 iter2 K
//│ res: 'a -> 'b
//│   where
//│     forall 'c 'd 'e. 'c -> 'e
//│       where
//│         forall 'f. 'f -> anything -> 'f <: 'c -> 'd & 'd -> 'e <: 'a -> 'g & 'g -> 'b
//│    = [Function (anonymous)]



// (λzy. y(zI)(zK))(λx. xx).
foo = (fun z -> fun y -> y (z I) (z K))
//│ foo: 'a -> (forall 'b 'c 'd. ('b -> 'c -> 'd) -> 'd
//│   where
//│     'a <: (forall 'e. 'e -> 'e) -> 'b & (forall 'f. 'f -> anything -> 'f) -> 'c)
//│    = [Function: foo1]

foo (fun x -> x x)
//│ res: ('a -> 'b -> 'c) -> 'c
//│   where
//│     forall 'd 'e. ('d -> 'e & 'd) -> 'e <: (forall 'f. 'f -> 'f) -> 'a & (forall 'g. 'g -> anything -> 'g) -> 'b
//│    = [Function (anonymous)]

n0_ s z = z
def n0: forall 'X. ('X -> 'X) -> 'X -> 'X
n0 = n0_
//│ n0_: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: n0_1]
//│ n0: ('X -> 'X) -> 'X -> 'X
//│   = <missing implementation>
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  n0:
//│ ('X -> 'X) -> 'X -> 'X
//│   = [Function: n0_1]

succ_ n s z = s (n s z)
def succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ succ_: 'a -> (forall 'b. 'b -> (forall 'c 'd 'e. 'c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│      = [Function: succ_1]
//│ succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X0. ('X0 -> 'X0) -> 'X0 -> 'X0)
//│     = <missing implementation>
:e // * Needs distrib
succ = succ_
//│ 'a -> (forall 'b. 'b -> (forall 'c 'd 'e. 'c -> 'e
//│   where
//│     'b <: 'd -> 'e
//│     'a <: 'b -> 'c -> 'd))
//│   <:  succ:
//│ (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X0. ('X0 -> 'X0) -> 'X0 -> 'X0)
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.291: 	succ = succ_
//│ ║         	^^^^^^^^^^^^
//│ ╟── type variable `'X` leaks out of its scope
//│ ║  l.282: 	def succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ ║         	                                                                    ^^
//│ ╟── back into type variable `'X`
//│ ║  l.282: 	def succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ ║         	                                                              ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.281: 	succ_ n s z = s (n s z)
//│ ║         	        ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.291: 	succ = succ_
//│ ║         	       ^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.282: 	def succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ ╙──       	                             ^^
//│     = [Function: succ_1]

c2 = succ (succ n0)
//│ c2: ('X -> 'X) -> 'X -> 'X
//│   = [Function (anonymous)]

:e
c2 c2 K
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> ? -> 'a
//│ ╙──
//│ res: ('a & 'X) -> ('X | anything -> 'a)
//│   where
//│     'X :> anything -> 'X
//│    = [Function (anonymous)]

c2_ = succ_ (succ_ n0)
//│ c2_: 'a -> (forall 'b 'c 'd. 'b -> 'd
//│   where
//│     forall 'e. 'e -> (forall 'f 'g 'h. 'f -> 'h
//│       where
//│         'e <: 'g -> 'h
//│         forall 'X. ('X -> 'X) -> 'X -> 'X <: 'e -> 'f -> 'g) <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd)
//│    = [Function (anonymous)]

c2_ c2_
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd 'e 'f. 'd -> 'f
//│       where
//│         forall 'X. ('X -> 'X) -> 'X -> 'X <: 'c -> 'd -> 'e
//│         'c <: 'e -> 'f) <: (forall 'g. 'g -> (forall 'h 'i 'j. 'h -> 'j
//│       where
//│         'g <: 'i -> 'j
//│         forall 'k. 'k -> (forall 'l 'm 'n. 'l -> 'n
//│           where
//│             'k <: 'm -> 'n
//│             forall 'X. ('X -> 'X) -> 'X -> 'X <: 'k -> 'l -> 'm) <: 'g -> 'h -> 'i)) -> 'a -> 'o
//│     forall 'g. 'g -> (forall 'h 'i 'j. 'h -> 'j
//│       where
//│         'g <: 'i -> 'j
//│         forall 'k. 'k -> (forall 'l 'm 'n. 'l -> 'n
//│           where
//│             'k <: 'm -> 'n
//│             forall 'X. ('X -> 'X) -> 'X -> 'X <: 'k -> 'l -> 'm) <: 'g -> 'h -> 'i) <: 'o -> 'b
//│    = [Function (anonymous)]

:e
c2_ c2_ K
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b 'c 'd 'e. ('b & 'e) -> (? -> 'e | 'd)
//│       where
//│         'a <: 'c -> 'd
//│         forall 'f. 'f -> (forall 'g 'h 'i. 'g -> 'i
//│           where
//│             forall 'X. ('X -> 'X) -> 'X -> 'X <: 'f -> 'g -> 'h
//│             'f <: 'h -> 'i) <: 'a -> 'b -> 'c
//│ ╙──
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd 'e 'f. 'd -> 'f
//│       where
//│         forall 'X. ('X -> 'X) -> 'X -> 'X <: 'c -> 'd -> 'e
//│         'c <: 'e -> 'f) <: (forall 'g 'h 'i. 'g -> 'i
//│       where
//│         'j <: 'h -> 'i
//│         forall 'k. 'k -> (forall 'l 'm 'n. 'l -> 'n
//│           where
//│             forall 'X. ('X -> 'X) -> 'X -> 'X <: 'k -> 'l -> 'm
//│             'k <: 'm -> 'n) <: 'j -> 'g -> 'h) -> 'a -> 'o
//│     forall 'g 'h 'i. 'g -> 'i
//│       where
//│         'j <: 'h -> 'i
//│         forall 'k. 'k -> (forall 'l 'm 'n. 'l -> 'n
//│           where
//│             forall 'X. ('X -> 'X) -> 'X -> 'X <: 'k -> 'l -> 'm
//│             'k <: 'm -> 'n) <: 'j -> 'g -> 'h <: 'o -> 'b
//│ where
//│   'j :> forall 'p 'q 'r 's. ('p & 's) -> (anything -> 's | 'r)
//│     where
//│       forall 't. 't -> (forall 'u 'v 'w. 'u -> 'w
//│         where
//│           forall 'X. ('X -> 'X) -> 'X -> 'X <: 't -> 'u -> 'v
//│           't <: 'v -> 'w) <: 'j -> 'p -> 'q
//│       'j <: 'q -> 'r
//│    = [Function (anonymous)]

c2__ = succ_ (succ_ n0_)
//│ c2__: 'a -> (forall 'b 'c 'd. 'b -> 'd
//│   where
//│     'a <: 'c -> 'd
//│     forall 'e. 'e -> (forall 'f 'g 'h. 'f -> 'h
//│       where
//│         anything -> (forall 'i. 'i -> 'i) <: 'e -> 'f -> 'g
//│         'e <: 'g -> 'h) <: 'a -> 'b -> 'c)
//│     = [Function (anonymous)]

c2__ c2__
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd 'e 'f. 'd -> 'f
//│       where
//│         forall 'g. 'g -> (forall 'h 'i 'j. 'h -> 'j
//│           where
//│             'g <: 'i -> 'j
//│             anything -> (forall 'k. 'k -> 'k) <: 'g -> 'h -> 'i) <: 'c -> 'd -> 'e
//│         'c <: 'e -> 'f) <: 'l -> 'b
//│     forall 'm. 'm -> (forall 'n 'o 'p. 'n -> 'p
//│       where
//│         anything -> (forall 'k. 'k -> 'k) <: 'm -> 'n -> 'o
//│         'm <: 'o -> 'p) <: (forall 'c. 'c -> (forall 'd 'e 'f. 'd -> 'f
//│       where
//│         forall 'g. 'g -> (forall 'h 'i 'j. 'h -> 'j
//│           where
//│             'g <: 'i -> 'j
//│             anything -> (forall 'k. 'k -> 'k) <: 'g -> 'h -> 'i) <: 'c -> 'd -> 'e
//│         'c <: 'e -> 'f)) -> 'a -> 'l
//│    = [Function (anonymous)]

c2__ c2__ K
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd 'e 'f. 'd -> 'f
//│       where
//│         anything -> (forall 'g. 'g -> 'g) <: 'c -> 'd -> 'e
//│         'c <: 'e -> 'f) <: (forall 'h 'i 'j. 'h -> 'j
//│       where
//│         forall 'k. 'k -> (forall 'l 'm 'n. 'l -> 'n
//│           where
//│             anything -> (forall 'g. 'g -> 'g) <: 'k -> 'l -> 'm
//│             'k <: 'm -> 'n) <: (forall 'o. 'o -> anything -> 'o) -> 'h -> 'i
//│         forall 'o. 'o -> anything -> 'o <: 'i -> 'j) -> 'a -> 'p
//│     forall 'h 'i 'j. 'h -> 'j
//│       where
//│         forall 'k. 'k -> (forall 'l 'm 'n. 'l -> 'n
//│           where
//│             anything -> (forall 'g. 'g -> 'g) <: 'k -> 'l -> 'm
//│             'k <: 'm -> 'n) <: (forall 'o. 'o -> anything -> 'o) -> 'h -> 'i
//│         forall 'o. 'o -> anything -> 'o <: 'i -> 'j <: 'p -> 'b
//│    = [Function (anonymous)]



