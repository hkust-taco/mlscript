// * Adaptation of QML's original existentials example; using encoded existentials and classes

:NoRecursiveTypes



class ArraysRep[A, Rep]
  method Init: A -> Rep
  method Sub: Rep -> int -> A
  method Update: Rep -> int -> A -> Rep
  method Fold: (A -> 'b -> 'b) -> 'b -> Rep -> 'b
//│ Defined class ArraysRep[=A, =Rep]
//│ Declared ArraysRep.Init: ArraysRep['A, 'Rep] -> 'A -> 'Rep
//│ Declared ArraysRep.Sub: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A
//│ Declared ArraysRep.Update: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Declared ArraysRep.Fold: ArraysRep['A, 'Rep] -> ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b

class ArraysImpl[A, Rep]: ArraysRep[A, Rep] & {
    init: A -> Rep;
    sub: Rep -> int -> A;
    update: Rep -> int -> A -> Rep;
    fold: forall 'b. (A -> 'b -> 'b) -> 'b -> Rep -> 'b
  }
  method Init = this.init
  method Sub = this.sub
  method Update = this.update
  method Fold = this.fold
//│ Defined class ArraysImpl[=A, =Rep]
//│ Defined ArraysImpl.Init: ArraysImpl['A, 'Rep] -> 'A -> 'Rep
//│ Defined ArraysImpl.Sub: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A
//│ Defined ArraysImpl.Update: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Defined ArraysImpl.Fold: ArraysImpl['A, 'Rep] -> ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b

type ArraysRepConsumer[A, R] = forall 'rep. ArraysRep[A, 'rep] -> R
//│ Defined type alias ArraysRepConsumer[=A, +R]

type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ Defined type alias Arrays[=A]



baseImpl = ArraysImpl {
    init   = fun a -> a;
    sub    = fun r -> fun (i : int) -> r;
    update = fun r -> fun (i : int) -> fun a -> a;
    fold   = fun f -> fun b -> fun r -> f r b
  }
//│ baseImpl: ArraysImpl['Rep, 'Rep] with {
//│   fold: forall 'a 'b 'c. ('a -> 'b -> 'c) -> 'b -> 'a -> 'c,
//│   init: forall 'd. 'd -> 'd,
//│   sub: forall 'e. 'e -> int -> 'e,
//│   update: forall 'f. anything -> int -> 'f -> 'f
//│ }
//│         = ArraysImpl {
//│             init: [Function: init],
//│             sub: [Function: sub],
//│             update: [Function: update],
//│             fold: [Function: fold]
//│           }

def base: Arrays['a]
def base f = f baseImpl
//│ base: Arrays['a]
//│     = <missing implementation>
//│ ((forall 'Rep. ArraysImpl['Rep, 'Rep] with {
//│   fold: forall 'a 'b 'c. ('a -> 'b -> 'c) -> 'b -> 'a -> 'c,
//│   init: forall 'd. 'd -> 'd,
//│   sub: forall 'e. 'e -> int -> 'e,
//│   update: forall 'f. anything -> int -> 'f -> 'f
//│ }) -> 'g) -> 'g
//│   <:  base:
//│ Arrays['a]
//│     = [Function: base]



// * Notice the strange `anything` and `nothing` occurrences...
// * They don't seem to cause problems. Maybe simplification bug artifacts?
def simpleStepImpl arrImpl = ArraysImpl {
    init   = fun a -> (arrImpl.Init a, "initialized");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.Update r0 i a, "updated");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f b r0
  }
//│ simpleStepImpl: ArraysRep[in 'A & 'A0 & 'A1 out 'A0 | 'A, in 'Rep & 'Rep0 & 'a out 'Rep | 'Rep0] -> (ArraysImpl['A1, 'Rep1] with {
//│   fold: forall 'b. ('A0 -> 'b -> 'b) -> 'b -> (('Rep0, anything,),) -> 'b,
//│   init: 'A -> ('Rep, "initialized",),
//│   sub: (('Rep0, anything,),) -> int -> 'A0,
//│   update: forall 'c. (('Rep0 & 'c, anything,),) -> int -> 'A -> ('Rep | 'c, "updated",)
//│ })
//│ where
//│   'Rep1 :> ('Rep | 'd, "initialized" | "updated",)
//│         <: ('Rep0 & 'a, anything,)
//│   'a <: 'Rep0 & 'd
//│   'd :> 'Rep
//│      <: 'Rep0 & 'a
//│   'A1 :> 'A0
//│       <: 'A
//│               = [Function: simpleStepImpl]

def simpleStepImpl_ty: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ simpleStepImpl_ty: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│                  = <missing implementation>

simpleStepImpl_ty = simpleStepImpl
//│ ArraysRep[in 'A & 'A0 & 'A1 out 'A0 | 'A, in 'Rep & 'Rep0 & 'a out 'Rep | 'Rep0] -> (ArraysImpl['A1, 'Rep1] with {
//│   fold: forall 'b. ('A0 -> 'b -> 'b) -> 'b -> (('Rep0, anything,),) -> 'b,
//│   init: 'A -> ('Rep, "initialized",),
//│   sub: (('Rep0, anything,),) -> int -> 'A0,
//│   update: forall 'c. (('Rep0 & 'c, anything,),) -> int -> 'A -> ('Rep | 'c, "updated",)
//│ })
//│ where
//│   'Rep1 :> ('Rep | 'd, "initialized" | "updated",)
//│         <: ('Rep0 & 'a, anything,)
//│   'a <: 'Rep0 & 'd
//│   'd :> 'Rep
//│      <: 'Rep0 & 'a
//│   'A1 :> 'A0
//│       <: 'A
//│   <:  simpleStepImpl_ty:
//│ ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│                  = [Function: simpleStepImpl]

// * This is weird.
// * It seems to be the same subtype check as above, but it goes of the rails (see stats)
// * Also weird: this type checks efficiently when the file is typed with `:ConstrainedTypes`
:e
:stats
simpleStepImpl : ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a ?b. ?a -> ?b <: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]` took too many steps and ran out of fuel (10000)
//│ ║  l.129: 	simpleStepImpl : ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ ║         	^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│    = [Function: simpleStepImpl]
//│ constrain calls  : 9926
//│ annoying  calls  : 78
//│ subtyping calls  : 70336
// * Note that the above incidentally can be checked using recursive types
:RecursiveTypes
:stats
simpleStepImpl : ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ res: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│    = [Function: simpleStepImpl]
//│ constrain calls  : 579
//│ annoying  calls  : 104
//│ subtyping calls  : 5595
:NoRecursiveTypes

// * Apparently, it's due to excessive extrusion due to the type annot not being generalized!
:stats
simpleStepImpl : forall 'a 'r. ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ res: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│    = [Function: simpleStepImpl]
//│ constrain calls  : 711
//│ annoying  calls  : 104
//│ subtyping calls  : 1796



// * First approach to implementing step

def simpleStep: Arrays['a] -> Arrays['a]
//│ simpleStep: Arrays['a] -> Arrays['a]
//│           = <missing implementation>

// * Note: this one fails to type check when the file is typed with `:ConstrainedTypes`
def simpleStep arr = arr (fun impl -> fun (k: ArraysRepConsumer['a, 'r]) -> k (simpleStepImpl impl))
//│ ((forall 'A 'Rep 'a 'A0 'A1. ArraysRep[in 'A0 & 'A1 & 'A out 'A0 | 'A1, 'Rep] -> ArraysRepConsumer['A0, 'a] -> 'a) -> 'b) -> 'b
//│   where
//│     'A0 :> 'A1
//│         <: 'A
//│     'A <: 'A0
//│   <:  simpleStep:
//│ Arrays['a] -> Arrays['a]
//│           = [Function: simpleStep]


// * Second approach to implementing step

def simpleStep2: Arrays['a] -> Arrays['a]
//│ simpleStep2: Arrays['a] -> Arrays['a]
//│            = <missing implementation>

def simpleStep2 arr (k: ArraysRepConsumer['a, 'r]) = arr (fun impl -> k (simpleStepImpl impl))
//│ ((forall 'Rep. ArraysRep['a, 'Rep] -> 'r) -> 'b) -> ArraysRepConsumer['a, 'r] -> 'b
//│   <:  simpleStep2:
//│ Arrays['a] -> Arrays['a]
//│            = [Function: simpleStep2]



sb = simpleStep base
//│ sb: Arrays['a]
//│   = [Function (anonymous)]

sb (fun arr -> arr.Init true)
//│ res: ??Rep
//│    = [ true, 'initialized' ]

sb (fun arr -> arr.Sub (arr.Init true) 1)
//│ res: true
//│    = true

:e // * Type error is expected – argument order confusion
sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.206: 	sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'Rep` is not an instance of type `int`
//│ ║  l.37: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.9: 	  method Sub: Rep -> int -> A
//│ ║       	                     ^^^
//│ ╟── from application:
//│ ║  l.206: 	sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ║         	                          ^^^^^^^^^^^^^
//│ ╟── Note: quantified type variable 'Rep is defined at:
//│ ║  l.37: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟──       class type parameter Rep is defined at:
//│ ║  l.7: 	class ArraysRep[A, Rep]
//│ ╙──     	                   ^^^
//│ res: error | true
//│ Runtime error:
//│   TypeError: number 0 is not iterable (cannot read property Symbol(Symbol.iterator))

sb (fun arr -> arr.Update (arr.Init true) 1 false)
//│ res: ??Rep
//│    = [ false, 'updated' ]

:e // * Rightly prevent skolem confusion
sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ╔══[ERROR] Type error in application
//│ ║  l.234: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.37: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.234: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	                                             ^^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.193: 	sb = simpleStep base
//│ ║         	     ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.234: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	                ^^
//│ ╟── • this reference:
//│ ║  l.234: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	                                ^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.234: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ╙──       	                                             ^^^^^^^^^^^^^^
//│ res: error | int -> anything -> (??Rep | ??Rep0)
//│    = [Function (anonymous)]

sb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (Bool, Bool,)
//│    = [ false, false ]



// * The unannotated versions of `step` do not work, as expected

:e
def simpleStep arr = arr (fun impl -> fun k -> k (simpleStepImpl impl))
//│ ((forall 'a 'Rep 'A 'Rep0 'A0 'A1 'c 'd. ArraysRep[in 'A1 & 'A & 'A0 out 'A | 'A1, in 'Rep & 'Rep0 & 'c out 'Rep | 'Rep0] -> ((forall 'Rep1. ArraysImpl['A0, 'Rep1] with {
//│   fold: forall 'b. ('A -> 'b -> 'b) -> 'b -> (('Rep0, anything,),) -> 'b,
//│   init: 'A1 -> ('Rep, "initialized",),
//│   sub: (('Rep0, anything,),) -> int -> 'A,
//│   update: forall 'e. (('Rep0 & 'e, anything,),) -> int -> 'A1 -> ('Rep | 'e, "updated",)
//│ }) -> 'd) -> 'd) -> 'f) -> 'f
//│ where
//│   'Rep1 :> ('Rep | 'a, "initialized" | "updated",)
//│         <: ('Rep0 & 'c, anything,)
//│   'c <: 'Rep0 & 'a
//│   'a :> 'Rep
//│      <: 'Rep0 & 'c
//│   'A0 :> 'A
//│       <: 'A1
//│   <:  simpleStep:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.272: 	def simpleStep arr = arr (fun impl -> fun k -> k (simpleStepImpl impl))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.37: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this applied expression:
//│ ║  l.272: 	def simpleStep arr = arr (fun impl -> fun k -> k (simpleStepImpl impl))
//│ ║         	                     ^^^
//│ ╟── • this function:
//│ ║  l.272: 	def simpleStep arr = arr (fun impl -> fun k -> k (simpleStepImpl impl))
//│ ║         	                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.81: 	    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
//│ ╙──      	                                                    ^^
//│           = [Function: simpleStep1]

:e
def simpleStep2 arr k = arr (fun impl -> k (simpleStepImpl impl))
//│ ((ArraysRep[out 'A, out 'Rep] -> 'a) -> 'c) -> ((forall 'Rep0. ArraysImpl[in 'A & 'A0 out 'A0, 'Rep0] with {
//│   fold: forall 'b. (nothing -> 'b -> 'b) -> 'b -> (('Rep, anything,),) -> 'b,
//│   init: 'A -> (nothing, "initialized",),
//│   sub: (('Rep, anything,),) -> int -> nothing,
//│   update: forall 'd. (('Rep & 'd, anything,),) -> int -> 'A -> ('d, "updated",)
//│ }) -> 'a) -> 'c
//│ where
//│   'Rep0 :> ('e | 'f, "initialized" | "updated",)
//│         <: ('Rep & 'g & 'h, anything,)
//│   'f :> 'e
//│      <: 'Rep & 'g & 'h
//│   'h <: 'Rep & 'f
//│   'e <: 'Rep & 'g
//│   'g <: 'Rep & 'e
//│   <:  simpleStep2:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.308: 	def simpleStep2 arr k = arr (fun impl -> k (simpleStepImpl impl))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.37: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.83: 	    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f b r0
//│ ║        	                                                 ^^^^^^^
//│ ╟── • this reference:
//│ ║  l.308: 	def simpleStep2 arr k = arr (fun impl -> k (simpleStepImpl impl))
//│ ║         	                                                           ^^^^
//│ ╟── • this applied expression:
//│ ║  l.308: 	def simpleStep2 arr k = arr (fun impl -> k (simpleStepImpl impl))
//│ ╙──       	                        ^^^
//│            = [Function: simpleStep21]



// * Now for the real version of `step`


:escape
def Math: nothing
//│ Math: nothing
//│     = <missing implementation>

def div: int -> int -> int
def div a b = Math.trunc(a/b)
//│ div: int -> int -> int
//│    = <missing implementation>
//│ number -> number -> nothing
//│   <:  div:
//│ int -> int -> int
//│    = [Function: div1]

def mod: int -> int -> int
rec def mod a b = if a < b then a else mod (a - b) b
//│ mod: int -> int -> int
//│    = <missing implementation>
//│ int -> int -> int
//│   <:  mod:
//│ int -> int -> int
//│    = [Function: mod]

def stepImpl arrImpl = ArraysImpl {
    init = fun a -> (arrImpl.Init a, arrImpl.Init a);
    sub = fun ((r0, r1)) -> fun i ->
      if mod i 2 == 0
      then arrImpl.Sub r0 (div i 2)
      else arrImpl.Sub r1 (div i 2);
    update = fun ((r0, r1)) -> fun i -> fun a ->
      if mod i 2 == 0
      then (arrImpl.Update r0 (div i 2) a, r1)
      else (r0, arrImpl.Update r1 (div i 2) a);
    fold = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f (arrImpl.Fold f b r0) r1
  }
//│ stepImpl: ArraysRep[in 'A & 'A0 & 'A1 out 'A0 | 'A, in 'Rep & 'Rep0 & 'a & 'c out 'Rep | 'Rep0] -> (ArraysImpl['A1, 'Rep1] with {
//│   fold: forall 'b 'b0. ('A0 -> 'b -> 'b & 'A0 -> 'b0 -> ('b & 'b0)) -> ('b & 'b0) -> (('Rep0, 'Rep0,),) -> 'b,
//│   init: 'A -> ('Rep, 'Rep,),
//│   sub: (('Rep0, 'Rep0,),) -> int -> 'A0,
//│   update: forall 'd 'e. (('Rep0 & 'd, 'Rep0 & 'e,),) -> int -> 'A -> ('Rep | 'd, 'Rep | 'e,)
//│ })
//│ where
//│   'Rep1 :> ('Rep | 'a | 'f, 'Rep | 'c | 'g,)
//│         <: ('Rep0 & 'a, 'Rep0 & 'c,)
//│   'c <: 'Rep0 & 'g
//│   'g :> 'Rep
//│      <: 'Rep0 & 'c
//│   'a <: 'Rep0 & 'f
//│   'f :> 'Rep
//│      <: 'Rep0 & 'a
//│   'A1 :> 'A0
//│       <: 'A
//│         = [Function: stepImpl]


def step: Arrays['a] -> Arrays['a]
//│ step: Arrays['a] -> Arrays['a]
//│     = <missing implementation>

def step arr = arr (fun impl -> fun (k: ArraysRepConsumer['a, 'r]) -> k (stepImpl impl))
//│ ((forall 'Rep 'A 'a 'A0 'A1. ArraysRep[in 'A & 'A0 & 'A1 out 'A | 'A0, 'Rep] -> ArraysRepConsumer['A, 'a] -> 'a) -> 'b) -> 'b
//│   where
//│     'A :> 'A0
//│        <: 'A1
//│     'A1 <: 'A
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step]


def step2: Arrays['a] -> Arrays['a]
//│ step2: Arrays['a] -> Arrays['a]
//│      = <missing implementation>

def step2 arr (k: ArraysRepConsumer['a, 'r]) = arr (fun impl -> k (simpleStepImpl impl))
//│ ((forall 'Rep. ArraysRep['a, 'Rep] -> 'r) -> 'b) -> ArraysRepConsumer['a, 'r] -> 'b
//│   <:  step2:
//│ Arrays['a] -> Arrays['a]
//│      = [Function: step2]


ssb = step (step base)
//│ ssb: Arrays['a]
//│    = [Function (anonymous)]

ssb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (Bool, Bool,)
//│    = [ true, false ]


ssb = step2 (step2 base)
//│ ssb: Arrays['a]
//│    = [Function (anonymous)]

ssb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (Bool, Bool,)
//│    = [ false, false ]


rec def mkMonoArray n =
  if n == 0 then base else step (mkMonoArray(n - 1))
//│ mkMonoArray: int -> Arrays['a]
//│            = [Function: mkMonoArray]

snb = mkMonoArray 5
//│ snb: Arrays['a]
//│    = [Function (anonymous)]

snb (fun arr -> arr.Init true)
//│ res: ??Rep | ??Rep0
//│    = [
//│        [ [ [Array], [Array] ], [ [Array], [Array] ] ],
//│        [ [ [Array], [Array] ], [ [Array], [Array] ] ]
//│      ]


rec def mkMonoArray n =
  if n == 0 then base else step2 (mkMonoArray(n - 1))
//│ mkMonoArray: int -> Arrays['a]
//│            = [Function: mkMonoArray1]

snb = mkMonoArray 5
//│ snb: Arrays['a]
//│    = [Function (anonymous)]

snb (fun arr -> arr.Init true)
//│ res: ??Rep | ??Rep0
//│    = [ [ [ [Array], 'initialized' ], 'initialized' ], 'initialized' ]



// * From the paper:
// let mkPolyArray n = {∀α(∃ρ.∀β.sig(α,ρ,β))} (mkMonoArray n)



