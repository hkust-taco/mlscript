// * TODO also a GADT version of this where we use `Arrays[A]: ArraysImpl[A, ?]`

:NewDefs

:DontDistributeForalls // * Also works without this



declare module Math {
  fun trunc: Num -> Int
}
//│ declare module Math {
//│   fun trunc: Num -> Int
//│ }

fun div(a, b) = Math.trunc(a/b)
fun mod(a, b) = if a < b then a else mod(a - b, b)
//│ fun div: (Num, Num) -> Int
//│ fun mod: (Int, Int) -> Int



abstract class ArraysImpl[A, Rep] {
  fun init: A -> Rep
  fun sub: (Rep, Int) -> A
  fun update: (Rep, Int, A) -> Rep
  fun fold: (Rep, 'b, A -> 'b -> 'b) -> 'b
}
//│ abstract class ArraysImpl[A, Rep] {
//│   fun fold: forall 'b. (Rep, 'b, A -> 'b -> 'b) -> 'b
//│   fun init: A -> Rep
//│   fun sub: (Rep, Int) -> A
//│   fun update: (Rep, Int, A) -> Rep
//│ }

type ArraysImplConsumer[A, R] = forall 'rep: ArraysImpl[A, 'rep] -> R
//│ type ArraysImplConsumer[A, R] = forall 'rep. ArraysImpl[A, 'rep] -> R

abstract class Arrays[A] {
  fun use: ArraysImplConsumer[A, 'res] -> 'res
}
//│ abstract class Arrays[A] {
//│   fun use: forall 'res. ArraysImplConsumer[A, 'res] -> 'res
//│ }


class BaseImpl[A]() extends ArraysImpl[A, A] {
    fun init  (a) = a
    fun sub   (r, i) = r
    fun update(r, i, a) = a
    fun fold  (r, b, f) = f(r)(b)
}
//│ class BaseImpl[A]() extends ArraysImpl {
//│   fun fold: forall 'a 'b 'c. ('a, 'b, 'a -> 'b -> 'c) -> 'c
//│   fun init: forall 'd. 'd -> 'd
//│   fun sub: forall 'e. ('e, anything) -> 'e
//│   fun update: forall 'f. (anything, anything, 'f) -> 'f
//│ }

class StepImpl[A, R](underlying: ArraysImpl[A, R]) extends ArraysImpl[A, [R, R]] {
  fun init(a) = [underlying.init(a), underlying.init(a)]
  fun sub([r0, r1], i) =
    if mod(i, 2) === 0
    then underlying.sub(r0, div(i, 2))
    else underlying.sub(r1, div(i, 2))
  fun update([r0, r1], i, a) =
    if mod(i, 2) == 0
    then [underlying.update(r0, div(i, 2), a), r1]
    else [r0, underlying.update(r1, div(i, 2), a)]
  fun fold([r0, r1], b, f) =
    underlying.fold(r0, underlying.fold(r1, b, f), f)
}
//│ class StepImpl[A, R](underlying: ArraysImpl[A, R]) extends ArraysImpl {
//│   fun fold: forall 'b 'b0. ([R, R], 'b & 'b0, A -> ('b -> ('b & 'b0) & 'b0 -> 'b0)) -> 'b0
//│   fun init: A -> [R, R]
//│   fun sub: ([R, R], Eql[0] & Int) -> A
//│   fun update: ([R, R], Int, A) -> [R, R]
//│ }


class Base[A]() extends Arrays[A] {
  val impl = BaseImpl()
  fun use(k) = k(impl)
}
//│ class Base[A]() extends Arrays {
//│   val impl: BaseImpl[A]
//│   fun use: forall 'a. (BaseImpl[A] -> 'a) -> 'a
//│ }

class Step[A](from: Arrays[A]) extends Arrays[A] {
  
  // * Note: expansion of alias is capture-avoiding of polymorphic levels
  fun use(k: ArraysImplConsumer[A, 'res]) = from.use of
    forall 'rep:
      (impl: ArraysImpl[A, 'rep]) => k(StepImpl(impl))
  
}
//│ class Step[A](from: Arrays[A]) extends Arrays {
//│   fun use: forall 'res. (k: ArraysImplConsumer[A, 'res]) -> 'res
//│ }

// * A version with fewer annotations
class Step[A](from: Arrays[A]) extends Arrays[A] {
  
  fun use(k: ArraysImplConsumer[A, 'res]) =
    from.use of impl => k(StepImpl(impl))
  
  // * Spelling out the type synonym:
  fun use': ArraysImplConsumer[A, 'res] -> 'res
  fun use'(k: forall 'rep: ArraysImpl[A, 'rep] -> 'res) =
    from.use of impl => k of StepImpl(impl)
  
}
//│ class Step[A](from: Arrays[A]) extends Arrays {
//│   fun use: forall 'res. (k: ArraysImplConsumer[A, 'res]) -> 'res
//│   fun use': forall 'res0. ArraysImplConsumer[A, 'res0] -> 'res0
//│ }

// * Note: the annotation on `k` is required, otherwise we leak the locally-polymorphic `impl`
// * (We don't currently do any bidirectional typing.)
:e
class Step'[A](from: Arrays[A]) extends Arrays[A] {
  fun use(k) =
    from.use of impl => k(StepImpl(impl))
}
//│ ╔══[ERROR] Type error in definition of method use
//│ ║  l.123: 	  fun use(k) =
//│ ║         	      ^^^^^^^^
//│ ║  l.124: 	    from.use of impl => k(StepImpl(impl))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'rep` leaks out of its scope
//│ ║  l.36: 	type ArraysImplConsumer[A, R] = forall 'rep: ArraysImpl[A, 'rep] -> R
//│ ║        	                                                           ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.124: 	    from.use of impl => k(StepImpl(impl))
//│ ║         	                                   ^^^^
//│ ╟── • this signature of member `use`:
//│ ║  l.40: 	  fun use: ArraysImplConsumer[A, 'res] -> 'res
//│ ║        	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this field selection:
//│ ║  l.124: 	    from.use of impl => k(StepImpl(impl))
//│ ╙──       	    ^^^^^^^^
//│ class Step'[A](from: Arrays[A]) extends Arrays {
//│   fun use: forall 'R 'a. (StepImpl[A, in ??rep & 'R out 'R | ??rep0] -> 'a) -> 'a
//│ }
//│ Syntax error:
//│   Unexpected string


let ssb = Step(Step(Base()))
//│ let ssb: Step['A]
//│ ssb
//│     = Step {}

ssb.use of impl =>
  let r = impl.update(impl.init(true), 1, false)
  log(r)
  [impl.sub(r, 0), impl.sub(r, 1)]
//│ [Bool, Bool]
//│ res
//│     = [ true, false ]
//│ // Output
//│ [ [ true, true ], [ false, true ] ]

fun mkMonoArray(n) =
  if n === 0 then Base() else Step(mkMonoArray(n - 1))
//│ fun mkMonoArray: forall 'A. (Eql[0] & Int) -> (Base['A] | Step['A])

let snb = mkMonoArray(3)
//│ let snb: Base['A] | Step['A]
//│ snb
//│     = Step {}

snb.use of impl =>
  let r = impl.update(impl.init(true), 1, false)
  log(r)
//│ ()
//│ res
//│     = undefined
//│ // Output
//│ [
//│   [ [ true, true ], [ true, true ] ],
//│   [ [ false, true ], [ true, true ] ]
//│ ]

// * Here we are trying to leak the internally-quantified representation, resulting in the `??rep` extrusion
snb.use of impl => impl.init(true)
// :d
//│ true | ??rep
//│ res
//│     = [
//│         [ [ true, true ], [ true, true ] ],
//│         [ [ true, true ], [ true, true ] ]
//│       ]


// * An alternative implementation of Step with the existential opened outside the function.

class StepAlt[A](from: Arrays[A]) extends Arrays[A] {
  val use = from.use of impl =>
    (k: ArraysImplConsumer[A, 'res]) => k(StepImpl(impl))
}
//│ class StepAlt[A](from: Arrays[A]) extends Arrays {
//│   val use: forall 'res. (k: ArraysImplConsumer[A, 'res]) -> 'res
//│ }

// * With the following, we get "type variable `'rep` leaks out of its scope"
:e
class StepAlt'[A](from: Arrays[A]) extends Arrays[A] {
  val use = from.use of impl =>
    k => k(StepImpl(impl))
    // * ^ This is because we leak impl's representation to `k` in the local `k =>` lambda,
    // * which flows to the type of `use`, where it's extruded:
    // *    forall 'r; (StepImpl[A, ??impl] -> 'r) -> 'r
    // * Interestingly, once we use first-class existentials to extrude things,
    // * this should start working, because we'll get
    // *    exists impl; forall 'r; (StepImpl[A, impl] -> 'r) -> 'r
    // * which is a sutbype of the required
    // *    (forall 'rep; ArraysImpl[A, 'rep] -> 'res) -> 'res
    // * because we can 0-rigidify `impl` and then subtype
    // *    0. (StepImpl[A, impl] -> 'r) -> 'r  <:  (forall 'rep; ArraysImpl[A, 'rep] -> 'res) -> 'res
    // * ie, constraining the parameters and 1-instantiating `forall 'rep`:
    // *    1. ArraysImpl[A, 'rep] -> 'res  <:  (StepImpl[A, impl] -> 'r) -> 'r
    // * which eventually leads to 'rep := impl and 'r := 'res.
}
//│ ╔══[ERROR] Type error in application
//│ ║  l.211: 	  val use = from.use of impl =>
//│ ║         	            ^^^^^^^^^^^^^^^^^^^
//│ ║  l.212: 	    k => k(StepImpl(impl))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'rep` leaks out of its scope
//│ ║  l.36: 	type ArraysImplConsumer[A, R] = forall 'rep: ArraysImpl[A, 'rep] -> R
//│ ║        	                                                           ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.211: 	  val use = from.use of impl =>
//│ ║         	                        ^^^^^^^
//│ ║  l.212: 	    k => k(StepImpl(impl))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this signature of member `use`:
//│ ║  l.40: 	  fun use: ArraysImplConsumer[A, 'res] -> 'res
//│ ║        	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this field selection:
//│ ║  l.211: 	  val use = from.use of impl =>
//│ ╙──       	            ^^^^^^^^
//│ class StepAlt'[A](from: Arrays[A]) extends Arrays {
//│   val use: forall 'R 'a. error | (StepImpl[A, 'R] -> 'a) -> 'a
//│ }
//│ where
//│   'R :> ??rep
//│      <: ??rep0
//│ Syntax error:
//│   Unexpected string


// * An alternative implementation of Step which only allocates one StepImpl per instance!

class StepAlt[A](from: Arrays[A]) extends Arrays[A] {
  
  // * The explicit `forall 'res` is needed with distributivity turned off
  val use = forall 'res: from.use of impl =>
    val impl2 = StepImpl(impl)
    (k: ArraysImplConsumer[A, 'res]) => k(impl2)
  
  // * Version with full annotations (not necessary):
  val use2: ArraysImplConsumer[A, 'res] -> 'res
  val use2 = forall 'res: from.use of forall 'rr: (impl : ArraysImpl[A, 'rr]) =>
    val impl2 = StepImpl(impl)
    (k: ArraysImplConsumer[A, 'res]) => k(impl2)
  
}
//│ class StepAlt[A](from: Arrays[A]) extends Arrays {
//│   val use: forall 'res. (k: ArraysImplConsumer[A, 'res]) -> 'res
//│   val use2: forall 'res0. ArraysImplConsumer[A, 'res0] -> 'res0
//│ }


// * A variation of the above without explicitly binding 'res, so it has to be distributed out

:DistributeForalls // * Distributivity is needed here!

class StepAlt[A](from: Arrays[A]) extends Arrays[A] {
  val use = from.use of impl =>
    val impl2 = StepImpl(impl)
    (k: ArraysImplConsumer[A, 'res]) => k(impl2)
}
//│ class StepAlt[A](from: Arrays[A]) extends Arrays {
//│   val use: forall 'res. (k: ArraysImplConsumer[A, 'res]) -> 'res
//│ }


// * Works the same:

let ssb = StepAlt(StepAlt(Base()))
//│ let ssb: StepAlt['A]
//│ ssb
//│     = StepAlt {}

ssb.use of impl =>
  let r = impl.update(impl.init(true), 1, false)
  log(r)
  [impl.sub(r, 0), impl.sub(r, 1)]
//│ [Bool, Bool]
//│ res
//│     = [ true, false ]
//│ // Output
//│ [ [ true, true ], [ false, true ] ]

fun mkMonoArray(n) =
  if n === 0 then Base() else StepAlt(mkMonoArray(n - 1))
//│ fun mkMonoArray: forall 'A. (Eql[0] & Int) -> (forall 'A0. Base['A0] | StepAlt['A])

let snb = mkMonoArray(3)
//│ let snb: forall 'A 'A0. Base['A0] | StepAlt['A]
//│ snb
//│     = StepAlt {}

snb.use of impl =>
  let r = impl.update(impl.init(true), 1, false)
  log(r)
//│ ()
//│ res
//│     = undefined
//│ // Output
//│ [
//│   [ [ true, true ], [ true, true ] ],
//│   [ [ false, true ], [ true, true ] ]
//│ ]

snb.use of impl => impl.init(true)
//│ true | ??rep
//│ res
//│     = [
//│         [ [ true, true ], [ true, true ] ],
//│         [ [ true, true ], [ true, true ] ]
//│       ]


