:NoRecursiveTypes
:DistributeForalls
:NoJS


// * Test that exposes worseining of type inference due to eager distributivity
// * (compared to no distributivity at all)



type BTB = forall 'b. 'b -> 'b
//│ Defined type alias BTB



// * OK
(fun g -> fun x -> x) : anything -> BTB
//│ res: anything -> BTB


// * OK
def test f =
  f id : anything -> BTB
test (fun g -> fun n -> id)
//│ test: ((forall 'a. 'a -> 'a) -> anything -> BTB) -> anything -> BTB
//│ res: anything -> BTB


// * OK
def test f =
  (fun a -> a : anything -> BTB) (f id)
test (fun g -> fun n -> id)
//│ test: ((forall 'a. 'a -> 'a) -> anything -> BTB) -> anything -> BTB
//│ res: anything -> BTB


// * OK
def test f =
  (fun () -> f id)() : anything -> BTB
test (fun g -> fun n -> id)
//│ test: ((forall 'a. 'a -> 'a) -> anything -> BTB) -> anything -> BTB
//│ res: anything -> BTB


// * NOT OK: Notice the extruded skolem in `??b -> ??b0` whichb results from distributing 'b out of BTB
def test f =
  let a = f() in
  a : anything -> BTB
//│ test: (() -> anything -> ??b -> ??b0) -> anything -> BTB

:e
test (fun () -> fun n -> id)
//│ ╔══[ERROR] Type error in application
//│ ║  l.52: 	test (fun () -> fun n -> id)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.11: 	type BTB = forall 'b. 'b -> 'b
//│ ║        	                      ^^
//│ ╟── back into type variable `'b`
//│ ║  l.11: 	type BTB = forall 'b. 'b -> 'b
//│ ║        	                            ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.47: 	  let a = f() in
//│ ║        	          ^^^
//│ ╟── • this reference:
//│ ║  l.48: 	  a : anything -> BTB
//│ ╙──      	  ^
//│ res: error | anything -> BTB


// * Idem
def test f =
  let a() = f id in
  a() : nothing -> BTB
//│ test: ((forall 'a. 'a -> 'a) -> nothing -> ??b -> ??b0) -> nothing -> BTB

:e
test (fun g -> fun n -> id)
//│ ╔══[ERROR] Type error in application
//│ ║  l.79: 	test (fun g -> fun n -> id)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.11: 	type BTB = forall 'b. 'b -> 'b
//│ ║        	                      ^^
//│ ╟── back into type variable `'b`
//│ ║  l.11: 	type BTB = forall 'b. 'b -> 'b
//│ ║        	                            ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.74: 	  let a() = f id in
//│ ║        	            ^^^^
//│ ╟── • this application:
//│ ║  l.75: 	  a() : nothing -> BTB
//│ ╙──      	  ^^^
//│ res: error | nothing -> BTB



:DontDistributeForalls


// * There is no longer an extruded skolem
def test f =
  let a = f() in
  a : anything -> BTB
//│ test: (() -> anything -> BTB) -> anything -> BTB

test (fun () -> fun n -> id)
//│ res: anything -> BTB


// * Idem
def test f =
  let a = f id in
  a : nothing -> BTB
//│ test: ((forall 'a. 'a -> 'a) -> nothing -> BTB) -> nothing -> BTB

test (fun g -> fun n -> id)
//│ res: nothing -> BTB



