// * Adaptation of QML's original existentials example; using encoded existentials and plain records
// * This alternative version is an exploration of how things go when we DON'T have forall distributivity (ie ND)

:NoRecursiveTypes
:DontDistributeForalls



// *** Type definitions *** //

type ArraysImpl[A, Rep] = {
    init: A -> Rep;
    sub: Rep -> int -> A;
    update: Rep -> int -> A -> Rep;
    fold: forall 'b. (A -> 'b -> 'b) -> 'b -> Rep -> 'b
  }
//│ Defined type alias ArraysImpl[=A, =Rep]

type ArraysImplConsumer[A, R] = forall 'rep. ArraysImpl[A, 'rep] -> R
//│ Defined type alias ArraysImplConsumer[=A, +R]

type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ Defined type alias Arrays[=A]



// *** Base *** //


baseImpl = {
    init   = fun a -> a;
    sub    = fun r -> fun i -> r;
    update = fun r -> fun i -> fun a -> a;
    fold   = fun f -> fun b -> fun r -> f r b
  }
//│ baseImpl: {
//│   fold: forall 'a 'b 'c. ('a -> 'b -> 'c) -> 'b -> 'a -> 'c,
//│   init: forall 'd. 'd -> 'd,
//│   sub: forall 'e. 'e -> anything -> 'e,
//│   update: anything -> anything -> (forall 'f. 'f -> 'f)
//│ }
//│         = {
//│             init: [Function: init],
//│             sub: [Function: sub],
//│             update: [Function: update],
//│             fold: [Function: fold]
//│           }

baseImpl : ArraysImpl['a, 'a]
//│ res: ArraysImpl['a, 'a]
//│    = {
//│        init: [Function: init],
//│        sub: [Function: sub],
//│        update: [Function: update],
//│        fold: [Function: fold]
//│      }

def base: Arrays['a]
//│ base: Arrays['a]
//│     = <missing implementation>

// * This works because `f` is used immediately, at the top level
// * (not within a more polymorphic context),
// * so we do not need first-class parametric polymorphism to type check the definition.
def base f = f baseImpl
//│ ({
//│   fold: forall 'a 'b 'c. ('a -> 'b -> 'c) -> 'b -> 'a -> 'c,
//│   init: forall 'd. 'd -> 'd,
//│   sub: forall 'e. 'e -> anything -> 'e,
//│   update: anything -> anything -> (forall 'f. 'f -> 'f)
//│ } -> 'g) -> 'g
//│   <:  base:
//│ Arrays['a]
//│     = [Function: base]

// * Also works, but not necessary
def base (f: ArraysImplConsumer['a, 'res]) = f baseImpl
//│ ArraysImplConsumer['a, 'b] -> 'b
//│   <:  base:
//│ Arrays['a]
//│     = [Function: base1]



// *** Step *** //


def stepImpl_ty: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ stepImpl_ty: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│            = <missing implementation>

// * `arrImpl` is meant to be used polymorphically under lambdas, so it needs an annotation
def stepImpl (arrImpl: ArraysImpl['a, 'r]) = {
    init   = fun a -> (arrImpl.init a, "hi");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.update r0 i a, "hey");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.fold f b r0
  }
//│ stepImpl: ArraysImpl['a, 'r] -> {
//│   fold: forall 'b 'b0. ('a -> 'b -> ('b & 'b0)) -> (forall 'c. ('b & 'c) -> (('r, anything,),) -> ('c | 'b0)),
//│   init: 'a -> ('r, "hi",),
//│   sub: (('r, anything,),) -> int -> 'a,
//│   update: (('r, anything,),) -> int -> 'a -> ('r, "hey",)
//│ }
//│         = [Function: stepImpl]

stepImpl_ty = stepImpl
//│ ArraysImpl['a, 'r] -> {
//│   fold: forall 'b 'b0. ('a -> 'b -> ('b & 'b0)) -> (forall 'c. ('b & 'c) -> (('r, anything,),) -> ('c | 'b0)),
//│   init: 'a -> ('r, "hi",),
//│   sub: (('r, anything,),) -> int -> 'a,
//│   update: (('r, anything,),) -> int -> 'a -> ('r, "hey",)
//│ }
//│   <:  stepImpl_ty:
//│ ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│            = [Function: stepImpl]


def step: Arrays['a] -> Arrays['a]
//│ step: Arrays['a] -> Arrays['a]
//│     = <missing implementation>


// * --- Using stepImpl --- * //


// * Works
def helper impl (k: ArraysImplConsumer['a, 'res]) = k (stepImpl impl)
//│ helper: ArraysImpl[in 'a & 'a0 out 'a | 'a0, 'r] -> (forall 'a1 'b. ArraysImplConsumer['a1, 'b] -> 'b)
//│   where
//│     'a1 :> 'a
//│         <: 'a0
//│       = [Function: helper]

// * FIXME why does this require so much fuel?!
:Fuel 50000
def step (arr: Arrays['a]) = arr helper
//│ Arrays['a] -> ArraysImplConsumer['a, 'b] -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.137: 	def step (arr: Arrays['a]) = arr helper
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                  ^^
//│ ╟── back into type variable `'r`
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                         ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.137: 	def step (arr: Arrays['a]) = arr helper
//│ ║         	                             ^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.128: 	def helper impl (k: ArraysImplConsumer['a, 'res]) = k (stepImpl impl)
//│ ╙──       	                                                    ^^^^^^^^^^^^^^^^^
//│ TEST CASE FAILURE: There was an unexpected type error
//│     = [Function: step]
:ResetFuel


// * It behaves better when we bind 'a at the right place
def helper = forall 'a. fun impl -> fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl impl)
// * Or equivalently:
// def helper = forall 'a. fun impl -> forall 'b. fun (k: ArraysImplConsumer['a, 'b]) -> k (stepImpl impl)
//│ helper: ArraysImpl['a, 'r] -> (forall 'b. ArraysImplConsumer['a, 'b] -> 'b)
//│       = [Function: helper1]

def step arr = arr helper
//│ ((forall 'a 'r. ArraysImpl['a, 'r] -> (forall 'b. ArraysImplConsumer['a, 'b] -> 'b)) -> 'c) -> 'c
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.169: 	def step arr = arr helper
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                  ^^
//│ ╟── back into type variable `'r`
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                         ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.169: 	def step arr = arr helper
//│ ║         	               ^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.163: 	def helper = forall 'a. fun impl -> fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl impl)
//│ ╙──       	                                                                           ^^^^^^^^^^^^^^^^^
//│ TEST CASE FAILURE: There was an unexpected type error
//│     = [Function: step1]

// * In one go:  <------------------------ this is probably the most canonical definition of `step` in this file

def step arr = arr (forall 'a. fun impl -> fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl impl))
//│ ((forall 'a 'r. ArraysImpl['a, 'r] -> (forall 'b. ArraysImplConsumer['a, 'b] -> 'b)) -> 'c) -> 'c
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.194: 	def step arr = arr (forall 'a. fun impl -> fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl impl))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                  ^^
//│ ╟── back into type variable `'r`
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                         ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.194: 	def step arr = arr (forall 'a. fun impl -> fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl impl))
//│ ╙──       	                                                                                  ^^^^^^^^^^^^^^^^^
//│ TEST CASE FAILURE: There was an unexpected type error
//│     = [Function: step2]


// * Also kind of works – note that 'res is quantified in the right place (innermost lambda)
// * Note that currently, undeclared TVs are not shared between type annots, so we couldn't use 'a in both
def helper (impl: ArraysImpl['a, 'rep]) (k: ArraysImplConsumer['b, 'res]) = k (stepImpl impl)
//│ helper: ArraysImpl['a, 'rep] -> (forall 'b 'c. ArraysImplConsumer['b, 'c] -> 'c)
//│   where
//│     'b := 'a
//│       = [Function: helper2]

// * FIXME this works with `:Fuel 4000000` but takes ~10s!!
// * Why require so much fuel? (notably, more than in the same `helper` but *without* the impl annot)
// * -> probably due to 'b being generalized too early
// * Note [2023-10-06]:
// *    It seems the fuel might be needed because of TV reconstraining after extrusion,
// *    which is currently implemented in a very naive and wasteful way!
// *    Indeed, if we set (includeBounds = true) in the `getVars` method,
// *    which is used for reconstraining, then this no longer require extra fuel!
:e
def step (arr: Arrays['a]) = arr helper
//│ Arrays['a] -> ArraysImplConsumer['a, 'b] -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.232: 	def step (arr: Arrays['a]) = arr helper
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                  ^^
//│ ╟── back into type variable `'r`
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                         ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.232: 	def step (arr: Arrays['a]) = arr helper
//│ ║         	                             ^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.217: 	def helper (impl: ArraysImpl['a, 'rep]) (k: ArraysImplConsumer['b, 'res]) = k (stepImpl impl)
//│ ╙──       	                                                                            ^^^^^^^^^^^^^^^^^
//│     = [Function: step3]


// * With explicit foralls (otherwise each annot FV refers to a different var)
// * Note: changing this to `ArraysImplConsumer['b, 'res]` requires similar crazy fuel consumption
// * as above, as expected (in fact, I had to use even more `:Fuel 10000000`).
// * The issue is probably in some excessive/pathological extrusion behavior due to 'b being too polymorphic
// * Removing `'a` in the forall clause has a similar effect but "only" requires `:Fuel 4000000`
// *  — the difference is probably due to `'a` being rigid or not causing slightly different behaviors
def helper = forall 'a 'rep. fun (impl: ArraysImpl['a, 'rep]) ->
  forall 'res. fun (k: ArraysImplConsumer['a, 'res]) -> k (stepImpl impl)
//│ helper: ArraysImpl['a, 'rep] -> (forall 'res. ArraysImplConsumer['a, 'res] -> 'res)
//│       = [Function: helper3]

def step (arr: Arrays['a]) = arr helper
//│ Arrays['a] -> ArraysImplConsumer['a, 'res] -> 'res
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.266: 	def step (arr: Arrays['a]) = arr helper
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                  ^^
//│ ╟── back into type variable `'r`
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                         ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this quantified type variable:
//│ ║  l.262: 	  forall 'res. fun (k: ArraysImplConsumer['a, 'res]) -> k (stepImpl impl)
//│ ║         	         ^^^^
//│ ╟── • this application:
//│ ║  l.266: 	def step (arr: Arrays['a]) = arr helper
//│ ║         	                             ^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.262: 	  forall 'res. fun (k: ArraysImplConsumer['a, 'res]) -> k (stepImpl impl)
//│ ╙──       	                                                        ^^^^^^^^^^^^^^^^^
//│ TEST CASE FAILURE: There was an unexpected type error
//│     = [Function: step4]


// * Doesn't work (`'rep` leaks out of its scope in `step`)
def helper impl k = k (stepImpl impl)
//│ helper: ArraysImpl[in 'a out 'a | 'a0, in 'r out 'r | 'r0] -> (forall 'a1 'r1 'c. ({
//│   fold: forall 'b 'b0. (('a | 'a1) -> 'b -> ('b & 'b0)) -> (forall 'd. ('b & 'd) -> (('r0 & 'r1, anything,),) -> ('d | 'b0)),
//│   init: ('a0 & 'a1) -> ('r | 'r1, "hi",),
//│   sub: (('r0 & 'r1, anything,),) -> int -> ('a | 'a1),
//│   update: (('r0 & 'r1, anything,),) -> int -> ('a0 & 'a1) -> ('r | 'r1, "hey",)
//│ } -> 'c) -> 'c)
//│       = [Function: helper4]

// * Idem
def helper (impl: ArraysImpl['a, 'rep]) k = k (stepImpl impl)
//│ helper: ArraysImpl['a, 'rep] -> (forall 'c. ({
//│   fold: forall 'b 'b0. ('a -> 'b -> ('b & 'b0)) -> (forall 'd. ('b & 'd) -> (('rep, anything,),) -> ('d | 'b0)),
//│   init: 'a -> ('rep, "hi",),
//│   sub: (('rep, anything,),) -> int -> 'a,
//│   update: (('rep, anything,),) -> int -> 'a -> ('rep, "hey",)
//│ } -> 'c) -> 'c)
//│       = [Function: helper5]

:e
def step (arr: Arrays['a]) = arr helper
//│ Arrays['a] -> ({
//│   fold: ('a -> 'b -> 'b) -> 'b -> ((??rep, anything,),) -> 'b,
//│   init: 'a -> (anything, "hi",),
//│   sub: ((??rep, anything,),) -> int -> 'a,
//│   update: ((??rep, anything,),) -> int -> 'a -> (anything, "hey",)
//│ } -> 'c) -> 'c
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.314: 	def step (arr: Arrays['a]) = arr helper
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'rep` leaks out of its scope
//│ ║  l.19: 	type ArraysImplConsumer[A, R] = forall 'rep. ArraysImpl[A, 'rep] -> R
//│ ║        	                                                           ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.304: 	def helper (impl: ArraysImpl['a, 'rep]) k = k (stepImpl impl)
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.314: 	def step (arr: Arrays['a]) = arr helper
//│ ║         	                                 ^^^^^^
//│ ╟── • this reference:
//│ ║  l.314: 	def step (arr: Arrays['a]) = arr helper
//│ ║         	                             ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.95: 	    sub    = fun ((r0, r1)) -> fun i -> arrImpl.sub r0 i;
//│ ╙──      	                                                    ^^
//│     = [Function: step5]


// * An alternative way, and in one go:

def step arr = arr (fun impl -> (fun k -> k (stepImpl_ty impl)) : Arrays['a])
//│ ((forall 'a 'r. ArraysImpl['a, 'r] -> Arrays['a]) -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step6]

def step arr = arr (fun impl -> (fun k -> k (stepImpl impl)) : Arrays['a])
//│ ((forall 'a 'r. ArraysImpl['a, 'r] -> Arrays['a]) -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step7]

def step = forall 'a. fun arr -> arr (fun impl -> (fun k -> k (stepImpl impl)) : Arrays['a])
//│ ((forall 'r. ArraysImpl['a, 'r] -> Arrays['a]) -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step8]

// * This one is wrong (notice the extrusion in the type):
def step_ arr = forall 'a. arr (fun (impl : ArraysImpl['a, 'rep]) -> (fun k -> k (stepImpl impl)) : Arrays['a])
//│ step_: ((ArraysImpl[in ??a out ??a0, 'rep] -> Arrays[in ??a out ??a0]) -> 'a) -> 'a
//│      = [Function: step_]

def step = forall 'a. fun arr -> arr (fun (impl : ArraysImpl['a, 'rep]) -> (fun k -> k (stepImpl impl)) : Arrays['a])
//│ ((forall 'rep. ArraysImpl['a, 'rep] -> Arrays['a]) -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step9]



// * --- Using stepImpl_ty --- * //


// * Still doesn't work (`'rep` leaks out of its scope in `step`) – expected
def helper impl k = k (stepImpl_ty impl)
//│ helper: ArraysImpl[in 'a out 'a | 'a0, in 'r out 'r | 'r0] -> (forall 'a1 'r1 'b. (ArraysImpl['a1, ('r1, string,)] -> 'b) -> 'b)
//│   where
//│     'r1 :> 'r
//│         <: 'r0
//│     'a1 :> 'a
//│         <: 'a0
//│       = [Function: helper6]

// * Idem – expected, as `k` needs an annot to avoid leaking its argument's type
def helper (impl: ArraysImpl['a, 'rep]) k = k (stepImpl_ty impl)
//│ helper: ArraysImpl['a, 'rep] -> (forall 'b. (ArraysImpl['a, ('rep, string,)] -> 'b) -> 'b)
//│       = [Function: helper7]

// * Idem – this is a bit surprising, given that it works with the plain `stepImpl`! (tho with much fuel)
def helper impl (k: ArraysImplConsumer['a2, 'res]) = k (stepImpl_ty impl)
//│ helper: ArraysImpl[in 'a & 'a0 out 'a | 'a0, 'r] -> (forall 'a2 'b. ArraysImplConsumer['a2, 'b] -> 'b)
//│   where
//│     'a2 :> 'a
//│         <: 'a0
//│       = [Function: helper8]

// * Now this works – so the problem was 'a2 not being generalized at the right place
def helper = forall 'a2. fun impl -> fun (k: ArraysImplConsumer['a2, 'res]) -> k (stepImpl_ty impl)
//│ helper: ArraysImpl['a2, 'r] -> (forall 'a. ArraysImplConsumer['a2, 'a] -> 'a)
//│       = [Function: helper9]

def step arr = arr helper
//│ ((forall 'a2 'r. ArraysImpl['a2, 'r] -> (forall 'a. ArraysImplConsumer['a2, 'a] -> 'a)) -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.409: 	def step arr = arr helper
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                  ^^
//│ ╟── back into type variable `'r`
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                         ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.409: 	def step arr = arr helper
//│ ║         	               ^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.405: 	def helper = forall 'a2. fun impl -> fun (k: ArraysImplConsumer['a2, 'res]) -> k (stepImpl_ty impl)
//│ ╙──       	                                                                               ^^^^^^^^^^^^^^^^^^^^
//│ TEST CASE FAILURE: There was an unexpected type error
//│     = [Function: step10]


// * Also works
def helper (impl: ArraysImpl['a, 'rep]) (k: ArraysImplConsumer['a2, 'res]) = k (stepImpl_ty impl)
// def helper (impl: ArraysImpl['a, 'rep]) (k: ArraysImplConsumer['a, 'rep]) = k (stepImpl_ty impl)
//│ helper: ArraysImpl['a, 'rep] -> (forall 'b. ArraysImplConsumer['a, 'b] -> 'b)
//│       = [Function: helper10]

// * Why so much? – probably the same reason as above ('a2 instead of the same 'a)
:Fuel 500000
def step arr = arr helper
//│ ((forall 'a 'rep. ArraysImpl['a, 'rep] -> (forall 'b. ArraysImplConsumer['a, 'b] -> 'b)) -> 'c) -> 'c
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.441: 	def step arr = arr helper
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                  ^^
//│ ╟── back into type variable `'r`
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                         ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.441: 	def step arr = arr helper
//│ ║         	               ^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.434: 	def helper (impl: ArraysImpl['a, 'rep]) (k: ArraysImplConsumer['a2, 'res]) = k (stepImpl_ty impl)
//│ ╙──       	                                                                             ^^^^^^^^^^^^^^^^^^^^
//│ TEST CASE FAILURE: There was an unexpected type error
//│     = [Function: step11]
:ResetFuel

// * Note that `:GeneralizeCurriedFunctions` is enabled here because of `:DontDistributeForalls`,
// * so this version still generalizes the innermost lambda:
def helper = forall 'a 'rep. fun (impl: ArraysImpl['a, 'rep]) -> fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl_ty impl)
//│ helper: ArraysImpl['a, 'rep] -> (forall 'b. ArraysImplConsumer['a, 'b] -> 'b)
//│       = [Function: helper11]

def step arr = arr helper
//│ ((forall 'a 'rep. ArraysImpl['a, 'rep] -> (forall 'b. ArraysImplConsumer['a, 'b] -> 'b)) -> 'c) -> 'c
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.471: 	def step arr = arr helper
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'r` leaks out of its scope
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                  ^^
//│ ╟── back into type variable `'r`
//│ ║  l.22: 	type Arrays[A] = forall 'r. ArraysImplConsumer[A, 'r] -> 'r
//│ ║        	                                                         ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.471: 	def step arr = arr helper
//│ ║         	               ^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.467: 	def helper = forall 'a 'rep. fun (impl: ArraysImpl['a, 'rep]) -> fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl_ty impl)
//│ ╙──       	                                                                                                        ^^^^^^^^^^^^^^^^^^^^
//│ TEST CASE FAILURE: There was an unexpected type error
//│     = [Function: step12]

:DontGeneralizeCurriedFunctions

// * Note: could also force explicit generalization with `forall.`
def helper = forall 'a 'rep. fun (impl: ArraysImpl['a, 'rep]) -> forall. fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl_ty impl)
//│ helper: ArraysImpl['a, 'rep] -> (forall 'b. ArraysImplConsumer['a, 'b] -> 'b)
//│       = [Function: helper12]

// * Note: or could also let-bind the lambda to force generalization
def helper = forall 'a 'rep. fun (impl: ArraysImpl['a, 'rep]) -> let res = fun (k: ArraysImplConsumer['a, 'r]) -> k (stepImpl_ty impl) in res
//│ helper: ArraysImpl['a, 'rep] -> (forall 'b. ArraysImplConsumer['a, 'b] -> 'b)
//│       = [Function: helper13]

:GeneralizeCurriedFunctions


// * Interesting alternative to annotating `k` that also works:

// * Works
def helper = forall 'a 'rep. fun (impl: ArraysImpl['a, 'rep]) -> (fun k -> k (stepImpl_ty impl)) : Arrays['a]
//│ helper: ArraysImpl['a, 'rep] -> Arrays['a]
//│       = [Function: helper14]

// * Works
def helper = forall 'a. fun impl -> (fun k -> k (stepImpl_ty impl)) : Arrays['a]
//│ helper: ArraysImpl['a, 'r] -> Arrays['a]
//│       = [Function: helper15]

def step arr = arr helper
//│ ((forall 'a 'r. ArraysImpl['a, 'r] -> Arrays['a]) -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step13]

// * Works
// * Note the slight difference in type with above due to 'a being generalized at a different place:
def helper impl = (fun k -> k (stepImpl_ty impl)) : Arrays['a]
//│ helper: ArraysImpl['a, 'r] -> Arrays['a]
//│       = [Function: helper16]

helper : ArraysImplConsumer['a, 'r]
//│ res: ArraysImplConsumer['a, Arrays['a]]
//│    = [Function: helper16]

def step arr = arr helper
//│ ((forall 'a 'r. ArraysImpl['a, 'r] -> Arrays['a]) -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step14]

// * In one go:

def step arr = arr (fun impl -> (fun k -> k (stepImpl_ty impl)) : Arrays['a])
//│ ((forall 'a 'r. ArraysImpl['a, 'r] -> Arrays['a]) -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step15]

def step arr = arr helper
//│ ((forall 'a 'r. ArraysImpl['a, 'r] -> Arrays['a]) -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step16]



// *** Uses *** //


ssb = step (step base)
//│ ssb: Arrays['a]
//│    = [Function (anonymous)]

ssb (fun arr ->
    let r2 = arr.update (arr.init true) 1 false
    in (arr.sub r2 0, arr.sub r2 1)
  )
//│ res: (Bool, Bool,)
//│    = [ false, false ]


rec def mkMonoArray n =
  if n == 0 then base else step (mkMonoArray (n - 1))
//│ mkMonoArray: int -> (forall 'a. Arrays[in 'a0 | 'a out 'a0 & 'a])
//│            = [Function: mkMonoArray]

snb = mkMonoArray 3
//│ snb: Arrays[in 'a | 'a0 out 'a & 'a0]
//│    = [Function (anonymous)]

// * Here we are trying to leak the internally-quantified representation, resulting in extruded types being returned
snb (fun arr -> arr.init true)
//│ res: anything
//│    = [ [ [ true, 'hi' ], 'hi' ], 'hi' ]



// *** An alternative way of defining Step! *** //


// * Use another name to clarify this is an alternative way of defining it
def step2: Arrays['a] -> Arrays['a]
//│ step2: Arrays['a] -> Arrays['a]
//│      = <missing implementation>


// * Using `stepImpl`
def step2 = forall 'a. fun (arr: Arrays['a]) ->
  fun (k: ArraysImplConsumer['a, 'rep]) -> arr (fun impl -> k (stepImpl impl))
//│ Arrays['a] -> (forall 'b. ArraysImplConsumer['a, 'b] -> 'b)
//│   <:  step2:
//│ Arrays['a] -> Arrays['a]
//│      = [Function: step21]

// * Using `stepImpl_ty`
def step2 = forall 'a. fun (arr: Arrays['a]) ->
  fun (k: ArraysImplConsumer['a, 'rep]) -> arr (fun impl -> k (stepImpl_ty impl))
//│ Arrays['a] -> (forall 'b. ArraysImplConsumer['a, 'b] -> 'b)
//│   <:  step2:
//│ Arrays['a] -> Arrays['a]
//│      = [Function: step22]

// * Being a bit more explicit about generalization points:
def step2 = forall 'a. fun (arr: Arrays['a]) -> forall 'res.
  fun (k: forall 'rep. ArraysImpl['a, 'rep] -> 'res) -> arr (fun impl -> k (stepImpl_ty impl))
//│ Arrays['a] -> (forall 'res. (forall 'rep. ArraysImpl['a, 'rep] -> 'res) -> 'res)
//│   <:  step2:
//│ Arrays['a] -> Arrays['a]
//│      = [Function: step23]

// * Or being less explicit: removing `forall 'a` and using `stepImpl`:
def step2 (arr: Arrays['a]) (k: ArraysImplConsumer['a2, 'rep]) = arr (fun impl -> k (stepImpl impl))
//│ Arrays['a] -> (forall 'b. ArraysImplConsumer['a, 'b] -> 'b)
//│   <:  step2:
//│ Arrays['a] -> Arrays['a]
//│      = [Function: step24]


// * Removing either annotation breaks it:

:e
def step2 = forall 'a. fun (arr: Arrays['a]) -> fun k -> arr (fun impl -> k (stepImpl_ty impl))
//│ Arrays['a] -> (forall 'b. (ArraysImpl['a, in (??rep, string,) out (anything, string,)] -> 'b) -> 'b)
//│   <:  step2:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.634: 	def step2 = forall 'a. fun (arr: Arrays['a]) -> fun k -> arr (fun impl -> k (stepImpl_ty impl))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'rep` leaks out of its scope
//│ ║  l.19: 	type ArraysImplConsumer[A, R] = forall 'rep. ArraysImpl[A, 'rep] -> R
//│ ║        	                                                           ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.634: 	def step2 = forall 'a. fun (arr: Arrays['a]) -> fun k -> arr (fun impl -> k (stepImpl_ty impl))
//│ ║         	                                                                                         ^^^^
//│ ╟── • this reference:
//│ ║  l.634: 	def step2 = forall 'a. fun (arr: Arrays['a]) -> fun k -> arr (fun impl -> k (stepImpl_ty impl))
//│ ║         	                                                         ^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.88: 	def stepImpl_ty: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ ╙──      	                                                       ^^
//│      = [Function: step25]

:e
def step2 = forall 'a. fun arr -> fun (k: ArraysImplConsumer['a, 'rep]) -> arr (fun impl -> k (stepImpl_ty impl))
// * Or equivalently:
// def step = forall 'a. fun arr -> forall 'rep. fun (k: ArraysImplConsumer['a, 'rep]) -> arr (fun impl -> k (stepImpl_ty impl))
//│ ((ArraysImpl['a, 'r] -> 'rep) -> 'b) -> ArraysImplConsumer['a, 'rep] -> 'b
//│   <:  step2:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.657: 	def step2 = forall 'a. fun arr -> fun (k: ArraysImplConsumer['a, 'rep]) -> arr (fun impl -> k (stepImpl_ty impl))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'rep` leaks out of its scope
//│ ║  l.19: 	type ArraysImplConsumer[A, R] = forall 'rep. ArraysImpl[A, 'rep] -> R
//│ ║        	                                                           ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this applied expression:
//│ ║  l.657: 	def step2 = forall 'a. fun arr -> fun (k: ArraysImplConsumer['a, 'rep]) -> arr (fun impl -> k (stepImpl_ty impl))
//│ ║         	                                                                           ^^^
//│ ╟── • this function:
//│ ║  l.657: 	def step2 = forall 'a. fun arr -> fun (k: ArraysImplConsumer['a, 'rep]) -> arr (fun impl -> k (stepImpl_ty impl))
//│ ╙──       	                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│      = [Function: step26]


// * FIXME why is this displayed as `'a <: nothing`? Simplification bug?
def s arr (k: ArraysImplConsumer['a, 'rep]) = arr (fun impl -> k (stepImpl_ty impl))
//│ s: ((ArraysImpl[in 'a out 'a | 'a0, 'r] -> 'rep) -> 'b) -> (forall 'a1. ArraysImplConsumer['a1, 'rep] -> 'b)
//│   where
//│     'a1 :> 'a
//│         <: 'a0
//│  = [Function: s]
// * We can see it shouldn't be simplified to nothing:
:ns
s
//│ res: forall 'b 'c 'a 'a0 'a1 'a2 'r 'r0 'd 'rep 'e. 'b -> (forall 'a3 'rep0 'f. ArraysImplConsumer['a3, 'rep0] -> 'f)
//│   where
//│     'f :> 'e
//│     'rep0 <: 'rep
//│     'a3 :> 'a0
//│         <: 'a2
//│     'b <: ('c -> 'd) -> 'e
//│     'd :> 'rep
//│     'c <: ArraysImpl[in 'a out 'a1, in 'r out 'r0]
//│     'r0 :> 'r
//│     'a1 :> 'a | 'a2
//│     'a2 :> 'a0
//│     'a <: 'a0
//│    = [Function: s]

// * BTW: this doesn't work (same reason as before: k needs an annotation)
:e
step2 = s
//│ ((ArraysImpl[in 'a out 'a | 'a0, 'r] -> 'rep) -> 'b) -> (forall 'a1. ArraysImplConsumer['a1, 'rep] -> 'b)
//│   where
//│     'a1 :> 'a
//│         <: 'a0
//│   <:  step2:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.706: 	step2 = s
//│ ║         	^^^^^^^^^
//│ ╟── type variable `'rep` leaks out of its scope
//│ ║  l.19: 	type ArraysImplConsumer[A, R] = forall 'rep. ArraysImpl[A, 'rep] -> R
//│ ║        	                                                           ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this applied expression:
//│ ║  l.680: 	def s arr (k: ArraysImplConsumer['a, 'rep]) = arr (fun impl -> k (stepImpl_ty impl))
//│ ║         	                                              ^^^
//│ ╟── • this function:
//│ ║  l.680: 	def s arr (k: ArraysImplConsumer['a, 'rep]) = arr (fun impl -> k (stepImpl_ty impl))
//│ ║         	                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.706: 	step2 = s
//│ ╙──       	        ^
//│      = [Function: s]



// *** Uses 2 *** //


ssb = step2 (step2 base)
//│ ssb: Arrays['a]
//│    = [Function (anonymous)]

ssb (fun arr ->
    let r2 = arr.update (arr.init true) 1 false
    in (arr.sub r2 0, arr.sub r2 1)
  )
//│ res: (Bool, Bool,)
//│    = [ false, false ]


rec def mkMonoArray n =
  if n == 0 then base else step2 (mkMonoArray (n - 1))
//│ mkMonoArray: int -> (forall 'a. Arrays[in 'a0 | 'a out 'a0 & 'a])
//│            = [Function: mkMonoArray1]

snb = mkMonoArray 3
//│ snb: Arrays[in 'a | 'a0 out 'a & 'a0]
//│    = [Function (anonymous)]

// * Here we are trying to leak the internally-quantified representation, resulting in extruded types being returned
snb (fun arr -> arr.init true)
//│ res: anything
//│    = [ [ [ true, 'hi' ], 'hi' ], 'hi' ]



