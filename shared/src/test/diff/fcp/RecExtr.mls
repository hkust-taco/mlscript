:NoRecursiveTypes
:DontDistributeForalls
:DontGeneralizeCurriedFunctions


// * Note: funnily-recursive function
rec def foo x y =
  let tmp = foo x y in (x, y,)
//│ foo: 'a -> 'b -> ('a, 'b,)
//│    = [Function: foo]

foo
//│ res: 'a -> 'b -> ('a, 'b,)
//│    = [Function: foo]

def foo_ty: 'a -> (forall 'b. 'b -> ('a, 'b,))
//│ foo_ty: 'a -> (forall 'b. 'b -> ('a, 'b,))
//│       = <missing implementation>


:e // * Needs distributivity (see at the end)
foo_ty = foo
//│ 'a -> 'b -> ('a, 'b,)
//│   <:  foo_ty:
//│ 'a -> (forall 'b. 'b -> ('a, 'b,))
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.22: 	foo_ty = foo
//│ ║        	^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.16: 	def foo_ty: 'a -> (forall 'b. 'b -> ('a, 'b,))
//│ ║        	                              ^^
//│ ╟── back into type variable `'b`
//│ ║  l.16: 	def foo_ty: 'a -> (forall 'b. 'b -> ('a, 'b,))
//│ ║        	                                         ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.22: 	foo_ty = foo
//│ ║        	         ^^^
//│ ╟── • this reference:
//│ ║  l.8: 	  let tmp = foo x y in (x, y,)
//│ ╙──     	                           ^
//│       = [Function: foo]

:e // * Needs distributivity (see at the end)
foo_ty x y = (x, y,)
//│ 'a -> 'b -> ('a, 'b,)
//│   <:  foo_ty:
//│ 'a -> (forall 'b. 'b -> ('a, 'b,))
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.45: 	foo_ty x y = (x, y,)
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.16: 	def foo_ty: 'a -> (forall 'b. 'b -> ('a, 'b,))
//│ ║        	                              ^^
//│ ╟── back into type variable `'b`
//│ ║  l.16: 	def foo_ty: 'a -> (forall 'b. 'b -> ('a, 'b,))
//│ ║        	                                         ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.45: 	foo_ty x y = (x, y,)
//│ ╙──      	                 ^
//│       = [Function: foo_ty1]


rec def foo2 x y z =
  let tmp = foo2 x y z in (x, y, z)
//│ foo2: 'a -> 'b -> 'c -> ('a, 'b, 'c,)
//│     = [Function: foo2]

def foo2_ty: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> ('a, 'b, 'c,)))
//│ foo2_ty: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> ('a, 'b, 'c,)))
//│        = <missing implementation>

:e
foo2_ty = foo2
//│ 'a -> 'b -> 'c -> ('a, 'b, 'c,)
//│   <:  foo2_ty:
//│ 'a -> (forall 'b. 'b -> (forall 'c. 'c -> ('a, 'b, 'c,)))
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.75: 	foo2_ty = foo2
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.70: 	def foo2_ty: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> ('a, 'b, 'c,)))
//│ ║        	                               ^^
//│ ╟── back into type variable `'b`
//│ ║  l.70: 	def foo2_ty: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> ('a, 'b, 'c,)))
//│ ║        	                                                            ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.75: 	foo2_ty = foo2
//│ ║        	          ^^^^
//│ ╟── • this reference:
//│ ║  l.66: 	  let tmp = foo2 x y z in (x, y, z)
//│ ╙──      	                              ^
//│        = [Function: foo2]

:e // * Needs distributivity (see at the end)
foo2_ty x y z = (x, y, z,)
//│ 'a -> 'b -> 'c -> ('a, 'b, 'c,)
//│   <:  foo2_ty:
//│ 'a -> (forall 'b. 'b -> (forall 'c. 'c -> ('a, 'b, 'c,)))
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.98: 	foo2_ty x y z = (x, y, z,)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.70: 	def foo2_ty: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> ('a, 'b, 'c,)))
//│ ║        	                               ^^
//│ ╟── back into type variable `'b`
//│ ║  l.70: 	def foo2_ty: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> ('a, 'b, 'c,)))
//│ ║        	                                                            ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.98: 	foo2_ty x y z = (x, y, z,)
//│ ╙──      	                    ^
//│        = [Function: foo2_ty1]



rec def r x = let tmp = x in x
//│ r: 'a -> 'a
//│  = [Function: r]

rec def x = x
//│ x: nothing
//│  = [Function: x]

:e
rec def lr1 = { tail = lr1 }
//│ ╔══[ERROR] Inferred recursive type: 'lr1
//│   where
//│     'lr1 :> {tail: 'lr1}
//│ ╙──
//│ lr1: 'lr1
//│   where
//│     'lr1 :> {tail: 'lr1}
//│    = [Function: lr1]

:e
rec def lr1 = { head = 0; tail = lr1 }
//│ ╔══[ERROR] Inferred recursive type: 'lr1
//│   where
//│     'lr1 :> {head: 0, tail: 'lr1}
//│ ╙──
//│ lr1: 'lr1
//│   where
//│     'lr1 :> {head: 0, tail: 'lr1}
//│    = [Function: lr11]



// * With distributivity:
:DistributeForalls


foo_ty = foo
//│ 'a -> 'b -> ('a, 'b,)
//│   <:  foo_ty:
//│ 'a -> 'b -> ('a, 'b,)
//│       = [Function: foo]


foo_ty x y = (x, y,)
//│ 'a -> 'b -> ('a, 'b,)
//│   <:  foo_ty:
//│ 'a -> 'b -> ('a, 'b,)
//│       = [Function: foo_ty3]


foo2_ty = foo2
//│ 'a -> 'b -> 'c -> ('a, 'b, 'c,)
//│   <:  foo2_ty:
//│ 'a -> 'b -> 'c -> ('a, 'b, 'c,)
//│        = [Function: foo2]


foo2_ty x y z = (x, y, z,)
//│ 'a -> 'b -> 'c -> ('a, 'b, 'c,)
//│   <:  foo2_ty:
//│ 'a -> 'b -> 'c -> ('a, 'b, 'c,)
//│        = [Function: foo2_ty3]


