// * This test contains simplifications of the to_church function,
// * used to minimize and reproduce problems with to_church and related definitions.

:NoRecursiveTypes
:ConstrainedTypes
:DontDistributeForalls



type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

def zero: ChurchInt
def succ: ChurchInt -> ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>

def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ to_church: int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│          = <missing implementation>



def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

// * Simpler functions that can be used instead of `s` to debug
// def s n f x = f (n f x) // * original succ
// def s n f = f (n f)
def s n f x = (n f x)
// def s n f = n f
//│ s: 'a -> (forall 'b. 'b -> (forall 'c 'd. 'c -> 'd
//│   where
//│     'a <: 'b -> 'c -> 'd))
//│  = [Function: s]

:ns
s
//│ res: forall 'a. 'a -> (forall 'b. 'b -> (forall 'c 'd 'e. 'c -> 'e
//│   where
//│     'a <: 'b -> 'd))
//│ where
//│   'd <: 'c -> 'e
//│    = [Function: s]

:e // * Since "sound extrusion"
succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'c 'd. 'c -> 'd
//│   where
//│     'a <: 'b -> 'c -> 'd))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.50: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.10: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.10: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.33: 	def s n f x = (n f x)
//│ ║        	        ^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.50: 	succ = s
//│ ╙──      	       ^
//│     = [Function: s]

:e // * Since "sound extrusion"
succ n f = n f
//│ 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     'a <: 'b -> 'c)
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.75: 	succ n f = n f
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.10: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.10: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.75: 	succ n f = n f
//│ ╙──      	       ^^^^^^^
//│     = [Function: succ2]

succ n = n
//│ 'a -> 'a
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: succ3]

def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ succ_min: (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│         = <missing implementation>

:e // * Since "sound extrusion"
succ_min n f = n f
//│ 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     'a <: 'b -> 'c)
//│   <:  succ_min:
//│ (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.107: 	succ_min n f = n f
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'M` leaks out of its scope
//│ ║  l.102: 	def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ ║         	                                                       ^^
//│ ╟── back into type variable `'M`
//│ ║  l.102: 	def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ ║         	                                                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.107: 	succ_min n f = n f
//│ ║         	           ^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.107: 	succ_min n f = n f
//│ ╙──       	               ^^^
//│         = [Function: succ_min]



rec def to_ch n =
  if n == 0 then zero
  else s (to_ch n)
//│ to_ch: number -> 'a
//│   where
//│     'a :> forall 'b. 'b -> (forall 'c 'd. 'c -> 'd
//│       where
//│         'a <: 'b -> 'c -> 'd) | ChurchInt
//│      = <no result>
//│        zero is not implemented

:e
to_church = to_ch
//│ number -> 'a
//│   where
//│     'a :> forall 'b. 'b -> (forall 'c 'd. 'c -> 'd
//│       where
//│         'a <: 'b -> 'c -> 'd) | ChurchInt
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?to_ch. ?to_ch <: int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)` exceeded recursion depth limit (250)
//│ ║  l.145: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│          = <no result>
//│            to_ch and zero are not implemented


rec def to_ch n =
  if true then zero
  else s (to_ch n)
//│ to_ch: anything -> 'a
//│   where
//│     'a :> forall 'b. 'b -> (forall 'c 'd. 'c -> 'd
//│       where
//│         'a <: 'b -> 'c -> 'd) | ChurchInt
//│      = <no result>
//│        zero is not implemented

:e
to_church = to_ch
//│ anything -> 'a
//│   where
//│     'a :> forall 'b. 'b -> (forall 'c 'd. 'c -> 'd
//│       where
//│         'a <: 'b -> 'c -> 'd) | ChurchInt
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?to_ch. ?to_ch <: int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)` exceeded recursion depth limit (250)
//│ ║  l.173: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│          = <no result>
//│            to_ch and zero are not implemented


rec def to_ch n =
  if true then zero
  else s (to_church n)
//│ to_ch: int -> (forall 'a. 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c) | ChurchInt)
//│      = <no result>
//│        zero is not implemented

:e
to_church = to_ch
//│ int -> (forall 'a. 'a -> (forall 'b 'c. 'c -> 'b
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'c -> 'b) | ChurchInt)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.199: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'M` leaks out of its scope
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                         ^^
//│ ╟── back into type variable `'M`
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                   ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.33: 	def s n f x = (n f x)
//│ ║        	        ^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.191: 	  else s (to_church n)
//│ ║         	       ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.199: 	to_church = to_ch
//│ ╙──       	            ^^^^^
//│          = <no result>
//│            to_ch and zero are not implemented


def to_ch n =
  if true then z
  else s (to_church n)
//│ to_ch: int -> (forall 'a. 'a -> (forall 'a 'b 'c 'd. ('b & 'd) -> ('d | 'c)
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c))
//│      = <no result>
//│        to_church, to_ch and zero are not implemented

:e // * Since "sound extrusion"
to_church = to_ch
//│ int -> (forall 'a. 'a -> (forall 'a 'b 'c 'd. ('b & 'd) -> ('d | 'c)
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c))
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.238: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'M` leaks out of its scope
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                         ^^
//│ ╟── back into type variable `'M`
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                   ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.33: 	def s n f x = (n f x)
//│ ║        	        ^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.230: 	  else s (to_church n)
//│ ║         	       ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.238: 	to_church = to_ch
//│ ╙──       	            ^^^^^
//│          = <no result>
//│            to_ch, to_church, to_ch and zero are not implemented


def to_ch n =
  if true then zero
  else s (to_church n)
//│ to_ch: int -> (forall 'a. 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c) | ChurchInt)
//│      = <no result>
//│        zero is not implemented

:e // * Since "sound extrusion"
to_church = to_ch
//│ int -> (forall 'a. 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c) | ChurchInt)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.277: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'M` leaks out of its scope
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                         ^^
//│ ╟── back into type variable `'M`
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                   ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.33: 	def s n f x = (n f x)
//│ ║        	        ^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.269: 	  else s (to_church n)
//│ ║         	       ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.277: 	to_church = to_ch
//│ ╙──       	            ^^^^^
//│          = <no result>
//│            to_ch and zero are not implemented


def to_ch n =
  s (to_church n)
//│ to_ch: int -> (forall 'a. 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c))
//│      = <no result>
//│        to_church, to_ch and zero are not implemented

:e // * Since "sound extrusion"
to_church = to_ch
//│ int -> (forall 'a. 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c))
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.315: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'M` leaks out of its scope
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                         ^^
//│ ╟── back into type variable `'M`
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                   ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.33: 	def s n f x = (n f x)
//│ ║        	        ^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.307: 	  s (to_church n)
//│ ║         	  ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.315: 	to_church = to_ch
//│ ╙──       	            ^^^^^
//│          = <no result>
//│            to_ch, to_church, to_ch and zero are not implemented


rec def to_ch n =
  s (to_church n)
//│ to_ch: int -> (forall 'a. 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c))
//│      = <no result>
//│        to_church, to_ch, to_church, to_ch and zero are not implemented

:e
to_church = to_ch
//│ int -> (forall 'a. 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c))
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.353: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'M` leaks out of its scope
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                         ^^
//│ ╟── back into type variable `'M`
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                   ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.33: 	def s n f x = (n f x)
//│ ║        	        ^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.345: 	  s (to_church n)
//│ ║         	  ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.353: 	to_church = to_ch
//│ ╙──       	            ^^^^^
//│          = <no result>
//│            to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented


def to_ch (n:int) =
  s (to_church n)
//│ to_ch: int -> (forall 'a. 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c))
//│      = <no result>
//│        to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented

:e // * Since "sound extrusion"
to_church = to_ch
//│ int -> (forall 'a. 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c))
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.391: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'M` leaks out of its scope
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                         ^^
//│ ╟── back into type variable `'M`
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                   ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.33: 	def s n f x = (n f x)
//│ ║        	        ^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.383: 	  s (to_church n)
//│ ║         	  ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.391: 	to_church = to_ch
//│ ╙──       	            ^^^^^
//│          = <no result>
//│            to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented

// * Marking it `rec` (on a minimized version) makes it fail
// *  This is because of `destroyConstrainedTypes` which is invoked on rec defs:
// *  (disabling the destruction fixes this problem)

rec def to_ch n =
  s (to_church n)
//│ to_ch: int -> (forall 'a. 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c))
//│      = <no result>
//│        to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented

:e
to_church = to_ch
//│ int -> (forall 'a. 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c))
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.432: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'M` leaks out of its scope
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                         ^^
//│ ╟── back into type variable `'M`
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                   ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.33: 	def s n f x = (n f x)
//│ ║        	        ^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.424: 	  s (to_church n)
//│ ║         	  ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.432: 	to_church = to_ch
//│ ╙──       	            ^^^^^
//│          = <no result>
//│            to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented


def to_ch =
  s (to_church 0)
//│ to_ch: 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c)
//│      = <no result>
//│        to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented

:e
to_church = to_ch
//│ 'a -> (forall 'b 'c. 'b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.470: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	               ^^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.20: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                                  ^^^^^^^^^^
//│          = <no result>
//│            to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented


// * But distributivity allows getting around the recursion limitation by recovering _some_ of the lost expressiveness
:DistributeForalls


rec def to_ch n =
  s (to_church n)
//│ to_ch: int -> 'a -> ('b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c)
//│      = <no result>
//│        to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented

to_church = to_ch
//│ int -> 'a -> ('b -> 'c
//│   where
//│     forall 'M. ('M -> 'M) -> 'M -> 'M <: 'a -> 'b -> 'c)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│          = <no result>
//│            to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented


rec def to_ch n =
  if n == 0 then zero
  else succ (to_ch (n - 1))
//│ to_ch: int -> ChurchInt
//│      = <no result>
//│        zero is not implemented

to_church = to_ch
//│ int -> ChurchInt
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│          = <no result>
//│            to_ch and zero are not implemented


rec def to_ch n =
  if n == 0 then z
  else s (to_ch (n - 1))
//│ to_ch: int -> 'a -> ('b -> ('b | 'c)
//│   where
//│     'd <: 'a -> 'b -> 'c)
//│ where
//│   'd :> forall 'e 'f 'g 'h. 'e -> (('h & 'f) -> ('h | 'g)
//│     where
//│       'd <: 'e -> 'f -> 'g)
//│      = [Function: to_ch7]

:e // * Since the removal of "recursive definition hacks"
to_church = to_ch
//│ int -> 'a -> ('b -> ('b | 'c)
//│   where
//│     'd <: 'a -> 'b -> 'c)
//│ where
//│   'd :> forall 'e 'f 'g 'h. 'e -> (('h & 'f) -> ('h | 'g)
//│     where
//│       'd <: 'e -> 'f -> 'g)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?to_ch. ?to_ch <: int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)` exceeded recursion depth limit (250)
//│ ║  l.539: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│          = [Function: to_ch7]


rec def to_ch_weird n =
  s (to_ch_weird n)
//│ to_ch_weird: anything -> 'a -> ('b -> 'c
//│   where
//│     'd <: 'a -> 'b -> 'c)
//│ where
//│   'd :> forall 'e 'f 'g. 'e -> ('f -> 'g
//│     where
//│       'd <: 'e -> 'f -> 'g)
//│            = [Function: to_ch_weird]

:e // * Since the removal of "recursive definition hacks"
to_church = to_ch
//│ int -> 'a -> ('b -> ('b | 'c)
//│   where
//│     'd <: 'a -> 'b -> 'c)
//│ where
//│   'd :> forall 'e 'f 'g 'h. 'e -> (('h & 'f) -> ('h | 'g)
//│     where
//│       'd <: 'e -> 'f -> 'g)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?to_ch. ?to_ch <: int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)` exceeded recursion depth limit (250)
//│ ║  l.568: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│          = [Function: to_ch7]


