
:NoJS


type IISS = int -> int & string -> string
type BBNN = bool -> bool & number -> number
type ZZII = 0 -> 0 & int -> int
//│ Defined type alias IISS
//│ Defined type alias BBNN
//│ Defined type alias ZZII

def IISS: int -> int & string -> string
def BBNN: bool -> bool & number -> number
def ZZII: 0 -> 0 & int -> int
//│ IISS: int -> int & string -> string
//│ BBNN: bool -> bool & number -> number
//│ ZZII: 0 -> 0 & int -> int


IISS : IISS
//│ res: IISS

IISS : int -> int & string -> string
//│ res: int -> int & string -> string

IISS : IISS | BBNN
//│ res: BBNN | IISS

:e
IISS : ZZII
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.30: 	IISS : ZZII
//│ ║        	^^^^
//│ ╟── type `int` does not match type `0`
//│ ║  l.12: 	def IISS: int -> int & string -> string
//│ ║        	                 ^^^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.7: 	type ZZII = 0 -> 0 & int -> int
//│ ╙──     	                 ^
//│ res: ZZII

:e
IISS : BBNN
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.43: 	IISS : BBNN
//│ ║        	^^^^
//│ ╟── type `bool` does not match type `int | string`
//│ ║  l.6: 	type BBNN = bool -> bool & number -> number
//│ ╙──     	            ^^^^
//│ res: BBNN


// * These tests show that we currently throw away information when constraining LHS overloading sets:

IISS : int -> int
//│ res: int -> int

IISS : (0 | 1) -> number
//│ res: (0 | 1) -> number

IISS : 'a -> 'a
//│ res: ('a & (int | string)) -> (int | string | 'a)

IISS 0
//│ res: int | string

(IISS : int -> int) 0
//│ res: int

(if true then IISS else BBNN) 0
//│ res: bool | number | string

fun x -> (if true then IISS else BBNN) x
//│ res: int -> (bool | number | string)

if true then IISS else BBNN
//│ res: bool -> bool & number -> number | int -> int & string -> string

(if true then IISS else ZZII) : int -> int
//│ res: int -> int

(if true then IISS else BBNN) : (0 | 1) -> number
//│ res: (0 | 1) -> number

:e
(if true then IISS else BBNN) : (0 | 1 | true) -> number
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.86: 	(if true then IISS else BBNN) : (0 | 1 | true) -> number
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `true` does not match type `int | string`
//│ ║  l.86: 	(if true then IISS else BBNN) : (0 | 1 | true) -> number
//│ ╙──      	                                         ^^^^
//│ res: (0 | 1 | true) -> number


// * Note that type normalization used to be very aggressive at approximating non-tag type negations,
// * to simplify the result, but this was changed as it was unsound

def test: ~(int -> int)
//│ test: ~(int -> int)

// * See also test file BooleanFail.mls about this previous unsoundness
:e
test = 42
not test
//│ 42
//│   <:  test:
//│ ~(int -> int)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.105: 	not test
//│ ║         	^^^^^^^^
//│ ╟── type `~(int -> int)` is not an instance of type `bool`
//│ ║  l.99: 	def test: ~(int -> int)
//│ ║        	          ^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `bool`
//│ ║  l.105: 	not test
//│ ╙──       	    ^^^^
//│ res: bool | error

def test: ~(int -> int) & ~bool
//│ test: ~bool & ~(int -> int)

def test: ~(int -> int) & bool
//│ test: bool

def test: ~(int -> int) & ~(bool -> bool)
//│ test: ~(nothing -> (bool | int))

def test: ~(int -> int | bool -> bool)
//│ test: ~(nothing -> (bool | int))

def test: ~(int -> int & string -> string) & ~(bool -> bool & number -> number)
//│ test: in ~(nothing -> (number | string) & int -> number & nothing -> (bool | string) & nothing -> (bool | int)) out ~(nothing -> (bool | int) & nothing -> (bool | string) & int -> number & nothing -> (number | string))


