:NoRecursiveTypes
:ConstrainedTypes
:DontDistributeForalls



type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt



// * === Explicitly Annotated ===


def zero: forall 'a. ('a -> 'a) -> ('a -> 'a)
def zero f x = x
//│ zero: ('a -> 'a) -> 'a -> 'a
//│     = <missing implementation>
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ('a -> 'a) -> 'a -> 'a
//│     = [Function: zero]

def zero: ChurchInt
def zero f x = x
//│ zero: ChurchInt
//│     = <missing implementation>
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: zero1]


def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>

:e // * Since "sound extrusion"
def succ n f x = f (n f x)
//│ 'a -> (forall 'b. 'b -> (forall 'c 'd 'e. 'c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.39: 	def succ n f x = f (n f x)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'M` leaks out of its scope
//│ ║  l.34: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                                      ^^
//│ ╟── back into type variable `'M`
//│ ║  l.34: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                                ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.39: 	def succ n f x = f (n f x)
//│ ║        	           ^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.34: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                             ^^
//│     = [Function: succ1]

def succ: ChurchInt -> ChurchInt
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>

:e // * Since "sound extrusion"
def succ n f x = f (n f x)
//│ 'a -> (forall 'b. 'b -> (forall 'c 'd 'e. 'c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.69: 	def succ n f x = f (n f x)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.69: 	def succ n f x = f (n f x)
//│ ╙──      	           ^^^^^^^^^^^^^^^
//│     = [Function: succ2]


def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
def succD n f x = f (n f x)
//│ succD: ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = <missing implementation>
//│ 'a -> (forall 'b. 'b -> (forall 'c 'd 'e. 'c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: succD]

succD = succ
//│ ChurchInt -> ChurchInt
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: succ2]

// * This does not hold without distrobutivity
:e
succ = succD
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.112: 	succ = succD
//│ ║         	^^^^^^^^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.112: 	succ = succD
//│ ╙──       	       ^^^^^
//│     = [Function: succ2]



// * === Usages ===


n1 = succ zero
//│ n1: ChurchInt
//│   = [Function (anonymous)]

n2 = succ (succ zero)
//│ n2: ChurchInt
//│   = [Function (anonymous)]

n3 = succ (succ (succ zero))
//│ n3: ChurchInt
//│   = [Function (anonymous)]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap]

:e
n1w = n1 wrap
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> {x: 'a}
//│ ╙──
//│ n1w: 'N -> 'N
//│   where
//│     'N :> {x: 'N}
//│    = [Function (anonymous)]

:e
n1w 0
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> {x: 'a} | 0
//│ ╙──
//│ res: 0 | {x: 'a}
//│   where
//│     'a :> {x: 'a} | 0
//│    = { x: 0 }

:e
n1 wrap 0
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> {x: 'a} | 0
//│ ╙──
//│ res: 0 | {x: 'a}
//│   where
//│     'a :> {x: 'a} | 0
//│    = { x: 0 }

:e
res.x + 1
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> {x: 'a} | 0
//│ ╙──
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.184: 	res.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.173: 	n1 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.184: 	res.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.184: 	res.x + 1
//│ ║         	^^^^^^^
//│ ╟── record literal of type `{x: ?a}` is not an instance of type `int`
//│ ║  l.146: 	wrap x = { x }
//│ ║         	         ^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.184: 	res.x + 1
//│ ╙──       	^^^^^
//│ res: int | error
//│    = 1

:e
n2 wrap 0
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> {x: 'a} | 0
//│ ╙──
//│ res: 0 | {x: 'a}
//│   where
//│     'a :> {x: 'a} | 0
//│    = { x: { x: 0 } }

:e
res.x.x + 1
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> {x: 'a} | 0
//│ ╙──
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.222: 	res.x.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.211: 	n2 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.222: 	res.x.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.222: 	res.x.x + 1
//│ ║         	^^^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.211: 	n2 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into field selection with expected type `{x: ?x}`
//│ ║  l.222: 	res.x.x + 1
//│ ╙──       	^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.222: 	res.x.x + 1
//│ ║         	^^^^^^^^^
//│ ╟── record literal of type `{x: ?a}` is not an instance of type `int`
//│ ║  l.146: 	wrap x = { x }
//│ ║         	         ^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.222: 	res.x.x + 1
//│ ╙──       	^^^^^^^
//│ res: int | error
//│    = 1


def wrap_ty: 'a -> {x: 'a}
//│ wrap_ty: 'a -> {x: 'a}
//│        = <missing implementation>

wrap_ty = wrap
//│ 'a -> {x: 'a}
//│   <:  wrap_ty:
//│ 'a -> {x: 'a}
//│        = [Function: wrap]

:e
n1w = n1 wrap_ty
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> {x: 'a}
//│ ╙──
//│ n1w: 'N -> 'N
//│   where
//│     'N :> {x: 'N}
//│    = [Function (anonymous)]

:e
n1w 0
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> {x: 'a} | 0
//│ ╙──
//│ res: 0 | {x: 'a}
//│   where
//│     'a :> {x: 'a} | 0
//│    = { x: 0 }

:e
res.x + 1
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> {x: 'a} | 0
//│ ╙──
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.291: 	res.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.280: 	n1w 0
//│ ║         	    ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.291: 	res.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.291: 	res.x + 1
//│ ║         	^^^^^^^
//│ ╟── type `{x: 'a}` is not an instance of type `int`
//│ ║  l.258: 	def wrap_ty: 'a -> {x: 'a}
//│ ║         	                   ^^^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.291: 	res.x + 1
//│ ╙──       	^^^^^
//│ res: int | error
//│    = 1

  

// * === Unannotated (More Powerful) ===


def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

def s n f x = f (n f x)
//│ s: 'a -> (forall 'b. 'b -> (forall 'c 'd 'e. 'c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│  = [Function: s]

zero = z
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: z]

:e // * Since "sound extrusion"
succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'c 'd 'e. 'c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.340: 	succ = s
//│ ║         	^^^^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.326: 	def s n f x = f (n f x)
//│ ║         	        ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.340: 	succ = s
//│ ╙──       	       ^
//│     = [Function: s]

:stats
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z]
//│ constrain calls  : 16
//│ annoying  calls  : 0
//│ subtyping calls  : 33

:e // * Since "sound extrusion"
:stats
s: ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.375: 	s: ChurchInt -> ChurchInt
//│ ║         	^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.326: 	def s n f x = f (n f x)
//│ ║         	        ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.375: 	s: ChurchInt -> ChurchInt
//│ ╙──       	^
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s]
//│ constrain calls  : 87
//│ annoying  calls  : 0
//│ subtyping calls  : 229



// * === Usages ===


n1 = s z
//│ n1: 'a -> (forall 'b 'c 'd. 'b -> 'd
//│   where
//│     anything -> (forall 'e. 'e -> 'e) <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd)
//│   = [Function (anonymous)]

n2 = s (s z)
//│ n2: 'a -> (forall 'b 'c 'd. 'b -> 'd
//│   where
//│     forall 'e. 'e -> (forall 'f 'g 'h. 'f -> 'h
//│       where
//│         anything -> (forall 'i. 'i -> 'i) <: 'e -> 'f -> 'g
//│         'e <: 'g -> 'h) <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd)
//│   = [Function (anonymous)]

n3 = s (s (s z))
//│ n3: 'a -> (forall 'b 'c 'd. 'b -> 'd
//│   where
//│     forall 'e. 'e -> (forall 'f 'g 'h. 'f -> 'h
//│       where
//│         forall 'i. 'i -> (forall 'j 'k 'l. 'j -> 'l
//│           where
//│             anything -> (forall 'm. 'm -> 'm) <: 'i -> 'j -> 'k
//│             'i <: 'k -> 'l) <: 'e -> 'f -> 'g
//│         'e <: 'g -> 'h) <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd)
//│   = [Function (anonymous)]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap1]

n1w = n1 wrap
//│ n1w: 'a -> 'b
//│   where
//│     anything -> (forall 'c. 'c -> 'c) <: (forall 'd. 'd -> {x: 'd}) -> 'a -> 'e
//│     forall 'd. 'd -> {x: 'd} <: 'e -> 'b
//│    = [Function (anonymous)]

n1w 0
//│ res: {x: 0}
//│    = { x: 0 }

n1 wrap 0
//│ res: {x: 0}
//│    = { x: 0 }

res.x + 1
//│ res: int
//│    = 1

n2 wrap 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

res.x.x + 1
//│ res: int
//│    = 1

n3 wrap 0
//│ res: {x: {x: {x: 0}}}
//│    = { x: { x: { x: 0 } } }

res.x.x.x + 1
//│ res: int
//│    = 1


def wrap_ty: 'a -> {x: 'a}
//│ wrap_ty: 'a -> {x: 'a}
//│        = <missing implementation>

wrap_ty = wrap
//│ 'a -> {x: 'a}
//│   <:  wrap_ty:
//│ 'a -> {x: 'a}
//│        = [Function: wrap1]

n1w = n1 wrap_ty
//│ n1w: 'b -> 'c
//│   where
//│     anything -> (forall 'd. 'd -> 'd) <: (forall 'a. 'a -> {x: 'a}) -> 'b -> 'e
//│     forall 'a. 'a -> {x: 'a} <: 'e -> 'c
//│    = [Function (anonymous)]

n1w 0
//│ res: {x: 0}
//│    = { x: 0 }

res.x + 1
//│ res: int
//│    = 1

n2 wrap_ty 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

res.x.x + 1
//│ res: int
//│    = 1

n3 wrap_ty 0
//│ res: {x: {x: {x: 0}}}
//│    = { x: { x: { x: 0 } } }

res.x.x.x + 1
//│ res: int
//│    = 1



// * === Other Usages ===


sz = s zero
//│ sz: 'a -> (forall 'b 'c 'd. 'b -> 'd
//│   where
//│     ChurchInt <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd)
//│   = [Function (anonymous)]

:ns
sz
//│ res: forall 'a 'b. 'a
//│   where
//│     'a :> forall 'c. 'c -> (forall 'd 'e 'f 'g. 'e -> 'g
//│       where
//│         'b <: 'c -> 'd
//│         'c <: 'f -> 'g)
//│     'd <: 'e -> 'f
//│     'b :> ChurchInt
//│    = [Function (anonymous)]

sz: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

:e // * Since "sound extrusion"
s zero : ChurchInt
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.544: 	s zero : ChurchInt
//│ ║         	^^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                             ^^
//│ res: ChurchInt
//│    = [Function (anonymous)]

// * Error delayed by inconsistent constrained types
// * Notice the unsatisfiable constraint `1 <: 'c -> 'b`
sz1 = sz 1
//│ sz1: 'a -> 'b
//│   where
//│     ChurchInt <: 1 -> 'a -> 'c
//│     1 <: 'c -> 'b
//│    = [Function (anonymous)]

:ns
sz1
//│ res: forall 'a 'b 'c. 'a
//│   where
//│     'a :> forall 'd 'e 'f 'g. 'e -> 'g
//│       where
//│         'b <: 'c -> 'd
//│         'c <: 'f -> 'g
//│     'd <: 'e -> 'f
//│     'c :> 1
//│     'b :> ChurchInt
//│    = [Function (anonymous)]

:e  // * Since inconsistent constrained types (delayed error from above)
sz1 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.580: 	sz1 2
//│ ║         	^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.559: 	sz1 = sz 1
//│ ║         	         ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                            ^^^^^^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: f is not a function



// * === Conversions (Using Annotated Defs) ===


rec def to_church n =
  if n == 0 then zero
  else succ (to_church (n - 1))
//│ to_church: int -> ChurchInt
//│          = [Function: to_church]

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

to_church_ty = to_church
//│ int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church]

// * Non-recursive def emulates annotated recursive def
def to_church_ty n =
  if n == 0 then zero
  else succ (to_church_ty (n - 1))
//│ int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty1]



// * === Conversions (Using Unannotated Defs) ===

:e
rec def to_ch_s n =
  if n == 0 then z
  else s (to_ch_s (n - 1))
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b. (? & 'b) -> (forall 'b 'c 'd 'e 'f. ('f & 'c) -> ('f | 'e)
//│       where
//│         'a <: 'b -> 'c -> 'd
//│         'b <: 'd -> 'e)
//│ ╙──
//│ to_ch_s: int -> (forall 'a. 'a -> (forall 'a 'b 'c 'd 'e. ('e & 'b) -> ('d | 'e)
//│   where
//│     'f <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd))
//│ where
//│   'f :> forall 'a. 'a -> (forall 'a 'b 'c 'd 'e. ('e & 'b) -> ('e | 'd)
//│     where
//│       'f <: 'a -> 'b -> 'c
//│       'a <: 'c -> 'd)
//│        = [Function: to_ch_s]

:e
rec def to_ch n =
  if n == 0 then z
  else s (to_ch (n - 1))
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b. (? & 'b) -> (forall 'b 'c 'd 'e 'f. ('f & 'c) -> ('f | 'e)
//│       where
//│         'a <: 'b -> 'c -> 'd
//│         'b <: 'd -> 'e)
//│ ╙──
//│ to_ch: int -> (forall 'a. 'a -> (forall 'a 'b 'c 'd 'e. ('e & 'b) -> ('d | 'e)
//│   where
//│     'f <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd))
//│ where
//│   'f :> forall 'a. 'a -> (forall 'a 'b 'c 'd 'e. ('e & 'b) -> ('e | 'd)
//│     where
//│       'f <: 'a -> 'b -> 'c
//│       'a <: 'c -> 'd)
//│      = [Function: to_ch]

:e // * Needs distrib (see below)
to_church_ty = to_ch
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b. (? & 'b) -> (forall 'b 'c 'd 'e 'f. ('f & 'c) -> ('f | 'e)
//│       where
//│         'a <: 'b -> 'c -> 'd
//│         'b <: 'd -> 'e)
//│ ╙──
//│ int -> (forall 'a. 'a -> (forall 'a 'b 'c 'd 'e. ('e & 'b) -> ('d | 'e)
//│   where
//│     'f <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd))
//│ where
//│   'f :> forall 'a. 'a -> (forall 'a 'b 'c 'd 'e. ('e & 'b) -> ('e | 'd)
//│     where
//│       'f <: 'a -> 'b -> 'c
//│       'a <: 'c -> 'd)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?to_ch. ?to_ch <: int -> ChurchInt` exceeded recursion depth limit (250)
//│ ║  l.673: 	to_church_ty = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│             = [Function: to_ch]

:e
rec def to_ch_simplif n = s (to_ch_simplif n)
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b. 'b -> (forall 'c 'd 'e. 'c -> 'e
//│       where
//│         'a <: 'b -> 'c -> 'd
//│         'b <: 'd -> 'e)
//│ ╙──
//│ to_ch_simplif: anything -> 'a
//│   where
//│     'a :> forall 'b. 'b -> (forall 'c 'd 'e. 'c -> 'e
//│       where
//│         'a <: 'b -> 'c -> 'd
//│         'b <: 'd -> 'e)
//│              = [Function: to_ch_simplif]

:e
to_church_ty = to_ch_simplif
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b. 'b -> (forall 'c 'd 'e. 'c -> 'e
//│       where
//│         'a <: 'b -> 'c -> 'd
//│         'b <: 'd -> 'e)
//│ ╙──
//│ anything -> 'a
//│   where
//│     'a :> forall 'b. 'b -> (forall 'c 'd 'e. 'c -> 'e
//│       where
//│         'a <: 'b -> 'c -> 'd
//│         'b <: 'd -> 'e)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?to_ch_simplif. ?to_ch_simplif <: int -> ChurchInt` exceeded recursion depth limit (250)
//│ ║  l.716: 	to_church_ty = to_ch_simplif
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│             = [Function: to_ch_simplif]


// * This annotation now only helps when also having :precise-rec-typing (see below)
:e
rec def to_ch_A1 n =
  if n == 0 then z
  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.741: 	rec def to_ch_A1 n =
//│ ║         	                 ^^^
//│ ║  l.742: 	  if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.743: 	  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                             ^^
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.741: 	rec def to_ch_A1 n =
//│ ║         	                 ^^^
//│ ║  l.742: 	  if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.743: 	  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                                           ^^
//│ ╟── back into type variable `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                             ^^
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.741: 	rec def to_ch_A1 n =
//│ ║         	                 ^^^
//│ ║  l.742: 	  if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.743: 	  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                                           ^^
//│ ╟── back into type variable `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                             ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.326: 	def s n f x = f (n f x)
//│ ╙──       	                 ^^^^^
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.741: 	rec def to_ch_A1 n =
//│ ║         	                 ^^^
//│ ║  l.742: 	  if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.743: 	  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                             ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.326: 	def s n f x = f (n f x)
//│ ╙──       	                 ^^^^^
//│ to_ch_A1: int -> (forall 'a. 'a -> (forall 'a 'b 'c 'd 'e. ('b & 'e) -> ('d | 'e)
//│   where
//│     ChurchInt <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd))
//│         = [Function: to_ch_A1]

:precise-rec-typing
:e // occurs-check
rec def to_ch_A1 n =
  if n == 0 then z
  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ ╔══[ERROR] Inferred recursive type: 'to_ch_A1
//│   where
//│     'to_ch_A1 :> forall 'to_ch_A1. int -> (forall 'a. (? & 'a) -> (forall 'a 'b 'c 'd 'e. ('b & 'e) -> ('d | 'e)
//│       where
//│         ChurchInt <: 'a -> 'b -> 'c
//│         'a <: 'c -> 'd))
//│     where
//│       'to_ch_A1 <: int -> ChurchInt
//│ ╙──
//│ to_ch_A1: 'to_ch_A1
//│   where
//│     'to_ch_A1 :> forall 'to_ch_A1. int -> (forall 'a. 'a -> (forall 'a 'b 'c 'd 'e. ('b & 'e) -> ('d | 'e)
//│       where
//│         ChurchInt <: 'a -> 'b -> 'c
//│         'a <: 'c -> 'd))
//│     where
//│       'to_ch_A1 <: int -> ChurchInt
//│         = [Function: to_ch_A11]

// * But we can't check the corresponding type
:e
to_church_ty = to_ch_A1
//│ ╔══[ERROR] Inferred recursive type: 'to_ch_A1
//│   where
//│     'to_ch_A1 :> forall 'to_ch_A1. int -> (forall 'a. (? & 'a) -> (forall 'a 'b 'c 'd 'e. ('b & 'e) -> ('d | 'e)
//│       where
//│         ChurchInt <: 'a -> 'b -> 'c
//│         'a <: 'c -> 'd))
//│     where
//│       'to_ch_A1 <: int -> ChurchInt
//│ ╙──
//│ 'to_ch_A1
//│   where
//│     'to_ch_A1 :> forall 'to_ch_A1. int -> (forall 'a. 'a -> (forall 'a 'b 'c 'd 'e. ('b & 'e) -> ('d | 'e)
//│       where
//│         ChurchInt <: 'a -> 'b -> 'c
//│         'a <: 'c -> 'd))
//│     where
//│       'to_ch_A1 <: int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.834: 	to_church_ty = to_ch_A1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│             = [Function: to_ch_A11]

// * Similarly:
:e
rec def to_ch_A2 n = (
    if n == 0 then z
    else s (to_ch_A2 (n - 1))
  ) : ChurchInt
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.862: 	rec def to_ch_A2 n = (
//│ ║         	                 ^^^^^
//│ ║  l.863: 	    if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.864: 	    else s (to_ch_A2 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.865: 	  ) : ChurchInt
//│ ║         	^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                             ^^
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.862: 	rec def to_ch_A2 n = (
//│ ║         	                 ^^^^^
//│ ║  l.863: 	    if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.864: 	    else s (to_ch_A2 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.865: 	  ) : ChurchInt
//│ ║         	^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                                           ^^
//│ ╟── back into type variable `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                             ^^
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.862: 	rec def to_ch_A2 n = (
//│ ║         	                 ^^^^^
//│ ║  l.863: 	    if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.864: 	    else s (to_ch_A2 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.865: 	  ) : ChurchInt
//│ ║         	^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                                           ^^
//│ ╟── back into type variable `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                             ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.326: 	def s n f x = f (n f x)
//│ ╙──       	                 ^^^^^
//│ ╔══[ERROR] Type error in binding of lambda expression
//│ ║  l.862: 	rec def to_ch_A2 n = (
//│ ║         	                 ^^^^^
//│ ║  l.863: 	    if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.864: 	    else s (to_ch_A2 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.865: 	  ) : ChurchInt
//│ ║         	^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                             ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.326: 	def s n f x = f (n f x)
//│ ╙──       	                 ^^^^^
//│ to_ch_A2: int -> ChurchInt
//│         = [Function: to_ch_A2]

:precise-rec-typing
:e // occurs-check
rec def to_ch_A2 n = (
    if n == 0 then z
    else s (to_ch_A2 (n - 1))
  ) : ChurchInt
//│ ╔══[ERROR] Inferred recursive type: 'to_ch_A2
//│   where
//│     'to_ch_A2 :> forall 'to_ch_A2. int -> ChurchInt
//│       where
//│         'to_ch_A2 <: int -> (??N -> ??N0) -> ??N0 -> ??N
//│ ╙──
//│ to_ch_A2: 'to_ch_A2
//│   where
//│     'to_ch_A2 :> forall 'to_ch_A2. int -> ChurchInt
//│       where
//│         'to_ch_A2 <: int -> (??N -> ??N0) -> ??N0 -> ??N
//│         = [Function: to_ch_A21]

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_ch_A2
//│ ╔══[ERROR] Inferred recursive type: 'to_ch_A2
//│   where
//│     'to_ch_A2 :> forall 'to_ch_A2. int -> ChurchInt
//│       where
//│         'to_ch_A2 <: int -> (??N -> ??N0) -> ??N0 -> ??N
//│ ╙──
//│ 'to_ch_A2
//│   where
//│     'to_ch_A2 :> forall 'to_ch_A2. int -> ChurchInt
//│       where
//│         'to_ch_A2 <: int -> (??N -> ??N0) -> ??N0 -> ??N
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.955: 	to_church_ty = to_ch_A2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│             = [Function: to_ch_A21]


// * Uses `to_church` as the rec call
def to_church_mix n =
  if n == 0 then z
  else s (to_church (n - 1))
//│ to_church_mix: int -> (forall 'a. 'a -> (forall 'a 'b 'c 'd 'e. ('b & 'e) -> ('d | 'e)
//│   where
//│     ChurchInt <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd))
//│              = [Function: to_church_mix]

:e
to_church_ty = to_church_mix
//│ int -> (forall 'a. 'a -> (forall 'a 'b 'c 'd 'e. ('b & 'e) -> ('d | 'e)
//│   where
//│     ChurchInt <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.987: 	to_church_ty = to_church_mix
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.326: 	def s n f x = f (n f x)
//│ ║         	        ^^^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.979: 	  else s (to_church (n - 1))
//│ ║         	       ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.987: 	to_church_ty = to_church_mix
//│ ╙──       	               ^^^^^^^^^^^^^
//│             = [Function: to_church_mix]


:e
// * It would seem we need to distribute back (in the other direction) here, but it works:
:precise-rec-typing
rec def to_chD n =
  succD (to_chD n)
//│ ╔══[ERROR] Inferred recursive type: 'to_chD
//│   where
//│     'to_chD :> forall 'a 'M. 'a -> ('M -> 'M) -> 'M -> 'M
//│       where
//│         'to_chD <: 'a -> ChurchInt
//│ ╙──
//│ to_chD: 'to_chD
//│   where
//│     'to_chD :> forall 'a 'M. 'a -> ('M -> 'M) -> 'M -> 'M
//│       where
//│         'to_chD <: 'a -> ChurchInt
//│       = [Function: to_chD]



// * === With Distributivity ===


:DistributeForalls


// * Now everything Just Works!


// * Now works
succ = s
//│ 'a -> 'b -> ('c -> 'd
//│   where
//│     'a <: 'b -> 'c -> 'e
//│     'b <: 'e -> 'd)
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s]

// * Now works
succ = succD
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: succ2]

// * Now works
rec def to_chD n =
  succD (to_chD n)
//│ to_chD: anything -> ('M -> 'M) -> 'M -> 'M
//│       = [Function: to_chD1]

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_ch
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b 'c 'd 'e 'f. (? & 'b) -> (('f & 'c) -> ('f | 'e)
//│       where
//│         'a <: 'b -> 'c -> 'd
//│         'b <: 'd -> 'e)
//│ ╙──
//│ int -> 'a -> ('b -> ('c | 'b)
//│   where
//│     'd <: 'a -> 'b -> 'e
//│     'a <: 'e -> 'c)
//│ where
//│   'd :> forall 'f 'g 'h 'i 'j. 'f -> (('j & 'g) -> ('j | 'i)
//│     where
//│       'd <: 'f -> 'g -> 'h
//│       'f <: 'h -> 'i)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?to_ch. ?to_ch <: int -> ChurchInt` exceeded recursion depth limit (250)
//│ ║  l.1069: 	to_church_ty = to_ch
//│ ║          	^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│             = [Function: to_ch]

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_ch_simplif
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b 'c 'd 'e. 'b -> ('c -> 'e
//│       where
//│         'a <: 'b -> 'c -> 'd
//│         'b <: 'd -> 'e)
//│ ╙──
//│ anything -> 'a -> ('b -> 'c
//│   where
//│     'd <: 'a -> 'b -> 'e
//│     'a <: 'e -> 'c)
//│ where
//│   'd :> forall 'f 'g 'h 'i. 'f -> ('g -> 'i
//│     where
//│       'd <: 'f -> 'g -> 'h
//│       'f <: 'h -> 'i)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.1095: 	to_church_ty = to_ch_simplif
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│             = [Function: to_ch_simplif]

// * Redefinition in the context of distrib, just for the record (still infers but doesn't check)
:e
rec def to_ch_simplif n = s (to_ch_simplif n)
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b 'c 'd 'e. 'b -> ('c -> 'e
//│       where
//│         'a <: 'b -> 'c -> 'd
//│         'b <: 'd -> 'e)
//│ ╙──
//│ to_ch_simplif: anything -> 'a -> ('b -> 'c
//│   where
//│     'd <: 'a -> 'b -> 'e
//│     'a <: 'e -> 'c)
//│ where
//│   'd :> forall 'f 'g 'h 'i. 'f -> ('g -> 'i
//│     where
//│       'd <: 'f -> 'g -> 'h
//│       'f <: 'h -> 'i)
//│              = [Function: to_ch_simplif1]

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_ch_simplif
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b 'c 'd 'e. 'b -> ('c -> 'e
//│       where
//│         'a <: 'b -> 'c -> 'd
//│         'b <: 'd -> 'e)
//│ ╙──
//│ anything -> 'a -> ('b -> 'c
//│   where
//│     'd <: 'a -> 'b -> 'e
//│     'a <: 'e -> 'c)
//│ where
//│   'd :> forall 'f 'g 'h 'i. 'f -> ('g -> 'i
//│     where
//│       'd <: 'f -> 'g -> 'h
//│       'f <: 'h -> 'i)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.1142: 	to_church_ty = to_ch_simplif
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│             = [Function: to_ch_simplif1]

// * Still doesn't work (Same with the full definition)
:e
to_church_ty = to_ch_A1
//│ ╔══[ERROR] Inferred recursive type: 'to_ch_A1
//│   where
//│     'to_ch_A1 :> forall 'to_ch_A1. int -> (forall 'a 'b 'c 'd 'e. (? & 'a) -> (('b & 'e) -> ('d | 'e)
//│       where
//│         ChurchInt <: 'a -> 'b -> 'c
//│         'a <: 'c -> 'd))
//│     where
//│       'to_ch_A1 <: int -> ChurchInt
//│ ╙──
//│ 'to_ch_A1
//│   where
//│     'to_ch_A1 :> forall 'to_ch_A1. int -> (forall 'a 'b 'c 'd 'e. 'a -> (('b & 'e) -> ('d | 'e)
//│       where
//│         ChurchInt <: 'a -> 'b -> 'c
//│         'a <: 'c -> 'd))
//│     where
//│       'to_ch_A1 <: int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.1169: 	to_church_ty = to_ch_A1
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│             = [Function: to_ch_A11]

// * Now works
to_church_ty = to_church_mix
//│ int -> 'a -> ('b -> ('c | 'b)
//│   where
//│     ChurchInt <: 'a -> 'b -> 'd
//│     'a <: 'd -> 'c)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_mix]



