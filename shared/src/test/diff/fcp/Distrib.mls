:NoRecursiveTypes
:DistributeForalls
:NoJS



def f1: 'a -> (forall 'b. 'b -> ('a, 'b))
def f2: 'a -> 'b -> ('a, 'b)
//│ f1: 'a -> 'b -> ('a, 'b,)
//│ f2: 'a -> 'b -> ('a, 'b,)


// * With distributivity, f1 and f2 have equivalent types, as shown below

f1 = f2
//│ 'a -> 'b -> ('a, 'b,)
//│   <:  f1:
//│ 'a -> 'b -> ('a, 'b,)

f2 = f1
//│ 'a -> 'b -> ('a, 'b,)
//│   <:  f2:
//│ 'a -> 'b -> ('a, 'b,)


// * However, f2 currently is not as flexible:

def test: (forall 'b. 'b -> (int, 'b)) -> (int, bool)
//│ test: (forall 'b. 'b -> (int, 'b,)) -> (int, bool,)

test (f1 42)
//│ res: (int, bool,)

// This used not to be handled because we didn't yet try to split
//    type parameters in order to distribute only *part* of the quantification
test (f2 42)
//│ res: (int, bool,)


// * Though these work!

f1_42 = f1 42
f2_42 = f2 42
//│ f1_42: 'b -> (42, 'b,)
//│ f2_42: 'b -> (42, 'b,)

test f1_42
test f2_42
//│ res: (int, bool,)
//│ res: (int, bool,)



def test: forall 'a. (forall 'b. 'b -> (int, 'b)) -> (int, bool)
//│ test: (forall 'b. 'b -> (int, 'b,)) -> (int, bool,)

def f1_1: forall 'a. 'a -> (forall 'b. 'b -> ('a, 'b))
//│ f1_1: 'a -> 'b -> ('a, 'b,)

def f2_1: forall 'a. forall 'b. 'a -> 'b -> ('a, 'b)
def f2_2: forall 'b. forall 'a. 'a -> 'b -> ('a, 'b)
def f2_3: forall 'a 'b. 'a -> 'b -> ('a, 'b)
//│ f2_1: 'a -> 'b -> ('a, 'b,)
//│ f2_2: 'a -> 'b -> ('a, 'b,)
//│ f2_3: 'a -> 'b -> ('a, 'b,)

test (f1_1 42)
//│ res: (int, bool,)

test (f2_1 42)
test (f2_2 42)
test (f2_3 42)
//│ res: (int, bool,)
//│ res: (int, bool,)
//│ res: (int, bool,)


f1_1_42 = f1_1 42
f2_1_42 = f2_1 42
f2_2_42 = f2_2 42
f2_3_42 = f2_3 42
//│ f1_1_42: 'b -> (42, 'b,)
//│ f2_1_42: 'b -> (42, 'b,)
//│ f2_2_42: 'b -> (42, 'b,)
//│ f2_3_42: 'b -> (42, 'b,)

test f1_1_42
test f2_1_42
test f2_2_42
test f2_3_42
//│ res: (int, bool,)
//│ res: (int, bool,)
//│ res: (int, bool,)
//│ res: (int, bool,)



// * Note: without distributivity:

:DontDistributeForalls

:e
f1 = f2
//│ 'a -> 'b -> ('a, 'b,)
//│   <:  f1:
//│ 'a -> (forall 'b. 'b -> ('a, 'b,))
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.103: 	f1 = f2
//│ ║         	^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.7: 	def f1: 'a -> (forall 'b. 'b -> ('a, 'b))
//│ ║       	                          ^^
//│ ╟── back into type variable `'b`
//│ ║  l.7: 	def f1: 'a -> (forall 'b. 'b -> ('a, 'b))
//│ ║       	                                     ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.103: 	f1 = f2
//│ ╙──       	     ^^

f2 = f1
//│ 'a -> (forall 'b. 'b -> ('a, 'b,))
//│   <:  f2:
//│ 'a -> 'b -> ('a, 'b,)


