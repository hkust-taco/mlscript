// * This is a minimization of the error that happens in `QML_exist_Records`


:NoRecursiveTypes
:ConstrainedTypes
// :DistributeForalls
// :GeneralizeArguments


type ArraysRep[Rep] = { fold: forall 'b. 'b -> Rep -> 'b }
//│ Defined type alias ArraysRep[-Rep]

type Arrays = (forall 'Rep. ArraysRep['Rep] -> 'r) -> 'r
//│ Defined type alias Arrays

// :d
def stepImpl arrImpl = { fold = fun f -> fun r0 -> arrImpl.fold f r0 }
//│ stepImpl: 'a -> {fold: forall 'b 'c 'd. 'b -> ('c -> 'd
//│   where
//│     'a <: {fold: 'b -> 'c -> 'd})}
//│         = [Function: stepImpl]

// :d
def stepImpl2 arr = arr stepImpl
//│ stepImpl2: ((forall 'a. 'a -> {fold: forall 'b 'c 'd. 'b -> ('c -> 'd
//│   where
//│     'a <: {fold: 'b -> 'c -> 'd})}) -> 'e) -> 'e
//│          = [Function: stepImpl2]

def step: Arrays -> Arrays
//│ step: Arrays -> Arrays
//│     = <missing implementation>

:e // * Since "sound extrusion"
def step arr g = g (stepImpl2 arr)
//│ 'a -> (('b -> 'c) -> 'c
//│   where
//│     'a <: (forall 'd. 'd -> {fold: forall 'e 'f 'g. 'e -> ('f -> 'g
//│       where
//│         'd <: {fold: 'e -> 'f -> 'g})}) -> 'b)
//│   <:  step:
//│ Arrays -> Arrays
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.35: 	def step arr g = g (stepImpl2 arr)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.10: 	type ArraysRep[Rep] = { fold: forall 'b. 'b -> Rep -> 'b }
//│ ║        	                                         ^^
//│ ╟── back into type variable `'b`
//│ ║  l.10: 	type ArraysRep[Rep] = { fold: forall 'b. 'b -> Rep -> 'b }
//│ ║        	                                                      ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.17: 	def stepImpl arrImpl = { fold = fun f -> fun r0 -> arrImpl.fold f r0 }
//│ ║        	                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.24: 	def stepImpl2 arr = arr stepImpl
//│ ║        	                    ^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.35: 	def step arr g = g (stepImpl2 arr)
//│ ║        	                    ^^^^^^^^^^^^^
//│ ╟── • this applied expression:
//│ ║  l.35: 	def step arr g = g (stepImpl2 arr)
//│ ║        	                 ^
//│ ╟── Note: constraint arises from application:
//│ ║  l.17: 	def stepImpl arrImpl = { fold = fun f -> fun r0 -> arrImpl.fold f r0 }
//│ ╙──      	                                                   ^^^^^^^^^^^^^^^^^
//│     = [Function: step]

