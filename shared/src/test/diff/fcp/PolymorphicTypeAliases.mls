:NoJS


type F[A] = forall 'a. (A, 'a) -> (A, 'a)
//│ Defined type alias F[=A]

class Test[B]
  method M = (fun (x: B, y) -> (x, y)) : F[B]
//│ Defined class Test[=B]
//│ Defined Test.M: Test['B] -> F['B]

class Test2[B]
  method M = id (fun x -> id (fun (x: B, y) -> (x, y)) : F[B])
//│ Defined class Test2[=B]
//│ Defined Test2.M: Test2['B] -> anything -> F['B]

def foo = forall 'a. (fun (x: 'a, y) -> (x, y)) : F['a]
//│ foo: F['a]


type G[A] = forall 'a. (A, 'a)
//│ Defined type alias G[+A]

def foo x = forall 'a. (x, x) : G['a]
//│ foo: (??a & ??a0) -> G[nothing]

:e
foo 1
//│ ╔══[ERROR] Type error in application
//│ ║  l.28: 	foo 1
//│ ║        	^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.28: 	foo 1
//│ ║        	    ^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.24: 	def foo x = forall 'a. (x, x) : G['a]
//│ ║        	                           ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.24: 	def foo x = forall 'a. (x, x) : G['a]
//│ ╙──      	                           ^
//│ res: error | G[nothing]

def foo = forall 'a. fun x -> (x, x) : G['a]
//│ foo: (??a & 'a) -> G['a]

:e
foo 1
//│ ╔══[ERROR] Type error in application
//│ ║  l.48: 	foo 1
//│ ║        	^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.48: 	foo 1
//│ ║        	    ^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.44: 	def foo = forall 'a. fun x -> (x, x) : G['a]
//│ ║        	                                  ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.44: 	def foo = forall 'a. fun x -> (x, x) : G['a]
//│ ╙──      	                                  ^
//│ res: error | G[1]

def foo x y = forall 'a. (x, y) : G['a]
//│ foo: ??a -> ??a0 -> G[nothing]

def foo = forall 'a. fun (x, y) -> (x, y) : G['a]
//│ foo: ('a, ??a,) -> G['a]

def foo = fun a -> forall 'a. fun (x, y) -> (x, y) : G['a]
//│ foo: anything -> ('a, ??a,) -> G['a]

foo 1 (2, error)
//│ res: G[2]

def foo = fun a -> forall 'a. fun x -> (x, error) : G['a]
//│ foo: anything -> 'a -> G['a]

foo 1 2
//│ res: G[2]

