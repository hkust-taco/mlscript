:AllowParseErrors


[]
//│ |[||]|
//│ Parsed: {[]}

[1]
//│ |[|1|]|
//│ Parsed: {[1,]}

[1,]
//│ |[|1|,|]|
//│ Parsed: {[1,]}

[1, 2, 3]
//│ |[|1|,| |2|,| |3|]|
//│ Parsed: {[1, 2, 3,]}

()
//│ |(||)|
//│ Parsed: {undefined}

(1)
//│ |(|1|)|
//│ Parsed: {'(' 1 ')'}

(1,)
//│ |(|1|,|)|
//│ Parsed: {'(' 1 ')'}

(1, 2, 3)
//│ |(|1|,| |2|,| |3|)|
//│ ╔══[PARSE ERROR] Expected '=>' or '->' after this parameter section
//│ ║  l.32: 	(1, 2, 3)
//│ ╙──      	^^^^^^^^^
//│ Parsed: {[1, 2, 3,]}


1
//│ |1|
//│ Parsed: {1}

1,
//│ |1|,|
//│ ╔══[PARSE ERROR] Expected end of input; found comma instead
//│ ║  l.44: 	1,
//│ ╙──      	 ^
//│ Parsed: {1}

1, 2, 3
//│ |1|,| |2|,| |3|
//│ ╔══[PARSE ERROR] Expected end of input; found comma instead
//│ ║  l.51: 	1, 2, 3
//│ ╙──      	 ^
//│ Parsed: {1}

f of 1, 2, 3
//│ |f| |#of| |1|,| |2|,| |3|
//│ Parsed: {f(1, 2, 3,)}

f of
  1, 2, 3
//│ |f| |#of|→|1|,| |2|,| |3|←|
//│ Parsed: {f(1, 2, 3,)}

f of
  1,
  2,
  3
//│ |f| |#of|→|1|,|↵|2|,|↵|3|←|
//│ Parsed: {f(1, 2, 3,)}


let arr = []
//│ |#let| |arr| |#=| |[||]|
//│ Parsed: {let arr = []}

let arr = [
]
//│ |#let| |arr| |#=| |[|↵|]|
//│ Parsed: {let arr = []}

let arr =
[
]
//│ |#let| |arr| |#=|↵|[|↵|]|
//│ ╔══[PARSE ERROR] Unexpected newline in expression position
//│ ║  l.84: 	let arr =
//│ ║        	         ^
//│ ║  l.85: 	[
//│ ╙──      	
//│ Parsed: {let arr = []}

let arr = [
  1
]
//│ |#let| |arr| |#=| |[|→|1|←|↵|]|
//│ Parsed: {let arr = [1,]}

let arr = [
  1, 2
]
//│ |#let| |arr| |#=| |[|→|1|,| |2|←|↵|]|
//│ Parsed: {let arr = [1, 2,]}

let arr = [
  1,
  2
]
//│ |#let| |arr| |#=| |[|→|1|,|↵|2|←|↵|]|
//│ Parsed: {let arr = [1, 2,]}

// :pe
f [1, 2, 3]
//│ |f| |[|1|,| |2|,| |3|]|
//│ Parsed: {f‹1, 2, 3›}

f([1, 2, 3])
//│ |f|(|[|1|,| |2|,| |3|]|)|
//│ Parsed: {f([1, 2, 3,],)}

f of [1, 2, 3]
//│ |f| |#of| |[|1|,| |2|,| |3|]|
//│ Parsed: {f([1, 2, 3,],)}


