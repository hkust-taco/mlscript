:AllowParseErrors


x => x
//│ |x| |=>| |x|
//│ Parsed: {(x,) => x}

(x) => x
//│ |(|x|)| |=>| |x|
//│ Parsed: {('(' x ')',) => x}

// TODO
fun x => x
//│ |#fun| |x| |=>| |x|
//│ ╔══[PARSE ERROR] Expected function parameter list; found operator instead
//│ ║  l.13: 	fun x => x
//│ ╙──      	      ^^
//│ ╔══[PARSE ERROR] Expected ':' or '=' followed by a function body or signature; found identifier instead
//│ ║  l.13: 	fun x => x
//│ ╙──      	         ^
//│ Parsed: {fun x = undefined}

// TODO
let f = fun x => x
//│ |#let| |f| |#=| |#fun| |x| |=>| |x|
//│ ╔══[PARSE ERROR] Unexpected 'fun' keyword in expression position
//│ ║  l.24: 	let f = fun x => x
//│ ╙──      	        ^^^
//│ Parsed: {let f = (x,) => x}


fun f x = x
//│ |#fun| |f| |x| |#=| |x|
//│ ╔══[PARSE ERROR] Expected function parameter list; found identifier instead
//│ ║  l.32: 	fun f x = x
//│ ╙──      	      ^
//│ Parsed: {fun f = x}


(x, y) => x
//│ |(|x|,| |y|)| |=>| |x|
//│ Parsed: {(x, y,) => x}


=> 1
//│ |=>| |1|
//│ ╔══[PARSE ERROR] Unexpected operator in expression position
//│ ║  l.45: 	=> 1
//│ ╙──      	^^
//│ Parsed: {1}

x =>
//│ |x| |=>|
//│ ╔══[PARSE ERROR] Unexpected end of input; an expression was expected here
//│ ║  l.52: 	x =>
//│ ╙──      	    ^
//│ Parsed: {(x,) => undefined}

(x =>)
//│ |(|x| |=>|)|
//│ ╔══[PARSE ERROR] Unexpected end of parenthesis section; an expression was expected here
//│ ║  l.59: 	(x =>)
//│ ╙──      	     ^
//│ Parsed: {'(' (x,) => undefined ')'}

a --> b --> c
//│ |a| |-->| |b| |-->| |c|
//│ Parsed: {-->(a,)(-->(b,)(c,),)}

a => b => c
//│ |a| |=>| |b| |=>| |c|
//│ Parsed: {(a,) => (b,) => c}

(a => b) => c
//│ |(|a| |=>| |b|)| |=>| |c|
//│ Parsed: {('(' (a,) => b ')',) => c}

a => (b => c)
//│ |a| |=>| |(|b| |=>| |c|)|
//│ Parsed: {(a,) => '(' (b,) => c ')'}

xs.forall(x => x > 0)
//│ |xs|.forall|(|x| |=>| |x| |>| |0|)|
//│ Parsed: {(xs).forall((x,) => >(x,)(0,),)}

xs.forall of x => x > 0
//│ |xs|.forall| |#of| |x| |=>| |x| |>| |0|
//│ Parsed: {(xs).forall((x,) => >(x,)(0,),)}

:pe
a => b then c
//│ |a| |=>| |b| |#then| |c|
//│ ╔══[PARSE ERROR] Unexpected 'then'/'else' clause
//│ ║  l.91: 	a => b then c
//│ ╙──      	^^^^^^^^^^^^^
//│ Parsed: {undefined}

if a => b then c
//│ |#if| |a| |=>| |b| |#then| |c|
//│ Parsed: {if ((a,) => b) then c}

if xs.forall(a => b) then c
//│ |#if| |xs|.forall|(|a| |=>| |b|)| |#then| |c|
//│ Parsed: {if ((xs).forall((a,) => b,)) then c}

if xs.forall of a => b then c
//│ |#if| |xs|.forall| |#of| |a| |=>| |b| |#then| |c|
//│ Parsed: {if ((xs).forall((a,) => b,)) then c}


id + of x => x + 1
//│ |id| |+| |#of| |x| |=>| |x| |+| |1|
//│ ╔══[PARSE ERROR] Unexpected 'of' keyword in expression position
//│ ║  l.111: 	id + of x => x + 1
//│ ╙──       	     ^^
//│ Parsed: {+(id,)((x,) => +(x,)(1,),)}

