

if true then 1 else 2
//│ |#if| |true| |#then| |1| |#else| |2|
//│ Parsed: {if (true) then 1 else 2}

if a == 0
then "false" else 2
//│ |#if| |a| |==| |0|↵|#then| |"false"| |#else| |2|
//│ Parsed: {if (== (a,) (0,)) then "false" else 2}

if a == 0
then "false"
else 2
//│ |#if| |a| |==| |0|↵|#then| |"false"|↵|#else| |2|
//│ Parsed: {if (== (a,) (0,)) then "false" else 2}

if a == 0
  then "false"
  else 2
//│ |#if| |a| |==| |0|→|#then| |"false"|↵|#else| |2|←|
//│ Parsed: {if (== (a,) (0,)) then "false" else 2}

if a == 0
then "false"
  else 2
//│ |#if| |a| |==| |0|↵|#then| |"false"|→|#else| |2|←|
//│ Parsed: {if (== (a,) (0,)) then "false" else 2}

:pe
if a == 0
  then "false"
else 2
//│ |#if| |a| |==| |0|→|#then| |"false"|←|↵|#else| |2|
//│ ╔══[PARSE ERROR] Unexpected 'then'/'else' clause
//│ ║  l.33: 	else 2
//│ ╙──      	^^^^^^
//│ Parsed: {if (== (a,) (0,)) then "false"; undefined}

if a == 0
  then "false"
print of "ok!"
//│ |#if| |a| |==| |0|→|#then| |"false"|←|↵|print| |#of| |"ok!"|
//│ Parsed: {if (== (a,) (0,)) then "false"; print ("ok!",)}

if a == 0 then "false"
  else 2
print of "ok!"
//│ |#if| |a| |==| |0| |#then| |"false"|→|#else| |2|←|↵|print| |#of| |"ok!"|
//│ Parsed: {if (== (a,) (0,)) then "false" else 2; print ("ok!",)}

if
  true  then "true"
  false then "false"
//│ |#if|→|true| |#then| |"true"|↵|false| |#then| |"false"|←|
//│ Parsed: {if ‹(true) then "true"; (false) then "false"›}

if
  a == 1 then "true"
  b == 2 then "false"
//│ |#if|→|a| |==| |1| |#then| |"true"|↵|b| |==| |2| |#then| |"false"|←|
//│ Parsed: {if ‹(== (a,) (1,)) then "true"; (== (b,) (2,)) then "false"›}

if
  a == 0 then "false"
  a == 1 then "true"
//│ |#if|→|a| |==| |0| |#then| |"false"|↵|a| |==| |1| |#then| |"true"|←|
//│ Parsed: {if ‹(== (a,) (0,)) then "false"; (== (a,) (1,)) then "true"›}

if a ==
  0 then "false"
  1 then "true"
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|1| |#then| |"true"|←|
//│ Parsed: {if a == ‹(0) then "false"; (1) then "true"›}

if a ==
  0 then "false"
  _ then "true"
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|_| |#then| |"true"|←|
//│ Parsed: {if a == ‹(0) then "false"; (_) then "true"›}

if a ==
  0 then "false"
  1 then "true"
  else "true"
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|1| |#then| |"true"|↵|#else| |"true"|←|
//│ Parsed: {if a == ‹(0) then "false"; (1) then "true"; else "true"›}

if a ==
  0 then "false"
  1 then "true"
else "true"
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|1| |#then| |"true"|←|↵|#else| |"true"|
//│ Parsed: {if a == ‹(0) then "false"; (1) then "true"› else "true"}

if a ==
    0 then "false"
    1 then "true"
  else "true"
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|1| |#then| |"true"|←|→|#else| |"true"|←|
//│ Parsed: {if a == ‹(0) then "false"; (1) then "true"› else "true"}

// TODO?
:pe
if a ==
  0 then "false" else "true"
//│ |#if| |a| |==|→|0| |#then| |"false"| |#else| |"true"|←|
//│ ╔══[PARSE ERROR] Unexpected 'else' keyword here
//│ ║  l.106: 	  0 then "false" else "true"
//│ ╙──       	                 ^^^^
//│ Parsed: {if a == ‹(0) then "false"›}

if a ==
  0 then "false"
  else "true"
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|#else| |"true"|←|
//│ Parsed: {if a == ‹(0) then "false"; else "true"›}

if a
  > 0  then "false"
  == 1 then "true"
//│ |#if| |a|→|>| |0| |#then| |"false"|↵|==| |1| |#then| |"true"|←|
//│ Parsed: {if a ‹· > (0) then "false"; · == (1) then "true"›}

// TODO
if a
  > 0  then "false"
  == 1 then "true"
  _    then "true"
//│ |#if| |a|→|>| |0| |#then| |"false"|↵|==| |1| |#then| |"true"|↵|_| |#then| |"true"|←|
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing

if a ==
  0 then "false"
  1 then "true"
else 2
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|1| |#then| |"true"|←|↵|#else| |2|
//│ Parsed: {if a == ‹(0) then "false"; (1) then "true"› else 2}

if a ==
  0 and b ==
    2 then "false"
    3 then "oops"
  1 then "true"
//│ |#if| |a| |==|→|0| |and| |b| |==|→|2| |#then| |"false"|↵|3| |#then| |"oops"|←|↵|1| |#then| |"true"|←|
//│ Parsed: {if a == ‹0 and b == ‹(2) then "false"; (3) then "oops"›; (1) then "true"›}

if a is
  Some(x) then "defined"
  None    then "undefined"
//│ |#if| |a| |is|→|Some|(|x|)| |#then| |"defined"|↵|None| |#then| |"undefined"|←|
//│ Parsed: {if a is ‹(Some (x,)) then "defined"; (None) then "undefined"›}

if a is
  Some(x) and x is
    Left(a)  then "left-defined"
    Right(b) then "right-defined"
  None       then "undefined"
//│ |#if| |a| |is|→|Some|(|x|)| |and| |x| |is|→|Left|(|a|)| |#then| |"left-defined"|↵|Right|(|b|)| |#then| |"right-defined"|←|↵|None| |#then| |"undefined"|←|
//│ Parsed: {if a is ‹Some (x,) and x is ‹(Left (a,)) then "left-defined"; (Right (b,)) then "right-defined"›; (None) then "undefined"›}

if a is
  Some of x then "defined"
  None      then "undefined"
//│ |#if| |a| |is|→|Some| |#of| |x| |#then| |"defined"|↵|None| |#then| |"undefined"|←|
//│ Parsed: {if a is ‹(Some (x,)) then "defined"; (None) then "undefined"›}


:pe
if lol
//│ |#if| |lol|
//│ ╔══[PARSE ERROR] Expected 'then'/'else' clause; found reference instead
//│ ║  l.170: 	if lol
//│ ║         	   ^^^
//│ ╟── Note: 'if' expression started here:
//│ ║  l.170: 	if lol
//│ ╙──       	^^
//│ Parsed: {if (lol) then undefined}

:pe
if lol then
//│ |#if| |lol| |#then|
//│ ╔══[PARSE ERROR] Unexpected end of input; an expression was expected here
//│ ║  l.181: 	if lol then
//│ ╙──       	           ^
//│ Parsed: {if (lol) then undefined}

:pe
if lol then else
//│ |#if| |lol| |#then| |#else|
//│ ╔══[PARSE ERROR] Unexpected end of input; an expression was expected here
//│ ║  l.189: 	if lol then else
//│ ╙──       	                ^
//│ ╔══[PARSE ERROR] Expected an expression; found a 'then'/'else' clause instead
//│ ║  l.189: 	if lol then else
//│ ╙──       	            ^^^^
//│ Parsed: {if (lol) then undefined}

:pe
a then b
//│ |a| |#then| |b|
//│ ╔══[PARSE ERROR] Unexpected 'then'/'else' clause
//│ ║  l.200: 	a then b
//│ ╙──       	^^^^^^^^
//│ Parsed: {undefined}

:pe
if lol
then
else
//│ |#if| |lol|↵|#then|↵|#else|
//│ ╔══[PARSE ERROR] Unexpected newline in expression position
//│ ║  l.209: 	then
//│ ║         	    ^
//│ ║  l.210: 	else
//│ ╙──       	
//│ ╔══[PARSE ERROR] Unexpected end of input; an expression was expected here
//│ ║  l.210: 	else
//│ ╙──       	    ^
//│ ╔══[PARSE ERROR] Expected an expression; found a 'then'/'else' clause instead
//│ ║  l.210: 	else
//│ ╙──       	^^^^
//│ Parsed: {if (lol) then undefined}

:pe
if lol else 2
//│ |#if| |lol| |#else| |2|
//│ ╔══[PARSE ERROR] Expected 'then'/'else' clause; found reference followed by 'else' keyword instead
//│ ║  l.226: 	if lol else 2
//│ ║         	   ^^^^^^^^
//│ ╟── Note: 'if' expression started here:
//│ ║  l.226: 	if lol else 2
//│ ╙──       	^^
//│ ╔══[PARSE ERROR] Expected end of input; found 'else' keyword instead
//│ ║  l.226: 	if lol else 2
//│ ╙──       	       ^^^^
//│ Parsed: {if (lol) then undefined}


:pe
x = if true then false else maybe
//│ |x| |#=| |#if| |true| |#then| |false| |#else| |maybe|
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.241: 	x = if true then false else maybe
//│ ╙──       	  ^
//│ Parsed: {x}

:pe
x =
  if true then
y = 1
//│ |x| |#=|→|#if| |true| |#then|←|↵|y| |#=| |1|
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.249: 	x =
//│ ╙──       	  ^
//│ Parsed: {x}

if a ==
  0 and b ==
    2 then "false"
    else "1"
  1 then "true"
  else "2"
//│ |#if| |a| |==|→|0| |and| |b| |==|→|2| |#then| |"false"|↵|#else| |"1"|←|↵|1| |#then| |"true"|↵|#else| |"2"|←|
//│ Parsed: {if a == ‹0 and b == ‹(2) then "false"; else "1"›; (1) then "true"; else "2"›}

:pe
else 1
//│ |#else| |1|
//│ ╔══[PARSE ERROR] Unexpected 'then'/'else' clause
//│ ║  l.268: 	else 1
//│ ╙──       	^^^^^^
//│ Parsed: {undefined}

:pe
1 else 2
//│ |1| |#else| |2|
//│ ╔══[PARSE ERROR] Expected end of input; found 'else' keyword instead
//│ ║  l.276: 	1 else 2
//│ ╙──       	  ^^^^
//│ Parsed: {1}


if a then if b then c else d
//│ |#if| |a| |#then| |#if| |b| |#then| |c| |#else| |d|
//│ Parsed: {if (a) then if (b) then c else d}

if a then if b then c else d else e
//│ |#if| |a| |#then| |#if| |b| |#then| |c| |#else| |d| |#else| |e|
//│ Parsed: {if (a) then if (b) then c else d else e}


if a is
  Left(x) then x
  let y = a + 1
  Right(0) then y
//│ |#if| |a| |is|→|Left|(|x|)| |#then| |x|↵|#let| |y| |#=| |a| |+| |1|↵|Right|(|0|)| |#then| |y|←|
//│ Parsed: {if a is ‹(Left (x,)) then x; let y = + (a,) (1,); (Right (0,)) then y›}

if a is
  Some(v) and v is
    Left(x) then x
    let y = v + 1
    Right(0) then y
    Right(x) then x + y
  else 0
//│ |#if| |a| |is|→|Some|(|v|)| |and| |v| |is|→|Left|(|x|)| |#then| |x|↵|#let| |y| |#=| |v| |+| |1|↵|Right|(|0|)| |#then| |y|↵|Right|(|x|)| |#then| |x| |+| |y|←|↵|#else| |0|←|
//│ Parsed: {if a is ‹Some (v,) and v is ‹(Left (x,)) then x; let y = + (v,) (1,); (Right (0,)) then y; (Right (x,)) then + (x,) (y,)›; else 0›}

if a is
  Some(x) and x is
    Left(a)  then "left-defined"
    let y = x + 1
    Right(b) then "right-defined"
  None       then "undefined"
//│ |#if| |a| |is|→|Some|(|x|)| |and| |x| |is|→|Left|(|a|)| |#then| |"left-defined"|↵|#let| |y| |#=| |x| |+| |1|↵|Right|(|b|)| |#then| |"right-defined"|←|↵|None| |#then| |"undefined"|←|
//│ Parsed: {if a is ‹Some (x,) and x is ‹(Left (a,)) then "left-defined"; let y = + (x,) (1,); (Right (b,)) then "right-defined"›; (None) then "undefined"›}

:w
if a is
  Left x then x
//│ |#if| |a| |is|→|Left| |x| |#then| |x|←|
//│ ╔══[WARNING] Paren-less applications should use the 'of' keyword
//│ ║  l.321: 	  Left x then x
//│ ╙──       	  ^^^^^^
//│ Parsed: {if a is ‹(Left (x,)) then x›}

// TODO
if a is
  Left(x) then x
  let y = a + 1
  then y
//│ |#if| |a| |is|→|Left|(|x|)| |#then| |x|↵|#let| |y| |#=| |a| |+| |1|↵|#then| |y|←|
//│ ╔══[PARSE ERROR] Expected an expression; found a 'then'/'else' clause instead
//│ ║  l.331: 	  let y = a + 1
//│ ║         	          ^^^^^
//│ ║  l.332: 	  then y
//│ ╙──       	^^^^^^^^
//│ Parsed: {if a is ‹(Left (x,)) then x; let y = undefined›}



// --- // COMPARISONS // --- //

// Rust/Swift:
:pe
if let Some(x) = v then 123
//│ |#if| |#let| |Some|(|x|)| |#=| |v| |#then| |123|
//│ ╔══[PARSE ERROR] Expected '=' keyword; found parenthesis section instead
//│ ║  l.347: 	if let Some(x) = v then 123
//│ ╙──       	           ^^^
//│ ╔══[PARSE ERROR] Unexpected '=' keyword in expression position
//│ ║  l.347: 	if let Some(x) = v then 123
//│ ╙──       	               ^
//│ ╔══[PARSE ERROR] Expected an expression; found a 'then'/'else' clause instead
//│ ║  l.347: 	if let Some(x) = v then 123
//│ ╙──       	                 ^^^^^^^^^^
//│ ╔══[PARSE ERROR] Expected 'then'/'else' clause; found let binding instead
//│ ║  l.347: 	if let Some(x) = v then 123
//│ ║         	                           ^
//│ ╟── Note: 'if' expression started here:
//│ ║  l.347: 	if let Some(x) = v then 123
//│ ╙──       	^^
//│ Parsed: {if (let Some = undefined in undefined) then undefined}

// Swift:
:pe
if let Some(x) = v and cond then 123
//│ |#if| |#let| |Some|(|x|)| |#=| |v| |and| |cond| |#then| |123|
//│ ╔══[PARSE ERROR] Expected '=' keyword; found parenthesis section instead
//│ ║  l.368: 	if let Some(x) = v and cond then 123
//│ ╙──       	           ^^^
//│ ╔══[PARSE ERROR] Unexpected '=' keyword in expression position
//│ ║  l.368: 	if let Some(x) = v and cond then 123
//│ ╙──       	               ^
//│ ╔══[PARSE ERROR] Expected an expression; found a 'then'/'else' clause instead
//│ ║  l.368: 	if let Some(x) = v and cond then 123
//│ ╙──       	                 ^^^^^^^^^^^^^^^^^^^
//│ ╔══[PARSE ERROR] Expected 'then'/'else' clause; found let binding instead
//│ ║  l.368: 	if let Some(x) = v and cond then 123
//│ ║         	                                    ^
//│ ╟── Note: 'if' expression started here:
//│ ║  l.368: 	if let Some(x) = v and cond then 123
//│ ╙──       	^^
//│ Parsed: {if (let Some = undefined in undefined) then undefined}

// MLscript:
if v is Some(x) and x is Left(y) then 123
//│ |#if| |v| |is| |Some|(|x|)| |and| |x| |is| |Left|(|y|)| |#then| |123|
//│ Parsed: {if v is Some (x,) and x is (Left (y,)) then 123}

// ML:
let Some(x) = v
//│ |#let| |Some|(|x|)| |#=| |v|
//│ Parsed: {let Some = x, => v}

v as Some(x)
//│ |v| |as| |Some|(|x|)|
//│ Parsed: {as (v,) (Some (x,),)}




:pe
if true
  then 0
  + 1
//│ |#if| |true|→|#then| |0|↵|+| |1|←|
//│ ╔══[PARSE ERROR] Unexpected operator here
//│ ║  l.407: 	  + 1
//│ ╙──       	  ^
//│ Parsed: {if (true) then 0}

if true
  then 0
    + 1
//│ |#if| |true|→|#then| |0|→|+| |1|←|←|
//│ Parsed: {if (true) then + 0 1}

if true
  then 0
  else 0
//│ |#if| |true|→|#then| |0|↵|#else| |0|←|
//│ Parsed: {if (true) then 0 else 0}

if true
  then 0
  else 0
    + 1
//│ |#if| |true|→|#then| |0|↵|#else| |0|→|+| |1|←|←|
//│ Parsed: {if (true) then 0 else + 0 1}

:pe
if true
    then 0
  + 1
//│ |#if| |true|→|#then| |0|←|→|+| |1|←|
//│ ╔══[PARSE ERROR] Expected end of input; found indented block instead
//│ ║  l.436: 	  + 1
//│ ╙──       	^^
//│ Parsed: {if (true) then 0}

:pe
if true
    then 0
    else 0
  + 1
//│ |#if| |true|→|#then| |0|↵|#else| |0|←|→|+| |1|←|
//│ ╔══[PARSE ERROR] Expected end of input; found indented block instead
//│ ║  l.447: 	  + 1
//│ ╙──       	^^
//│ Parsed: {if (true) then 0 else 0}

if true then 0
  + 1
//│ |#if| |true| |#then| |0|→|+| |1|←|
//│ Parsed: {if (true) then + 0 1}

if true then 0 else 0
  + 1
//│ |#if| |true| |#then| |0| |#else| |0|→|+| |1|←|
//│ Parsed: {if (true) then 0 else + 0 1}


// TODO deal with meaningless whitespace:

if true
  then 0
  
//│ |#if| |true|→|#then| |0|↵|←|
//│ Parsed: {if (true) then 0}

// TODO ignore empty indented blocks/lines
if true
  then 0
    
//│ |#if| |true|→|#then| |0|←|
//│ Parsed: {if (true) then 0}


:pe
(if true)
//│ |(|#if| |true|)|
//│ ╔══[PARSE ERROR] Expected 'then'/'else' clause; found reference instead
//│ ║  l.482: 	(if true)
//│ ║         	    ^^^^
//│ ╟── Note: 'if' expression started here:
//│ ║  l.482: 	(if true)
//│ ╙──       	 ^^
//│ Parsed: {'(' if (true) then undefined, ')'}

:pe
(if true then)
//│ |(|#if| |true| |#then|)|
//│ ╔══[PARSE ERROR] Unexpected end of parenthesis section; an expression was expected here
//│ ║  l.493: 	(if true then)
//│ ╙──       	             ^
//│ Parsed: {'(' if (true) then undefined, ')'}

:pe
if true then;
//│ |#if| |true| |#then|#;|
//│ ╔══[PARSE ERROR] Expected end of input; found ';' keyword instead
//│ ║  l.501: 	if true then;
//│ ╙──       	            ^
//│ Parsed: {if (true) then undefined}



