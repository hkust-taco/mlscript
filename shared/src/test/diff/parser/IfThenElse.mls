:ShowDesugared

if true then 1 else 2
//│ |#if| |true| |#then| |1| |#else| |2|
//│ Parsed: {if (true) then 1 else 2}
//│ Desugared: {if true 1 2}

if a == 0
then "false" else 2
//│ |#if| |a| |==| |0|↵|#then| |"false"| |#else| |2|
//│ Parsed: {if (== (a,) (0,)) then "false" else 2}
//│ Desugared: {if (== (a,) (0,)) "false" 2}

if a == 0
then "false"
else 2
//│ |#if| |a| |==| |0|↵|#then| |"false"|↵|#else| |2|
//│ Parsed: {if (== (a,) (0,)) then "false" else 2}
//│ Desugared: {if (== (a,) (0,)) "false" 2}

if a == 0
  then "false"
  else 2
//│ |#if| |a| |==| |0|→|#then| |"false"|↵|#else| |2|←|
//│ Parsed: {if (== (a,) (0,)) then "false" else 2}
//│ Desugared: {if (== (a,) (0,)) "false" 2}

if a == 0
then "false"
  else 2
//│ |#if| |a| |==| |0|↵|#then| |"false"|→|#else| |2|←|
//│ Parsed: {if (== (a,) (0,)) then "false" else 2}
//│ Desugared: {if (== (a,) (0,)) "false" 2}

:pe
if a == 0
  then "false"
else 2
//│ |#if| |a| |==| |0|→|#then| |"false"|←|↵|#else| |2|
//│ ╔══[PARSE ERROR] Unexpected 'then'/'else' clause
//│ ║  l.38: 	else 2
//│ ╙──      	^^^^^^
//│ Parsed: {if (== (a,) (0,)) then "false"; undefined}
//│ Desugared: {if (== (a,) (0,)) "false" undefined; undefined}

if a == 0
  then "false"
print of "ok!"
//│ |#if| |a| |==| |0|→|#then| |"false"|←|↵|print| |#of| |"ok!"|
//│ Parsed: {if (== (a,) (0,)) then "false"; print ("ok!",)}
//│ Desugared: {if (== (a,) (0,)) "false" undefined; print ("ok!",)}

if a == 0 then "false"
  else 2
print of "ok!"
//│ |#if| |a| |==| |0| |#then| |"false"|→|#else| |2|←|↵|print| |#of| |"ok!"|
//│ Parsed: {if (== (a,) (0,)) then "false" else 2; print ("ok!",)}
//│ Desugared: {if (== (a,) (0,)) "false" 2; print ("ok!",)}

if
  true  then "true"
  false then "false"
//│ |#if|→|true| |#then| |"true"|↵|false| |#then| |"false"|←|
//│ Parsed: {if ‹(true) then "true"; (false) then "false"›}
//│ Desugared: {if true "true" (if false "false" undefined)}

if
  a == 1 then "true"
  b == 2 then "false"
//│ |#if|→|a| |==| |1| |#then| |"true"|↵|b| |==| |2| |#then| |"false"|←|
//│ Parsed: {if ‹(== (a,) (1,)) then "true"; (== (b,) (2,)) then "false"›}
//│ Desugared: {if (== (a,) (1,)) "true" (if (== (b,) (2,)) "false" undefined)}

if
  a == 0 then "false"
  a == 1 then "true"
//│ |#if|→|a| |==| |0| |#then| |"false"|↵|a| |==| |1| |#then| |"true"|←|
//│ Parsed: {if ‹(== (a,) (0,)) then "false"; (== (a,) (1,)) then "true"›}
//│ Desugared: {if (== (a,) (0,)) "false" (if (== (a,) (1,)) "true" undefined)}

if a ==
  0 then "false"
  1 then "true"
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|1| |#then| |"true"|←|
//│ Parsed: {if a == ‹(0) then "false"; (1) then "true"›}
//│ Desugared: {if (== (a,) (0,)) "false" (if (== (a,) (1,)) "true" undefined)}

if a ==
  0 then "false"
  _ then "true"
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|_| |#then| |"true"|←|
//│ Parsed: {if a == ‹(0) then "false"; (_) then "true"›}
//│ Desugared: {if (== (a,) (0,)) "false" "true"}

if a ==
  0 then "false"
  1 then "true"
  else "otherwise"
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|1| |#then| |"true"|↵|#else| |"otherwise"|←|
//│ Parsed: {if a == ‹(0) then "false"; (1) then "true"; else "otherwise"›}
//│ Desugared: {if (== (a,) (0,)) "false" (if (== (a,) (1,)) "true" "otherwise")}

if a ==
  0 then "false"
  1 then "true"
else "otherwise"
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|1| |#then| |"true"|←|↵|#else| |"otherwise"|
//│ Parsed: {if a == ‹(0) then "false"; (1) then "true"› else "otherwise"}
//│ Desugared: {if (== (a,) (0,)) "false" (if (== (a,) (1,)) "true" "otherwise")}

if a ==
    0 then "false"
    1 then "true"
  else "true"
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|1| |#then| |"true"|←|→|#else| |"true"|←|
//│ Parsed: {if a == ‹(0) then "false"; (1) then "true"› else "true"}
//│ Desugared: {if (== (a,) (0,)) "false" (if (== (a,) (1,)) "true" "true")}

// TODO?
:pe
if a ==
  0 then "false" else "true"
//│ |#if| |a| |==|→|0| |#then| |"false"| |#else| |"true"|←|
//│ ╔══[PARSE ERROR] Unexpected 'else' keyword here
//│ ║  l.122: 	  0 then "false" else "true"
//│ ╙──       	                 ^^^^
//│ Parsed: {if a == ‹(0) then "false"›}
//│ Desugared: {if (== (a,) (0,)) "false" undefined}

if a ==
  0 then "false"
  else "true"
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|#else| |"true"|←|
//│ Parsed: {if a == ‹(0) then "false"; else "true"›}
//│ Desugared: {if (== (a,) (0,)) "false" "true"}

if a
  > 0  then "false"
  == 1 then "true"
//│ |#if| |a|→|>| |0| |#then| |"false"|↵|==| |1| |#then| |"true"|←|
//│ Parsed: {if a ‹· > (0) then "false"; · == (1) then "true"›}
//│ Desugared: {if (> (a,) (0,)) "false" (if (== (a,) (1,)) "true" undefined)}

// TODO
if a
  > 0  then "false"
  == 1 then "true"
  _    then "true"
//│ |#if| |a|→|>| |0| |#then| |"false"|↵|==| |1| |#then| |"true"|↵|_| |#then| |"true"|←|
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing

if a ==
  0 then "false"
  1 then "true"
else 2
//│ |#if| |a| |==|→|0| |#then| |"false"|↵|1| |#then| |"true"|←|↵|#else| |2|
//│ Parsed: {if a == ‹(0) then "false"; (1) then "true"› else 2}
//│ Desugared: {if (== (a,) (0,)) "false" (if (== (a,) (1,)) "true" 2)}

if a ==
  0 and b ==
    2 then "false"
    3 then "oops"
  1 then "true"
//│ |#if| |a| |==|→|0| |and| |b| |==|→|2| |#then| |"false"|↵|3| |#then| |"oops"|←|↵|1| |#then| |"true"|←|
//│ Parsed: {if a == ‹0 and b == ‹(2) then "false"; (3) then "oops"›; (1) then "true"›}
//│ Desugared: {if (== (and (== (a,) (0,),) (b,),) (2,)) "false" (if (== (and (== (a,) (0,),) (b,),) (3,)) "oops" (if (== (a,) (1,)) "true" undefined))}

if a is
  Some(x) then "defined"
  None    then "undefined"
//│ |#if| |a| |is|→|Some|(|x|)| |#then| |"defined"|↵|None| |#then| |"undefined"|←|
//│ Parsed: {if a is ‹(Some (x,)) then "defined"; (None) then "undefined"›}
//│ Desugared: {case a of Case(Some,"defined",Case(None,"undefined",NoCases))}

if a is
  Some(x) and x is
    Left(a)  then "left-defined"
    Right(b) then "right-defined"
  None       then "undefined"
//│ |#if| |a| |is|→|Some|(|x|)| |and| |x| |is|→|Left|(|a|)| |#then| |"left-defined"|↵|Right|(|b|)| |#then| |"right-defined"|←|↵|None| |#then| |"undefined"|←|
//│ Parsed: {if a is ‹Some (x,) and x is ‹(Left (a,)) then "left-defined"; (Right (b,)) then "right-defined"›; (None) then "undefined"›}
//│ Desugared: {case a of Case(Some,case x of Case(Left,"left-defined",Case(Right,"right-defined",NoCases)),Case(None,"undefined",NoCases))}

if a is
  Some of x then "defined"
  None      then "undefined"
//│ |#if| |a| |is|→|Some| |#of| |x| |#then| |"defined"|↵|None| |#then| |"undefined"|←|
//│ Parsed: {if a is ‹(Some (x,)) then "defined"; (None) then "undefined"›}
//│ Desugared: {case a of Case(Some,"defined",Case(None,"undefined",NoCases))}


:pe
if lol
//│ |#if| |lol|
//│ ╔══[PARSE ERROR] Expected 'then'/'else' clause; found reference instead
//│ ║  l.194: 	if lol
//│ ║         	   ^^^
//│ ╟── Note: 'if' expression started here:
//│ ║  l.194: 	if lol
//│ ╙──       	^^
//│ Parsed: {if (lol) then undefined}
//│ Desugared: {if lol undefined undefined}

:pe
if lol then
//│ |#if| |lol| |#then|
//│ ╔══[PARSE ERROR] Unexpected end of input; an expression was expected here
//│ ║  l.206: 	if lol then
//│ ╙──       	           ^
//│ Parsed: {if (lol) then undefined}
//│ Desugared: {if lol undefined undefined}

:pe
if lol then else
//│ |#if| |lol| |#then| |#else|
//│ ╔══[PARSE ERROR] Unexpected end of input; an expression was expected here
//│ ║  l.215: 	if lol then else
//│ ╙──       	                ^
//│ ╔══[PARSE ERROR] Expected an expression; found a 'then'/'else' clause instead
//│ ║  l.215: 	if lol then else
//│ ╙──       	            ^^^^
//│ Parsed: {if (lol) then undefined}
//│ Desugared: {if lol undefined undefined}

:pe
a then b
//│ |a| |#then| |b|
//│ ╔══[PARSE ERROR] Unexpected 'then'/'else' clause
//│ ║  l.227: 	a then b
//│ ╙──       	^^^^^^^^
//│ Parsed: {undefined}
//│ Desugared: {undefined}

:pe
if lol
then
else
//│ |#if| |lol|↵|#then|↵|#else|
//│ ╔══[PARSE ERROR] Unexpected newline in expression position
//│ ║  l.237: 	then
//│ ║         	    ^
//│ ║  l.238: 	else
//│ ╙──       	
//│ ╔══[PARSE ERROR] Unexpected end of input; an expression was expected here
//│ ║  l.238: 	else
//│ ╙──       	    ^
//│ ╔══[PARSE ERROR] Expected an expression; found a 'then'/'else' clause instead
//│ ║  l.238: 	else
//│ ╙──       	^^^^
//│ Parsed: {if (lol) then undefined}
//│ Desugared: {if lol undefined undefined}

:pe
if lol else 2
//│ |#if| |lol| |#else| |2|
//│ ╔══[PARSE ERROR] Expected 'then'/'else' clause; found reference followed by 'else' keyword instead
//│ ║  l.255: 	if lol else 2
//│ ║         	   ^^^^^^^^
//│ ╟── Note: 'if' expression started here:
//│ ║  l.255: 	if lol else 2
//│ ╙──       	^^
//│ ╔══[PARSE ERROR] Expected end of input; found 'else' keyword instead
//│ ║  l.255: 	if lol else 2
//│ ╙──       	       ^^^^
//│ Parsed: {if (lol) then undefined}
//│ Desugared: {if lol undefined undefined}


:pe
x = if true then false else maybe
//│ |x| |#=| |#if| |true| |#then| |false| |#else| |maybe|
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.271: 	x = if true then false else maybe
//│ ╙──       	  ^
//│ Parsed: {x}
//│ Desugared: {x}

:pe
x =
  if true then
y = 1
//│ |x| |#=|→|#if| |true| |#then|←|↵|y| |#=| |1|
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.280: 	x =
//│ ╙──       	  ^
//│ Parsed: {x}
//│ Desugared: {x}

if a ==
  0 and b ==
    2 then "false"
    else "1"
  1 then "true"
  else "2"
//│ |#if| |a| |==|→|0| |and| |b| |==|→|2| |#then| |"false"|↵|#else| |"1"|←|↵|1| |#then| |"true"|↵|#else| |"2"|←|
//│ Parsed: {if a == ‹0 and b == ‹(2) then "false"; else "1"›; (1) then "true"; else "2"›}
//│ Desugared: {if (== (and (== (a,) (0,),) (b,),) (2,)) "false" "1"}

:pe
else 1
//│ |#else| |1|
//│ ╔══[PARSE ERROR] Unexpected 'then'/'else' clause
//│ ║  l.301: 	else 1
//│ ╙──       	^^^^^^
//│ Parsed: {undefined}
//│ Desugared: {undefined}

:pe
1 else 2
//│ |1| |#else| |2|
//│ ╔══[PARSE ERROR] Expected end of input; found 'else' keyword instead
//│ ║  l.310: 	1 else 2
//│ ╙──       	  ^^^^
//│ Parsed: {1}
//│ Desugared: {1}


if a then if b then c else d
//│ |#if| |a| |#then| |#if| |b| |#then| |c| |#else| |d|
//│ Parsed: {if (a) then if (b) then c else d}
//│ Desugared: {if a (if (b) then c else d) undefined}

if a then if b then c else d else e
//│ |#if| |a| |#then| |#if| |b| |#then| |c| |#else| |d| |#else| |e|
//│ Parsed: {if (a) then if (b) then c else d else e}
//│ Desugared: {if a (if (b) then c else d) e}


if a is
  Left(x) then x
  let y = a + 1
  Right(0) then y
//│ |#if| |a| |is|→|Left|(|x|)| |#then| |x|↵|#let| |y| |#=| |a| |+| |1|↵|Right|(|0|)| |#then| |y|←|
//│ Parsed: {if a is ‹(Left (x,)) then x; fun y = + (a,) (1,); (Right (0,)) then y›}
//│ Desugared: {case a of Case(Left,x,Wildcard(let y = + (a,) (1,) in case a of NoCases))}

if
  x == 0 then "x"
  y ==
    1 then "y = 1"
    2 and z ==
      0 then "z = 0"
      9 then "z = 9"
    3 then "y = 3"
//│ |#if|→|x| |==| |0| |#then| |"x"|↵|y| |==|→|1| |#then| |"y = 1"|↵|2| |and| |z| |==|→|0| |#then| |"z = 0"|↵|9| |#then| |"z = 9"|←|↵|3| |#then| |"y = 3"|←|←|
//│ Parsed: {if ‹(== (x,) (0,)) then "x"; y == ‹(1) then "y = 1"; 2 and z == ‹(0) then "z = 0"; (9) then "z = 9"›; (3) then "y = 3"››}
//│ Desugared: {if (== (x,) (0,)) "x" (if (== (y,) (1,)) "y = 1" (if (== (and (== (y,) (2,),) (z,),) (0,)) "z = 0" (if (== (and (== (y,) (2,),) (z,),) (9,)) "z = 9" (if (== (y,) (3,)) "y = 3" undefined))))}

if
  _ then 0
  else 0
else 1
//│ |#if|→|_| |#then| |0|↵|#else| |0|←|↵|#else| |1|
//│ Parsed: {if ‹(_) then 0; else 0› else 1}
//│ Desugared: {if _ 0 0}

if
  a == 0 then 0
  b ==
    1 then 1
    2 then 2
    _ then 7
  else 3
//│ |#if|→|a| |==| |0| |#then| |0|↵|b| |==|→|1| |#then| |1|↵|2| |#then| |2|↵|_| |#then| |7|←|↵|#else| |3|←|
//│ Parsed: {if ‹(== (a,) (0,)) then 0; b == ‹(1) then 1; (2) then 2; (_) then 7›; else 3›}
//│ Desugared: {if (== (a,) (0,)) 0 (if (== (b,) (1,)) 1 (if (== (b,) (2,)) 2 7))}

if a is
  Some(v) and v is
    Left(x) then x
    let y = v + 1
    Right(0) then y
    Right(x) then x + y
  else 0
//│ |#if| |a| |is|→|Some|(|v|)| |and| |v| |is|→|Left|(|x|)| |#then| |x|↵|#let| |y| |#=| |v| |+| |1|↵|Right|(|0|)| |#then| |y|↵|Right|(|x|)| |#then| |x| |+| |y|←|↵|#else| |0|←|
//│ Parsed: {if a is ‹Some (v,) and v is ‹(Left (x,)) then x; fun y = + (v,) (1,); (Right (0,)) then y; (Right (x,)) then + (x,) (y,)›; else 0›}
//│ Desugared: {case a of Case(Some,case v of Case(Left,x,Wildcard(let y = + (v,) (1,) in case v of NoCases)),Wildcard(0))}

if a is
  Some(x) and x is
    Left(a)  then "left-defined"
    let y = x + 1
    Right(b) then "right-defined"
  None       then "undefined"
//│ |#if| |a| |is|→|Some|(|x|)| |and| |x| |is|→|Left|(|a|)| |#then| |"left-defined"|↵|#let| |y| |#=| |x| |+| |1|↵|Right|(|b|)| |#then| |"right-defined"|←|↵|None| |#then| |"undefined"|←|
//│ Parsed: {if a is ‹Some (x,) and x is ‹(Left (a,)) then "left-defined"; fun y = + (x,) (1,); (Right (b,)) then "right-defined"›; (None) then "undefined"›}
//│ Desugared: {case a of Case(Some,case x of Case(Left,"left-defined",Wildcard(let y = + (x,) (1,) in case x of NoCases)),Case(None,"undefined",NoCases))}

:w
if a is
  Left x then x
//│ |#if| |a| |is|→|Left| |x| |#then| |x|←|
//│ ╔══[WARNING] Paren-less applications should use the 'of' keyword
//│ ║  l.392: 	  Left x then x
//│ ╙──       	  ^^^^^^
//│ Parsed: {if a is ‹(Left (x,)) then x›}
//│ Desugared: {case a of Case(Left,x,NoCases)}

// TODO
if a is
  Left(x) then x
  let y = a + 1
  then y
//│ |#if| |a| |is|→|Left|(|x|)| |#then| |x|↵|#let| |y| |#=| |a| |+| |1|↵|#then| |y|←|
//│ ╔══[PARSE ERROR] Expected an expression; found a 'then'/'else' clause instead
//│ ║  l.403: 	  let y = a + 1
//│ ║         	          ^^^^^
//│ ║  l.404: 	  then y
//│ ╙──       	^^^^^^^^
//│ Parsed: {if a is ‹(Left (x,)) then x; fun y = undefined›}
//│ Desugared: {case a of Case(Left,x,Wildcard(let y = undefined in case a of NoCases))}



// --- // COMPARISONS // --- //

// Rust/Swift:
:pe
if let Some(x) = v then 123
//│ |#if| |#let| |Some|(|x|)| |#=| |v| |#then| |123|
//│ ╔══[PARSE ERROR] Expected '=' keyword; found parenthesis section instead
//│ ║  l.420: 	if let Some(x) = v then 123
//│ ╙──       	           ^^^
//│ ╔══[PARSE ERROR] Unexpected '=' keyword in expression position
//│ ║  l.420: 	if let Some(x) = v then 123
//│ ╙──       	               ^
//│ ╔══[PARSE ERROR] Expected an expression; found a 'then'/'else' clause instead
//│ ║  l.420: 	if let Some(x) = v then 123
//│ ╙──       	                 ^^^^^^^^^^
//│ ╔══[PARSE ERROR] Expected 'then'/'else' clause; found let binding instead
//│ ║  l.420: 	if let Some(x) = v then 123
//│ ║         	                           ^
//│ ╟── Note: 'if' expression started here:
//│ ║  l.420: 	if let Some(x) = v then 123
//│ ╙──       	^^
//│ Parsed: {if (let Some = undefined in undefined) then undefined}
//│ Desugared: {if (let Some = undefined in undefined) undefined undefined}

// Swift:
:pe
if let Some(x) = v and cond then 123
//│ |#if| |#let| |Some|(|x|)| |#=| |v| |and| |cond| |#then| |123|
//│ ╔══[PARSE ERROR] Expected '=' keyword; found parenthesis section instead
//│ ║  l.442: 	if let Some(x) = v and cond then 123
//│ ╙──       	           ^^^
//│ ╔══[PARSE ERROR] Unexpected '=' keyword in expression position
//│ ║  l.442: 	if let Some(x) = v and cond then 123
//│ ╙──       	               ^
//│ ╔══[PARSE ERROR] Expected an expression; found a 'then'/'else' clause instead
//│ ║  l.442: 	if let Some(x) = v and cond then 123
//│ ╙──       	                 ^^^^^^^^^^^^^^^^^^^
//│ ╔══[PARSE ERROR] Expected 'then'/'else' clause; found let binding instead
//│ ║  l.442: 	if let Some(x) = v and cond then 123
//│ ║         	                                    ^
//│ ╟── Note: 'if' expression started here:
//│ ║  l.442: 	if let Some(x) = v and cond then 123
//│ ╙──       	^^
//│ Parsed: {if (let Some = undefined in undefined) then undefined}
//│ Desugared: {if (let Some = undefined in undefined) undefined undefined}

// MLscript:
if v is Some(x) and x is Left(y) then 123
//│ |#if| |v| |is| |Some|(|x|)| |and| |x| |is| |Left|(|y|)| |#then| |123|
//│ Parsed: {if v is Some (x,) and x is (Left (y,)) then 123}
//│ Desugared: {if (and (is (v,) (Some (x,),),) (is (x,) (Left (y,),),)) 123 undefined}

if v is Some(x) and x is Left(y) and z is Right(a) then 123
//│ |#if| |v| |is| |Some|(|x|)| |and| |x| |is| |Left|(|y|)| |and| |z| |is| |Right|(|a|)| |#then| |123|
//│ Parsed: {if v is Some (x,) and x is Left (y,) and z is (Right (a,)) then 123}
//│ Desugared: {if (is (and (and (is (v,) (Some (x,),),) (is (x,) (Left (y,),),),) (z,),) (Right (a,),)) 123 undefined}

// ML:
let Some(x) = v
//│ |#let| |Some|(|x|)| |#=| |v|
//│ Parsed: {fun Some = x, => v}
//│ Desugared: {fun Some = x, => v}

v as Some(x)
//│ |v| |as| |Some|(|x|)|
//│ Parsed: {as (v,) (Some (x,),)}
//│ Desugared: {as (v,) (Some (x,),)}




:pe
if true
  then 0
  + 1
//│ |#if| |true|→|#then| |0|↵|+| |1|←|
//│ ╔══[PARSE ERROR] Unexpected operator here
//│ ║  l.490: 	  + 1
//│ ╙──       	  ^
//│ Parsed: {if (true) then 0}
//│ Desugared: {if true 0 undefined}

if true
  then 0
    + 1
//│ |#if| |true|→|#then| |0|→|+| |1|←|←|
//│ Parsed: {if (true) then + 0 1}
//│ Desugared: {if true (+ 0 1) undefined}

if true
  then 0
  else 0
//│ |#if| |true|→|#then| |0|↵|#else| |0|←|
//│ Parsed: {if (true) then 0 else 0}
//│ Desugared: {if true 0 0}

if true
  then 0
  else 0
    + 1
//│ |#if| |true|→|#then| |0|↵|#else| |0|→|+| |1|←|←|
//│ Parsed: {if (true) then 0 else + 0 1}
//│ Desugared: {if true 0 (+ 0 1)}

:pe
if true
    then 0
  + 1
//│ |#if| |true|→|#then| |0|←|→|+| |1|←|
//│ ╔══[PARSE ERROR] Expected end of input; found indented block instead
//│ ║  l.523: 	  + 1
//│ ╙──       	^^
//│ Parsed: {if (true) then 0}
//│ Desugared: {if true 0 undefined}

:pe
if true
    then 0
    else 0
  + 1
//│ |#if| |true|→|#then| |0|↵|#else| |0|←|→|+| |1|←|
//│ ╔══[PARSE ERROR] Expected end of input; found indented block instead
//│ ║  l.535: 	  + 1
//│ ╙──       	^^
//│ Parsed: {if (true) then 0 else 0}
//│ Desugared: {if true 0 0}

if true then 0
  + 1
//│ |#if| |true| |#then| |0|→|+| |1|←|
//│ Parsed: {if (true) then + 0 1}
//│ Desugared: {if true (+ 0 1) undefined}

if true then 0 else 0
  + 1
//│ |#if| |true| |#then| |0| |#else| |0|→|+| |1|←|
//│ Parsed: {if (true) then 0 else + 0 1}
//│ Desugared: {if true 0 (+ 0 1)}


// TODO deal with meaningless whitespace:

if true
  then 0
  
//│ |#if| |true|→|#then| |0|↵|←|
//│ Parsed: {if (true) then 0}
//│ Desugared: {if true 0 undefined}

// TODO ignore empty indented blocks/lines
if true
  then 0
    
//│ |#if| |true|→|#then| |0|←|
//│ Parsed: {if (true) then 0}
//│ Desugared: {if true 0 undefined}


:pe
(if true)
//│ |(|#if| |true|)|
//│ ╔══[PARSE ERROR] Expected 'then'/'else' clause; found reference instead
//│ ║  l.575: 	(if true)
//│ ║         	    ^^^^
//│ ╟── Note: 'if' expression started here:
//│ ║  l.575: 	(if true)
//│ ╙──       	 ^^
//│ Parsed: {'(' if (true) then undefined, ')'}
//│ Desugared: {'(' if (true) then undefined, ')'}

:pe
(if true then)
//│ |(|#if| |true| |#then|)|
//│ ╔══[PARSE ERROR] Unexpected end of parenthesis section; an expression was expected here
//│ ║  l.587: 	(if true then)
//│ ╙──       	             ^
//│ Parsed: {'(' if (true) then undefined, ')'}
//│ Desugared: {'(' if (true) then undefined, ')'}

:pe
if true then;
//│ |#if| |true| |#then|#;|
//│ ╔══[PARSE ERROR] Expected end of input; found ';' keyword instead
//│ ║  l.596: 	if true then;
//│ ╙──       	            ^
//│ Parsed: {if (true) then undefined}
//│ Desugared: {if true undefined undefined}



