:AllowParseErrors


fun f = 1
//│ |#fun| |f| |#=| |1|
//│ Parsed: {fun f = 1}

fun f(x) = x
//│ |#fun| |f|(|x|)| |#=| |x|
//│ Parsed: {fun f = x, => x}

fun f x = x
//│ |#fun| |f| |x| |#=| |x|
//│ ╔══[PARSE ERROR] Expected function parameter list; found identifier instead
//│ ║  l.12: 	fun f x = x
//│ ╙──      	      ^
//│ Parsed: {fun f = x}

fun f = x => x
//│ |#fun| |f| |#=| |x| |=>| |x|
//│ Parsed: {fun f = x, => x}

// TODO
fun x => x
//│ |#fun| |x| |=>| |x|
//│ ╔══[PARSE ERROR] Expected function parameter list; found operator instead
//│ ║  l.24: 	fun x => x
//│ ╙──      	      ^^
//│ ╔══[PARSE ERROR] Expected ':' or '=' followed by a function body or signature; found identifier instead
//│ ║  l.24: 	fun x => x
//│ ╙──      	         ^
//│ Parsed: {fun x = undefined}

let f = x => x
//│ |#let| |f| |#=| |x| |=>| |x|
//│ Parsed: {fun f = x, => x}

// TODO
let f = fun x => x
//│ |#let| |f| |#=| |#fun| |x| |=>| |x|
//│ ╔══[PARSE ERROR] Unexpected 'fun' keyword in expression position
//│ ║  l.39: 	let f = fun x => x
//│ ╙──      	        ^^^
//│ Parsed: {fun f = x, => x}


f(x) + x
//│ |f|(|x|)| |+| |x|
//│ Parsed: {+ (f (x,),) (x,)}


fun f(x, y) = x
//│ |#fun| |f|(|x|,| |y|)| |#=| |x|
//│ Parsed: {fun f = x, y, => x}

fun f of x = x
//│ |#fun| |f| |#of| |x| |#=| |x|
//│ Parsed: {fun f = x, => x}

fun f of x, y = x
//│ |#fun| |f| |#of| |x|,| |y| |#=| |x|
//│ Parsed: {fun f = x, y, => x}

fun f x, y = x
//│ |#fun| |f| |x|,| |y| |#=| |x|
//│ ╔══[PARSE ERROR] Expected function parameter list; found identifier instead
//│ ║  l.64: 	fun f x, y = x
//│ ╙──      	      ^
//│ ╔══[PARSE ERROR] Expected ':' or '=' followed by a function body or signature; found comma instead
//│ ║  l.64: 	fun f x, y = x
//│ ╙──      	       ^
//│ ╔══[PARSE ERROR] Expected end of input; found identifier instead
//│ ║  l.64: 	fun f x, y = x
//│ ╙──      	         ^
//│ Parsed: {fun f = undefined}

fun f x y = x
//│ |#fun| |f| |x| |y| |#=| |x|
//│ ╔══[PARSE ERROR] Expected function parameter list; found identifier instead
//│ ║  l.77: 	fun f x y = x
//│ ╙──      	      ^
//│ ╔══[PARSE ERROR] Expected ':' or '=' followed by a function body or signature; found identifier instead
//│ ║  l.77: 	fun f x y = x
//│ ╙──      	        ^
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.77: 	fun f x y = x
//│ ╙──      	          ^
//│ Parsed: {fun f = undefined}


fun f(x, y)(a, b) = x + y * a / b
//│ |#fun| |f|(|x|,| |y|)|(|a|,| |b|)| |#=| |x| |+| |y| |*| |a| |/| |b|
//│ Parsed: {fun f = x, y, => a, b, => / (+ (x,) (* (y,) (a,),),) (b,)}

fun f(x, y) of a, b = x + y * a / b
//│ |#fun| |f|(|x|,| |y|)| |#of| |a|,| |b| |#=| |x| |+| |y| |*| |a| |/| |b|
//│ Parsed: {fun f = x, y, => a, b, => / (+ (x,) (* (y,) (a,),),) (b,)}

fun f of x, y of a, b = x + y * a / b
//│ |#fun| |f| |#of| |x|,| |y| |#of| |a|,| |b| |#=| |x| |+| |y| |*| |a| |/| |b|
//│ Parsed: {fun f = x, y (a, b,), => / (+ (x,) (* (y,) (a,),),) (b,)}


fun f(Some(x)) = x
//│ |#fun| |f|(|Some|(|x|)|)| |#=| |x|
//│ Parsed: {fun f = Some (x,), => x}

fun f(Some of x) = x
//│ |#fun| |f|(|Some| |#of| |x|)| |#=| |x|
//│ Parsed: {fun f = Some (x,), => x}

fun f of Some of x = x
//│ |#fun| |f| |#of| |Some| |#of| |x| |#=| |x|
//│ Parsed: {fun f = Some (x,), => x}

fun f(Some(x), Some(y)) = x
//│ |#fun| |f|(|Some|(|x|)|,| |Some|(|y|)|)| |#=| |x|
//│ Parsed: {fun f = Some (x,), Some (y,), => x}

fun f(Some of x, Some of y) = x + y
//│ |#fun| |f|(|Some| |#of| |x|,| |Some| |#of| |y|)| |#=| |x| |+| |y|
//│ Parsed: {fun f = Some (x, Some (y,),), => + (x,) (y,)}

fun f of Some of x, Some of y = x + y
//│ |#fun| |f| |#of| |Some| |#of| |x|,| |Some| |#of| |y| |#=| |x| |+| |y|
//│ Parsed: {fun f = Some (x, Some (y,),), => + (x,) (y,)}


fun f(x: Int, y: Int) = x
//│ |#fun| |f|(|x|#:| |Int|,| |y|#:| |Int|)| |#=| |x|
//│ Parsed: {fun f = x: Int, y: Int, => x}

fun f(x: Int, y: Int): Int = x
//│ |#fun| |f|(|x|#:| |Int|,| |y|#:| |Int|)|#:| |Int| |#=| |x|
//│ Parsed: {fun f = x: Int, y: Int, => x : TypeName(Int)}



fun 1
//│ |#fun| |1|
//│ ╔══[PARSE ERROR] Expected a function name; found literal instead
//│ ║  l.139: 	fun 1
//│ ╙──       	    ^
//│ ╔══[PARSE ERROR] Expected ':' or '=' followed by a function body or signature; found end of input instead
//│ ║  l.139: 	fun 1
//│ ╙──       	     ^
//│ Parsed: {fun <error> = undefined}

fun 1 = 1
//│ |#fun| |1| |#=| |1|
//│ ╔══[PARSE ERROR] Expected a function name; found literal instead
//│ ║  l.149: 	fun 1 = 1
//│ ╙──       	    ^
//│ Parsed: {fun <error> = 1}

fun
//│ |#fun|
//│ ╔══[PARSE ERROR] Expected a function name; found end of input instead
//│ ║  l.156: 	fun
//│ ╙──       	   ^
//│ ╔══[PARSE ERROR] Expected ':' or '=' followed by a function body or signature; found end of input instead
//│ ║  l.156: 	fun
//│ ╙──       	   ^
//│ Parsed: {fun <error> = undefined}

fun = 1
//│ |#fun| |#=| |1|
//│ ╔══[PARSE ERROR] Expected a function name; found '=' keyword instead
//│ ║  l.166: 	fun = 1
//│ ╙──       	    ^
//│ ╔══[PARSE ERROR] Expected function parameter list; found literal instead
//│ ║  l.166: 	fun = 1
//│ ╙──       	      ^
//│ ╔══[PARSE ERROR] Expected ':' or '=' followed by a function body or signature; found end of input instead
//│ ║  l.166: 	fun = 1
//│ ╙──       	       ^
//│ Parsed: {fun <error> = undefined}


fun add(x: number, y: number): number
//│ |#fun| |add|(|x|#:| |number|,| |y|#:| |number|)|#:| |number|
//│ Parsed: {fun add: [] -> (x: number, y: number,) -> number}

fun apply(x: int, f: (int => int)): int
//│ |#fun| |apply|(|x|#:| |int|,| |f|#:| |(|int| |=>| |int|)|)|#:| |int|
//│ Parsed: {fun apply: [] -> (x: int, f: (int -> int,),) -> int}

fun apply2(x: number, f: int => number => number): number
//│ |#fun| |apply2|(|x|#:| |number|,| |f|#:| |int| |=>| |number| |=>| |number|)|#:| |number|
//│ Parsed: {fun apply2: [] -> (x: number, f: (int -> number) -> number,) -> number}
