:NewParser


:e
:ge
code"x => y => 100 + ${Const(x + y)}"
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.6: 	code"x => y => 100 + ${Const(x + y)}"
//│ ╙──     	                             ^
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.6: 	code"x => y => 100 + ${Const(x + y)}"
//│ ╙──     	                                 ^
//│ res: code & {Code#T <: anything -> anything -> int}
//│ Code generation encountered an error:
//│   unresolved symbol x

:e
code"x => y => 100 + code"${Const(x + y)}""
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.18: 	code"x => y => 100 + code"${Const(x + y)}""
//│ ║        	               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `code & {Code#T <: ?a}` is not an instance of type `int`
//│ res: code & {Code#T <: int -> int -> (error | int)}
//│    = [
//│        'Lam',
//│        [ [ '_', 'x', 'x' ] ],
//│        [ 'Lam', [ [Array] ], [ 'App', '+', [Array], [Array] ] ]
//│      ]


code"x => code"${x}""
//│ res: code & {Code#T <: (code & {Code#T <: 'a}) -> (code & {Code#T <: 'a})}
//│    = [ 'Lam', [ [ '_', 'x', 'x' ] ], [ 'Quoted', [ 'Unquoted', [Array] ] ] ]

run(res)(code"1")
//│ res: code & {Code#T <: 1}
//│    = [ 'Unquoted', [ '_', 1 ] ]
