:NewParser
:ge

let code_var2 = code"x"
//│ code_var2: Code
//│          = [ '&', 'x', 'Symbol(x)' ]

// Lam 
let code_lam = code"(x, y) => x + 3"
//│ code_lam: Code
//│         = [
//│             '=>',
//│             [ '#', [ '&', 'x', 'Symbol(x)' ], [ '&', 'y', 'Symbol(y)' ] ],
//│             [ '@', '+', [ '&', 'x', 'Symbol(x)' ], [ '3' ] ]
//│           ]

// App
let code_app_binary = code"1 + 2 * 3"
//│ code_app_binary: Code
//│                = [ '@', '+', [ '1' ], [ '@', '*', [ '2' ], [ '3' ] ] ]

let code_app_binary2 = code"y + 1"
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.25: 	let code_app_binary2 = code"y + 1"
//│ ║        	                            ^^^
//│ ╟── reference of type `anything` is not an instance of type `int`
//│ ║  l.25: 	let code_app_binary2 = code"y + 1"
//│ ╙──      	                            ^
//│ code_app_binary2: Code
//│                 = [ '@', '+', [ '&', 'y', 'Symbol(y)' ], [ '1' ] ]

// App with if?
if true then 1 else 2
//│ res: 1 | 2
//│    = 1

let code_app_if1 = code"if true then 1 else 2"
//│ code_app_if1: Code
//│ Code generation encountered an error:
//│   **If-s were skipped (as Typer didn't support yet)


// Tup 
("1",2,3)
//│ res: ("1", 2, 3,)
//│    = [ '1', 2, 3 ]

let code_tup = code"(1,2,3)"
//│ code_tup: Code
//│ Code generation encountered an error:
//│   BRACKET with rcd false, trm: 1, 2, 3,

// Rcd 
let record = {x: 1}
//│ record: {x: 1}
//│       = { x: 1 }

let code_res = code"{x: 1}"
//│ code_res: Code
//│ Code generation encountered an error:
//│   BRACKET with rcd true, trm: {x: 1}

// Sel
{ x: 0, y: 10 }.y
//│ res: 10
//│    = 10

let code_sel = code"{ x: 0, y: 0 }.x"
//│ code_sel: Code
//│ Code generation encountered an error:
//│   SELECTOR receiver: '{' {x: 0, y: 0} '}' fieldName: x

// Let 
let x = 2
//│ x: 2
//│  = 2

let code_let1 = code"let x = 2; x"
//│ code_let1: Code
//│ Code generation encountered an error:
//│   LET isRec: false, name: x, rhs: 2, body: x 
//│  BODY: JSArray(List(JSLit("&"), JSLit("x"), JSLit("Symbol(x)")))}

// Bra 
let code_bra1 = code"(1,1)"
//│ code_bra1: Code
//│ Code generation encountered an error:
//│   BRACKET with rcd false, trm: 1, 1,

let code_bra2 = code"{x: 1}"
//│ code_bra2: Code
//│ Code generation encountered an error:
//│   BRACKET with rcd true, trm: {x: 1}

// With 
:ge
fun f(x) = x
//│ f: 'a -> 'a
//│  = [Function: f]
f with x = 2
//│ ╔══[WARNING] Paren-less applications should use the 'of' keyword
//│ ║  l.117: 	f with x = 2
//│ ╙──       	  ^^^^^^
//│ ╔══[WARNING] Paren-less applications should use the 'of' keyword
//│ ║  l.117: 	f with x = 2
//│ ╙──       	^^^^^^^^
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.117: 	f with x = 2
//│ ╙──       	         ^
//│ ╔══[ERROR] identifier not found: with
//│ ║  l.117: 	f with x = 2
//│ ╙──       	  ^^^^
//│ res: error
//│ Code generation encountered an error:
//│   unresolved symbol with

// Subs 
let a = (1,2,3)
a[0]
//│ a: (1, 2, 3,)
//│  = [ 1, 2, 3 ]
//│ res: 1 | 2 | 3 | undefined
//│    = 1

let code_subs = code"${a[1]}"
//│ code_subs: Code
//│ Code generation encountered an error:
//│   SUBSCRIPTION from array: a at index 1

// Assign - ref Mut.mls 


// Splc 
let array1 = (1,2,3,4,5)
array1[2:3]
//│ array1: (1, 2, 3, 4, 5,)
//│       = [ 1, 2, 3, 4, 5 ]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.152: 	array1[2:3]
//│ ║         	      ^^^^^
//│ ╟── integer literal of type `2` does not match type `3`
//│ ║  l.152: 	array1[2:3]
//│ ║         	       ^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.152: 	array1[2:3]
//│ ╙──       	         ^
//│ res: 1 | 2 | 3 | 4 | 5 | undefined
//│    = 3

// New 
class Foo(x) 
let f = new Foo(1)
//│ Defined class Foo
//│ Foo: 'x -> (Foo with {x: 'x})
//│    = [Function: Foo1]
//│ f: Foo & {x: 1}
//│  = Foo { x: 1 }

// If 
if true then 1 else 2
//│ res: 1 | 2
//│    = 1

// TyApp 
qq_int: Code<int>
//│ ╔══[ERROR] identifier not found: qq_int
//│ ║  l.182: 	qq_int: Code<int>
//│ ╙──       	^^^^^^
//│ res: code & {Code#T <: int}
//│ Code generation encountered an error:
//│   unresolved symbol qq_int

// Quoted 
let d = code"code"3""
//│ d: Code
//│ Code generation encountered an error:
//│   saw another one of myself

// Unquoted 

// Literals?
let b = code"10"
//│ b: Code
//│  = [ '10' ]

let c = code"true"
//│ c: Code
//│  = [ '&', 'true', 'Symbol(true)' ]
