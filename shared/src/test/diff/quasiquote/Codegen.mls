:NewParser
:ge

// App
let code_app = code"3 + 2 * 1"
//│ code_app: code & {Code#C = anything, Code#T <: int}
//│         = [ 'App', '+', [ 3 ], [ 'App', '*', [ 2 ], [ 1 ] ] ]


let fx = code"x + 1"
//│ fx: code & {Code#C = anything, Code#T <: int}
//│   = [ 'App', '+', [ 'Var', [ 'FreeVar', 'x' ] ], [ 1 ] ]

let q = code"let x = 2; ${fx}"
//│ ╔══[ERROR] Type mismatch. Required: Code, found: [Code[α38',x.type32'39']]
//│ ║  l.14: 	let q = code"let x = 2; ${fx}"
//│ ╙──      	                          ^^
//│ q: code & {Code#C = anything, Code#T <: error}
//│  = [
//│      'Let',
//│      'x',
//│      Symbol(x),
//│      [ 2 ],
//│      [ 'Unquoted', [ 'App', '+', [Array], [Array] ] ]
//│    ]

run(q)
//│ res: error
//│    = 3

// Lam  
let code_lam = code"let lambda = (x) => x; lambda(3)"
//│ code_lam: code & {Code#C = anything, Code#T <: 3}
//│         = [
//│             'Let',
//│             'lambda',
//│             Symbol(lambda),
//│             [ [Function (anonymous)] ],
//│             [ 'Fun', [ 'Var', Symbol(lambda) ], [ 'Tup', [Array] ] ]
//│           ]

run(code_lam)
//│ res: 3
//│    = 3

let test = (x) => x * 3
//│ test: int -> int
//│     = [Function: test]

let code_app3 = code"test(4)"
//│ code_app3: code & {Code#C = anything, Code#T <: int}
//│          = [ 'Fun', [ 'Var', [ 'FreeVar', 'test' ] ], [ 'Tup', [ [Array] ] ] ]
 
run(code_app3)
//│ res: int
//│    = 12

let code_lam2 = code"let f = x => x; let y = 100; f(y)"
run(code_lam2)
//│ code_lam2: code & {Code#C = anything, Code#T <: 100}
//│          = [
//│              'Let',
//│              'f',
//│              Symbol(f),
//│              [ [Function (anonymous)] ],
//│              [ 'Let', 'y', Symbol(y), [ 100 ], [ 'Fun', [Array], [Array] ] ]
//│            ]
//│ res: 100
//│    = 100

// If
let code_if = code"if false then 1 else 2 + 3"
//│ code_if: code & {Code#C = anything, Code#T <: int}
//│        = [ 'If', false, [ 1 ], [ 'App', '+', [ 2 ], [ 3 ] ] ]

let code_lambda_if = code"let z = x => x; z(if true then 1 else 2)"
run(code_lambda_if)
//│ code_lambda_if: code & {Code#C = anything, Code#T <: 1 | 2}
//│               = [
//│                   'Let',
//│                   'z',
//│                   Symbol(z),
//│                   [ [Function (anonymous)] ],
//│                   [ 'Fun', [ 'Var', Symbol(z) ], [ 'Tup', [Array] ] ]
//│                 ]
//│ res: 1 | 2
//│    = 2

run(code_if)
//│ res: int
//│    = 5

// Tup 
let code_tup = code"(1,2,3)"
//│ code_tup: code & {Code#C = anything, Code#T <: (1, 2, 3,)}
//│         = [ 'Tup', [ [ 1 ], [ 2 ], [ 3 ] ] ]

run(code_tup)
//│ res: (1, 2, 3,)
//│    = [ 1, 2, 3 ]

let code_tup2 = code"let x = 3; let y = 5; (x, y)"
//│ code_tup2: code & {Code#C = anything, Code#T <: (3, 5,)}
//│          = [
//│              'Let',
//│              'x',
//│              Symbol(x),
//│              [ 3 ],
//│              [ 'Let', 'y', Symbol(y), [ 5 ], [ 'Tup', [Array] ] ]
//│            ]

run(code_tup2)
//│ res: (3, 5,)
//│    = [ 3, 5 ]

// Rcd 
let code_rcd = code"let r = { x: 10}; r.x"
//│ code_rcd: code & {Code#C = anything, Code#T <: 10}
//│         = [
//│             'Let',
//│             'r',
//│             Symbol(r),
//│             [ { x: 10 } ],
//│             [ 'Sel', [ 'Var', Symbol(r) ], 'x' ]
//│           ]

run(code_rcd)
//│ res: 10
//│    = 10

// Let 
let code_let1 = code"let x = 100; let y = 10; y + x"
//│ code_let1: code & {Code#C = anything, Code#T <: int}
//│          = [
//│              'Let',
//│              'x',
//│              Symbol(x),
//│              [ 100 ],
//│              [ 'Let', 'y', Symbol(y), [ 10 ], [ 'App', '+', [Array], [Array] ] ]
//│            ]

let code_let2 = code"let x = (y) => y * 3; let y = (z) => z + 2; x(3)"
//│ code_let2: code & {Code#C = anything, Code#T <: int}
//│          = [
//│              'Let',
//│              'x',
//│              Symbol(x),
//│              [ [Function (anonymous)] ],
//│              [
//│                'Let',
//│                'y',
//│                Symbol(y),
//│                [ [Function (anonymous)] ],
//│                [ 'Fun', [Array], [Array] ]
//│              ]
//│            ]


let code_let3 = code"let x = 3; x + x"
//│ code_let3: code & {Code#C = anything, Code#T <: int}
//│          = [
//│              'Let',
//│              'x',
//│              Symbol(x),
//│              [ 3 ],
//│              [ 'App', '+', [ 'Var', Symbol(x) ], [ 'Var', Symbol(x) ] ]
//│            ]


// Subs 
let code_subs = code"let a = (1, 2); a[0]"
//│ code_subs: code & {Code#C = anything, Code#T <: 1 | 2 | undefined}
//│          = [
//│              'Let',
//│              'a',
//│              Symbol(a),
//│              [ 'Tup', [ [Array], [Array] ] ],
//│              [ 'Subs', [ 'Var', Symbol(a) ], [ 0 ] ]
//│            ]

run(code_subs)
//│ res: 1 | 2 | undefined
//│    = 1

let code_subs3 = code"(1,2,3)[1]"
//│ code_subs3: code & {Code#C = anything, Code#T <: 1 | 2 | 3 | undefined}
//│           = [ 'Subs', [ 'Tup', [ [Array], [Array], [Array] ] ], [ 1 ] ]

run(code_subs3)
//│ res: 1 | 2 | 3 | undefined
//│    = 2
