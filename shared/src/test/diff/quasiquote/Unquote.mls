// :NewParser
:NewParser
:dp
code"1 +1"
//│ |code"|1| |+|1|"|
//│ ? block		inspects |code"|1| |+|1|"|    [at l.238]
//│ @ exprOrIf(0,false)    [at l.358]
//│ │ ? exprOrIf		inspects |code"|1| |+|1|"|    [at l.403]
//│ │ ! exprOrIf		consumes |code"|1| |+|1|"|    [at l.436]
//│ │ > @ expr(0,true)    [at l.437]
//│ │ > │ @ exprOrIf(0,true)    [at l.391]
//│ │ > │ │ ? exprOrIf		inspects |1| |+|1|    [at l.403]
//│ │ > │ │ ! exprOrIf		consumes |1|    [at l.416]
//│ │ > │ │ @ exprCont(0,`1`,false)    [at l.417]
//│ │ > │ │ │ ? exprCont		inspects | |+|1|    [at l.571]
//│ │ > │ │ │ ! exprCont		consumes | |    [at l.596]
//│ │ > │ │ │ @ exprCont(0,`1`,false)    [at l.597]
//│ │ > │ │ │ │ ? exprCont		inspects |+|1|    [at l.571]
//│ │ > │ │ │ │ ! exprCont		consumes |+|    [at l.573]
//│ │ > │ │ │ │ @ exprOrIf(18,true)    [at l.576]
//│ │ > │ │ │ │ │ ? exprOrIf		inspects |1|    [at l.403]
//│ │ > │ │ │ │ │ ! exprOrIf		consumes |1|    [at l.416]
//│ │ > │ │ │ │ │ @ exprCont(18,`1`,false)    [at l.417]
//│ │ > │ │ │ │ │ │ ? exprCont		inspects ||    [at l.571]
//│ │ > │ │ │ │ │ = Right(1)
//│ │ > │ │ │ │ = Right(1)
//│ │ > │ │ │ │ @ exprCont(0,`+ (1,) (1,)`,false)    [at l.588]
//│ │ > │ │ │ │ │ ? exprCont		inspects ||    [at l.571]
//│ │ > │ │ │ │ = Right(+ (1,) (1,))
//│ │ > │ │ │ = Right(+ (1,) (1,))
//│ │ > │ │ = Right(+ (1,) (1,))
//│ │ > │ = Right(+ (1,) (1,))
//│ │ > = + (1,) (1,)
//│ │ > ? concludeWith		inspects ||    [at l.71]
//│ │ > Concluded with + (1,) (1,)
//│ = Right(Quoted' + (1,) (1,) ')
//│ ? block		inspects ||    [at l.360]
//│ ? parseAll		inspects ||    [at l.60]
//│ Parsed: Quoted' + (1,) (1,) ';
//│ res: Code[int, ?]
//│    = [ 'App', '+', [ '_', 1 ], [ '_', 1 ] ]

:NewParser
:dp
code"1
 +1"
//│ |code"|1|→|+|1|←|"|
//│ ? block		inspects |code"|1|→|+|1|←|"|    [at l.238]
//│ @ exprOrIf(0,false)    [at l.358]
//│ │ ? exprOrIf		inspects |code"|1|→|+|1|←|"|    [at l.403]
//│ │ ! exprOrIf		consumes |code"|1|→|+|1|←|"|    [at l.436]
//│ │ > @ expr(0,true)    [at l.437]
//│ │ > │ @ exprOrIf(0,true)    [at l.391]
//│ │ > │ │ ? exprOrIf		inspects |1|→|+|1|←|    [at l.403]
//│ │ > │ │ ! exprOrIf		consumes |1|    [at l.416]
//│ │ > │ │ @ exprCont(0,`1`,false)    [at l.417]
//│ │ > │ │ │ ? exprCont		inspects |→|+|1|←|    [at l.571]
//│ │ > │ │ │ ! exprCont		consumes |→|+|1|←|    [at l.611]
//│ │ > │ │ │ > @ opBlock(`1`,+)    [at l.612]
//│ │ > │ │ │ > │ @ exprOrIf(0,true)    [at l.726]
//│ │ > │ │ │ > │ │ ? exprOrIf		inspects |1|    [at l.403]
//│ │ > │ │ │ > │ │ ! exprOrIf		consumes |1|    [at l.416]
//│ │ > │ │ │ > │ │ @ exprCont(0,`1`,false)    [at l.417]
//│ │ > │ │ │ > │ │ │ ? exprCont		inspects ||    [at l.571]
//│ │ > │ │ │ > │ │ = Right(1)
//│ │ > │ │ │ > │ = Right(1)
//│ │ > │ │ │ > │ ? opBlock		inspects ||    [at l.731]
//│ │ > │ │ │ > = Right(+ 1 1)
//│ │ > │ │ │ > ? concludeWith		inspects ||    [at l.71]
//│ │ > │ │ │ > Concluded with Right(+ 1 1)
//│ │ > │ │ = Right(+ 1 1)
//│ │ > │ = Right(+ 1 1)
//│ │ > = + 1 1
//│ │ > ? concludeWith		inspects ||    [at l.71]
//│ │ > Concluded with + 1 1
//│ = Right(Quoted' + 1 1 ')
//│ ? block		inspects ||    [at l.360]
//│ ? parseAll		inspects ||    [at l.60]
//│ Parsed: Quoted' + 1 1 ';
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.44: 	code"1
//│ ║        	     ^
//│ ║  l.45: 	 +1"
//│ ║        	^^
//│ ╟── integer literal of type `1` is not a 1-element tuple
//│ ║  l.44: 	code"1
//│ ╙──      	     ^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.44: 	code"1
//│ ║        	     ^
//│ ║  l.45: 	 +1"
//│ ║        	^^^
//│ ╟── integer literal of type `1` is not a 1-element tuple
//│ ║  l.45: 	 +1"
//│ ╙──      	  ^
//│ res: Code[error | int, ?]
//│ Code generation encountered an error:
//│   missing implementation: App(App(Var(+), IntLit(1)), IntLit(1))

:NewParser
:ParseOnly
:dp
code"z + 1"
//│ |code"|z| |+| |1|"|
//│ ? block		inspects |code"|z| |+| |1|"|    [at l.238]
//│ @ exprOrIf(0,false)    [at l.358]
//│ │ ? exprOrIf		inspects |code"|z| |+| |1|"|    [at l.403]
//│ │ ! exprOrIf		consumes |code"|z| |+| |1|"|    [at l.436]
//│ │ > @ expr(0,true)    [at l.437]
//│ │ > │ @ exprOrIf(0,true)    [at l.391]
//│ │ > │ │ ? exprOrIf		inspects |z| |+| |1|    [at l.403]
//│ │ > │ │ ! exprOrIf		consumes |z|    [at l.419]
//│ │ > │ │ @ exprCont(0,`z`,false)    [at l.420]
//│ │ > │ │ │ ? exprCont		inspects | |+| |1|    [at l.571]
//│ │ > │ │ │ ! exprCont		consumes | |    [at l.596]
//│ │ > │ │ │ @ exprCont(0,`z`,false)    [at l.597]
//│ │ > │ │ │ │ ? exprCont		inspects |+| |1|    [at l.571]
//│ │ > │ │ │ │ ! exprCont		consumes |+|    [at l.573]
//│ │ > │ │ │ │ @ exprOrIf(18,true)    [at l.576]
//│ │ > │ │ │ │ │ ? exprOrIf		inspects | |1|    [at l.403]
//│ │ > │ │ │ │ │ ! exprOrIf		consumes | |    [at l.405]
//│ │ > │ │ │ │ │ @ exprOrIf(18,true)    [at l.406]
//│ │ > │ │ │ │ │ │ ? exprOrIf		inspects |1|    [at l.403]
//│ │ > │ │ │ │ │ │ ! exprOrIf		consumes |1|    [at l.416]
//│ │ > │ │ │ │ │ │ @ exprCont(18,`1`,false)    [at l.417]
//│ │ > │ │ │ │ │ │ │ ? exprCont		inspects ||    [at l.571]
//│ │ > │ │ │ │ │ │ = Right(1)
//│ │ > │ │ │ │ │ = Right(1)
//│ │ > │ │ │ │ = Right(1)
//│ │ > │ │ │ │ @ exprCont(0,`+ (z,) (1,)`,false)    [at l.588]
//│ │ > │ │ │ │ │ ? exprCont		inspects ||    [at l.571]
//│ │ > │ │ │ │ = Right(+ (z,) (1,))
//│ │ > │ │ │ = Right(+ (z,) (1,))
//│ │ > │ │ = Right(+ (z,) (1,))
//│ │ > │ = Right(+ (z,) (1,))
//│ │ > = + (z,) (1,)
//│ │ > ? concludeWith		inspects ||    [at l.71]
//│ │ > Concluded with + (z,) (1,)
//│ = Right(Quoted' + (z,) (1,) ')
//│ ? block		inspects ||    [at l.360]
//│ ? parseAll		inspects ||    [at l.60]
//│ Parsed: {Quoted' + (z,) (1,) '}
//│ Parsed: 

:NewParser
:ParseOnly
:dp
code"z +
1"
//│ |code"|z| |+|↵|1|"|
//│ ? block		inspects |code"|z| |+|↵|1|"|    [at l.238]
//│ @ exprOrIf(0,false)    [at l.358]
//│ │ ? exprOrIf		inspects |code"|z| |+|↵|1|"|    [at l.403]
//│ │ ! exprOrIf		consumes |code"|z| |+|↵|1|"|    [at l.436]
//│ │ > @ expr(0,true)    [at l.437]
//│ │ > │ @ exprOrIf(0,true)    [at l.391]
//│ │ > │ │ ? exprOrIf		inspects |z| |+|↵|1|    [at l.403]
//│ │ > │ │ ! exprOrIf		consumes |z|    [at l.419]
//│ │ > │ │ @ exprCont(0,`z`,false)    [at l.420]
//│ │ > │ │ │ ? exprCont		inspects | |+|↵|1|    [at l.571]
//│ │ > │ │ │ ! exprCont		consumes | |    [at l.596]
//│ │ > │ │ │ @ exprCont(0,`z`,false)    [at l.597]
//│ │ > │ │ │ │ ? exprCont		inspects |+|↵|1|    [at l.571]
//│ │ > │ │ │ │ ! exprCont		consumes |+|    [at l.573]
//│ │ > │ │ │ │ @ exprOrIf(18,true)    [at l.576]
//│ │ > │ │ │ │ │ ? exprOrIf		inspects |↵|1|    [at l.403]
//│ ╔══[PARSE ERROR] Unexpected newline in expression position
//│ ║  l.129: 	code"z +
//│ ║         	        ^
//│ ║  l.130: 	1"
//│ ╙──       	
//│ │ > │ │ │ │ │ ! exprOrIf		consumes |↵|    [at l.562]
//│ │ > │ │ │ │ │ @ exprOrIf(18,true)    [at l.563]
//│ │ > │ │ │ │ │ │ ? exprOrIf		inspects |1|    [at l.403]
//│ │ > │ │ │ │ │ │ ! exprOrIf		consumes |1|    [at l.416]
//│ │ > │ │ │ │ │ │ @ exprCont(18,`1`,false)    [at l.417]
//│ │ > │ │ │ │ │ │ │ ? exprCont		inspects ||    [at l.571]
//│ │ > │ │ │ │ │ │ = Right(1)
//│ │ > │ │ │ │ │ = Right(1)
//│ │ > │ │ │ │ = Right(1)
//│ │ > │ │ │ │ @ exprCont(0,`+ (z,) (1,)`,false)    [at l.588]
//│ │ > │ │ │ │ │ ? exprCont		inspects ||    [at l.571]
//│ │ > │ │ │ │ = Right(+ (z,) (1,))
//│ │ > │ │ │ = Right(+ (z,) (1,))
//│ │ > │ │ = Right(+ (z,) (1,))
//│ │ > │ = Right(+ (z,) (1,))
//│ │ > = + (z,) (1,)
//│ │ > ? concludeWith		inspects ||    [at l.71]
//│ │ > Concluded with + (z,) (1,)
//│ = Right(Quoted' + (z,) (1,) ')
//│ ? block		inspects ||    [at l.360]
//│ ? parseAll		inspects ||    [at l.60]
//│ Parsed: {Quoted' + (z,) (1,) '}
//│ Parsed: 

:d
:ne
:NoJS
fun f(x, y) = code"[${x}, ${y}]"
//│ |#fun| |f|(|x|,| |y|)| |#=| |code"|[|${|x|}|,| |${|y|}|]|"|
//│ Parsed: {fun f = x, y, => Quoted' '(' Unquote' x ', Unquote' y ', ')' '}

let x = code"y"
//│ |#let| |x| |#=| |code"|y|"|
//│ Parsed: {let x = Quoted' y '}

let c = f(x, x)
//│ |#let| |c| |#=| |f|(|x|,| |x|)|
//│ Parsed: {let c = f (x, x,)}

code"y"
y => code"[${code"y"}, ${code"y"}]"
//│ |code"|y|"|↵|y| |=>| |code"|[|${|code"|y|"|}|,| |${|code"|y|"|}|]|"|
//│ Parsed: {Quoted' y '; y, => Quoted' '(' Unquote' Quoted' y ' ', Unquote' Quoted' y ' ', ')' '}

code"y => ${c}"
//│ |code"|y| |=>| |${|c|}|"|
//│ Parsed: {Quoted' y, => Unquote' c ' '}


fun f(x, y) = [code"[${x}, ${y}]", x, y]
//│ |#fun| |f|(|x|,| |y|)| |#=| |[|code"|[|${|x|}|,| |${|y|}|]|"|,| |x|,| |y|]|
//│ Parsed: {fun f = x, y, => '(' Quoted' '(' Unquote' x ', Unquote' y ', ')' ', x, y, ')'}

let a: Code<int, {z: int}>
//│ |#let| |a|#:| |Code|‹|int|,| |{|z|#:| |int|}|›|
//│ Parsed: {let a: [] -> Code[int, {z: int}]}


fun f(x) = x
//│ |#fun| |f|(|x|)| |#=| |x|
//│ Parsed: {fun f = x, => x}

code"f(0)"
//│ |code"|f|(|0|)|"|
//│ Parsed: {Quoted' f (0,) '}
code"${a + b} + 10"
//│ |code"|${|a| |+| |b|}| |+| |10|"|
//│ Parsed: {Quoted' + (Unquote' + (a,) (b,) ',) (10,) '}

:NewParser
code"let a = 1; let b = 3; ${code"b + ${code"1"}"} + 1"
//│ |code"|#let| |a| |#=| |1|#;| |#let| |b| |#=| |3|#;| |${|code"|b| |+| |${|code"|1|"|}|"|}| |+| |1|"|
//│ Parsed: {Quoted' let a = 1 in let b = 3 in + (Unquote' Quoted' + (b,) (Unquote' Quoted' 1 ' ',) ' ',) (1,) '}


:NewParser
:d
:ne
:NoJS
let n = 1
code"${Const(n)} + 1"
//│ |#let| |n| |#=| |1|↵|code"|${|Const|(|n|)|}| |+| |1|"|
//│ Parsed: {let n = 1; Quoted' + (Unquote' Const (n,) ',) (1,) '}

:NewParser
:dp
code"let a = 1; let b = 3"
//│ |code"|#let| |a| |#=| |1|#;| |#let| |b| |#=| |3|"|
//│ ? block		inspects |code"|#let| |a| |#=| |1|#;| |#let| |b| |#=| |3|"|    [at l.238]
//│ @ exprOrIf(0,false)    [at l.358]
//│ │ ? exprOrIf		inspects |code"|#let| |a| |#=| |1|#;| |#let| |b| |#=| |3|"|    [at l.403]
//│ │ ! exprOrIf		consumes |code"|#let| |a| |#=| |1|#;| |#let| |b| |#=| |3|"|    [at l.436]
//│ │ > @ expr(0,true)    [at l.437]
//│ │ > │ @ exprOrIf(0,true)    [at l.391]
//│ │ > │ │ ? exprOrIf		inspects |#let| |a| |#=|...    [at l.403]
//│ │ > │ │ ! exprOrIf		consumes |#let|    [at l.461]
//│ │ > │ │ ? bindings		inspects | |a| |#=| |...    [at l.889]
//│ │ > │ │ ! bindings		consumes | |    [at l.891]
//│ │ > │ │ ? bindings		inspects |a| |#=| |1|...    [at l.889]
//│ │ > │ │ ! bindings		consumes |a|    [at l.896]
//│ │ > │ │ @ skip(KEYWORD(=),Set(SPACE),false)    [at l.156]
//│ │ > │ │ │ ? skip_res		inspects | |#=| |1|#;|...    [at l.158]
//│ │ > │ │ │ ! skip_res		consumes | |    [at l.161]
//│ │ > │ │ │ @ skip(KEYWORD(=),Set(SPACE),false)    [at l.156]
//│ │ > │ │ │ │ ? skip_res		inspects |#=| |1|#;| |...    [at l.158]
//│ │ > │ │ │ │ ! skip		consumes |#=|    [at l.174]
//│ │ > │ │ │ = (true,Some(Loc(11,12,quasiquote/Unquote:+239)))
//│ │ > │ │ @ expr(0,true)    [at l.898]
//│ │ > │ │ │ @ exprOrIf(0,true)    [at l.391]
//│ │ > │ │ │ │ ? exprOrIf		inspects | |1|#;| |#let|...    [at l.403]
//│ │ > │ │ │ │ ! exprOrIf		consumes | |    [at l.405]
//│ │ > │ │ │ │ @ exprOrIf(0,true)    [at l.406]
//│ │ > │ │ │ │ │ ? exprOrIf		inspects |1|#;| |#let| |...    [at l.403]
//│ │ > │ │ │ │ │ ! exprOrIf		consumes |1|    [at l.416]
//│ │ > │ │ │ │ │ @ exprCont(0,`1`,false)    [at l.417]
//│ │ > │ │ │ │ │ │ ? exprCont		inspects |#;| |#let| |b|...    [at l.571]
//│ │ > │ │ │ │ │ = Right(1)
//│ │ > │ │ │ │ = Right(1)
//│ │ > │ │ │ = Right(1)
//│ │ > │ │ = 1
//│ │ > │ │ ? bindings		inspects |#;| |#let| |b|...    [at l.905]
//│ │ > │ │ ? yeetSpaces		inspects |#;| |#let| |b|...    [at l.367]
//│ │ > │ │ ! body		consumes |#;|    [at l.465]
//│ │ > │ │ @ exprOrIf(0,true)    [at l.466]
//│ │ > │ │ │ ? exprOrIf		inspects | |#let| |b| |...    [at l.403]
//│ │ > │ │ │ ! exprOrIf		consumes | |    [at l.405]
//│ │ > │ │ │ @ exprOrIf(0,true)    [at l.406]
//│ │ > │ │ │ │ ? exprOrIf		inspects |#let| |b| |#=|...    [at l.403]
//│ │ > │ │ │ │ ! exprOrIf		consumes |#let|    [at l.461]
//│ │ > │ │ │ │ ? bindings		inspects | |b| |#=| |...    [at l.889]
//│ │ > │ │ │ │ ! bindings		consumes | |    [at l.891]
//│ │ > │ │ │ │ ? bindings		inspects |b| |#=| |3|    [at l.889]
//│ │ > │ │ │ │ ! bindings		consumes |b|    [at l.896]
//│ │ > │ │ │ │ @ skip(KEYWORD(=),Set(SPACE),false)    [at l.156]
//│ │ > │ │ │ │ │ ? skip_res		inspects | |#=| |3|    [at l.158]
//│ │ > │ │ │ │ │ ! skip_res		consumes | |    [at l.161]
//│ │ > │ │ │ │ │ @ skip(KEYWORD(=),Set(SPACE),false)    [at l.156]
//│ │ > │ │ │ │ │ │ ? skip_res		inspects |#=| |3|    [at l.158]
//│ │ > │ │ │ │ │ │ ! skip		consumes |#=|    [at l.174]
//│ │ > │ │ │ │ │ = (true,Some(Loc(22,23,quasiquote/Unquote:+239)))
//│ │ > │ │ │ │ @ expr(0,true)    [at l.898]
//│ │ > │ │ │ │ │ @ exprOrIf(0,true)    [at l.391]
//│ │ > │ │ │ │ │ │ ? exprOrIf		inspects | |3|    [at l.403]
//│ │ > │ │ │ │ │ │ ! exprOrIf		consumes | |    [at l.405]
//│ │ > │ │ │ │ │ │ @ exprOrIf(0,true)    [at l.406]
//│ │ > │ │ │ │ │ │ │ ? exprOrIf		inspects |3|    [at l.403]
//│ │ > │ │ │ │ │ │ │ ! exprOrIf		consumes |3|    [at l.416]
//│ │ > │ │ │ │ │ │ │ @ exprCont(0,`3`,false)    [at l.417]
//│ │ > │ │ │ │ │ │ │ │ ? exprCont		inspects ||    [at l.571]
//│ │ > │ │ │ │ │ │ │ = Right(3)
//│ │ > │ │ │ │ │ │ = Right(3)
//│ │ > │ │ │ │ │ = Right(3)
//│ │ > │ │ │ │ = 3
//│ │ > │ │ │ │ ? bindings		inspects ||    [at l.905]
//│ │ > │ │ │ │ ? yeetSpaces		inspects ||    [at l.367]
//│ │ > │ │ │ = Right(let b = 3 in undefined)
//│ │ > │ │ = Right(let b = 3 in undefined)
//│ │ > │ = Right(let a = 1 in let b = 3 in undefined)
//│ │ > = let a = 1 in let b = 3 in undefined
//│ │ > ? concludeWith		inspects ||    [at l.71]
//│ │ > Concluded with let a = 1 in let b = 3 in undefined
//│ = Right(Quoted' let a = 1 in let b = 3 in undefined ')
//│ ? block		inspects ||    [at l.360]
//│ ? parseAll		inspects ||    [at l.60]
//│ Parsed: {Quoted' let a = 1 in let b = 3 in undefined '}
//│ Parsed: 

:NewParser
:dp
code"let a = 1; 
let b = 3"
//│ |code"|#let| |a| |#=| |1|#;| |↵|#let| |b| |#=| |3|"|
//│ ? block		inspects |code"|#let| |a| |#=| |1|#;| |↵|#let| |b| |#=| |3|"|    [at l.238]
//│ @ exprOrIf(0,false)    [at l.358]
//│ │ ? exprOrIf		inspects |code"|#let| |a| |#=| |1|#;| |↵|#let| |b| |#=| |3|"|    [at l.403]
//│ │ ! exprOrIf		consumes |code"|#let| |a| |#=| |1|#;| |↵|#let| |b| |#=| |3|"|    [at l.436]
//│ │ > @ expr(0,true)    [at l.437]
//│ │ > │ @ exprOrIf(0,true)    [at l.391]
//│ │ > │ │ ? exprOrIf		inspects |#let| |a| |#=|...    [at l.403]
//│ │ > │ │ ! exprOrIf		consumes |#let|    [at l.461]
//│ │ > │ │ ? bindings		inspects | |a| |#=| |...    [at l.889]
//│ │ > │ │ ! bindings		consumes | |    [at l.891]
//│ │ > │ │ ? bindings		inspects |a| |#=| |1|...    [at l.889]
//│ │ > │ │ ! bindings		consumes |a|    [at l.896]
//│ │ > │ │ @ skip(KEYWORD(=),Set(SPACE),false)    [at l.156]
//│ │ > │ │ │ ? skip_res		inspects | |#=| |1|#;|...    [at l.158]
//│ │ > │ │ │ ! skip_res		consumes | |    [at l.161]
//│ │ > │ │ │ @ skip(KEYWORD(=),Set(SPACE),false)    [at l.156]
//│ │ > │ │ │ │ ? skip_res		inspects |#=| |1|#;| |...    [at l.158]
//│ │ > │ │ │ │ ! skip		consumes |#=|    [at l.174]
//│ │ > │ │ │ = (true,Some(Loc(11,12,quasiquote/Unquote:+322)))
//│ │ > │ │ @ expr(0,true)    [at l.898]
//│ │ > │ │ │ @ exprOrIf(0,true)    [at l.391]
//│ │ > │ │ │ │ ? exprOrIf		inspects | |1|#;| |↵|...    [at l.403]
//│ │ > │ │ │ │ ! exprOrIf		consumes | |    [at l.405]
//│ │ > │ │ │ │ @ exprOrIf(0,true)    [at l.406]
//│ │ > │ │ │ │ │ ? exprOrIf		inspects |1|#;| |↵|#let|...    [at l.403]
//│ │ > │ │ │ │ │ ! exprOrIf		consumes |1|    [at l.416]
//│ │ > │ │ │ │ │ @ exprCont(0,`1`,false)    [at l.417]
//│ │ > │ │ │ │ │ │ ? exprCont		inspects |#;| |↵|#let| |...    [at l.571]
//│ │ > │ │ │ │ │ = Right(1)
//│ │ > │ │ │ │ = Right(1)
//│ │ > │ │ │ = Right(1)
//│ │ > │ │ = 1
//│ │ > │ │ ? bindings		inspects |#;| |↵|#let| |...    [at l.905]
//│ │ > │ │ ? yeetSpaces		inspects |#;| |↵|#let| |...    [at l.367]
//│ │ > │ │ ! body		consumes |#;|    [at l.465]
//│ │ > │ │ @ exprOrIf(0,true)    [at l.466]
//│ │ > │ │ │ ? exprOrIf		inspects | |↵|#let| |b|...    [at l.403]
//│ │ > │ │ │ ! exprOrIf		consumes | |    [at l.405]
//│ │ > │ │ │ @ exprOrIf(0,true)    [at l.406]
//│ │ > │ │ │ │ ? exprOrIf		inspects |↵|#let| |b| |...    [at l.403]
//│ ╔══[PARSE ERROR] Unexpected newline in expression position
//│ ║  l.322: 	code"let a = 1; 
//│ ║         	                ^
//│ ║  l.323: 	let b = 3"
//│ ╙──       	
//│ │ > │ │ │ │ ! exprOrIf		consumes |↵|    [at l.562]
//│ │ > │ │ │ │ @ exprOrIf(0,true)    [at l.563]
//│ │ > │ │ │ │ │ ? exprOrIf		inspects |#let| |b| |#=|...    [at l.403]
//│ │ > │ │ │ │ │ ! exprOrIf		consumes |#let|    [at l.461]
//│ │ > │ │ │ │ │ ? bindings		inspects | |b| |#=| |...    [at l.889]
//│ │ > │ │ │ │ │ ! bindings		consumes | |    [at l.891]
//│ │ > │ │ │ │ │ ? bindings		inspects |b| |#=| |3|    [at l.889]
//│ │ > │ │ │ │ │ ! bindings		consumes |b|    [at l.896]
//│ │ > │ │ │ │ │ @ skip(KEYWORD(=),Set(SPACE),false)    [at l.156]
//│ │ > │ │ │ │ │ │ ? skip_res		inspects | |#=| |3|    [at l.158]
//│ │ > │ │ │ │ │ │ ! skip_res		consumes | |    [at l.161]
//│ │ > │ │ │ │ │ │ @ skip(KEYWORD(=),Set(SPACE),false)    [at l.156]
//│ │ > │ │ │ │ │ │ │ ? skip_res		inspects |#=| |3|    [at l.158]
//│ │ > │ │ │ │ │ │ │ ! skip		consumes |#=|    [at l.174]
//│ │ > │ │ │ │ │ │ = (true,Some(Loc(23,24,quasiquote/Unquote:+322)))
//│ │ > │ │ │ │ │ @ expr(0,true)    [at l.898]
//│ │ > │ │ │ │ │ │ @ exprOrIf(0,true)    [at l.391]
//│ │ > │ │ │ │ │ │ │ ? exprOrIf		inspects | |3|    [at l.403]
//│ │ > │ │ │ │ │ │ │ ! exprOrIf		consumes | |    [at l.405]
//│ │ > │ │ │ │ │ │ │ @ exprOrIf(0,true)    [at l.406]
//│ │ > │ │ │ │ │ │ │ │ ? exprOrIf		inspects |3|    [at l.403]
//│ │ > │ │ │ │ │ │ │ │ ! exprOrIf		consumes |3|    [at l.416]
//│ │ > │ │ │ │ │ │ │ │ @ exprCont(0,`3`,false)    [at l.417]
//│ │ > │ │ │ │ │ │ │ │ │ ? exprCont		inspects ||    [at l.571]
//│ │ > │ │ │ │ │ │ │ │ = Right(3)
//│ │ > │ │ │ │ │ │ │ = Right(3)
//│ │ > │ │ │ │ │ │ = Right(3)
//│ │ > │ │ │ │ │ = 3
//│ │ > │ │ │ │ │ ? bindings		inspects ||    [at l.905]
//│ │ > │ │ │ │ │ ? yeetSpaces		inspects ||    [at l.367]
//│ │ > │ │ │ │ = Right(let b = 3 in undefined)
//│ │ > │ │ │ = Right(let b = 3 in undefined)
//│ │ > │ │ = Right(let b = 3 in undefined)
//│ │ > │ = Right(let a = 1 in let b = 3 in undefined)
//│ │ > = let a = 1 in let b = 3 in undefined
//│ │ > ? concludeWith		inspects ||    [at l.71]
//│ │ > Concluded with let a = 1 in let b = 3 in undefined
//│ = Right(Quoted' let a = 1 in let b = 3 in undefined ')
//│ ? block		inspects ||    [at l.360]
//│ ? parseAll		inspects ||    [at l.60]
//│ Parsed: {Quoted' let a = 1 in let b = 3 in undefined '}
//│ Parsed: 



:NewParser
:d
code"let x = 1; ${y
}
"
//│ |code"|#let| |x| |#=| |1|#;| |${|y|↵|}|↵|"|
//│ Parsed: {Quoted' let x = 1 in Unquote' y ' '}

:NewParser
:d
:ge
class Foo(
x
) 
let f = new Foo(
5)
//│ |#class| |Foo|(|↵|x|↵|)| |↵|#let| |f| |#=| |#new| |Foo|(|↵|5|)|
//│ ╔══[PARSE ERROR] Unexpected identifier here
//│ ║  l.427: 	x
//│ ╙──       	^
//│ ╔══[PARSE ERROR] Unexpected literal here
//│ ║  l.430: 	5)
//│ ╙──       	^
//│ Parsed: {class Foo() {}; let f = new Foo() {}}
