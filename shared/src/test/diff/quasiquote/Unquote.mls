:NewParser
:d
:ne
:NoJS
code"a + b"
//│ 0. Typing term Quoted' + (a,) (b,) '
//│ | 0. Typing term + (a,) (b,)
//│ | | 0. Typing term + (a,)
//│ | | | 0. Typing term +
//│ | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | 0. Typing term a,
//│ | | | | 0. Typing term a
//│ | | | | 0. : a.type27
//│ | | | 0. : (a.type27,)
//│ | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (a.type27 -> α28)
//│ | | |   where 
//│ | | | C (int<number> -> (int<number> -> int<number>)) <! (a.type27 -> α28)    (0)
//│ | | | | C (a.type27,) <! (int<number>,)    (1)
//│ | | | | | C a.type27 <! int<number>    (2)
//│ | | | | C (int<number> -> int<number>) <! α28    (3)
//│ | | 0. : α28
//│ | | 0. Typing term b,
//│ | | | 0. Typing term b
//│ | | | 0. : b.type29
//│ | | 0. : (b.type29,)
//│ | | CONSTRAIN α28 <! (b.type29 -> α30)
//│ | |   where 
//│ 		α28 :> (int<number> -> int<number>)
//│ | | C α28 <! (b.type29 -> α30)    (0)
//│ | | | C (int<number> -> int<number>) <! (b.type29 -> α30)    (1)
//│ | | | | C (b.type29,) <! (int<number>,)    (2)
//│ | | | | | C b.type29 <! int<number>    (3)
//│ | | | | C int<number> <! α30    (4)
//│ | 0. : α30
//│ 0. : Code[α30,(a.type27 & b.type29)]
//│ ⬤ Typed as: Code[α30,(a.type27 & b.type29)]
//│  where: 
//│ 		a.type27 <: int<number>
//│ 		b.type29 <: int<number>
//│ 		α30 :> int<number>
//│ res: Code[int, nothing]

:NewParser
:d
:ne
:NoJS
code"let a = 1; ${code"b + ${code"1"}"} + 1"
//│ 0. Typing term Quoted' let a = 1 in + (Unquote' Quoted' + (b,) (Unquote' Quoted' 1 ' ',) ' ',) (1,) '
//│ | 0. Typing term let a = 1 in + (Unquote' Quoted' + (b,) (Unquote' Quoted' 1 ' ',) ' ',) (1,)
//│ | | 1. Typing term 1
//│ | | 1. : 1<int,number>
//│ | | 0. Typing term + (Unquote' Quoted' + (b,) (Unquote' Quoted' 1 ' ',) ' ',) (1,)
//│ | | | 0. Typing term + (Unquote' Quoted' + (b,) (Unquote' Quoted' 1 ' ',) ' ',)
//│ | | | | 0. Typing term +
//│ | | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | | 0. Typing term Unquote' Quoted' + (b,) (Unquote' Quoted' 1 ' ',) ' ',
//│ | | | | | 0. Typing term Unquote' Quoted' + (b,) (Unquote' Quoted' 1 ' ',) ' '
//│ | | | | | | 0. Typing term Quoted' + (b,) (Unquote' Quoted' 1 ' ',) '
//│ | | | | | | | 0. Typing term + (b,) (Unquote' Quoted' 1 ' ',)
//│ | | | | | | | | 0. Typing term + (b,)
//│ | | | | | | | | | 0. Typing term +
//│ | | | | | | | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | | | | | | | 0. Typing term b,
//│ | | | | | | | | | | 0. Typing term b
//│ | | | | | | | | | | 0. : b.type34
//│ | | | | | | | | | 0. : (b.type34,)
//│ | | | | | | | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (b.type34 -> α35)
//│ | | | | | | | | |   where 
//│ | | | | | | | | | C (int<number> -> (int<number> -> int<number>)) <! (b.type34 -> α35)    (0)
//│ | | | | | | | | | | C (b.type34,) <! (int<number>,)    (1)
//│ | | | | | | | | | | | C b.type34 <! int<number>    (2)
//│ | | | | | | | | | | C (int<number> -> int<number>) <! α35    (3)
//│ | | | | | | | | 0. : α35
//│ | | | | | | | | 0. Typing term Unquote' Quoted' 1 ' ',
//│ | | | | | | | | | 0. Typing term Unquote' Quoted' 1 ' '
//│ | | | | | | | | | | 0. Typing term Quoted' 1 '
//│ | | | | | | | | | | | 0. Typing term 1
//│ | | | | | | | | | | | 0. : 1<int,number>
//│ | | | | | | | | | | 0. : Code[1<int,number>,Anything]
//│ | | | | | | | | | | check subtypeCode[1<int,number>,Anything]
//│ | | | | | | | | | | true
//│ | | | | | | | | | | true
//│ | | | | | | | | | 0. : Code[1<int,number>,Anything]
//│ | | | | | | | | 0. : (Code[1<int,number>,Anything],)
//│ | | | | | | | | CONSTRAIN α35 <! (Code[1<int,number>,Anything] -> α36)
//│ | | | | | | | |   where 
//│ 		α35 :> (int<number> -> int<number>)
//│ | | | | | | | | C α35 <! (Code[1<int,number>,Anything] -> α36)    (0)
//│ | | | | | | | | | C (int<number> -> int<number>) <! (Code[1<int,number>,Anything] -> α36)    (1)
//│ | | | | | | | | | | C (Code[1<int,number>,Anything],) <! (int<number>,)    (2)
//│ | | | | | | | | | | | C Code[1<int,number>,Anything] <! int<number>    (3)
//│ | | | | | | | | | | | | C (code<> & {Code#T: mut ..1<int,number>, Code#C: mut ..Anything}) <! int<number>    (4)
//│ | | | | | | | | | | | | | ARGH  DNF(code<>{Code#T: mut ..1<int,number>, Code#C: mut ..⊤})  <!  DNF(int<number>{})
//│ | | | | | | | | | | | | | | Consider code<>{Code#T: mut ..1<int,number>, Code#C: mut ..⊤} <: DNF(int<number>{})
//│ | | | | | | | | | | | | | | Possible: List()
//│ | | | | | | | | | | | | | | A  code<>{Code#T: mut ..1<int,number>, Code#C: mut ..⊤}  %  List()  <!  List()  %  ⊥
//│ | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (code<> & {Code#T: mut ..1<int,number>, Code#C: mut ..Anything}) <: int<number>
//│ | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | norm[+] (code<> & {Code#T: mut ..1<int,number>, Code#C: mut ..Anything})
//│ | | | | | | | | | | | | | | | | DNF: DNF(code<>{Code#T: mut ..1<int,number>, Code#C: mut ..Anything})
//│ | | | | | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | | | | | DNF: DNF()
//│ | | | | | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | | | | | norm[+] 1<int,number>
//│ | | | | | | | | | | | | | | | | | DNF: DNF(1<int,number>{})
//│ | | | | | | | | | | | | | | | | ~> 1<int,number>
//│ | | | | | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | | | | | DNF: DNF()
//│ | | | | | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | | | | | norm[+] Anything
//│ | | | | | | | | | | | | | | | | | DNF: DNF()
//│ | | | | | | | | | | | | | | | | ~> ⊤
//│ | | | | | | | | | | | | | | | ~> (code<> & {Code#C: mut ..⊤, Code#T: mut ..1<int,number>})
//│ | | | | | | | | | | | | | | | CONSTRAIN error<> <! α36
//│ | | | | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | | | | C error<> <! α36    (0)
//│ | | | | | | | | | | C int<number> <! α36    (5)
//│ | | | | | | | 0. : α36
//│ | | | | | | 0. : Code[α36,b.type34]
//│ | | | | | | check subtypeCode[α36,b.type34]
//│ | | | | | | true
//│ | | | | | | true
//│ | | | | | 0. : Code[α36,b.type34]
//│ | | | | 0. : (Code[α36,b.type34],)
//│ | | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (Code[α36,b.type34] -> α37)
//│ | | | |   where 
//│ 		b.type34 <: int<number>
//│ 		α36 :> int<number> | error<>
//│ | | | | C (int<number> -> (int<number> -> int<number>)) <! (Code[α36,b.type34] -> α37)    (0)
//│ | | | | | C (Code[α36,b.type34],) <! (int<number>,)    (1)
//│ | | | | | | C Code[α36,b.type34] <! int<number>    (2)
//│ | | | | | | | C (code<> & {Code#T: mut ..α36, Code#C: mut ..b.type34}) <! int<number>    (3)
//│ | | | | | | | | ARGH  DNF(code<>{Code#T: mut ..α36, Code#C: mut ..b.type34})  <!  DNF(int<number>{})
//│ | | | | | | | | | Consider code<>{Code#T: mut ..α36, Code#C: mut ..b.type34} <: DNF(int<number>{})
//│ | | | | | | | | | Possible: List()
//│ | | | | | | | | | A  code<>{Code#T: mut ..α36, Code#C: mut ..b.type34}  %  List()  <!  List()  %  ⊥
//│ | | | | | | | | | | CONSTRAINT FAILURE: (code<> & {Code#T: mut ..α36, Code#C: mut ..b.type34}) <: int<number>
//│ | | | | | | | | | | allVarPols: +α38, +b.type39
//│ | | | | | | | | | | norm[+] (code<> & {Code#T: mut ..α38, Code#C: mut ..b.type39})
//│ | | | | | | | | | | | DNF: DNF(code<>{Code#T: mut ..α38, Code#C: mut ..b.type39})
//│ | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | DNF: DNF()
//│ | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | norm[+] α38
//│ | | | | | | | | | | | | DNF: DNF(α38)
//│ | | | | | | | | | | | | norm[+] int<number>
//│ | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | norm[+] error<>
//│ | | | | | | | | | | | | | DNF: DNF(error<>{})
//│ | | | | | | | | | | | | ~> error<>
//│ | | | | | | | | | | | ~> α38
//│ | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | DNF: DNF()
//│ | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | norm[+] b.type39
//│ | | | | | | | | | | | | DNF: DNF(b.type39)
//│ | | | | | | | | | | | | norm[-] int<number>
//│ | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | ~> b.type39
//│ | | | | | | | | | | ~> (code<> & {Code#C: mut ..b.type39, Code#T: mut ..α38})
//│ | | | | | | | | | | CONSTRAIN error<> <! α37
//│ | | | | | | | | | |   where 
//│ | | | | | | | | | | C error<> <! α37    (0)
//│ | | | | | C (int<number> -> int<number>) <! α37    (4)
//│ | | | 0. : α37
//│ | | | 0. Typing term 1,
//│ | | | | 0. Typing term 1
//│ | | | | 0. : 1<int,number>
//│ | | | 0. : (1<int,number>,)
//│ | | | CONSTRAIN α37 <! (1<int,number> -> α40)
//│ | | |   where 
//│ 		α37 :> (int<number> -> int<number>) | error<>
//│ | | | C α37 <! (1<int,number> -> α40)    (0)
//│ | | | | C (int<number> -> int<number>) <! (1<int,number> -> α40)    (1)
//│ | | | | | C (1<int,number>,) <! (int<number>,)    (2)
//│ | | | | | C int<number> <! α40    (2)
//│ | | | | C error<> <! (1<int,number> -> α40)    (3)
//│ | | | | | C (1<int,number>,) <! error<>    (4)
//│ | | | | | C error<> <! α40    (5)
//│ | | 0. : α40
//│ | 0. : α40
//│ 0. : Code[α40,Anything]
//│ ⬤ Typed as: Code[α40,Anything]
//│  where: 
//│ 		α40 :> error<> | int<number>
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.47: 	code"let a = 1; ${code"b + ${code"1"}"} + 1"
//│ ║        	                       ^^^^^^^^^^^^^^
//│ ╙── expression of type `code & {Code#C, Code#T <: 1}` is not an instance of type `int`
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.47: 	code"let a = 1; ${code"b + ${code"1"}"} + 1"
//│ ║        	                ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `code & {Code#C <: ?b.type, Code#T <: ?a}` is not an instance of type `int`
//│ res: Code[error | int, ?]


:NewParser
:d
:ne
:NoJS
let n = 1
code"${Const(n)} + 1"
//│ 1. Typing term 1
//│ 1. : 1<int,number>
//│ ⬤ Typed as: 1<int,number>
//│  where: 
//│ 0. Typing term Quoted' + (Unquote' Const (n,) ',) (1,) '
//│ | 0. Typing term + (Unquote' Const (n,) ',) (1,)
//│ | | 0. Typing term + (Unquote' Const (n,) ',)
//│ | | | 0. Typing term +
//│ | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | 0. Typing term Unquote' Const (n,) ',
//│ | | | | 0. Typing term Unquote' Const (n,) '
//│ | | | | | 0. Typing term Const (n,)
//│ | | | | | | 0. Typing term Const
//│ | | | | | | 0. : (int<number> -> Code[int<number>,⊥])
//│ | | | | | | 0. Typing term n,
//│ | | | | | | | 0. Typing term n
//│ | | | | | | | 0. : 1<int,number>
//│ | | | | | | 0. : (1<int,number>,)
//│ | | | | | | CONSTRAIN (int<number> -> Code[int<number>,⊥]) <! (1<int,number> -> α42)
//│ | | | | | |   where 
//│ | | | | | | C (int<number> -> Code[int<number>,⊥]) <! (1<int,number> -> α42)    (0)
//│ | | | | | | | C (1<int,number>,) <! (int<number>,)    (1)
//│ | | | | | | | C Code[int<number>,⊥] <! α42    (1)
//│ | | | | | 0. : α42
//│ | | | | | check subtypeα42
//│ | | | | | true
//│ | | | | | false
//│ | | | | 0. : error<>
//│ | | | 0. : (error<>,)
//│ | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (error<> -> α43)
//│ | | |   where 
//│ | | | C (int<number> -> (int<number> -> int<number>)) <! (error<> -> α43)    (0)
//│ | | | | C (error<>,) <! (int<number>,)    (1)
//│ | | | | | C error<> <! int<number>    (2)
//│ | | | | C (int<number> -> int<number>) <! α43    (3)
//│ | | 0. : α43
//│ | | 0. Typing term 1,
//│ | | | 0. Typing term 1
//│ | | | 0. : 1<int,number>
//│ | | 0. : (1<int,number>,)
//│ | | CONSTRAIN α43 <! (1<int,number> -> α44)
//│ | |   where 
//│ 		α43 :> (int<number> -> int<number>)
//│ | | C α43 <! (1<int,number> -> α44)    (0)
//│ | | | C (int<number> -> int<number>) <! (1<int,number> -> α44)    (1)
//│ | | | | C (1<int,number>,) <! (int<number>,)    (2)
//│ | | | | C int<number> <! α44    (2)
//│ | 0. : α44
//│ 0. : Code[α44,Anything]
//│ ⬤ Typed as: Code[α44,Anything]
//│  where: 
//│ 		α44 :> int<number>
//│ n: 1
//│ ╔══[ERROR] Type mismatch. Required: Code, found: α42
//│ ║  l.204: 	code"${Const(n)} + 1"
//│ ╙──       	       ^^^^^^^^
//│ res: Code[int, ?]
