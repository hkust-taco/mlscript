:NewParser

:e
code"x"
code"(x) => ${res}"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.4: 	code"x"
//│ ╙──     	     ^
//│ res: code & {Code#T <: error}
//│    = [ 'Var', [ 'FreeVar', 'x' ] ]
//│ res: code & {Code#T <: anything -> error}
//│    = [ 'Lam', [ [ '_', 'x', 'x' ] ], [ 'Unquoted', [ 'Var', [Array] ] ] ]

:e
code"x"
code"let y = 1; ${res}"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.15: 	code"x"
//│ ╙──      	     ^
//│ res: code & {Code#T <: error}
//│    = [ 'Var', [ 'FreeVar', 'x' ] ]
//│ res: code & {Code#T <: error}
//│    = [
//│        'Let',
//│        'y',
//│        Symbol(y),
//│        [ '_', 1 ],
//│        [ 'Unquoted', [ 'Var', [Array] ] ]
//│      ]

:e
let a = code"x"
let b = code"y"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.32: 	let a = code"x"
//│ ╙──      	             ^
//│ a: code & {Code#T <: error}
//│  = [ 'Var', [ 'FreeVar', 'x' ] ]
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.33: 	let b = code"y"
//│ ╙──      	             ^
//│ b: code & {Code#T <: error}
//│  = [ 'Var', [ 'FreeVar', 'y' ] ]

:e
code"a + a"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.46: 	code"a + a"
//│ ╙──      	     ^
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.46: 	code"a + a"
//│ ╙──      	         ^
//│ res: code & {Code#T <: int}
//│    = [
//│        'App',
//│        '+',
//│        [ 'Var', [ 'FreeVar', 'a' ] ],
//│        [ 'Var', [ 'FreeVar', 'a' ] ]
//│      ]

:e
code"a + b"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.62: 	code"a + b"
//│ ╙──      	     ^
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.62: 	code"a + b"
//│ ╙──      	         ^
//│ res: code & {Code#T <: int}
//│    = [
//│        'App',
//│        '+',
//│        [ 'Var', [ 'FreeVar', 'a' ] ],
//│        [ 'Var', [ 'FreeVar', 'b' ] ]
//│      ]

:e
code"x + (let x = 2; x * x)"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.78: 	code"x + (let x = 2; x * x)"
//│ ╙──      	     ^
//│ res: code & {Code#T <: int}
//│    = [
//│        'App',
//│        '+',
//│        [ 'Var', [ 'FreeVar', 'x' ] ],
//│        [
//│          'Let',
//│          'x',
//│          Symbol(x),
//│          [ '_', 2 ],
//│          [ 'App', '*', [Array], [Array] ]
//│        ]
//│      ]

:e
let a = code"x"
let b = code"y"
let x = 1
code"let x = 1
${a} + (let y = 1; ${b})
"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.97: 	let a = code"x"
//│ ╙──      	             ^
//│ a: code & {Code#T <: error}
//│  = [ 'Var', [ 'FreeVar', 'x' ] ]
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.98: 	let b = code"y"
//│ ╙──      	             ^
//│ b: code & {Code#T <: error}
//│  = [ 'Var', [ 'FreeVar', 'y' ] ]
//│ x: 1
//│  = 1
//│ res: code & {Code#T <: int}
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ '_', 1 ],
//│        [
//│          'App',
//│          '+',
//│          [ 'Unquoted', [Array] ],
//│          [ 'Let', 'y', Symbol(y), [Array], [Array] ]
//│        ]
//│      ]

:e
let cde = code"a"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.130: 	let cde = code"a"
//│ ╙──       	               ^
//│ cde: code & {Code#T <: error}
//│    = [ 'Var', [ 'FreeVar', 'a' ] ]

let cde_w_unquote = code"${cde}"
//│ cde_w_unquote: code & {Code#T <: error}
//│              = [ 'Unquoted', [ 'Var', [ 'FreeVar', 'a' ] ] ]

:e
let cde_w_free_vars = code"let x = 1; x + y"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.142: 	let cde_w_free_vars = code"let x = 1; x + y"
//│ ╙──       	                                          ^
//│ cde_w_free_vars: code & {Code#T <: int}
//│                = [
//│                    'Let',
//│                    'x',
//│                    Symbol(x),
//│                    [ '_', 1 ],
//│                    [ 'App', '+', [ 'Var', Symbol(x) ], [ 'Var', [Array] ] ]
//│                  ]




let cde_w_unquote_w_free_vars = code"${cde_w_free_vars}"
//│ cde_w_unquote_w_free_vars: code & {Code#T <: int}
//│                          = [
//│                              'Unquoted',
//│                              [
//│                                'Let',
//│                                'x',
//│                                Symbol(x),
//│                                [ '_', 1 ],
//│                                [ 'App', '+', [Array], [Array] ]
//│                              ]
//│                            ]

:e
let cde_w_unquote_w_local_free_vars = code"[z, ${cde_w_unquote_w_free_vars}]"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.172: 	let cde_w_unquote_w_local_free_vars = code"[z, ${cde_w_unquote_w_free_vars}]"
//│ ╙──       	                                            ^
//│ cde_w_unquote_w_local_free_vars: code & {Code#T <: (error, int,)}
//│                                = [ 'Bra', [ 'Tup', [ [Array], [Array] ] ] ]

:e
let free_var1 = code"let x = 1; x + y"
let free_var2 = code"let i = 1; i + x"
let cde_w_mutli_unquote = code"${free_var2} + ${free_var1}"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.180: 	let free_var1 = code"let x = 1; x + y"
//│ ╙──       	                                    ^
//│ free_var1: code & {Code#T <: int}
//│          = [
//│              'Let',
//│              'x',
//│              Symbol(x),
//│              [ '_', 1 ],
//│              [ 'App', '+', [ 'Var', Symbol(x) ], [ 'Var', [Array] ] ]
//│            ]
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.181: 	let free_var2 = code"let i = 1; i + x"
//│ ╙──       	                                    ^
//│ free_var2: code & {Code#T <: int}
//│          = [
//│              'Let',
//│              'i',
//│              Symbol(i),
//│              [ '_', 1 ],
//│              [ 'App', '+', [ 'Var', Symbol(i) ], [ 'Var', [Array] ] ]
//│            ]
//│ cde_w_mutli_unquote: code & {Code#T <: int}
//│                    = [
//│                        'App',
//│                        '+',
//│                        [ 'Unquoted', [ 'Let', 'i', Symbol(i), [Array], [Array] ] ],
//│                        [ 'Unquoted', [ 'Let', 'x', Symbol(x), [Array], [Array] ] ]
//│                      ]

fun f(x, y) = code"[${x}, ${y}]"
//│ f: (code & {Code#T <: 'a}, code & {Code#T <: 'b},) -> (code & {Code#T <: ('a, 'b,)})
//│  = [Function: f]

:e
let x = code"y"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.218: 	let x = code"y"
//│ ╙──       	             ^
//│ x: code & {Code#T <: error}
//│  = [ 'Var', [ 'FreeVar', 'y' ] ]

let c = f(x, x)
//│ c: code & {Code#T <: (error, error,)}
//│  = [ 'Bra', [ 'Tup', [ [Array], [Array] ] ] ]

:e
let cde_arr = code"[${code"y"}, ${code"y"}]"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.230: 	let cde_arr = code"[${code"y"}, ${code"y"}]"
//│ ╙──       	                           ^
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.230: 	let cde_arr = code"[${code"y"}, ${code"y"}]"
//│ ╙──       	                                       ^
//│ cde_arr: code & {Code#T <: (error, error,)}
//│        = [ 'Bra', [ 'Tup', [ [Array], [Array] ] ] ]

code"let y = 1; ${cde_arr}"
//│ res: code & {Code#T <: (error, error,)}
//│    = [
//│        'Let',
//│        'y',
//│        Symbol(y),
//│        [ '_', 1 ],
//│        [ 'Unquoted', [ 'Bra', [Array] ] ]
//│      ]


// CHECK THIS
:e
y => code"[${code"y"}, ${code"y"}]"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.253: 	y => code"[${code"y"}, ${code"y"}]"
//│ ╙──       	                  ^
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.253: 	y => code"[${code"y"}, ${code"y"}]"
//│ ╙──       	                              ^
//│ res: anything -> (code & {Code#T <: (error, error,)})
//│    = [Function: res]

code"y => ${c}"
//│ res: code & {Code#T <: anything -> (error, error,)}
//│    = [ 'Lam', [ [ '_', 'y', 'y' ] ], [ 'Unquoted', [ 'Bra', [Array] ] ] ]


fun f(x, y) = [code"[${x}, ${y}]", x, y]
//│ f: (code & {Code#T <: 'a} & 'b, code & {Code#T <: 'c} & 'd,) -> (code & {Code#T <: ('a, 'c,)}, 'b, 'd,)
//│  = [Function: f1]



fun f(x) = x
//│ f: 'a -> 'a
//│  = [Function: f2]

let built_in_binding_test = code"let f = x => x + 1; f(if true then 1 else 2)"
//│ built_in_binding_test: code & {Code#T <: int}
//│                      = [
//│                          'Let',
//│                          'f',
//│                          Symbol(f),
//│                          [ 'Lam', [ [Array] ], [ 'App', '+', [Array], [Array] ] ],
//│                          [ 'App_Fun', [ 'Var', Symbol(f) ], [ 'Tup', [Array] ] ]
//│                        ]


code"f(0)"
//│ res: code & {Code#T <: 0}
//│    = [ 'App_Fun', [ 'Var', [ 'FreeVar', 'f' ] ], [ 'Tup', [ [Array] ] ] ]

:e
:ge
code"${code"${code"${z}"}"}"
//│ ╔══[ERROR] identifier not found: z
//│ ║  l.295: 	code"${code"${code"${z}"}"}"
//│ ╙──       	                     ^
//│ res: code & {Code#T <: error}
//│ Code generation encountered an error:
//│   unresolved symbol z

let z = code"1"
code"${code"${z}"}"
//│ z: code & {Code#T <: 1}
//│  = [ '_', 1 ]
//│ res: code & {Code#T <: 1}
//│    = [ 'Unquoted', [ 'Unquoted', [ '_', 1 ] ] ]

:e
code"let x = 1; let z = 1; code"x + y""
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.311: 	code"let x = 1; let z = 1; code"x + y""
//│ ╙──       	                                ^
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.311: 	code"let x = 1; let z = 1; code"x + y""
//│ ╙──       	                                    ^
//│ res: code & {Code#T <: code & {Code#T <: int}}
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ '_', 1 ],
//│        [ 'Let', 'z', Symbol(z), [ '_', 1 ], [ 'Quoted', [Array] ] ]
//│      ]

:e
code"let z = 0;${code"z + 1"}"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.328: 	code"let z = 0;${code"z + 1"}"
//│ ╙──       	                      ^
//│ res: code & {Code#T <: int}
//│    = [
//│        'Let',
//│        'z',
//│        Symbol(z),
//│        [ '_', 0 ],
//│        [ 'Unquoted', [ 'App', '+', [Array], [Array] ] ]
//│      ]

:e
code"let x = 1;${code"x + y"}"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.342: 	code"let x = 1;${code"x + y"}"
//│ ╙──       	                      ^
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.342: 	code"let x = 1;${code"x + y"}"
//│ ╙──       	                          ^
//│ res: code & {Code#T <: int}
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ '_', 1 ],
//│        [ 'Unquoted', [ 'App', '+', [Array], [Array] ] ]
//│      ]

let n = 1
code"${Const(n)} + 1"
//│ n: 1
//│  = 1
//│ res: code & {Code#T <: int}
//│    = [ 'App', '+', [ 'Unquoted', [ '_', 1 ] ], [ '_', 1 ] ]
