:NewParser


:e
code"x => y => 100 + ${Const(x + y)}"
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.5: 	code"x => y => 100 + ${Const(x + y)}"
//│ ╙──     	                                 ^
//│ res: Code[int -> anything -> int, anything\x\y]
//│    = [ '_', [Function (anonymous)] ]
run(res)(1)(10)
//│ res: int
//│    = 111


code"x => y => 100 + code"${Const(x + y)}""
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.16: 	code"x => y => 100 + code"${Const(x + y)}""
//│ ║        	               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `code & {Code#C :> ?a, Code#T <: ?b}` is not an instance of type `int`
//│ res: Code[int -> int -> (error | int), anything]
//│    = [ '_', [Function (anonymous)] ]


code"x => code"${x}""
//│ res: Code[Code['a, 'b] -> Code['a, 'b], anything]
//│    = [ '_', [Function (anonymous)] ]


