:NewParser

code"2 + 2"
// in JS: ["+", 2, 2]
//│ res: Code[int, ?]
//│    = [ 'App', '+', [ '_', 2 ], [ '_', 2 ] ]

code"x => x + 2"
// in JS (bad): ["lambda", ["x"], ["+", ["ref", "x"]], 2]]
// in JS (hygienic): const x_sym = Symbol("x"); ["lambda", [x_sym], ["+", x_sym], 2]]
//│ res: Code[int -> int, ?]
//│    = [ '_', [Function (anonymous)] ]

fun foo(x) =
  code"10 + x"
//│ foo: int -> Code[int, ?]
//│    = [Function: foo]

code"foo(123) + 1"
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.19: 	code"foo(123) + 1"
//│ ║        	     ^^^^^^^^^^
//│ ╟── application of type `code & {Code#C, Code#T <: ?a}` is not an instance of type `int`
//│ ║  l.19: 	code"foo(123) + 1"
//│ ╙──      	     ^^^^^^^^
//│ res: Code[error | int, ?]
//│    = [
//│        'App',
//│        '+',
//│        [ 'App_Fun', [ 'Var', [Array] ], [ 'Tup', [Array] ] ],
//│        [ '_', 1 ]
//│      ]

code"10 + ${qq_int}"
//│ ╔══[ERROR] identifier not found: qq_int
//│ ║  l.34: 	code"10 + ${qq_int}"
//│ ╙──      	            ^^^^^^
//│ res: Code[int, ?]
//│ Code generation encountered an error:
//│   unresolved symbol qq_int

"x"
//│ res: "x"
//│    = 'x'

// The inner code should have type Code<int, "x" | "y">
code"x => y => 15 + ${   code"x + y"   }"
//│ res: Code[anything -> anything -> int, ?]
//│    = [ '_', [Function (anonymous)] ]

// FIXME
qq_int : Code<int>
//│ ╔══[ERROR] identifier not found: qq_int
//│ ║  l.52: 	qq_int : Code<int>
//│ ╙──      	^^^^^^
//│ ╔══[ERROR] Wrong number of type arguments – expected 2, found 1
//│ ║  l.52: 	qq_int : Code<int>
//│ ╙──      	         ^^^^^^^^
//│ res: Code[int, anything]
//│ Code generation encountered an error:
//│   unresolved symbol qq_int
