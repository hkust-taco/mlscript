:NewParser

:p
code"let j = 1; j * j"
//│ |code"|#let| |j| |#=| |1|#;| |j| |*| |j|"|
//│ Parsed: Quoted' let j = 1 in * (j,) (j,) ';
//│ Desugared: Quoted' let j = 1 in * (j,) (j,) '
//│ AST: Quoted(Let(false, j, IntLit(1), App(App(Var(*), Tup(_: Var(j))), Tup(_: Var(j)))))
//│ res: Code[int, anything]
//│    = [
//│        'Let',
//│        'j',
//│        Symbol(j),
//│        [ '_', 1 ],
//│        [ 'App', '*', [ 'Var', Symbol(j) ], [ 'Var', Symbol(j) ] ]
//│      ]

// in JS: ["+", 2, 2]
:p
code"2 + 2"
//│ |code"|2| |+| |2|"|
//│ Parsed: Quoted' + (2,) (2,) ';
//│ Desugared: Quoted' + (2,) (2,) '
//│ AST: Quoted(App(App(Var(+), Tup(_: IntLit(2))), Tup(_: IntLit(2))))
//│ res: Code[int, anything]
//│    = [ 'App', '+', [ '_', 2 ], [ '_', 2 ] ]

code"x => x + 2"
// in JS (bad): ["lambda", ["x"], ["+", ["ref", "x"]], 2]]
// in JS (hygienic): const x_sym = Symbol("x"); ["lambda", [x_sym], ["+", x_sym], 2]]
//│ res: Code[int -> int, anything]
//│    = [
//│        'Lam',
//│        [ [ '_', 'x', 'x' ] ],
//│        [ 'App', '+', [ 'Var', [Array] ], [ '_', 2 ] ]
//│      ]

fun foo(x) =
  code"10 + x"
//│ foo: anything -> Code[int, {x: int}]
//│    = [Function: foo]

:e
code"foo(123) + 1"
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.44: 	code"foo(123) + 1"
//│ ║        	     ^^^^^^^^^^
//│ ╟── application of type `code & {Code#C :> {x: ?a}, Code#T <: ?b}` is not an instance of type `int`
//│ ║  l.44: 	code"foo(123) + 1"
//│ ╙──      	     ^^^^^^^^
//│ res: Code[error | int, anything]
//│    = [
//│        'App',
//│        '+',
//│        [ 'App_Fun', [ 'Var', [Array] ], [ 'Tup', [Array] ] ],
//│        [ '_', 1 ]
//│      ]

:e
:ge
code"10 + ${qq_int}"
//│ ╔══[ERROR] identifier not found: qq_int
//│ ║  l.61: 	code"10 + ${qq_int}"
//│ ╙──      	            ^^^^^^
//│ res: Code[int, anything]
//│ Code generation encountered an error:
//│   unresolved symbol qq_int

"x"
//│ res: "x"
//│    = 'x'

// The inner code should have type Code<int, "x" | "y">
code"x => y => 15 + ${   code"x + y"   }"
//│ res: Code[anything -> anything -> int, {x: int, y: int}\x\y]
//│    = [
//│        'Lam',
//│        [ [ '_', 'x', 'x' ] ],
//│        [ 'Lam', [ [Array] ], [ 'App', '+', [Array], [Array] ] ]
//│      ]

// FIXME
qq_int : Code<int>
//│ ╔══[ERROR] identifier not found: qq_int
//│ ║  l.83: 	qq_int : Code<int>
//│ ╙──      	^^^^^^
//│ ╔══[ERROR] Wrong number of type arguments – expected 2, found 1
//│ ║  l.83: 	qq_int : Code<int>
//│ ╙──      	         ^^^^^^^^
//│ res: Code[int, anything]
//│ Code generation encountered an error:
//│   unresolved symbol qq_int
