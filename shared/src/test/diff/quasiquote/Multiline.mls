:NewParser 

code"let arr = [
  1
]; arr"
//│ res: code & {Code#T <: (1,)}
//│    = [
//│        'Let',
//│        'arr',
//│        Symbol(arr),
//│        [ 'Bra', [ 'Tup', [Array] ] ],
//│        [ 'Var', Symbol(arr) ]
//│      ]

code"let foo = (x, y) => x * y
foo(
  2,
  3
)"
run(res)
//│ res: code & {Code#T <: int}
//│    = [
//│        'Let',
//│        'foo',
//│        Symbol(foo),
//│        [ 'Lam', [ [Array], [Array] ], [ 'App', '*', [Array], [Array] ] ],
//│        [ 'App_Fun', [ 'Var', Symbol(foo) ], [ 'Tup', [Array] ] ]
//│      ]
//│ res: int
//│    = 6


code"let a = 0
let b = 1
if a == 0
then true
else false
"
run(res)
//│ res: code & {Code#T <: bool}
//│    = [
//│        'Let',
//│        'a',
//│        Symbol(a),
//│        [ '_', 0 ],
//│        [
//│          'Let',
//│          'b',
//│          Symbol(b),
//│          [ '_', 1 ],
//│          [ 'If', [Array], [Array], [Array] ]
//│        ]
//│      ]
//│ res: bool
//│    = true

code"if 1 == 0
  then false
  else true
"
run(res)
//│ res: code & {Code#T <: bool}
//│    = [
//│        'If',
//│        [ 'App', '==', [ '_', 1 ], [ '_', 0 ] ],
//│        [ '_', false ],
//│        [ '_', true ]
//│      ]
//│ res: bool
//│    = true

code"if 1 == 0
then false
  else true
"
run(res)
//│ res: code & {Code#T <: bool}
//│    = [
//│        'If',
//│        [ 'App', '==', [ '_', 1 ], [ '_', 0 ] ],
//│        [ '_', false ],
//│        [ '_', true ]
//│      ]
//│ res: bool
//│    = true

code"{
  x: 1,
  y: 2,
  z: 3,
}
"
run(res)
//│ res: code & {Code#T <: {x: 1, y: 2, z: 3}}
//│    = [ 'Bra', [ 'Rcd', { x: [Array], y: [Array], z: [Array] } ] ]
//│ res: {x: 1, y: 2, z: 3}
//│    = { x: 1, y: 2, z: 3 }




code"let x = {a: 100}
x 
  .a
"
run(res)
//│ res: code & {Code#T <: 100}
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ 'Bra', [ 'Rcd', [Object] ] ],
//│        [ 'Sel', [ 'Var', Symbol(x) ], 'a' ]
//│      ]
//│ res: 100
//│    = 100
