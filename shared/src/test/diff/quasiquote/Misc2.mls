:NewParser

:e // Should be an error
code"let x = 1 in ${ 1 }"
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.4: 	code"let x = 1 in ${ 1 }"
//│ ║       	                  ^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `code`
//│ ║  l.4: 	code"let x = 1 in ${ 1 }"
//│ ╙──     	                     ^
//│ res: Code[error, anything\x]
//│    = [ 'Let', 'x', Symbol(x), [ '_', 1 ], [ 'Unquoted', 1 ] ]

:e // Should be two errors
code"let x = 1 in ${ x }"
//│ res: Code['a, ({x: Code['a, 'b]} & 'b)\x]
//│ Code generation encountered an error:
//│   unresolved symbol x

// The type is wrong
code"let x = 1 in ${ code"x + 1" }"
//│ res: Code[int, {x: int}\x]
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ '_', 1 ],
//│        [ 'Unquoted', [ 'App', '+', [Array], [Array] ] ]
//│      ]

:e
1 + code"2"
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.32: 	1 + code"2"
//│ ║        	^^^^^^^^^^^
//│ ╙── expression of type `code & {Code#C = anything, Code#T <: 2}` is not an instance of type `int`
//│ res: error | int
//│    = '1_,2'

:e // Should be an error
code"let x = 1 in ${ code"x + ${ x }" }"
//│ res: Code[int, {x: nothing}\x]
//│ Code generation encountered an error:
//│   unresolved symbol x


fun x: Code‹int›
//│ ╔══[ERROR] Wrong number of type arguments – expected 2, found 1
//│ ║  l.47: 	fun x: Code‹int›
//│ ╙──      	       ^^^^^^^^
//│ x: Code[int, anything]
//│  = <missing implementation>

code"1 + ${x}"
//│ res: Code[int, anything]
//│    = <no result>
//│      x is not implemented

:NewParser
:d
:ne
:NoJS
code"let a = 1; ${a + code"b + ${a + b}" }"
//│ 0. Typing term Quoted' let a = 1 in Unquote' + (a,) (Quoted' + (b,) (Unquote' + (a,) (b,) ',) ',) ' '
//│ | 0. Typing term let a = 1 in Unquote' + (a,) (Quoted' + (b,) (Unquote' + (a,) (b,) ',) ',) '
//│ | | 1. Typing term 1
//│ | | 1. : 1<int,number>
//│ | | Let: a
//│ | | 0. Typing term Unquote' + (a,) (Quoted' + (b,) (Unquote' + (a,) (b,) ',) ',) '
//│ | | | 0. Typing term + (a,) (Quoted' + (b,) (Unquote' + (a,) (b,) ',) ',)
//│ | | | | Applying + (a,)(class mlscript.App) to Quoted' + (b,) (Unquote' + (a,) (b,) ',) ',(class mlscript.Tup)
//│ | | | | 0. Typing term + (a,)
//│ | | | | | Applying +(class mlscript.Var) to a,(class mlscript.Tup)
//│ | | | | | 0. Typing term +
//│ | | | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | | | 0. Typing term a,
//│ | | | | | | 0. Typing term a
//│ | | | | | | 0. : α86
//│ | | | | | 0. : (α86,)
//│ | | | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (α86 -> α87)
//│ | | | | |   where 
//│ | | | | | C (int<number> -> (int<number> -> int<number>)) <! (α86 -> α87)    (0)
//│ | | | | | | C (α86,) <! (int<number>,)    (1)
//│ | | | | | | | C α86 <! int<number>    (2)
//│ | | | | | | C (int<number> -> int<number>) <! α87    (3)
//│ | | | | 0. : α87
//│ | | | | 0. Typing term Quoted' + (b,) (Unquote' + (a,) (b,) ',) ',
//│ | | | | | 0. Typing term Quoted' + (b,) (Unquote' + (a,) (b,) ',) '
//│ | | | | | | 0. Typing term + (b,) (Unquote' + (a,) (b,) ',)
//│ | | | | | | | Applying + (b,)(class mlscript.App) to Unquote' + (a,) (b,) ',(class mlscript.Tup)
//│ | | | | | | | 0. Typing term + (b,)
//│ | | | | | | | | Applying +(class mlscript.Var) to b,(class mlscript.Tup)
//│ | | | | | | | | 0. Typing term +
//│ | | | | | | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | | | | | | 0. Typing term b,
//│ | | | | | | | | | 0. Typing term b
//│ | | | | | | | | | 0. : α88
//│ | | | | | | | | 0. : (α88,)
//│ | | | | | | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (α88 -> α89)
//│ | | | | | | | |   where 
//│ | | | | | | | | C (int<number> -> (int<number> -> int<number>)) <! (α88 -> α89)    (0)
//│ | | | | | | | | | C (α88,) <! (int<number>,)    (1)
//│ | | | | | | | | | | C α88 <! int<number>    (2)
//│ | | | | | | | | | C (int<number> -> int<number>) <! α89    (3)
//│ | | | | | | | 0. : α89
//│ | | | | | | | 0. Typing term Unquote' + (a,) (b,) ',
//│ | | | | | | | | 0. Typing term Unquote' + (a,) (b,) '
//│ | | | | | | | | | 0. Typing term + (a,) (b,)
//│ | | | | | | | | | | Applying + (a,)(class mlscript.App) to b,(class mlscript.Tup)
//│ | | | | | | | | | | 0. Typing term + (a,)
//│ | | | | | | | | | | | Applying +(class mlscript.Var) to a,(class mlscript.Tup)
//│ | | | | | | | | | | | 0. Typing term +
//│ | | | | | | | | | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | | | | | | | | | 0. Typing term a,
//│ | | | | | | | | | | | | 0. Typing term a
//│ | | | | | | | | | | | | 0. : α92
//│ | | | | | | | | | | | 0. : (α92,)
//│ | | | | | | | | | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (α92 -> α93)
//│ | | | | | | | | | | |   where 
//│ | | | | | | | | | | | C (int<number> -> (int<number> -> int<number>)) <! (α92 -> α93)    (0)
//│ | | | | | | | | | | | | C (α92,) <! (int<number>,)    (1)
//│ | | | | | | | | | | | | | C α92 <! int<number>    (2)
//│ | | | | | | | | | | | | C (int<number> -> int<number>) <! α93    (3)
//│ | | | | | | | | | | 0. : α93
//│ | | | | | | | | | | 0. Typing term b,
//│ | | | | | | | | | | | 0. Typing term b
//│ | | | | | | | | | | | 0. : α94
//│ | | | | | | | | | | 0. : (α94,)
//│ | | | | | | | | | | CONSTRAIN α93 <! (α94 -> α95)
//│ | | | | | | | | | |   where 
//│ 		α93 :> (int<number> -> int<number>)
//│ | | | | | | | | | | C α93 <! (α94 -> α95)    (0)
//│ | | | | | | | | | | | C (int<number> -> int<number>) <! (α94 -> α95)    (1)
//│ | | | | | | | | | | | | C (α94,) <! (int<number>,)    (2)
//│ | | | | | | | | | | | | | C α94 <! int<number>    (3)
//│ | | | | | | | | | | | | C int<number> <! α95    (4)
//│ | | | | | | | | | 0. : α95
//│ | | | | | | | | | CONSTRAIN (Code[α90,α91] -> α90) <! (α95 -> α96)
//│ | | | | | | | | |   where 
//│ 		α95 :> int<number>
//│ | | | | | | | | | C (Code[α90,α91] -> α90) <! (α95 -> α96)    (0)
//│ | | | | | | | | | | C α95 <! Code[α90,α91]    (1)
//│ | | | | | | | | | | | C int<number> <! Code[α90,α91]    (2)
//│ | | | | | | | | | | | | C int<number> <! (code<> & {Code#T: mut ..α90, Code#C: mut α91..⊤})    (3)
//│ | | | | | | | | | | | | | C int<number> <! code<>    (4)
//│ | | | | | | | | | | | | | | CONSTRAINT FAILURE: int<number> <: code<>
//│ | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | norm[+] int<number>
//│ | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | CONSTRAIN error<> <! α96
//│ | | | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | | | C error<> <! α96    (0)
//│ | | | | | | | | | | | | | C int<number> <! {Code#T: mut ..α90, Code#C: mut α91..⊤}    (5)
//│ | | | | | | | | | | | | | | CONSTRAINT FAILURE: int<number> <: {Code#T: mut ..α90, Code#C: mut α91..⊤}
//│ | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | norm[+] int<number>
//│ | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | C α90 <! α96    (6)
//│ | | | | | | | | 0. : α96
//│ | | | | | | | 0. : (α96,)
//│ | | | | | | | CONSTRAIN α89 <! (α96 -> α97)
//│ | | | | | | |   where 
//│ 		α89 :> (int<number> -> int<number>)
//│ 		α96 :> error<>
//│ | | | | | | | C α89 <! (α96 -> α97)    (0)
//│ | | | | | | | | C (int<number> -> int<number>) <! (α96 -> α97)    (1)
//│ | | | | | | | | | C (α96,) <! (int<number>,)    (2)
//│ | | | | | | | | | | C α96 <! int<number>    (3)
//│ | | | | | | | | | | | C error<> <! int<number>    (4)
//│ | | | | | | | | | C int<number> <! α97    (5)
//│ | | | | | | 0. : α97
//│ | | | | | 0. : Code[α97,(α91 & {b: α88})]
//│ | | | | 0. : (Code[α97,(α91 & {b: α88})],)
//│ | | | | CONSTRAIN α87 <! (Code[α97,(α91 & {b: α88})] -> α98)
//│ | | | |   where 
//│ 		α87 :> (int<number> -> int<number>)
//│ 		α88 <: int<number>
//│ 		α97 :> int<number>
//│ | | | | C α87 <! (Code[α97,(α91 & {b: α88})] -> α98)    (0)
//│ | | | | | C (int<number> -> int<number>) <! (Code[α97,(α91 & {b: α88})] -> α98)    (1)
//│ | | | | | | C (Code[α97,(α91 & {b: α88})],) <! (int<number>,)    (2)
//│ | | | | | | | C Code[α97,(α91 & {b: α88})] <! int<number>    (3)
//│ | | | | | | | | C (code<> & {Code#T: mut ..α97, Code#C: mut (α91 & {b: α88})..⊤}) <! int<number>    (4)
//│ | | | | | | | | | ARGH  DNF(code<>{Code#T: mut ..α97, Code#C: mut ({b: α88} & α91)..⊤})  <!  DNF(int<number>{})
//│ | | | | | | | | | | Consider code<>{Code#T: mut ..α97, Code#C: mut ({b: α88} & α91)..⊤} <: DNF(int<number>{})
//│ | | | | | | | | | | Possible: List()
//│ | | | | | | | | | | A  code<>{Code#T: mut ..α97, Code#C: mut ({b: α88} & α91)..⊤}  %  List()  <!  List()  %  ⊥
//│ | | | | | | | | | | | CONSTRAINT FAILURE: (code<> & {Code#T: mut ..α97, Code#C: mut (α91 & {b: α88})..⊤}) <: int<number>
//│ | | | | | | | | | | | allVarPols: -α91, +α99, -α100
//│ | | | | | | | | | | | norm[+] (code<> & {Code#T: mut ..α99, Code#C: mut (α91 & {b: α100})..⊤})
//│ | | | | | | | | | | | | DNF: DNF(code<>{Code#T: mut ..α99, Code#C: mut (α91 & {b: α100})..⊤})
//│ | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | DNF: DNF()
//│ | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | norm[+] α99
//│ | | | | | | | | | | | | | DNF: DNF(α99)
//│ | | | | | | | | | | | | | norm[+] int<number>
//│ | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | ~> α99
//│ | | | | | | | | | | | | norm[-] (α91 & {b: α100})
//│ | | | | | | | | | | | | | DNF: DNF({b: α100}∧α91)
//│ | | | | | | | | | | | | | norm[-] α100
//│ | | | | | | | | | | | | | | DNF: DNF(α100)
//│ | | | | | | | | | | | | | | norm[-] int<number>
//│ | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | ~> α100
//│ | | | | | | | | | | | | ~> ({b: α100} & α91)
//│ | | | | | | | | | | | | norm[+] ⊤
//│ | | | | | | | | | | | | | DNF: DNF()
//│ | | | | | | | | | | | | ~> ⊤
//│ | | | | | | | | | | | ~> (code<> & {Code#C: mut ({b: α100} & α91)..⊤, Code#T: mut ..α99})
//│ | | | | | | | | | | | CONSTRAIN error<> <! α98
//│ | | | | | | | | | | |   where 
//│ | | | | | | | | | | | C error<> <! α98    (0)
//│ | | | | | | C int<number> <! α98    (5)
//│ | | | 0. : α98
//│ | | | CONSTRAIN (Code[α84,α85] -> α84) <! (α98 -> α101)
//│ | | |   where 
//│ 		α98 :> int<number> | error<>
//│ | | | C (Code[α84,α85] -> α84) <! (α98 -> α101)    (0)
//│ | | | | C α98 <! Code[α84,α85]    (1)
//│ | | | | | C int<number> <! Code[α84,α85]    (2)
//│ | | | | | | C int<number> <! (code<> & {Code#T: mut ..α84, Code#C: mut α85..⊤})    (3)
//│ | | | | | | | C int<number> <! code<>    (4)
//│ | | | | | | | | CONSTRAINT FAILURE: int<number> <: code<>
//│ | | | | | | | | allVarPols: 
//│ | | | | | | | | norm[+] int<number>
//│ | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | ~> int<number>
//│ | | | | | | | | CONSTRAIN error<> <! α101
//│ | | | | | | | |   where 
//│ | | | | | | | | C error<> <! α101    (0)
//│ | | | | | | | C int<number> <! {Code#T: mut ..α84, Code#C: mut α85..⊤}    (5)
//│ | | | | | | | | CONSTRAINT FAILURE: int<number> <: {Code#T: mut ..α84, Code#C: mut α85..⊤}
//│ | | | | | | | | allVarPols: 
//│ | | | | | | | | norm[+] int<number>
//│ | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | ~> int<number>
//│ | | | | | C error<> <! Code[α84,α85]    (6)
//│ | | | | | | C error<> <! (code<> & {Code#T: mut ..α84, Code#C: mut α85..⊤})    (7)
//│ | | | | | | | C error<> <! code<>    (8)
//│ | | | | | | | C error<> <! {Code#T: mut ..α84, Code#C: mut α85..⊤}    (9)
//│ | | | | | | | | C error<> <! α84    (10)
//│ | | | | | | | | C error<> <! ⊤    (11)
//│ | | | | C α84 <! α101    (11)
//│ | | | | | C error<> <! α101    (12)
//│ | | 0. : α101
//│ | 0. : α101
//│ 0. : Code[α101,(α85 & {b: α94, a: α86, a: α92})\a]
//│ ⬤ Typed as: Code[α101,(α85 & {b: α94, a: α86, a: α92})\a]
//│  where: 
//│ 		α86 <: int<number>
//│ 		α92 <: int<number>
//│ 		α94 <: int<number>
//│ 		α101 :> error<> | error<>
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.63: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ║        	                               ^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `code`
//│ ║  l.63: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ╙──      	                                 ^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.63: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ║        	                  ^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `code & {Code#C :> {b: ?a} & ?b, Code#T <: ?c}` is not an instance of type `int`
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.63: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ║        	                ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `code`
//│ ║  l.63: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ╙──      	                  ^^^^^^^^^^^^^^^^^^^^^^
//│ res: Code[error, {a: int, a: int, b: int}\a]


code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.279: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ║         	                                          ^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `code`
//│ ║  l.279: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ╙──       	                                            ^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.279: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ║         	                             ^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `code & {Code#C :> {b: ?a} & ?b, Code#T <: ?c}` is not an instance of type `int`
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.279: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ║         	                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `code`
//│ ║  l.279: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ╙──       	                             ^^^^^^^^^^^^^^^^^^^^^^
//│ res: Code[error, {a: int, a: int, b: int}\a\b]

:NewParser
:d
:ne
:NoJS
code"let a = 1; ${code"let b = 1; ${code"a + b"}"}"
//│ 0. Typing term Quoted' let a = 1 in Unquote' Quoted' let b = 1 in Unquote' Quoted' + (a,) (b,) ' ' ' ' '
//│ | 0. Typing term let a = 1 in Unquote' Quoted' let b = 1 in Unquote' Quoted' + (a,) (b,) ' ' ' '
//│ | | 1. Typing term 1
//│ | | 1. : 1<int,number>
//│ | | Let: a
//│ | | 0. Typing term Unquote' Quoted' let b = 1 in Unquote' Quoted' + (a,) (b,) ' ' ' '
//│ | | | 0. Typing term Quoted' let b = 1 in Unquote' Quoted' + (a,) (b,) ' ' '
//│ | | | | 0. Typing term let b = 1 in Unquote' Quoted' + (a,) (b,) ' '
//│ | | | | | 1. Typing term 1
//│ | | | | | 1. : 1<int,number>
//│ | | | | | Let: b
//│ | | | | | 0. Typing term Unquote' Quoted' + (a,) (b,) ' '
//│ | | | | | | 0. Typing term Quoted' + (a,) (b,) '
//│ | | | | | | | 0. Typing term + (a,) (b,)
//│ | | | | | | | | Applying + (a,)(class mlscript.App) to b,(class mlscript.Tup)
//│ | | | | | | | | 0. Typing term + (a,)
//│ | | | | | | | | | Applying +(class mlscript.Var) to a,(class mlscript.Tup)
//│ | | | | | | | | | 0. Typing term +
//│ | | | | | | | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | | | | | | | 0. Typing term a,
//│ | | | | | | | | | | 0. Typing term a
//│ | | | | | | | | | | 0. : α134
//│ | | | | | | | | | 0. : (α134,)
//│ | | | | | | | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (α134 -> α135)
//│ | | | | | | | | |   where 
//│ | | | | | | | | | C (int<number> -> (int<number> -> int<number>)) <! (α134 -> α135)    (0)
//│ | | | | | | | | | | C (α134,) <! (int<number>,)    (1)
//│ | | | | | | | | | | | C α134 <! int<number>    (2)
//│ | | | | | | | | | | C (int<number> -> int<number>) <! α135    (3)
//│ | | | | | | | | 0. : α135
//│ | | | | | | | | 0. Typing term b,
//│ | | | | | | | | | 0. Typing term b
//│ | | | | | | | | | 0. : α136
//│ | | | | | | | | 0. : (α136,)
//│ | | | | | | | | CONSTRAIN α135 <! (α136 -> α137)
//│ | | | | | | | |   where 
//│ 		α135 :> (int<number> -> int<number>)
//│ | | | | | | | | C α135 <! (α136 -> α137)    (0)
//│ | | | | | | | | | C (int<number> -> int<number>) <! (α136 -> α137)    (1)
//│ | | | | | | | | | | C (α136,) <! (int<number>,)    (2)
//│ | | | | | | | | | | | C α136 <! int<number>    (3)
//│ | | | | | | | | | | C int<number> <! α137    (4)
//│ | | | | | | | 0. : α137
//│ | | | | | | 0. : Code[α137,{a: α134, b: α136}]
//│ | | | | | | CONSTRAIN (Code[α132,α133] -> α132) <! (Code[α137,{a: α134, b: α136}] -> α138)
//│ | | | | | |   where 
//│ 		α134 <: int<number>
//│ 		α136 <: int<number>
//│ 		α137 :> int<number>
//│ | | | | | | C (Code[α132,α133] -> α132) <! (Code[α137,{a: α134, b: α136}] -> α138)    (0)
//│ | | | | | | | C Code[α137,{a: α134, b: α136}] <! Code[α132,α133]    (1)
//│ | | | | | | | | C α137 <! α132    (2)
//│ | | | | | | | | | C int<number> <! α132    (3)
//│ | | | | | | | | C α133 <! {a: α134, b: α136}    (4)
//│ | | | | | | | C α132 <! α138    (5)
//│ | | | | | | | | C int<number> <! α138    (6)
//│ | | | | | 0. : α138
//│ | | | | 0. : α138
//│ | | | 0. : Code[α138,α133\b]
//│ | | | CONSTRAIN (Code[α130,α131] -> α130) <! (Code[α138,α133\b] -> α139)
//│ | | |   where 
//│ 		α133 <: {a: α134, b: α136}
//│ 		α134 <: int<number>
//│ 		α136 <: int<number>
//│ 		α138 :> int<number>
//│ | | | C (Code[α130,α131] -> α130) <! (Code[α138,α133\b] -> α139)    (0)
//│ | | | | C Code[α138,α133\b] <! Code[α130,α131]    (1)
//│ | | | | | C α138 <! α130    (2)
//│ | | | | | | C int<number> <! α130    (3)
//│ | | | | | C α131 <! α133\b    (4)
//│ | | | | C α130 <! α139    (5)
//│ | | | | | C int<number> <! α139    (6)
//│ | | 0. : α139
//│ | 0. : α139
//│ 0. : Code[α139,α131\a]
//│ ⬤ Typed as: Code[α139,α131\a]
//│  where: 
//│ 		α131 <: α133\b
//│ 		α133 <: {a: α134, b: α136}
//│ 		α134 <: int<number>
//│ 		α136 <: int<number>
//│ 		α139 :> int<number>
//│ res: Code[int, {a: int, b: int}\a\b]
