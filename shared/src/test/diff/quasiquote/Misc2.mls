:NewParser

:e // Should be an error
code"let x = 1 in ${ 1 }"
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.4: 	code"let x = 1 in ${ 1 }"
//│ ║       	                  ^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `code`
//│ ║  l.4: 	code"let x = 1 in ${ 1 }"
//│ ╙──     	                     ^
//│ res: Code[error, anything\x]
//│    = [ 'Let', 'x', Symbol(x), [ '_', 1 ], [ 'Unquoted', 1 ] ]

:e // Should be two errors
:ge
code"let x = 1; ${ x }"
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.16: 	code"let x = 1; ${ x }"
//│ ╙──      	                   ^
//│ res: Code[error, anything\x]
//│ Code generation encountered an error:
//│   unresolved symbol x

// The type is wrong
code"let x = 1 in ${ code"x + 1" }"
//│ res: Code[int, {x: int}\x]
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ '_', 1 ],
//│        [ 'Unquoted', [ 'App', '+', [Array], [Array] ] ]
//│      ]

:e
1 + code"2"
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.36: 	1 + code"2"
//│ ║        	^^^^^^^^^^^
//│ ╙── expression of type `code & {Code#C = anything, Code#T <: 2}` is not an instance of type `int`
//│ res: error | int
//│    = '1_,2'

:e
:ge // Should be an error
code"let x = 1 in ${ code"x + ${ x }" }"
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.46: 	code"let x = 1 in ${ code"x + ${ x }" }"
//│ ║        	                              ^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `code`
//│ ║  l.46: 	code"let x = 1 in ${ code"x + ${ x }" }"
//│ ║        	             ^
//│ ╟── but it flows into reference with expected type `code`
//│ ║  l.46: 	code"let x = 1 in ${ code"x + ${ x }" }"
//│ ╙──      	                                 ^
//│ res: Code[int, {x: int}\x]
//│ Code generation encountered an error:
//│   unresolved symbol x

// FIXME
// fun x: Code‹int, anything›
// code"1 + ${x}"

:e
:ge
code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ╔══[ERROR] identifier not found: a
//│ ║  l.66: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ╙──      	                  ^
//│ ╔══[ERROR] identifier not found: b
//│ ║  l.66: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ╙──      	                                     ^
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.66: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ║        	                               ^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `code`
//│ ║  l.66: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ╙──      	                                 ^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.66: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ║        	                  ^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `code & {Code#C :> {b: ?a} & ?b, Code#T <: ?c}` is not an instance of type `int`
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.66: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ║        	                ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `code`
//│ ║  l.66: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ╙──      	                  ^^^^^^^^^^^^^^^^^^^^^^
//│ res: Code[error, anything\a]
//│ Code generation encountered an error:
//│   unresolved symbol a

:e
:ge
code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ╔══[ERROR] identifier not found: a
//│ ║  l.95: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ╙──      	                             ^
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.95: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ║        	                                          ^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `code`
//│ ║  l.95: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ╙──      	                                            ^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.95: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ║        	                             ^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `code & {Code#C :> {b: ?a} & ?b, Code#T <: ?c}` is not an instance of type `int`
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.95: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ║        	                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `code`
//│ ║  l.95: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ╙──      	                             ^^^^^^^^^^^^^^^^^^^^^^
//│ res: Code[error, anything\a\b]
//│ Code generation encountered an error:
//│   unresolved symbol a

let res = code"let a = 1; ${code"let b = 1; ${code"a + b"}"}"
//│ res: Code[int, {a: int, b: int}\a\b]
//│    = [
//│        'Let',
//│        'a',
//│        Symbol(a),
//│        [ '_', 1 ],
//│        [ 'Unquoted', [ 'Let', 'b', Symbol(b), [Array], [Array] ] ]
//│      ]

:e
run(res)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.130: 	run(res)
//│ ║         	^^^^^^^^
//│ ╙── expression of type `anything` is not a record (expected a record with fields: a, b)
//│ res: error | int
//│    = 2
