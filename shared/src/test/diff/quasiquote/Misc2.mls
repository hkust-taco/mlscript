:NewParser

:e // Should be an error
code"let x = 1 in ${ 1 }"
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.4: 	code"let x = 1 in ${ 1 }"
//│ ║       	                  ^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `code`
//│ ║  l.4: 	code"let x = 1 in ${ 1 }"
//│ ╙──     	                     ^
//│ res: Code[error, anything\x]
//│    = [ 'Let', 'x', Symbol(x), [ '_', 1 ], [ 'Unquoted', 1 ] ]

:e // Should be two errors
code"let x = 1; ${ x }"
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.15: 	code"let x = 1; ${ x }"
//│ ╙──      	                   ^
//│ res: Code[error, anything\x]
//│ Code generation encountered an error:
//│   unresolved symbol x

// The type is wrong
code"let x = 1 in ${ code"x + 1" }"
//│ res: Code[int, {x: int}\x]
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ '_', 1 ],
//│        [ 'Unquoted', [ 'App', '+', [Array], [Array] ] ]
//│      ]

:e
1 + code"2"
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.60: 	1 + code"2"
//│ ║        	^^^^^^^^^^^
//│ ╙── expression of type `code & {Code#C = anything, Code#T <: 2}` is not an instance of type `int`
//│ res: error | int
//│    = '1_,2'

:e // Should be an error
code"let x = 1 in ${ code"x + ${ x }" }"
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.69: 	code"let x = 1 in ${ code"x + ${ x }" }"
//│ ╙──      	                                 ^
//│ res: Code[int, {x: int}\x]
//│ Code generation encountered an error:
//│   unresolved symbol x


fun x: Code‹int›
//│ ╔══[ERROR] Wrong number of type arguments – expected 2, found 1
//│ ║  l.78: 	fun x: Code‹int›
//│ ╙──      	       ^^^^^^^^
//│ x: Code[int, anything]
//│  = <missing implementation>

code"1 + ${x}"
//│ res: Code[int, anything]
//│    = <no result>
//│      x is not implemented

:NewParser
:d
:ne
:NoJS
code"let a = 1; ${a + code"b + ${a + b}" }"
//│ 0. Typing term Quoted' let a = 1 in Unquote' + (a,) (Quoted' + (b,) (Unquote' + (a,) (b,) ',) ',) ' '
//│ | 0. Typing term let a = 1 in Unquote' + (a,) (Quoted' + (b,) (Unquote' + (a,) (b,) ',) ',) '
//│ | | 1. Typing term 1
//│ | | 1. : 1<int,number>
//│ | | Let: a
//│ | | 0. Typing term Unquote' + (a,) (Quoted' + (b,) (Unquote' + (a,) (b,) ',) ',) '
//│ | | | 0. Typing term + (a,) (Quoted' + (b,) (Unquote' + (a,) (b,) ',) ',)
//│ | | | | Applying + (a,)(class mlscript.App) to Quoted' + (b,) (Unquote' + (a,) (b,) ',) ',(class mlscript.Tup)
//│ | | | | 0. Typing term + (a,)
//│ | | | | | Applying +(class mlscript.Var) to a,(class mlscript.Tup)
//│ | | | | | 0. Typing term +
//│ | | | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | | | 0. Typing term a,
//│ | | | | | | 0. Typing term a
//│ | | | | | | 0. : error<>
//│ | | | | | 0. : (error<>,)
//│ | | | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (error<> -> α74)
//│ | | | | |   where 
//│ | | | | | C (int<number> -> (int<number> -> int<number>)) <! (error<> -> α74)    (0)
//│ | | | | | | C (error<>,) <! (int<number>,)    (1)
//│ | | | | | | | C error<> <! int<number>    (2)
//│ | | | | | | C (int<number> -> int<number>) <! α74    (3)
//│ | | | | 0. : α74
//│ | | | | 0. Typing term Quoted' + (b,) (Unquote' + (a,) (b,) ',) ',
//│ | | | | | 0. Typing term Quoted' + (b,) (Unquote' + (a,) (b,) ',) '
//│ | | | | | | 0. Typing term + (b,) (Unquote' + (a,) (b,) ',)
//│ | | | | | | | Applying + (b,)(class mlscript.App) to Unquote' + (a,) (b,) ',(class mlscript.Tup)
//│ | | | | | | | 0. Typing term + (b,)
//│ | | | | | | | | Applying +(class mlscript.Var) to b,(class mlscript.Tup)
//│ | | | | | | | | 0. Typing term +
//│ | | | | | | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | | | | | | 0. Typing term b,
//│ | | | | | | | | | 0. Typing term b
//│ | | | | | | | | | 0. : α75
//│ | | | | | | | | 0. : (α75,)
//│ | | | | | | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (α75 -> α76)
//│ | | | | | | | |   where 
//│ | | | | | | | | C (int<number> -> (int<number> -> int<number>)) <! (α75 -> α76)    (0)
//│ | | | | | | | | | C (α75,) <! (int<number>,)    (1)
//│ | | | | | | | | | | C α75 <! int<number>    (2)
//│ | | | | | | | | | C (int<number> -> int<number>) <! α76    (3)
//│ | | | | | | | 0. : α76
//│ | | | | | | | 0. Typing term Unquote' + (a,) (b,) ',
//│ | | | | | | | | 0. Typing term Unquote' + (a,) (b,) '
//│ | | | | | | | | | 0. Typing term + (a,) (b,)
//│ | | | | | | | | | | Applying + (a,)(class mlscript.App) to b,(class mlscript.Tup)
//│ | | | | | | | | | | 0. Typing term + (a,)
//│ | | | | | | | | | | | Applying +(class mlscript.Var) to a,(class mlscript.Tup)
//│ | | | | | | | | | | | 0. Typing term +
//│ | | | | | | | | | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | | | | | | | | | 0. Typing term a,
//│ | | | | | | | | | | | | 0. Typing term a
//│ | | | | | | | | | | | | 0. : error<>
//│ | | | | | | | | | | | 0. : (error<>,)
//│ | | | | | | | | | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (error<> -> α79)
//│ | | | | | | | | | | |   where 
//│ | | | | | | | | | | | C (int<number> -> (int<number> -> int<number>)) <! (error<> -> α79)    (0)
//│ | | | | | | | | | | | | C (error<>,) <! (int<number>,)    (1)
//│ | | | | | | | | | | | | | C error<> <! int<number>    (2)
//│ | | | | | | | | | | | | C (int<number> -> int<number>) <! α79    (3)
//│ | | | | | | | | | | 0. : α79
//│ | | | | | | | | | | 0. Typing term b,
//│ | | | | | | | | | | | 0. Typing term b
//│ | | | | | | | | | | | 0. : error<>
//│ | | | | | | | | | | 0. : (error<>,)
//│ | | | | | | | | | | CONSTRAIN α79 <! (error<> -> α80)
//│ | | | | | | | | | |   where 
//│ 		α79 :> (int<number> -> int<number>)
//│ | | | | | | | | | | C α79 <! (error<> -> α80)    (0)
//│ | | | | | | | | | | | C (int<number> -> int<number>) <! (error<> -> α80)    (1)
//│ | | | | | | | | | | | | C (error<>,) <! (int<number>,)    (2)
//│ | | | | | | | | | | | | | C error<> <! int<number>    (3)
//│ | | | | | | | | | | | | C int<number> <! α80    (4)
//│ | | | | | | | | | 0. : α80
//│ | | | | | | | | | CONSTRAIN (Code[α77,α78] -> α77) <! (α80 -> α81)
//│ | | | | | | | | |   where 
//│ 		α80 :> int<number>
//│ | | | | | | | | | C (Code[α77,α78] -> α77) <! (α80 -> α81)    (0)
//│ | | | | | | | | | | C α80 <! Code[α77,α78]    (1)
//│ | | | | | | | | | | | C int<number> <! Code[α77,α78]    (2)
//│ | | | | | | | | | | | | C int<number> <! (code<> & {Code#T: mut ..α77, Code#C: mut α78..⊤})    (3)
//│ | | | | | | | | | | | | | C int<number> <! code<>    (4)
//│ | | | | | | | | | | | | | | CONSTRAINT FAILURE: int<number> <: code<>
//│ | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | norm[+] int<number>
//│ | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | | CONSTRAIN error<> <! α81
//│ | | | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | | | C error<> <! α81    (0)
//│ | | | | | | | | | | | | | C int<number> <! {Code#T: mut ..α77, Code#C: mut α78..⊤}    (5)
//│ | | | | | | | | | | | | | | CONSTRAINT FAILURE: int<number> <: {Code#T: mut ..α77, Code#C: mut α78..⊤}
//│ | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | norm[+] int<number>
//│ | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | C α77 <! α81    (6)
//│ | | | | | | | | 0. : α81
//│ | | | | | | | 0. : (α81,)
//│ | | | | | | | CONSTRAIN α76 <! (α81 -> α82)
//│ | | | | | | |   where 
//│ 		α76 :> (int<number> -> int<number>)
//│ 		α81 :> error<>
//│ | | | | | | | C α76 <! (α81 -> α82)    (0)
//│ | | | | | | | | C (int<number> -> int<number>) <! (α81 -> α82)    (1)
//│ | | | | | | | | | C (α81,) <! (int<number>,)    (2)
//│ | | | | | | | | | | C α81 <! int<number>    (3)
//│ | | | | | | | | | | | C error<> <! int<number>    (4)
//│ | | | | | | | | | C int<number> <! α82    (5)
//│ | | | | | | 0. : α82
//│ | | | | | 0. : Code[α82,(α78 & {b: α75})]
//│ | | | | 0. : (Code[α82,(α78 & {b: α75})],)
//│ | | | | CONSTRAIN α74 <! (Code[α82,(α78 & {b: α75})] -> α83)
//│ | | | |   where 
//│ 		α74 :> (int<number> -> int<number>)
//│ 		α75 <: int<number>
//│ 		α82 :> int<number>
//│ | | | | C α74 <! (Code[α82,(α78 & {b: α75})] -> α83)    (0)
//│ | | | | | C (int<number> -> int<number>) <! (Code[α82,(α78 & {b: α75})] -> α83)    (1)
//│ | | | | | | C (Code[α82,(α78 & {b: α75})],) <! (int<number>,)    (2)
//│ | | | | | | | C Code[α82,(α78 & {b: α75})] <! int<number>    (3)
//│ | | | | | | | | C (code<> & {Code#T: mut ..α82, Code#C: mut (α78 & {b: α75})..⊤}) <! int<number>    (4)
//│ | | | | | | | | | ARGH  DNF(code<>{Code#T: mut ..α82, Code#C: mut ({b: α75} & α78)..⊤})  <!  DNF(int<number>{})
//│ | | | | | | | | | | Consider code<>{Code#T: mut ..α82, Code#C: mut ({b: α75} & α78)..⊤} <: DNF(int<number>{})
//│ | | | | | | | | | | Possible: List()
//│ | | | | | | | | | | A  code<>{Code#T: mut ..α82, Code#C: mut ({b: α75} & α78)..⊤}  %  List()  <!  List()  %  ⊥
//│ | | | | | | | | | | | CONSTRAINT FAILURE: (code<> & {Code#T: mut ..α82, Code#C: mut (α78 & {b: α75})..⊤}) <: int<number>
//│ | | | | | | | | | | | allVarPols: -α78, +α84, -α85
//│ | | | | | | | | | | | norm[+] (code<> & {Code#T: mut ..α84, Code#C: mut (α78 & {b: α85})..⊤})
//│ | | | | | | | | | | | | DNF: DNF(code<>{Code#T: mut ..α84, Code#C: mut (α78 & {b: α85})..⊤})
//│ | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | DNF: DNF()
//│ | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | norm[+] α84
//│ | | | | | | | | | | | | | DNF: DNF(α84)
//│ | | | | | | | | | | | | | norm[+] int<number>
//│ | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | ~> α84
//│ | | | | | | | | | | | | norm[-] (α78 & {b: α85})
//│ | | | | | | | | | | | | | DNF: DNF({b: α85}∧α78)
//│ | | | | | | | | | | | | | norm[-] α85
//│ | | | | | | | | | | | | | | DNF: DNF(α85)
//│ | | | | | | | | | | | | | | norm[-] int<number>
//│ | | | | | | | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | | | | | | | ~> int<number>
//│ | | | | | | | | | | | | | ~> α85
//│ | | | | | | | | | | | | ~> ({b: α85} & α78)
//│ | | | | | | | | | | | | norm[+] ⊤
//│ | | | | | | | | | | | | | DNF: DNF()
//│ | | | | | | | | | | | | ~> ⊤
//│ | | | | | | | | | | | ~> (code<> & {Code#C: mut ({b: α85} & α78)..⊤, Code#T: mut ..α84})
//│ | | | | | | | | | | | CONSTRAIN error<> <! α83
//│ | | | | | | | | | | |   where 
//│ | | | | | | | | | | | C error<> <! α83    (0)
//│ | | | | | | C int<number> <! α83    (5)
//│ | | | 0. : α83
//│ | | | CONSTRAIN (Code[α72,α73] -> α72) <! (α83 -> α86)
//│ | | |   where 
//│ 		α83 :> int<number> | error<>
//│ | | | C (Code[α72,α73] -> α72) <! (α83 -> α86)    (0)
//│ | | | | C α83 <! Code[α72,α73]    (1)
//│ | | | | | C int<number> <! Code[α72,α73]    (2)
//│ | | | | | | C int<number> <! (code<> & {Code#T: mut ..α72, Code#C: mut α73..⊤})    (3)
//│ | | | | | | | C int<number> <! code<>    (4)
//│ | | | | | | | | CONSTRAINT FAILURE: int<number> <: code<>
//│ | | | | | | | | allVarPols: 
//│ | | | | | | | | norm[+] int<number>
//│ | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | ~> int<number>
//│ | | | | | | | | CONSTRAIN error<> <! α86
//│ | | | | | | | |   where 
//│ | | | | | | | | C error<> <! α86    (0)
//│ | | | | | | | C int<number> <! {Code#T: mut ..α72, Code#C: mut α73..⊤}    (5)
//│ | | | | | | | | CONSTRAINT FAILURE: int<number> <: {Code#T: mut ..α72, Code#C: mut α73..⊤}
//│ | | | | | | | | allVarPols: 
//│ | | | | | | | | norm[+] int<number>
//│ | | | | | | | | | DNF: DNF(int<number>{})
//│ | | | | | | | | ~> int<number>
//│ | | | | | C error<> <! Code[α72,α73]    (6)
//│ | | | | | | C error<> <! (code<> & {Code#T: mut ..α72, Code#C: mut α73..⊤})    (7)
//│ | | | | | | | C error<> <! code<>    (8)
//│ | | | | | | | C error<> <! {Code#T: mut ..α72, Code#C: mut α73..⊤}    (9)
//│ | | | | | | | | C error<> <! α72    (10)
//│ | | | | | | | | C error<> <! ⊤    (11)
//│ | | | | C α72 <! α86    (11)
//│ | | | | | C error<> <! α86    (12)
//│ | | 0. : α86
//│ | 0. : α86
//│ 0. : Code[α86,α73\a]
//│ ⬤ Typed as: Code[α86,α73\a]
//│  where: 
//│ 		α86 :> error<> | error<>
//│ ╔══[ERROR] identifier not found: a
//│ ║  l.94: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ╙──      	                  ^
//│ ╔══[ERROR] identifier not found: a
//│ ║  l.94: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ╙──      	                                 ^
//│ ╔══[ERROR] identifier not found: b
//│ ║  l.94: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ╙──      	                                     ^
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.94: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ║        	                               ^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `code`
//│ ║  l.94: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ╙──      	                                 ^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.94: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ║        	                  ^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `code & {Code#C :> {b: ?a} & ?b, Code#T <: ?c}` is not an instance of type `int`
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.94: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ║        	                ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `code`
//│ ║  l.94: 	code"let a = 1; ${a + code"b + ${a + b}" }"
//│ ╙──      	                  ^^^^^^^^^^^^^^^^^^^^^^
//│ res: Code[error, anything\a]


code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ╔══[ERROR] identifier not found: a
//│ ║  l.316: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ╙──       	                             ^
//│ ╔══[ERROR] identifier not found: a
//│ ║  l.316: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ╙──       	                                            ^
//│ ╔══[ERROR] identifier not found: b
//│ ║  l.316: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ╙──       	                                                ^
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.316: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ║         	                                          ^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `code`
//│ ║  l.316: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ╙──       	                                            ^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.316: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ║         	                             ^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `code & {Code#C :> {b: ?a} & ?b, Code#T <: ?c}` is not an instance of type `int`
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.316: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ║         	                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `code`
//│ ║  l.316: 	code"let a = 1; let b = 2; ${a + code"b + ${a + b}" }"
//│ ╙──       	                             ^^^^^^^^^^^^^^^^^^^^^^
//│ res: Code[error, anything\a\b]

:NewParser
:d
:ne
:NoJS
code"let a = 1; ${code"let b = 1; ${code"a + b"}"}"
//│ 0. Typing term Quoted' let a = 1 in Unquote' Quoted' let b = 1 in Unquote' Quoted' + (a,) (b,) ' ' ' ' '
//│ | 0. Typing term let a = 1 in Unquote' Quoted' let b = 1 in Unquote' Quoted' + (a,) (b,) ' ' ' '
//│ | | 1. Typing term 1
//│ | | 1. : 1<int,number>
//│ | | Let: a
//│ | | 0. Typing term Unquote' Quoted' let b = 1 in Unquote' Quoted' + (a,) (b,) ' ' ' '
//│ | | | 0. Typing term Quoted' let b = 1 in Unquote' Quoted' + (a,) (b,) ' ' '
//│ | | | | 0. Typing term let b = 1 in Unquote' Quoted' + (a,) (b,) ' '
//│ | | | | | 1. Typing term 1
//│ | | | | | 1. : 1<int,number>
//│ | | | | | Let: b
//│ | | | | | 0. Typing term Unquote' Quoted' + (a,) (b,) ' '
//│ | | | | | | 0. Typing term Quoted' + (a,) (b,) '
//│ | | | | | | | 0. Typing term + (a,) (b,)
//│ | | | | | | | | Applying + (a,)(class mlscript.App) to b,(class mlscript.Tup)
//│ | | | | | | | | 0. Typing term + (a,)
//│ | | | | | | | | | Applying +(class mlscript.Var) to a,(class mlscript.Tup)
//│ | | | | | | | | | 0. Typing term +
//│ | | | | | | | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | | | | | | | 0. Typing term a,
//│ | | | | | | | | | | 0. Typing term a
//│ | | | | | | | | | | 0. : α110
//│ | | | | | | | | | 0. : (α110,)
//│ | | | | | | | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (α110 -> α111)
//│ | | | | | | | | |   where 
//│ | | | | | | | | | C (int<number> -> (int<number> -> int<number>)) <! (α110 -> α111)    (0)
//│ | | | | | | | | | | C (α110,) <! (int<number>,)    (1)
//│ | | | | | | | | | | | C α110 <! int<number>    (2)
//│ | | | | | | | | | | C (int<number> -> int<number>) <! α111    (3)
//│ | | | | | | | | 0. : α111
//│ | | | | | | | | 0. Typing term b,
//│ | | | | | | | | | 0. Typing term b
//│ | | | | | | | | | 0. : α112
//│ | | | | | | | | 0. : (α112,)
//│ | | | | | | | | CONSTRAIN α111 <! (α112 -> α113)
//│ | | | | | | | |   where 
//│ 		α111 :> (int<number> -> int<number>)
//│ | | | | | | | | C α111 <! (α112 -> α113)    (0)
//│ | | | | | | | | | C (int<number> -> int<number>) <! (α112 -> α113)    (1)
//│ | | | | | | | | | | C (α112,) <! (int<number>,)    (2)
//│ | | | | | | | | | | | C α112 <! int<number>    (3)
//│ | | | | | | | | | | C int<number> <! α113    (4)
//│ | | | | | | | 0. : α113
//│ | | | | | | 0. : Code[α113,{b: α112, a: α110}]
//│ | | | | | | CONSTRAIN (Code[α108,α109] -> α108) <! (Code[α113,{b: α112, a: α110}] -> α114)
//│ | | | | | |   where 
//│ 		α110 <: int<number>
//│ 		α112 <: int<number>
//│ 		α113 :> int<number>
//│ | | | | | | C (Code[α108,α109] -> α108) <! (Code[α113,{b: α112, a: α110}] -> α114)    (0)
//│ | | | | | | | C Code[α113,{b: α112, a: α110}] <! Code[α108,α109]    (1)
//│ | | | | | | | | C α113 <! α108    (2)
//│ | | | | | | | | | C int<number> <! α108    (3)
//│ | | | | | | | | C α109 <! {b: α112, a: α110}    (4)
//│ | | | | | | | C α108 <! α114    (5)
//│ | | | | | | | | C int<number> <! α114    (6)
//│ | | | | | 0. : α114
//│ | | | | 0. : α114
//│ | | | 0. : Code[α114,α109\b]
//│ | | | CONSTRAIN (Code[α106,α107] -> α106) <! (Code[α114,α109\b] -> α115)
//│ | | |   where 
//│ 		α109 <: {b: α112, a: α110}
//│ 		α110 <: int<number>
//│ 		α112 <: int<number>
//│ 		α114 :> int<number>
//│ | | | C (Code[α106,α107] -> α106) <! (Code[α114,α109\b] -> α115)    (0)
//│ | | | | C Code[α114,α109\b] <! Code[α106,α107]    (1)
//│ | | | | | C α114 <! α106    (2)
//│ | | | | | | C int<number> <! α106    (3)
//│ | | | | | C α107 <! α109\b    (4)
//│ | | | | C α106 <! α115    (5)
//│ | | | | | C int<number> <! α115    (6)
//│ | | 0. : α115
//│ | 0. : α115
//│ 0. : Code[α115,α107\a]
//│ ⬤ Typed as: Code[α115,α107\a]
//│  where: 
//│ 		α107 <: α109\b
//│ 		α109 <: {b: α112, a: α110}
//│ 		α110 <: int<number>
//│ 		α112 <: int<number>
//│ 		α115 :> int<number>
//│ res: Code[int, {a: int, b: int}\a\b]
