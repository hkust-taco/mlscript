:NewParser
:ge

// Test 1
let code_test = code"let x_0 = 1; let x_1 = 10; let x_2 = 100; x_0 + x_1 + x_2"
//│ code_test: Code[int, {x_0: int, x_1: int}\x_0\x_1\x_2]
//│          = [
//│              'Let',
//│              'x_0',
//│              Symbol(x_0),
//│              [ '_', 1 ],
//│              [
//│                'Let',
//│                'x_1',
//│                Symbol(x_1),
//│                [ '_', 10 ],
//│                [ 'Let', 'x_2', Symbol(x_2), [Array], [Array] ]
//│              ]
//│            ]

run(code_test)
//│ res: int
//│    = 111

// Test 2:
:e // context-tracking
fun test(n, cde) = if n > 0 then code"let x = ${Const(n)}; ${test(n - 1, code"${cde} + x")}" else cde
//│ test: (int, Code[int | 'a, ?] & 'b,) -> (Code[int | 'a, nothing\x & {x: int} & 'c] | 'b)
//│     = [Function: test]

run(test(5, code"0"))
//│ res: int
//│    = 15


// Test 3: note that the free variable makes this unhygienic, which is intended

fun cde_template(cde) = code"${cde} + x"
fun test(n, cde) = if n > 0 then code"let x = ${Const(n)}; ${test(n - 1, cde_template(cde))}" else cde
//│ cde_template: Code[int, 'a] -> Code[int, {x: int} & 'a]
//│             = [Function: cde_template]
//│ test: (int, Code[int | 'a, ?] & 'b,) -> (Code[int | 'a, nothing\x & {x: int} & 'c] | 'b)
//│     = [Function: test1]

let c = test(3, code"2")
//│ c: Code[int, nothing\x & {x: int}]
//│  = [
//│      'Let',
//│      'x',
//│      Symbol(x),
//│      [ 'Unquoted', [ '_', 3 ] ],
//│      [ 'Unquoted', [ 'Let', 'x', Symbol(x), [Array], [Array] ] ]
//│    ]

run(c)
//│ res: int
//│    = 5

