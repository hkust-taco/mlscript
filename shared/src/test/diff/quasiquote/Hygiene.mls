:NewParser

// Test 1
let code_test = code"let x0 = 1; let x1 = 10; let x2 = 100; x0 + x1 + x2"
//│ code_test: code & {Code#T <: int}
//│          = [
//│              'Let',
//│              'x0',
//│              Symbol(x0),
//│              [ '_', 1 ],
//│              [
//│                'Let',
//│                'x1',
//│                Symbol(x1),
//│                [ '_', 10 ],
//│                [ 'Let', 'x2', Symbol(x2), [Array], [Array] ]
//│              ]
//│            ]

run(code_test)
//│ res: int
//│    = 111

// Test 2: this is hygienic because the child Quoted is a descendant of the parent Quoted in the AST
fun test(n, cde) = if n > 0 then code"let x = ${Const(n)}; ${test(n - 1, code"${cde} + x")}" else cde
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.25: 	fun test(n, cde) = if n > 0 then code"let x = ${Const(n)}; ${test(n - 1, code"${cde} + x")}" else cde
//│ ╙──      	                                                                                       ^
//│ test: (int, code & {Code#T <: int},) -> (code & {Code#T <: int})
//│     = [Function: test]

:e
run(test(3, code"0"))
//│ res: int
//│    = 6


// Test 3: note that the free variable makes this unhygienic, which is intended
fun cde_template(cde) = code"${cde} + x"
fun test(n, cde) = if n > 0 then code"let x = ${Const(n)}; ${test(n - 1, cde_template(cde))}" else cde
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.42: 	fun cde_template(cde) = code"${cde} + x"
//│ ╙──      	                                      ^
//│ cde_template: (code & {Code#T <: int}) -> (code & {Code#T <: int})
//│             = [Function: cde_template]
//│ test: (int, code & {Code#T <: int},) -> (code & {Code#T <: int})
//│     = [Function: test1]

let c = test(3, code"0")
//│ c: code & {Code#T <: int}
//│  = [
//│      'Let',
//│      'x',
//│      Symbol(x),
//│      [ 'Unquoted', [ '_', 3 ] ],
//│      [ 'Unquoted', [ 'Let', 'x', Symbol(x), [Array], [Array] ] ]
//│    ]

:e
run(c)
//│ res: int
//│    = 3
