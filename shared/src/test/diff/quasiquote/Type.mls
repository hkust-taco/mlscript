:NewParser

:d
:ne
:NoJS
let qq_int = code"10"
//│ 1. Typing term Quoted' 10 '
//│ | 1. Typing term 10
//│ | 1. : 10<int,number>
//│ 1. : Code[10<int,number>,{}]
//│ ⬤ Typed as: Code[10<int,number>,{}]
//│  where: 
//│ qq_int: Code[10, anything]

:d 
:ne
:NoJS
let qq_bool : Code<int> = code"10+2"
//│ 1. Typing term Quoted' + (10,) (2,) ' : AppliedType(TypeName(Code),List(TypeName(int)))
//│ | 1. Typing term Quoted' + (10,) (2,) '
//│ | | 1. Typing term + (10,) (2,)
//│ | | | Applying + (10,)(class mlscript.App) to 2,(class mlscript.Tup)
//│ | | | 1. Typing term + (10,)
//│ | | | | Applying +(class mlscript.Var) to 10,(class mlscript.Tup)
//│ | | | | 1. Typing term +
//│ | | | | 1. : (int<number> -> (int<number> -> int<number>))
//│ | | | | 1. Typing term 10,
//│ | | | | | 1. Typing term 10
//│ | | | | | 1. : 10<int,number>
//│ | | | | 1. : (10<int,number>,)
//│ | | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (10<int,number> -> α26')
//│ | | | |   where 
//│ | | | | C (int<number> -> (int<number> -> int<number>)) <! (10<int,number> -> α26')    (0)
//│ | | | | | C (10<int,number>,) <! (int<number>,)    (1)
//│ | | | | | C (int<number> -> int<number>) <! α26'    (1)
//│ | | | 1. : α26'
//│ | | | 1. Typing term 2,
//│ | | | | 1. Typing term 2
//│ | | | | 1. : 2<int,number>
//│ | | | 1. : (2<int,number>,)
//│ | | | CONSTRAIN α26' <! (2<int,number> -> α27')
//│ | | |   where 
//│ 		α26' :> (int<number> -> int<number>)
//│ | | | C α26' <! (2<int,number> -> α27')    (0)
//│ | | | | C (int<number> -> int<number>) <! (2<int,number> -> α27')    (1)
//│ | | | | | C (2<int,number>,) <! (int<number>,)    (2)
//│ | | | | | C int<number> <! α27'    (2)
//│ | | 1. : α27'
//│ | 1. : Code[α27',{}]
//│ | 1. Typing type AppliedType(TypeName(Code),List(TypeName(int)))
//│ | | vars=Map() newDefsInfo=Map()
//│ | => Code[Int,α28'] | 
//│ | CONSTRAIN Code[α27',{}] <! Code[Int,α28']
//│ |   where 
//│ 		α27' :> int<number>
//│ | C Code[α27',{}] <! Code[Int,α28']    (0)
//│ | | C α27' <! Int    (1)
//│ | | | C int<number> <! Int    (2)
//│ | | C α28' <! {}    (2)
//│ 1. : Code[Int,α28']
//│ ⬤ Typed as: Code[Int,α28']
//│  where: 
//│ ╔══[ERROR] Wrong number of type arguments – expected 2, found 1
//│ ║  l.18: 	let qq_bool : Code<int> = code"10+2"
//│ ╙──      	              ^^^^^^^^
//│ qq_bool: Code[int, anything]
