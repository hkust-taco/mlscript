:NewParser 

code"let x = code"1"; code"y => ${x} + 1""
//│ res: code & {Code#T <: code & {Code#T <: anything -> int}}
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ 'Quoted', [ '_', 1 ] ],
//│        [ 'Quoted', [ 'Lam', [Array], [Array] ] ]
//│      ]

run(run(res))(0)
//│ res: int
//│    = 2

code"let x = code"2"; code"${x}""
//│ res: code & {Code#T <: code & {Code#T <: 2}}
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ 'Quoted', [ '_', 2 ] ],
//│        [ 'Quoted', [ 'Unquoted', Symbol(x) ] ]
//│      ]
run(res)
//│ res: code & {Code#T <: 2}
//│    = [ 'Unquoted', [ '_', 2 ] ]
run(res)
//│ res: 2
//│    = 2

code"let x = code"2"; let y = code"3"; x"
//│ res: code & {Code#T <: code & {Code#T <: 2}}
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ 'Quoted', [ '_', 2 ] ],
//│        [
//│          'Let',
//│          'y',
//│          Symbol(y),
//│          [ 'Quoted', [Array] ],
//│          [ 'Var', Symbol(x) ]
//│        ]
//│      ]
run(res)
//│ res: code & {Code#T <: 2}
//│    = [ '_', 2 ]

code"let y = code"2"; x => y"
//│ res: code & {Code#T <: anything -> (code & {Code#T <: 2})}
//│    = [
//│        'Let',
//│        'y',
//│        Symbol(y),
//│        [ 'Quoted', [ '_', 2 ] ],
//│        [ 'Lam', [ [Array] ], [ 'Var', Symbol(y) ] ]
//│      ]

run(res)(0)
//│ res: code & {Code#T <: 2}
//│    = 2

code"x => x"
//│ res: code & {Code#T <: 'a -> 'a}
//│    = [ 'Lam', [ [ '_', 'x', 'x' ] ], [ 'Var', [ 'FreeVar', 'x' ] ] ]
run(res)(0)
//│ res: 0
//│    = 0

let y = code"1"
code"""x => x + ${y}"""
//│ y: code & {Code#T <: 1}
//│  = [ '_', 1 ]
//│ res: code & {Code#T <: int -> int}
//│    = [
//│        'Lam',
//│        [ [ '_', 'x', 'x' ] ],
//│        [ 'App', '+', [ 'Var', [Array] ], [ 'Unquoted', [Array] ] ]
//│      ]

run(res)(3)
//│ res: int
//│    = 4

let x = code"1"
code"""x => x + ${x}"""
//│ x: code & {Code#T <: 1}
//│  = [ '_', 1 ]
//│ res: code & {Code#T <: int -> int}
//│    = [
//│        'Lam',
//│        [ [ '_', 'x', 'x1' ] ],
//│        [ 'App', '+', [ 'Var', [Array] ], [ 'Unquoted', [Array] ] ]
//│      ]

run(res)(0)
//│ res: int
//│    = 1

let x = code"2"
//│ x: code & {Code#T <: 2}
//│  = [ '_', 2 ]

code"""x => (let x = 1; x + ${x})"""
//│ res: code & {Code#T <: anything -> (int,)}
//│    = [ 'Lam', [ [ '_', 'x', 'x2' ] ], [ 'Bra', [ 'Tup', [Array] ] ] ]

run(res)("happy")
//│ res: (int,)
//│    = [ 3 ]

code"let x = code"1"; code"let x = code"2"; ${x}""
//│ res: code & {Code#T <: code & {Code#T <: 1}}
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ 'Quoted', [ '_', 1 ] ],
//│        [ 'Quoted', [ 'Let', 'x', Symbol(x), [Array], [Array] ] ]
//│      ]
run(res)
//│ res: code & {Code#T <: 1}
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ 'Quoted', [ '_', 2 ] ],
//│        [ 'Unquoted', [ '_', 1 ] ]
//│      ]
run(res)
//│ res: 1
//│    = 1

let x = code"1"
code"let x1 = code"100"; let x2 = code"200"; code"let y = 100; ${x}""
//│ x: code & {Code#T <: 1}
//│  = [ '_', 1 ]
//│ res: code & {Code#T <: code & {Code#T <: 1}}
//│    = [
//│        'Let',
//│        'x1',
//│        Symbol(x1),
//│        [ 'Quoted', [ '_', 100 ] ],
//│        [
//│          'Let',
//│          'x2',
//│          Symbol(x2),
//│          [ 'Quoted', [Array] ],
//│          [ 'Quoted', [Array] ]
//│        ]
//│      ]
run(res)
//│ res: code & {Code#T <: 1}
//│    = [ 'Let', 'y', Symbol(y), [ '_', 100 ], [ 'Unquoted', [ '_', 1 ] ] ]
run(res)
//│ res: 1
//│    = 1


code"x => ${code"x + 1"}"
//│ ╔══[ERROR] Using free variables are not allowed in this version
//│ ║  l.163: 	code"x => ${code"x + 1"}"
//│ ╙──       	                 ^
//│ res: code & {Code#T <: anything -> int}
//│    = [
//│        'Lam',
//│        [ [ '_', 'x', 'x3' ] ],
//│        [ 'Unquoted', [ 'App', '+', [Array], [Array] ] ]
//│      ]
:e
run(res)(1)
//│ res: int
//│    = 2

code"x => code"${x}""
//│ res: code & {Code#T <: (code & {Code#T <: 'a}) -> (code & {Code#T <: 'a})}
//│    = [
//│        'Lam',
//│        [ [ '_', 'x', 'x3' ] ],
//│        [ 'Quoted', [ 'Unquoted', [Array] ] ]
//│      ]
run(res)(code"1")
//│ res: code & {Code#T <: 1}
//│    = [ 'Unquoted', [ '_', 1 ] ]
