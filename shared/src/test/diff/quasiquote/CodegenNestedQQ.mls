:NewParser 

// BUG
code"let x = code"2"; y => code"${x}""
//│ res: Code[anything -> Code[2, anything], anything]
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ 'Quoted', [ '_', 2 ] ],
//│        [ '_', [Function (anonymous)] ]
//│      ]

run(res)(0)
//│ res: Code[2, anything]
//│    = [ 'Unquoted', Symbol(x) ]


let y = code"1"
code"""x => x + ${y}"""
//│ y: Code[1, anything]
//│  = [ '_', 1 ]
//│ res: Code[int -> int, anything\x]
//│    = [ '_', [Function (anonymous)] ]

run(res)(0)
//│ res: int
//│    = 1

let x = code"1"
code"""x => x + ${x}"""
//│ x: Code[1, anything]
//│  = [ '_', 1 ]
//│ res: Code[int -> int, anything\x]
//│    = [ '_', [Function (anonymous)] ]

run(res)(0)
//│ res: int
//│    = 1

let x = code"2"
//│ x: Code[2, anything]
//│  = [ '_', 2 ]

code"""x => (let x = 1; x + ${x})"""
//│ res: Code[anything -> (int,), anything\x]
//│    = [ '_', [Function (anonymous)] ]

run(res)("happy")
//│ res: (int,)
//│    = [ 3 ]


code"let x = code"1"; code"let x = code"2"; ${x}""
//│ res: Code[Code[1, anything\x], anything]
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ 'Quoted', [ '_', 1 ] ],
//│        [ 'Quoted', [ 'Let', 'x', Symbol(x), [Array], [Array] ] ]
//│      ]

run(res)
//│ res: Code[1, anything\x]
//│    = [
//│        'Let',
//│        'x',
//│        Symbol(x),
//│        [ 'Quoted', [ '_', 2 ] ],
//│        [ 'Unquoted', [ '_', 1 ] ]
//│      ]

run(res)
//│ res: 1
//│    = 1

code"let x1 = code"100"; let x2 = code"200"; code"let y = 100; ${x}""
//│ res: Code[Code[2, anything\y], anything]
//│    = [
//│        'Let',
//│        'x1',
//│        Symbol(x1),
//│        [ 'Quoted', [ '_', 100 ] ],
//│        [
//│          'Let',
//│          'x2',
//│          Symbol(x2),
//│          [ 'Quoted', [Array] ],
//│          [ 'Quoted', [Array] ]
//│        ]
//│      ]

run(res)
//│ res: Code[2, anything\y]
//│    = [ 'Let', 'y', Symbol(y), [ '_', 100 ], [ 'Unquoted', [ '_', 2 ] ] ]

run(res)
//│ res: 2
//│    = 2

// equivalent to code"x => x"
code"""x => code"${x}""""
//│ res: Code[Code['a, 'b] -> Code['a, 'b], anything]
//│    = [ '_', [Function (anonymous)] ]

run(res)(code"1")
//│ res: Code[1, anything]
//│    = [ 'Unquoted', [ '_', 1 ] ]

run(res)
//│ res: 1
//│    = 1
