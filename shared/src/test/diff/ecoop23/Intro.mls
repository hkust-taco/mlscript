:NewParser
:NewDefs


// * Examples from paper intro


class Some<A>(value: A)
module None
//│ class Some[A](value: A)
//│ module None()



mixin ComparePoint {
  fun compare(lhs, rhs) =
    (lhs.x === rhs.x) && (lhs.y === rhs.y)
}
//│ mixin ComparePoint() {
//│   fun compare: forall 'a 'b. ({x: Eql['a], y: Eql['b]}, {x: 'a, y: 'b},) -> bool
//│ }


class Color(str: string) {
  fun equals(that) = str === that.str
}
//│ class Color(str: string) {
//│   fun equals: {str: string} -> bool
//│ }

let Red = Color("red")
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.31: 	let Red = Color("red")
//│ ║        	          ^^^^^^^^^^^^
//│ ╟── string literal of type `"red"` is not an instance of type `string`
//│ ║  l.31: 	let Red = Color("red")
//│ ║        	                ^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.24: 	class Color(str: string) {
//│ ╙──      	                 ^^^^^^
//│ let Red: Color | error
//│ Red
//│     = Color {}


mixin CompareColored {
  fun compare(lhs, rhs) =
    super.compare(lhs, rhs) && lhs.color.equals(rhs.color)
}
//│ mixin CompareColored() {
//│   super: {compare: ('a, 'b,) -> bool}
//│   fun compare: forall 'color. ({color: {equals: 'color -> bool}} & 'a, {color: 'color} & 'b,) -> bool
//│ }



// * Explicit version from paper:

// interface Nested[Base] { parent: Option[Base] }

// mixin CompareNested[Base, Final] {
//   super: { compare: (Base, Base) -> Bool }
//   this:  { compare: (Final, Final) -> Bool }
//  
//   fun compare(lhs: Base & Nested[Final], rhs: Base & Nested[Final]): Bool =
//     super.compare(lhs, rhs) &&
//       if lhs.parent is Some(p)
//         then rhs.parent is Some(q) and this.compare(p, q)
//         else rhs.parent is None
// }

// * Implicit version:

mixin CompareNested {
  fun compare(lhs, rhs): bool =
    super.compare(lhs, rhs) &&
      if lhs.parent is Some(p)
        then rhs.parent is Some(q) and this.compare(p, q)
        else rhs.parent is None
}
//│ mixin CompareNested() {
//│   super: {compare: ('a, 'b,) -> bool}
//│   this: {compare: ('value, 'value0,) -> bool}
//│   fun compare: ({parent: #Object & ~#Some | Some['value]} & 'a, {parent: #Object & ~#Some | Some['value0]} & 'b,) -> bool
//│ }

// * Alternatively:

// mixin CompareNested {
//   fun compare(lhs, rhs): bool =
//     super.compare(lhs, rhs) &&
//       if lhs.parent is
//         Some(p) then rhs.parent is Some(q) and this.compare(p, q)
//         None    then rhs.parent is None
// }



class MyPoint(x: int, y: int, color: Color, parent: Some[MyPoint] | None)
//│ class MyPoint(x: int, y: int, color: Color, parent: Some[MyPoint] | None)


module CompareMyPoint extends ComparePoint, CompareColored, CompareNested
//│ module CompareMyPoint() {
//│   fun compare: ('a, 'b,) -> bool
//│ }
//│ where
//│   'b <: {color: 'color, parent: #Object & ~#Some | Some['b], x: 'c, y: 'd}
//│   'a <: {color: {equals: 'color -> bool}, parent: #Object & ~#Some | Some['a], x: Eql['c], y: Eql['d]}


let p0 = MyPoint(0, 0, Red, None)
let p1 = MyPoint(0, 1, Red, None)
let p2 = MyPoint(0, 1, Red, None)
let p3 = MyPoint(0, 1, Red, Some(p1))
let p4 = MyPoint(0, 1, Red, Some(p2))
let p5 = MyPoint(0, 1, Red, Some(p3))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.112: 	let p0 = MyPoint(0, 0, Red, None)
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `int`
//│ ║  l.112: 	let p0 = MyPoint(0, 0, Red, None)
//│ ║         	                 ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.99: 	class MyPoint(x: int, y: int, color: Color, parent: Some[MyPoint] | None)
//│ ╙──      	                 ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.113: 	let p1 = MyPoint(0, 1, Red, None)
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `int`
//│ ║  l.113: 	let p1 = MyPoint(0, 1, Red, None)
//│ ║         	                 ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.99: 	class MyPoint(x: int, y: int, color: Color, parent: Some[MyPoint] | None)
//│ ╙──      	                 ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.114: 	let p2 = MyPoint(0, 1, Red, None)
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `int`
//│ ║  l.114: 	let p2 = MyPoint(0, 1, Red, None)
//│ ║         	                 ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.99: 	class MyPoint(x: int, y: int, color: Color, parent: Some[MyPoint] | None)
//│ ╙──      	                 ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.115: 	let p3 = MyPoint(0, 1, Red, Some(p1))
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `int`
//│ ║  l.115: 	let p3 = MyPoint(0, 1, Red, Some(p1))
//│ ║         	                 ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.99: 	class MyPoint(x: int, y: int, color: Color, parent: Some[MyPoint] | None)
//│ ╙──      	                 ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.116: 	let p4 = MyPoint(0, 1, Red, Some(p2))
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `int`
//│ ║  l.116: 	let p4 = MyPoint(0, 1, Red, Some(p2))
//│ ║         	                 ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.99: 	class MyPoint(x: int, y: int, color: Color, parent: Some[MyPoint] | None)
//│ ╙──      	                 ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.117: 	let p5 = MyPoint(0, 1, Red, Some(p3))
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `int`
//│ ║  l.117: 	let p5 = MyPoint(0, 1, Red, Some(p3))
//│ ║         	                 ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.99: 	class MyPoint(x: int, y: int, color: Color, parent: Some[MyPoint] | None)
//│ ╙──      	                 ^^^
//│ let p0: MyPoint | error
//│ let p1: MyPoint | error
//│ let p2: MyPoint | error
//│ let p3: MyPoint | error
//│ let p4: MyPoint | error
//│ let p5: MyPoint | error
//│ p0
//│    = MyPoint {}
//│ p1
//│    = MyPoint {}
//│ p2
//│    = MyPoint {}
//│ p3
//│    = MyPoint {}
//│ p4
//│    = MyPoint {}
//│ p5
//│    = MyPoint {}


CompareMyPoint.compare(p0, p1)
//│ bool
//│ res
//│     = false

CompareMyPoint.compare(p1, p2)
//│ bool
//│ res
//│     = true

CompareMyPoint.compare(p3, p4)
//│ bool
//│ res
//│     = true

CompareMyPoint.compare(p3, p5)
//│ bool
//│ res
//│     = false



