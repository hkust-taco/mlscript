:NewDefs


// * Examples from paper intro


class Some<A>(value: A)
module None
//│ class Some[A](value: A)
//│ module None



mixin ComparePoint {
  fun compare(lhs, rhs) =
    (lhs.x === rhs.x) && (lhs.y === rhs.y)
}
//│ mixin ComparePoint() {
//│   fun compare: ({x: Eql['a], y: Eql['b]}, {x: 'a, y: 'b}) -> Bool
//│ }


class Color(val str: Str) {
  fun equals(that) = str === that.str
}
//│ class Color(str: Str) {
//│   fun equals: {str: anything} -> Bool
//│ }

let Red = Color("red")
//│ let Red: Color
//│ Red
//│     = Color {}


mixin CompareColored {
  fun compare(lhs, rhs) =
    super.compare(lhs, rhs) && lhs.color.equals(rhs.color)
}
//│ mixin CompareColored() {
//│   super: {compare: ('a, 'b) ->{'c} Bool}
//│   fun compare: ({color: {equals: 'color ->{'c} Bool}} & 'a, {color: 'color} & 'b) ->{'c} Bool
//│ }



// * Explicit version from paper:

// interface Nested[Base] { parent: Option[Base] }

// mixin CompareNested[Base, Final] {
//   super: { compare: (Base, Base) -> Bool }
//   this:  { compare: (Final, Final) -> Bool }
//  
//   fun compare(lhs: Base & Nested[Final], rhs: Base & Nested[Final]): Bool =
//     super.compare(lhs, rhs) &&
//       if lhs.parent is Some(p)
//         then rhs.parent is Some(q) and this.compare(p, q)
//         else rhs.parent is None
// }

// * Implicit version:

mixin CompareNested {
  fun compare(lhs, rhs): Bool =
    super.compare(lhs, rhs) &&
      if lhs.parent is Some(p)
        then rhs.parent is Some(q) and this.compare(p, q)
        else rhs.parent is None
}
//│ mixin CompareNested() {
//│   super: {compare: ('a, 'b) ->{'c} Bool}
//│   this: {compare: ('d, 'e) ->{'c} Bool}
//│   fun compare: ({parent: Object & ~#Some | Some['d]} & 'a, {parent: Object & ~#Some | Some['e]} & 'b) ->{'c} Bool
//│ }

// * Alternatively:

// mixin CompareNested {
//   fun compare(lhs, rhs): Bool =
//     super.compare(lhs, rhs) &&
//       if lhs.parent is
//         Some(p) then rhs.parent is Some(q) and this.compare(p, q)
//         None    then rhs.parent is None
// }



class MyPoint(val x: Int, val y: Int, val color: Color, val parent: Some[MyPoint] | None)
//│ class MyPoint(x: Int, y: Int, color: Color, parent: None | Some[MyPoint])


module CompareMyPoint extends ComparePoint, CompareColored, CompareNested
//│ module CompareMyPoint {
//│   fun compare: ('a, 'b) ->{'c} Bool
//│ }
//│ where
//│   'b <: {color: 'color, parent: Object & ~#Some | Some['b], x: 'd, y: 'e}
//│   'a <: {
//│     color: {equals: 'color ->{'c} Bool},
//│     parent: Object & ~#Some | Some['a],
//│     x: Eql['d],
//│     y: Eql['e]
//│   }


let p0 = MyPoint(0, 0, Red, None)
let p1 = MyPoint(0, 1, Red, None)
let p2 = MyPoint(0, 1, Red, None)
let p3 = MyPoint(0, 1, Red, Some(p1))
let p4 = MyPoint(0, 1, Red, Some(p2))
let p5 = MyPoint(0, 1, Red, Some(p3))
//│ let p0: MyPoint
//│ let p1: MyPoint
//│ let p2: MyPoint
//│ let p3: MyPoint
//│ let p4: MyPoint
//│ let p5: MyPoint
//│ p0
//│    = MyPoint {}
//│ p1
//│    = MyPoint {}
//│ p2
//│    = MyPoint {}
//│ p3
//│    = MyPoint {}
//│ p4
//│    = MyPoint {}
//│ p5
//│    = MyPoint {}


CompareMyPoint.compare(p0, p1)
//│ Bool
//│ res
//│     = false

CompareMyPoint.compare(p1, p2)
//│ Bool
//│ res
//│     = true

CompareMyPoint.compare(p3, p4)
//│ Bool
//│ res
//│     = true

CompareMyPoint.compare(p3, p5)
//│ Bool
//│ res
//│     = false



