:NewDefs


class Some[out A](val value: A)
module None
//│ class Some[A](value: A)
//│ module None

mixin ComparePoint {
  fun compare(lhs, rhs) = (lhs.x === rhs.x) && (lhs.y === rhs.y)
}
mixin CompareColored {
  fun compare(lhs, rhs) =
    super.compare(lhs, rhs) && (lhs.color === rhs.color)
}
mixin CompareNested {
  fun compare(lhs, rhs) =
    super.compare(lhs, rhs) &&
      if lhs.parent is Some(p)
        then rhs.parent is Some(q) and this.compare(p, q)
        else rhs.parent is None
}
//│ mixin ComparePoint() {
//│   fun compare: ({x: Eql['a], y: Eql['b]}, {x: 'a, y: 'b}) -> Bool
//│ }
//│ mixin CompareColored() {
//│   super: {compare: ('c, 'd) -> Bool}
//│   fun compare: ({color: Eql['e]} & 'c, {color: 'e} & 'd) -> Bool
//│ }
//│ mixin CompareNested() {
//│   super: {compare: ('f, 'g) -> Bool}
//│   this: {compare: (??A & 'A, ??A0 & 'A0) -> Bool}
//│   fun compare: ({parent: Object & ~#Some | Some['A]} & 'f, {parent: Object & ~#Some | Some['A0]} & 'g) -> Bool
//│ }

class MyPoint[out Col](val x: Int, val y: Int, val color: Col, val parent: Some[MyPoint[Col]] | None)
//│ class MyPoint[Col](x: Int, y: Int, color: Col, parent: None | Some[MyPoint[Col]])

module CompareMyPoint extends ComparePoint, CompareColored, CompareNested
//│ module CompareMyPoint {
//│   fun compare: ({color: Eql['a], parent: 'parent, x: Eql['b], y: Eql['c]}, {color: 'a, parent: Object & 'parent0, x: 'b, y: 'c}) -> Bool
//│ }
//│ where
//│   'parent0 <: Object & ~#Some | Some[{color: 'a, parent: Object & 'parent0, x: 'b, y: 'c} | ~??A]
//│   'parent <: Object & ~#Some | Some[{color: Eql['a], parent: 'parent, x: Eql['b], y: Eql['c]} | ~??A0]

let Red = 0
let p0 = MyPoint(0, 0, Red, None)
let p1 = MyPoint(0, 1, Red, None)
let p2 = MyPoint(0, 1, Red, None)
let p3 = MyPoint(0, 1, Red, Some(p1))
let p4 = MyPoint(0, 1, Red, Some(p2))
let p5 = MyPoint(0, 1, Red, Some(p3))
//│ let Red: 0
//│ let p0: MyPoint[0]
//│ let p1: MyPoint[0]
//│ let p2: MyPoint[0]
//│ let p3: MyPoint[0]
//│ let p4: MyPoint[0]
//│ let p5: MyPoint[0]
//│ Red
//│     = 0
//│ p0
//│    = MyPoint {}
//│ p1
//│    = MyPoint {}
//│ p2
//│    = MyPoint {}
//│ p3
//│    = MyPoint {}
//│ p4
//│    = MyPoint {}
//│ p5
//│    = MyPoint {}

CompareMyPoint.compare(p0, p1)
CompareMyPoint.compare(p1, p2)
CompareMyPoint.compare(p3, p4)
CompareMyPoint.compare(p3, p5)
//│ Bool
//│ res
//│     = false
//│ res
//│     = true
//│ res
//│     = true
//│ res
//│     = false


