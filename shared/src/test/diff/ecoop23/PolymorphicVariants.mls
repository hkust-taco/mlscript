:NewDefs


// * Adapted example from Code reuse through polymorphic variants (FOSE 2000)


class Cons[out A](head: A, tail: Cons[A] | Nil)
module Nil
//│ class Cons[A](head: A, tail: Cons[A] | Nil)
//│ module Nil

let l = Cons(1, Nil)
//│ let l: Cons[1]
//│ l
//│   = Cons {}

class NotFound()
class Success[out A](result: A)
//│ class NotFound()
//│ class Success[A](result: A)

fun list_assoc(s, l) =
  if l is
    Cons(h, t) then
      if s === h._1 then Success(h._2)
      else list_assoc(s, t)
    Nil then NotFound()
//│ fun list_assoc: forall 'a 'A. (Eql['a], Cons[{_1: 'a, _2: 'A}] | Nil,) -> (NotFound | Success['A])

// fun list_assoc(s: Str, l: Cons[{ _1: Str, _2: 'b }] | Nil): NotFound | Success['b]

class Var(s: Str)
//│ class Var(s: Str)

mixin EvalVar {
  fun eval(sub, v) =
    if v is Var(s) then
      if list_assoc(s, sub) is
        NotFound then v
        Success(r) then r
}
//│ mixin EvalVar() {
//│   fun eval: (Cons[{_1: anything, _2: 'result}] | Nil, Var,) -> (Var | 'result)
//│ }

class Abs[A](x: Str, t: A)
class App[A](s: A, t: A)
//│ class Abs[A](x: Str, t: A)
//│ class App[A](s: A, t: A)

fun gensym(): Str = "fun"
//│ fun gensym: () -> Str

fun int_to_string(x: Int): Str = "0"
//│ fun int_to_string: (x: Int,) -> Str

mixin EvalLambda {
  fun eval(sub, v) =
    if v is
      App(t1, t2) then
        let l1 = this.eval(sub, t1)
        let l2 = this.eval(sub, t2)
        if t1 is
          Abs(x, t) then this.eval(Cons((x, l2), Nil), t)
        else
          App(l1, l2)
      Abs(x, t) then
        let s = gensym()
        Abs(s, this.eval(Cons((x, Var(s)), sub), t))
    else
      super.eval(sub, v)
}
//│ mixin EvalLambda() {
//│   super: {eval: ('a, 'b,) -> 'c}
//│   this: {eval: ('a, 's,) -> ('A & 'd) & (Cons[(Str, 'd,)], 't,) -> 'c & (Cons[(Str, Var,) | 'A0], 't0,) -> 'A1}
//│   fun eval: ('a & (Cons['A0] | Nil), Abs['t0] | App['s & (Abs['t] | #Object & ~#Abs)] | #Object & 'b & ~#Abs & ~#App,) -> (Abs['A1] | App['A] | 'c)
//│ }

module Test1 extends EvalVar, EvalLambda
//│ module Test1 {
//│   fun eval: forall 'a. (Cons[{_1: anything, _2: 'result}] | Nil, Abs['t] | App['A] | Var,) -> ('result | 'a)
//│ }
//│ where
//│   't <: Abs['t] | App['A] | Var
//│   'A <: Abs['t & (Abs['t] | App['A] | Var)] | Abs['t] & ~#Abs | App['A] | Var
//│   'result :> 'a | Var
//│   'a :> App['result | 'a] | Abs['result | 'a]

Test1.eval(Nil, Var("a"))
//│ forall 'a. 'b | 'a | 'c
//│   where
//│     'b :> forall 'a. 'a | 'c
//│     'a :> App[forall 'a. 'b | 'a | 'c] | Abs[forall 'a. 'b | 'a | 'c]
//│     'c :> forall 'a. Var | 'b | 'a
//│ res
//│     = Var {}

Test1.eval(Nil, Abs("b", Var("a")))
//│ forall 'a. 'b | 'a | 'c
//│   where
//│     'b :> forall 'a. 'a | 'c
//│     'a :> App[forall 'a. 'b | 'a | 'c] | Abs[forall 'a. 'b | 'a | 'c]
//│     'c :> forall 'a. Var | 'b | 'a
//│ res
//│     = Abs {}

Test1.eval(Cons(("c", Var("d")), Nil), App(Abs("b", Var("b")), Var("c")))
//│ forall 'a. 'b | 'a | 'c
//│   where
//│     'b :> forall 'a. 'a | 'c
//│     'a :> App[forall 'a. 'b | 'a | 'c] | Abs[forall 'a. 'b | 'a | 'c]
//│     'c :> forall 'a. Var | 'b | 'a
//│ res
//│     = Var {}

Test1.eval(Cons(("c", Abs("d", Var("d"))), Nil), App(Abs("b", Var("b")), Var("c")))
//│ forall 'a. 'b | 'a | 'c
//│   where
//│     'b :> forall 'a. 'a | 'c
//│     'a :> App[forall 'a. 'b | 'a | 'c] | Abs[forall 'a. 'b | 'a | 'c]
//│     'c :> forall 'a. Abs[Var] | Var | 'b | 'a
//│ res
//│     = Var {}

class Num(n: Int)
class Add[A](l: A, r: A)
class Mul[A](l: A, r: A)
//│ class Num(n: Int)
//│ class Add[A](l: A, r: A)
//│ class Mul[A](l: A, r: A)

fun map_expr(f, v) =
  if v is
    Var then v
    Num then v
    Add(l, r) then Add(f(l), f(r))
    Mul(l, r) then Mul(f(l), f(r))
//│ fun map_expr: forall 'l 'A 'l0 'A0. ('l -> 'A & 'l0 -> 'A0, Add['l] | Mul['l0] | Num | Var,) -> (Add['A] | Mul['A0] | Num | Var)

mixin EvalExpr {
  fun eval(sub, v) =
    fun eta(e) = this.eval(sub, e)
    let vv = map_expr(eta, v)
    if vv is
      Var then super.eval(sub, vv)
      Add(Num(l), Num(r)) then Num(l + r)
      Mul(Num(l), Num(r)) then Num(l * r)
    else v
}
//│ mixin EvalExpr() {
//│   super: {eval: ('a, Var,) -> 'b}
//│   this: {eval: ('a, 'c,) -> #Object}
//│   fun eval: ('a, 'b & (Add['c] | Mul['c] | Num | Var),) -> (Num | 'b)
//│ }

module Test2 extends EvalVar, EvalExpr
//│ module Test2 {
//│   fun eval: forall 'a. (Cons[{_1: anything, _2: #Object & 'result}] | Nil, 'a & (Add['b] | Mul['b] | Num | Var),) -> (Num | Var | 'result | 'a)
//│ }
//│ where
//│   'b <: Add['b] | Mul['b] | Num | Var

Test2.eval(Nil, Var("a"))
//│ Num | Var
//│ res
//│     = Var {}

Test2.eval(Cons(("c", Abs("d", Var("d"))), Nil), Var("a"))
//│ Abs[Var] | Num | Var
//│ res
//│     = Var {}

Test2.eval(Cons(("a", Num(1)), Nil), Var("a"))
//│ Num | Var
//│ res
//│     = Var {}

// * This expected error shows that Test2 does not handle Abs expression inputs
:e
Test2.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.180: 	Test2.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Abs[?A]` does not match type `Add[?A0] | Mul[?A1] | Num | Var`
//│ ║  l.180: 	Test2.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ ║         	                                                 ^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.133: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.143: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ Abs[Var] | Num | Var | error
//│ res
//│ Runtime error:
//│   Error: non-exhaustive case expression

Test2.eval(Cons(("a", Abs("d", Var("d"))), Nil), Add(Num(1), Var("a")))
//│ Abs[Var] | Add[Num | Var] | Num | Var
//│ res
//│     = Add {}

module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ module Test3 {
//│   fun eval: forall 'A 'a. (Cons[{_1: anything, _2: 'result}] | Nil, Abs['t] | App['A] | #Object & 'b & ~#Abs & ~#App,) -> ('c | 'a)
//│ }
//│ where
//│   'result :> 'c | 'a
//│           <: #Object
//│   'c :> Num | Var | 'result | 'b | 'a
//│   'a :> App['c | 'a] | Abs['c | 'a]
//│   'b <: Add['d] | Mul['d] | Num | Var
//│   'd <: Abs['t] | App['A] | #Object & 'b & ~#Abs & ~#App
//│   't <: Abs['t] | App['A] | #Object & 'b & ~#Abs & ~#App
//│   'A <: Abs['t & (Abs['t] | App['A] | #Object & 'b & ~#Abs & ~#App)] | Abs['t] & ~#Abs | App['A] | #Object & 'b & ~#Abs & ~#App

Test3.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ forall 'a. 'b | 'a | 'c
//│   where
//│     'b :> forall 'a. 'a | 'c
//│     'a :> App[forall 'a. 'b | 'a | 'c] | Abs[forall 'a. 'b | 'a | 'c]
//│     'c :> Abs[Var] | Num | Var | 'b
//│ res
//│     = Abs {}

Test3.eval(Cons(("c", Abs("d", Var("d"))), Nil), App(Abs("a", Var("a")), Add(Num(1), Var("c"))))
//│ forall 'a. 'b | 'a | 'c
//│   where
//│     'b :> forall 'a. 'a | 'c
//│     'a :> App[forall 'a. 'b | 'a | 'c] | Abs[forall 'a. 'b | 'a | 'c]
//│     'c :> Abs[Var] | Add[Num | Var] | Num | Var | 'b
//│ res
//│     = Var {}

// * Incorrect version, for regression testing – EvalLambda should be mixed in after EvalExpr
module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ module Test3 {
//│   fun eval: forall 'a. (Cons[{_1: anything, _2: 'result}] | Nil, 'a & (Add['b] | Mul['b] | Num | Var),) -> ('a | 'c)
//│ }
//│ where
//│   'b <: Add['b] | Mul['b] | Num | Var
//│   'result :> 'c
//│           <: #Object
//│   'c :> Abs[Num | 'c] | App[Num | 'c] | Num | Var | 'result

// * Because EvalExpr does not dispatch lambdas to super and map_expr only
// * handles exprs
:e
Test3.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.249: 	Test3.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Abs[?A]` does not match type `Add[?A0] | Mul[?A1] | Num | Var`
//│ ║  l.249: 	Test3.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ ║         	                                                 ^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.133: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.143: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ Abs[Var] | error | 'a
//│   where
//│     'a :> Abs[Num | 'a] | App[Num | 'a] | Num | Var
//│ res
//│ Runtime error:
//│   Error: non-exhaustive case expression

