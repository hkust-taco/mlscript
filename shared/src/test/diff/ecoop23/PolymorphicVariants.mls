:NewDefs


// * Adapted example from Code reuse through polymorphic variants (FOSE 2000)


class Cons[out A](head: A, tail: Cons[A] | Nil)
module Nil
//│ class Cons[A](head: A, tail: Cons[A] | Nil)
//│ module Nil()

let l = Cons(1, Nil)
//│ let l: Cons[1]
//│ l
//│   = Cons {}

class NotFound
class Success[A](result: A)
//│ class NotFound()
//│ class Success[A](result: A)

fun list_assoc(s, l) =
  if l is
    Cons(h, t) then
      if s === h._1 then Success(h._2)
      else list_assoc(s, t)
    Nil then NotFound()
//│ fun list_assoc: forall 'a 'A. (Eql['a], Cons[{_1: 'a, _2: 'A}] | Nil,) -> (NotFound | Success['A])

// fun list_assoc(s: Str, l: Cons[{ _1: Str, _2: 'b }] | Nil): NotFound | Success['b]

class Var(s: Str)
//│ class Var(s: Str)

mixin EvalVar {
  fun eval(sub, v) =
    if v is Var(s) then
      if list_assoc(s, sub) is
        NotFound then v
        Success(r) then r
}
//│ mixin EvalVar() {
//│   fun eval: forall 'result. (Cons[{_1: anything, _2: 'result}] | Nil, Var,) -> (Var | 'result)
//│ }

class Abs[A](x: Str, t: A)
class App[A](s: A, t: A)
//│ class Abs[A](x: Str, t: A)
//│ class App[A](s: A, t: A)

fun gensym(): Str = "fun"
//│ fun gensym: () -> Str

fun int_to_string(x: Int): Str = "0"
//│ fun int_to_string: (x: Int,) -> Str

mixin EvalLambda {
  fun eval(sub, v) =
    if v is
      App(t1, t2) then
        let l1 = this.eval(sub, t1)
        let l2 = this.eval(sub, t2)
        if t1 is
          Abs(x, t) then this.eval(Cons((x, l2), Nil), t)
        else
          App(l1, l2)
      Abs(x, t) then
        let s = gensym()
        Abs(s, this.eval(Cons((x, Var(s)), sub), t))
    else
      super.eval(sub, v)
}
//│ mixin EvalLambda() {
//│   super: {eval: ('a, 'b,) -> 'c}
//│   this: {eval: ('a, 's,) -> ('d & 'e) & (Cons[(Str, 'e,)], 't,) -> 'c & (Cons[(Str, Var,) | 'A], 't0,) -> 'f}
//│   fun eval: ('a & (Cons['A] | Nil), Abs['t0] | App['s & (Abs['t] | #Object & ~#Abs)] | #Object & 'b & ~#Abs & ~#App,) -> (Abs['f] | App['d | 'e] | 'c)
//│ }

// FIXME type simplification
:ns
module Test1 extends EvalVar, EvalLambda
//│ module Test1() {
//│   fun eval: ('a, 'b,) -> ('c | 'd | 'e | 'f)
//│ }
//│ where
//│   'b <: (#App & {App#A <: 'A} | (#Abs & {Abs#A <: 'A0} | 'g & ~#Abs) & ~#App) & #Object
//│   'g <: 'h
//│   'h <: 'i
//│   'i <: #Var & #Object
//│   'A0 <: 't
//│   't <: 't0
//│   't0 <: 'b
//│   'A <: 't1 & 's
//│   's <: (#Abs & {Abs#A <: 'A1} | 'j & ~#Abs) & #Object & 's0
//│   's0 <: 'b
//│   'A1 <: 't2
//│   't2 <: 't3
//│   't3 <: 'b
//│   't1 <: 't4
//│   't4 <: 'b
//│   'a :> #Cons & {Cons#A :> 'A2 <: 'A3} | #Cons & {Cons#A :> 'A4 <: 'A5}
//│      <: 'k & (Cons['A6] | Nil) & 'l & 'm
//│   'm :> #Cons & {Cons#A :> 'A2 <: 'A3} | #Cons & {Cons#A :> 'A4 <: 'A5}
//│      <: 'a
//│   'l :> #Cons & {Cons#A :> 'A2 <: 'A3} | #Cons & {Cons#A :> 'A4 <: 'A5}
//│      <: 'a
//│   'A6 :> 'A3 & 'A7 | 'A5 & 'A8 | 'A4 | ('x, 'n,)
//│       <: ('A2 | 'A7) & ('A4 | 'A8) & 'A5
//│   'A8 := in 'A4 out 'A5
//│   'k :> #Cons & {Cons#A :> 'A2 <: 'A3} | #Cons & {Cons#A :> 'A4 <: 'A5}
//│      <: 'o
//│   'o :> #Cons & {Cons#A :> 'A2 <: 'A3} | #Cons & {Cons#A :> 'A4 <: 'A5}
//│      <: 'p
//│   'p :> #Cons & {Cons#A :> 'A2 <: 'A3} | #Cons & {Cons#A :> 'A4 <: 'A5} | Cons['A9] | Nil
//│      <: (#Cons & {Cons#A <: 'A10} | #Nil & ~#Cons) & #Object
//│   'A9 := out 'A10
//│   'A10 :> 'A3 & 'A11 | 'A5 & 'A12
//│        <: 'head
//│   'head :> 'A3 & 'A11 | 'A5 & 'A12
//│         <: {_2: 'q} & {_1: 'r}
//│   'A12 := in 'A4 out 'A5
//│   'A11 := in 'A2 out 'A3
//│   'A5 :> 'A3 & 'A7 | 'A4 | ('x0, 'u,)
//│       <: 'A2 & {_1: 'r} & {_2: 'q}
//│   'A2 :> ('x1, 'v,) & {_2: 'v, _1: 'x1} | ('x0, 'u,) & {_2: 'u, _1: 'x0} | ('x0, 'u,) | ('x, 'n,) & {_2: 'n, _1: 'x} | ('x1, 'v,) | 'A3 & 'A7
//│       <: 'A4 & {_1: 'r} & {_2: 'q}
//│   'A3 :> 'A2 | ('x1, 'v,)
//│       <: 'A4 & {_1: 'r} & {_2: 'q}
//│   'A4 :> ('x1, 'v,) & {_2: 'v, _1: 'x1} | ('x0, 'u,) & {_2: 'u, _1: 'x0} | ('x0, 'u,) | 'A3 & 'A7 | ('x1, 'v,) | ('x, 'n,) & {_2: 'n, _1: 'x}
//│       <: ('A2 | 'A7) & 'A2 & {_1: 'r} & {_2: 'q}
//│   'A7 := in 'A2 out 'A3
//│   'n :> #Var
//│      <: 'u
//│   'x :> Str
//│      <: 'x0
//│   'u :> #Var
//│      <: 'q
//│   'x0 :> Str
//│       <: 'r
//│   'v :> 'w
//│      <: 'q
//│   'w :> 'c | 'd | 'e | 'f
//│      <: 'q
//│   'q :> 'c | 'd | 'e | 'f | #Var
//│      <: 'A13
//│   'A13 :> 'c | 'd | 'e | 'f | #Var
//│        <: 'A14
//│   'A14 :> 'c | 'd | 'e | 'f | #Var
//│        <: 'result
//│   'c :> 'y
//│   'y :> 'c | 'd | 'e | 'f
//│   'd :> #App & {App#A = 'A15}
//│   'A15 :> 'w | 'z
//│   'z :> 'c | 'd | 'e | 'f
//│   'e :> #Abs & {Abs#A = 'A16}
//│   'A16 :> 'a1
//│   'a1 :> 'c | 'd | 'e | 'f
//│   'f :> 'b1
//│   'b1 :> #Var | 'result
//│   'result :> 'c | 'd | 'e | 'f | #Var
//│   'x1 :> Str
//│       <: 'r
//│   'r :> Str
//│      <: 'c1
//│   'c1 :> Str

Test1.eval(Nil, Var("a"))
//│ 'a
//│   where
//│     'a :> Var | App['a] | Abs['a]
//│ res
//│     = Var {}

Test1.eval(Nil, Abs("b", Var("a")))
//│ 'a
//│   where
//│     'a :> App['a] | Abs['a] | Var
//│ res
//│     = Abs {}

Test1.eval(Cons(("c", Var("d")), Nil), App(Abs("b", Var("b")), Var("c")))
//│ 'a
//│   where
//│     'a :> Var | App['a] | Abs['a]
//│ res
//│     = Var {}

Test1.eval(Cons(("c", Abs("d", Var("d"))), Nil), App(Abs("b", Var("b")), Var("c")))
//│ 'a
//│   where
//│     'a :> App['a] | Abs['a] | Abs[Var] | Var
//│ res
//│     = Var {}

class Num(n: Int)
class Add[A](l: A, r: A)
class Mul[A](l: A, r: A)
//│ class Num(n: Int)
//│ class Add[A](l: A, r: A)
//│ class Mul[A](l: A, r: A)

fun map_expr(f, v) =
  if v is
    Var then v
    Num then v
    Add(l, r) then Add(f(l), f(r))
    Mul(l, r) then Mul(f(l), f(r))
//│ fun map_expr: forall 'l 'A 'l0 'A0. ('l -> 'A & 'l0 -> 'A0, Add['l] | Mul['l0] | Num | Var,) -> (Add['A] | Mul['A0] | Num | Var)

mixin EvalExpr {
  fun eval(sub, v) =
    fun eta(e) = this.eval(sub, e)
    let vv = map_expr(eta, v)
    if vv is
      Var then super.eval(sub, vv)
      Add(Num(l), Num(r)) then Num(l + r)
      Mul(Num(l), Num(r)) then Num(l * r)
    else v
}
//│ mixin EvalExpr() {
//│   super: {eval: ('a, Var,) -> 'b}
//│   this: {eval: ('a, 'c,) -> #Object}
//│   fun eval: forall 'd. ('a, 'd & (Add['c] | Mul['c] | Num | Var),) -> (Num | 'd | 'b)
//│ }

module Test2 extends EvalVar, EvalExpr
//│ module Test2() {
//│   fun eval: (Cons[{_1: anything, _2: #Object & 'result}] | Nil, 'a,) -> (Num | Var | 'result | 'a)
//│ }
//│ where
//│   'a <: Add['b] | Mul['b] | Num | Var
//│   'b <: 'a

Test2.eval(Nil, Var("a"))
//│ Num | Var
//│ res
//│     = Var {}

Test2.eval(Cons(("c", Abs("d", Var("d"))), Nil), Var("a"))
//│ Abs[Var] | Num | Var
//│ res
//│     = Var {}

Test2.eval(Cons(("a", Num(1)), Nil), Var("a"))
//│ Num | Var
//│ res
//│     = Var {}

// * This expected error shows that Test2 does not handle Abs expression inputs
:e
Test2.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.251: 	Test2.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Abs[?A]` does not match type `Add[?A0] | Mul[?A1] | Num | Var`
//│ ║  l.251: 	Test2.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ ║         	                                                 ^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.203: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.213: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ Abs[Var] | Num | Var | error
//│ res
//│ Runtime error:
//│   Error: non-exhaustive case expression

Test2.eval(Cons(("a", Abs("d", Var("d"))), Nil), Add(Num(1), Var("a")))
//│ Abs[Var] | Add[Num | Var] | Num | Var
//│ res
//│     = Add {}

// FIXME type simplification
:ns
module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ module Test3() {
//│   fun eval: ('a, 'b,) -> ('c | 'd | 'e | 'f)
//│ }
//│ where
//│   'a :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'g & (Cons['A3] | Nil) & 'h & 'i
//│   'i :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'a
//│   'h :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'a
//│   'A3 :> 'A0 & 'A4 | 'A2 & 'A5 | 'A1 | ('x, 'j,)
//│       <: ('A | 'A4) & ('A1 | 'A5) & 'A2
//│   'A5 := in 'A1 out 'A2
//│   'g :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'k
//│   'k :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'm & 'n
//│   'n :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'a
//│   'm :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'o
//│   'o :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'p
//│   'p :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2} | Cons['A6] | Nil
//│      <: (#Cons & {Cons#A <: 'A7} | #Nil & ~#Cons) & #Object
//│   'A6 := out 'A7
//│   'A7 :> 'A0 & 'A8 | 'A2 & 'A9
//│       <: 'head
//│   'head :> 'A0 & 'A8 | 'A2 & 'A9
//│         <: {_2: 'q} & {_1: 'u}
//│   'A9 := in 'A1 out 'A2
//│   'A8 := in 'A out 'A0
//│   'A2 :> 'A0 & 'A4 | 'A1 | ('x0, 'v,)
//│       <: 'A & {_1: 'u} & {_2: 'q}
//│   'A :> ('x1, 'w,) & {_2: 'w, _1: 'x1} | ('x0, 'v,) & {_2: 'v, _1: 'x0} | ('x0, 'v,) | ('x, 'j,) & {_2: 'j, _1: 'x} | ('x1, 'w,) | 'A0 & 'A4
//│      <: 'A1 & {_1: 'u} & {_2: 'q}
//│   'A0 :> 'A | ('x1, 'w,)
//│       <: 'A1 & {_1: 'u} & {_2: 'q}
//│   'A1 :> ('x1, 'w,) & {_2: 'w, _1: 'x1} | ('x0, 'v,) & {_2: 'v, _1: 'x0} | ('x0, 'v,) | 'A0 & 'A4 | ('x1, 'w,) | ('x, 'j,) & {_2: 'j, _1: 'x}
//│       <: ('A | 'A4) & 'A & {_1: 'u} & {_2: 'q}
//│   'A4 := in 'A out 'A0
//│   'j :> #Var
//│      <: 'v
//│   'x :> Str
//│      <: 'x0
//│   'v :> #Var
//│      <: 'q
//│   'x0 :> Str
//│       <: 'u
//│   'w :> 'y
//│      <: 'q
//│   'y :> 'c | 'd | 'e | 'f
//│      <: 'q
//│   'q :> 'c | 'd | 'e | 'f | #Var
//│      <: 'A10
//│   'A10 :> 'c | 'd | 'e | 'f | #Var
//│        <: 'A11
//│   'A11 :> 'c | 'd | 'e | 'f | #Var
//│        <: 'result
//│   'c :> 'z
//│      <: (#Num | 'a1 & ~#Num) & #Object & (#Num | 'b1 & ~#Num) & (#Num | 'c1 & ~#Num) & (#Num | 'd1 & ~#Num)
//│   'z :> 'c | 'd | 'e | 'f
//│      <: (#Num | 'a1 & ~#Num) & #Object & (#Num | 'b1 & ~#Num) & (#Num | 'c1 & ~#Num) & (#Num | 'd1 & ~#Num)
//│   'd :> #App & {App#A = 'A12}
//│      <: (#Num | 'a1 & ~#Num) & #Object & (#Num | 'b1 & ~#Num) & (#Num | 'c1 & ~#Num) & (#Num | 'd1 & ~#Num)
//│   'A12 :> 'y | 'e1
//│   'e1 :> 'c | 'd | 'e | 'f
//│   'e :> #Abs & {Abs#A = 'A13}
//│      <: (#Num | 'a1 & ~#Num) & #Object & (#Num | 'b1 & ~#Num) & (#Num | 'c1 & ~#Num) & (#Num | 'd1 & ~#Num)
//│   'A13 :> 'f1
//│   'f1 :> 'c | 'd | 'e | 'f
//│   'f :> 'g1
//│      <: (#Num | 'a1 & ~#Num) & #Object & (#Num | 'b1 & ~#Num) & (#Num | 'c1 & ~#Num) & (#Num | 'd1 & ~#Num)
//│   'g1 :> 'h1 | 'i1 | 'j1 | 'k1
//│       <: (#Num | 'a1 & ~#Num) & #Object & (#Num | 'b1 & ~#Num) & (#Num | 'c1 & ~#Num) & (#Num | 'd1 & ~#Num)
//│   'k1 :> #Num
//│       <: (#Num | 'a1 & ~#Num) & #Object & (#Num | 'b1 & ~#Num) & (#Num | 'c1 & ~#Num) & (#Num | 'd1 & ~#Num)
//│   'j1 <: (#Num | 'a1 & ~#Num) & #Object & (#Num | 'b1 & ~#Num) & (#Num | 'c1 & ~#Num) & (#Num | 'd1 & ~#Num) & 'l1
//│   'l1 <: (#Var | (#Num | (#Add & {Add#A <: 'A14} | #Mul & {Mul#A <: 'A15} & ~#Add) & ~#Num) & ~#Var) & #Object
//│   'A15 <: 'r & 'l
//│   'l <: 'm1
//│   'r <: 'm1
//│   'A14 <: 'r0 & 'l0
//│   'l0 <: 'm1
//│   'r0 <: 'm1
//│   'm1 <: 'n1
//│   'n1 <: 'b
//│   'b <: (#App & {App#A <: 'A16} | (#Abs & {Abs#A <: 'A17} | 'o1 & ~#Abs) & ~#App) & #Object
//│   'o1 <: 'p1
//│   'p1 <: 'j1
//│   'A17 <: 't
//│   't <: 't0
//│   't0 <: 'b
//│   'A16 <: 't1 & 's
//│   's <: (#Abs & {Abs#A <: 'A18} | 'q1 & ~#Abs) & #Object & 's0
//│   's0 <: 'b
//│   'A18 <: 't2
//│   't2 <: 't3
//│   't3 <: 'b
//│   't1 <: 't4
//│   't4 <: 'b
//│   'i1 :> #Num
//│       <: (#Num | 'a1 & ~#Num) & #Object & (#Num | 'b1 & ~#Num) & (#Num | 'c1 & ~#Num) & (#Num | 'd1 & ~#Num)
//│   'h1 :> 'r1
//│       <: (#Num | 'a1 & ~#Num) & #Object & (#Num | 'b1 & ~#Num) & (#Num | 'c1 & ~#Num) & (#Num | 'd1 & ~#Num)
//│   'r1 :> #Var | 'result
//│       <: (#Num | 'a1 & ~#Num) & #Object & (#Num | 'b1 & ~#Num) & (#Num | 'c1 & ~#Num) & (#Num | 'd1 & ~#Num)
//│   'result :> 'c | 'd | 'e | 'f | #Var
//│           <: (#Num | 'a1 & ~#Num) & #Object & (#Num | 'b1 & ~#Num) & (#Num | 'c1 & ~#Num) & (#Num | 'd1 & ~#Num)
//│   'd1 :> #Var | #Abs & {Abs#A = 'A13} | #App & {App#A = 'A12}
//│   'c1 :> #Var | #Abs & {Abs#A = 'A13} | #App & {App#A = 'A12}
//│   'b1 :> #Var | #Abs & {Abs#A = 'A13} | #App & {App#A = 'A12}
//│   'a1 :> #Var | #Abs & {Abs#A = 'A13} | #App & {App#A = 'A12}
//│   'x1 :> Str
//│       <: 'u
//│   'u :> Str
//│      <: 's1
//│   's1 :> Str

Test3.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ 'a
//│   where
//│     'a :> App['a] | Abs['a] | Abs[Var] | Num | Var
//│ res
//│     = Abs {}

Test3.eval(Cons(("c", Abs("d", Var("d"))), Nil), App(Abs("a", Var("a")), Add(Num(1), Var("c"))))
//│ 'a
//│   where
//│     'a :> App['a] | Abs['a] | Abs[Var] | Add[Num | Var] | Num | Var
//│ res
//│     = Var {}

// FIXME type simplification
:ns
// * Incorrect version, for regression testing – EvalLambda should be mixed in after EvalExpr
module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ module Test3() {
//│   fun eval: ('a, 'b,) -> ('c | 'd | 'b | 'e)
//│ }
//│ where
//│   'a :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'f & 'g
//│   'g :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'a
//│   'f :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'h
//│   'h :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'i & (Cons['A3] | Nil) & 'j & 'k
//│   'k :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'a
//│   'j :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'a
//│   'A3 :> 'A0 & 'A4 | 'A2 & 'A5 | 'A1 | ('x, 'm,)
//│       <: ('A | 'A4) & ('A1 | 'A5) & 'A2
//│   'A5 := in 'A1 out 'A2
//│   'i :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'n
//│   'n :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2}
//│      <: 'o
//│   'o :> #Cons & {Cons#A :> 'A <: 'A0} | #Cons & {Cons#A :> 'A1 <: 'A2} | Cons['A6] | Nil
//│      <: (#Cons & {Cons#A <: 'A7} | #Nil & ~#Cons) & #Object
//│   'A6 := out 'A7
//│   'A7 :> 'A0 & 'A8 | 'A2 & 'A9
//│       <: 'head
//│   'head :> 'A0 & 'A8 | 'A2 & 'A9
//│         <: {_2: 'p} & {_1: 'q}
//│   'A9 := in 'A1 out 'A2
//│   'A8 := in 'A out 'A0
//│   'A2 :> 'A0 & 'A4 | 'A1 | ('x0, 's,)
//│       <: 'A & {_1: 'q} & {_2: 'p}
//│   'A :> ('x1, 't,) & {_2: 't, _1: 'x1} | ('x0, 's,) & {_2: 's, _1: 'x0} | ('x0, 's,) | ('x, 'm,) & {_2: 'm, _1: 'x} | ('x1, 't,) | 'A0 & 'A4
//│      <: 'A1 & {_1: 'q} & {_2: 'p}
//│   'A0 :> 'A | ('x1, 't,)
//│       <: 'A1 & {_1: 'q} & {_2: 'p}
//│   'A1 :> ('x1, 't,) & {_2: 't, _1: 'x1} | ('x0, 's,) & {_2: 's, _1: 'x0} | ('x0, 's,) | 'A0 & 'A4 | ('x1, 't,) | ('x, 'm,) & {_2: 'm, _1: 'x}
//│       <: ('A | 'A4) & 'A & {_1: 'q} & {_2: 'p}
//│   'A4 := in 'A out 'A0
//│   'm :> #Var
//│      <: 's
//│   'x :> Str
//│      <: 'x0
//│   's :> #Var
//│      <: 'p
//│   'x0 :> Str
//│       <: 'q
//│   't :> 'u
//│      <: 'p
//│   'u :> 'c | 'd | 'b | 'e
//│      <: 'p
//│   'p :> 'c | 'd | 'b | 'e | #Var
//│      <: 'A10
//│   'A10 :> 'c | 'd | 'b | 'e | #Var
//│        <: 'A11
//│   'A11 :> 'c | 'd | 'b | 'e | #Var
//│        <: 'result
//│   'c :> 'v
//│      <: (#Num | 'w & ~#Num) & #Object & (#Num | 'y & ~#Num) & (#Num | 'z & ~#Num) & (#Num | 'a1 & ~#Num)
//│   'v :> 'b1 | 'c1 | 'd1 | 'e1
//│      <: (#Num | 'w & ~#Num) & #Object & (#Num | 'y & ~#Num) & (#Num | 'z & ~#Num) & (#Num | 'a1 & ~#Num)
//│   'e1 :> 'f1
//│       <: (#Num | 'w & ~#Num) & #Object & (#Num | 'y & ~#Num) & (#Num | 'z & ~#Num) & (#Num | 'a1 & ~#Num)
//│   'f1 :> #Var | 'result
//│       <: (#Num | 'w & ~#Num) & #Object & (#Num | 'y & ~#Num) & (#Num | 'z & ~#Num) & (#Num | 'a1 & ~#Num)
//│   'result :> 'c | 'd | 'b | 'e | #Var
//│           <: (#Num | 'w & ~#Num) & #Object & (#Num | 'y & ~#Num) & (#Num | 'z & ~#Num) & (#Num | 'a1 & ~#Num)
//│   'd1 :> #Abs & {Abs#A = 'A12}
//│       <: (#Num | 'w & ~#Num) & #Object & (#Num | 'y & ~#Num) & (#Num | 'z & ~#Num) & (#Num | 'a1 & ~#Num)
//│   'c1 :> #App & {App#A = 'A13}
//│       <: (#Num | 'w & ~#Num) & #Object & (#Num | 'y & ~#Num) & (#Num | 'z & ~#Num) & (#Num | 'a1 & ~#Num)
//│   'b1 :> 'g1
//│       <: (#Num | 'w & ~#Num) & #Object & (#Num | 'y & ~#Num) & (#Num | 'z & ~#Num) & (#Num | 'a1 & ~#Num)
//│   'g1 :> 'c | 'd | 'b | 'e
//│       <: (#Num | 'w & ~#Num) & #Object & (#Num | 'y & ~#Num) & (#Num | 'z & ~#Num) & (#Num | 'a1 & ~#Num)
//│   'd :> #Num
//│      <: (#Num | 'w & ~#Num) & #Object & (#Num | 'y & ~#Num) & (#Num | 'z & ~#Num) & (#Num | 'a1 & ~#Num)
//│   'w :> #Var | #Abs & {Abs#A = 'A12} | #App & {App#A = 'A13}
//│   'A12 :> 'h1
//│   'h1 :> 'c | 'd | 'b | 'e
//│   'b <: (#Num | 'w & ~#Num) & #Object & (#Num | 'y & ~#Num) & (#Num | 'z & ~#Num) & (#Num | 'a1 & ~#Num) & 'i1
//│   'i1 <: (#Var | (#Num | (#Add & {Add#A <: 'A14} | #Mul & {Mul#A <: 'A15} & ~#Add) & ~#Num) & ~#Var) & #Object
//│   'A15 <: 'r & 'l
//│   'l <: 'j1
//│   'r <: 'j1
//│   'A14 <: 'r0 & 'l0
//│   'l0 <: 'j1
//│   'r0 <: 'j1
//│   'j1 <: 'k1
//│   'k1 <: 'b
//│   'y :> #Var | #Abs & {Abs#A = 'A12} | #App & {App#A = 'A13}
//│   'A13 :> 'u | 'l1
//│   'l1 :> 'c | 'd | 'b | 'e
//│   'e :> #Num
//│      <: (#Num | 'w & ~#Num) & #Object & (#Num | 'y & ~#Num) & (#Num | 'z & ~#Num) & (#Num | 'a1 & ~#Num)
//│   'a1 :> #Var | #Abs & {Abs#A = 'A12} | #App & {App#A = 'A13}
//│   'z :> #Var | #Abs & {Abs#A = 'A12} | #App & {App#A = 'A13}
//│   'x1 :> Str
//│       <: 'q
//│   'q :> Str
//│      <: 'm1
//│   'm1 :> Str

// * Because EvalExpr does not dispatch lambdas to super and map_expr only
// * handles exprs
:e
Test3.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.522: 	Test3.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Abs[?A]` does not match type `Add[?A0] | Mul[?A1] | Num | Var`
//│ ║  l.522: 	Test3.eval(Cons(("c", Abs("d", Var("d"))), Nil), Abs("a", Var("a")))
//│ ║         	                                                 ^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.203: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.213: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ error | 'a
//│   where
//│     'a :> Abs['a] | App['a] | Var | Abs[Var] | Num
//│ res
//│ Runtime error:
//│   Error: non-exhaustive case expression
