:NewDefs


// * Adapted example from Code reuse through polymorphic variants (FOSE 2000)


class Cons[out A](head: A, tail: Cons[A] | Nil)
module Nil
//│ class Cons[A](head: A, tail: Cons[A] | Nil)
//│ module Nil

let l = Cons(1, Nil)
//│ let l: Cons[1]
//│ l
//│   = Cons {}

class NotFound()
class Success[out A](result: A)
//│ class NotFound()
//│ class Success[A](result: A)

fun list_assoc(s, l) =
  if l is
    Cons(h, t) then
      if s === h.0 then Success(h.1)
      else list_assoc(s, t)
    Nil then NotFound()
//│ fun list_assoc: forall 'a 'A. (Eql['a], Cons[{0: 'a, 1: 'A}] | Nil) -> (Success['A] | NotFound)

// fun list_assoc(s: Str, l: Cons[{ _1: Str, _2: 'b }] | Nil): NotFound | Success['b]

class Var(s: Str)
//│ class Var(s: Str)

mixin EvalVar {
  fun eval(sub, v) =
    if v is Var(s) then
      if list_assoc(s, sub) is
        NotFound then v
        Success(r) then r
}
//│ mixin EvalVar() {
//│   fun eval: (Cons[{0: anything, 1: 'a}] | Nil, Var) -> (Var | 'a)
//│ }

class Abs[out A](x: Str, t: A)
class App[out A](s: A, t: A)
//│ class Abs[A](x: Str, t: A)
//│ class App[A](s: A, t: A)

fun gensym(): Str = "fun"
//│ fun gensym: () -> Str

fun int_to_string(x: Int): Str = "0"
//│ fun int_to_string: (x: Int) -> Str

mixin EvalLambda {
  fun eval(sub, v) =
    if v is
      App(t1, t2) then
        let l1 = this.eval(sub, t1)
        let l2 = this.eval(sub, t2)
        if t1 is
          Abs(x, t) then this.eval(Cons([x, l2], Nil), t)
        else
          App(l1, l2)
      Abs(x, t) then
        let s = gensym()
        Abs(s, this.eval(Cons([x, Var(s)], sub), t))
    else
      super.eval(sub, v)
}
//│ mixin EvalLambda() {
//│   super: {eval: ('a, 'b) -> 'c}
//│   this: {
//│     eval: ('a, 'd) -> 'A & (Cons[[Str, 'A]], 'e) -> 'c & (Cons[[Str, Var] | 'A0], 'f) -> 'A1
//│   }
//│   fun eval: ('a & (Cons['A0] | Nil), App['d & (Abs['e] | Object & ~#Abs)] | Abs['f] | Object & 'b & ~#Abs & ~#App) -> ('c | App['A] | Abs['A1])
//│ }

module Test1 extends EvalVar, EvalLambda
//│ module Test1 {
//│   fun eval: (Cons[{0: anything, 1: 'a}] | Nil, 'b) -> ('a | App['a] | Abs['a])
//│ }
//│ where
//│   'b <: App['b & (Abs['b] | Object & ~#Abs)] | Abs['b] | Var
//│   'a :> Var | App['a] | Abs['a]

Test1.eval(Nil, Var("a"))
//│ 'a | App['a] | Abs['a]
//│   where
//│     'a :> App['a] | Abs['a] | Var
//│ res
//│     = Var {}

Test1.eval(Nil, Abs("b", Var("a")))
//│ 'a | App['a] | Abs['a]
//│   where
//│     'a :> App['a] | Abs['a] | Var
//│ res
//│     = Abs {}

Test1.eval(Cons(["c", Var("d")], Nil), App(Abs("b", Var("b")), Var("c")))
//│ 'a | App['a] | Abs['a]
//│   where
//│     'a :> App['a] | Abs['a] | Var
//│ res
//│     = Var {}

Test1.eval(Cons(["c", Abs("d", Var("d"))], Nil), App(Abs("b", Var("b")), Var("c")))
//│ 'a | App['a] | Abs['a]
//│   where
//│     'a :> App['a] | Abs['a] | Var | Abs[Var]
//│ res
//│     = Abs {}

class Numb(n: Int)
class Add[out A](l: A, r: A)
class Mul[out A](l: A, r: A)
//│ class Numb(n: Int)
//│ class Add[A](l: A, r: A)
//│ class Mul[A](l: A, r: A)

fun map_expr(f, v) =
  if v is
    Var then v
    Numb then v
    Add(l, r) then Add(f(l), f(r))
    Mul(l, r) then Mul(f(l), f(r))
//│ fun map_expr: forall 'a 'A 'b 'A0. ('a -> 'A & 'b -> 'A0, Var | Numb | Add['a] | Mul['b]) -> (Var | Numb | Add['A] | Mul['A0])

mixin EvalExpr {
  fun eval(sub, v) =
    let eta(e) = this.eval(sub, e)
    let vv = map_expr(eta, v)
    if vv is
      Var then super.eval(sub, vv)
      Add(Numb(l), Numb(r)) then Numb(l + r)
      Mul(Numb(l), Numb(r)) then Numb(l * r)
    else v
}
//│ mixin EvalExpr() {
//│   super: {eval: ('a, Var) -> 'b}
//│   this: {eval: ('a, 'c) -> Object}
//│   fun eval: ('a, 'b & (Var | Numb | Add['c] | Mul['c])) -> ('b | Numb)
//│ }

module Test2 extends EvalVar, EvalExpr
//│ module Test2 {
//│   fun eval: forall 'a. (Cons[{0: anything, 1: Object & 'b}] | Nil, 'a & (Var | Numb | Add['c] | Mul['c])) -> (Var | 'b | Numb | 'c | 'a)
//│ }
//│ where
//│   'c <: Var | Numb | Add['c] | Mul['c]

Test2.eval(Nil, Var("a"))
//│ Var | Numb
//│ res
//│     = Var {}

Test2.eval(Cons(["c", Abs("d", Var("d"))], Nil), Var("a"))
//│ Var | Abs[Var] | Numb
//│ res
//│     = Var {}

Test2.eval(Cons(["a", Numb(1)], Nil), Var("a"))
//│ Var | Numb
//│ res
//│     = Numb {}

// * This expected error shows that Test2 does not handle Abs expression inputs
:e
Test2.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.172: 	Test2.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Abs[?A]` does not match type `Var | Numb | Add[?A0] | Mul[?A1]`
//│ ║  l.172: 	Test2.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ ║         	                                                 ^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.125: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.135: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ error | Var | Abs[Var] | Numb
//│ res
//│ Runtime error:
//│   Error: non-exhaustive case expression

Test2.eval(Cons(["a", Abs("d", Var("d"))], Nil), Add(Numb(1), Var("a")))
//│ Var | Abs[Var] | Numb | Add[Numb | Var]
//│ res
//│     = Add {}

module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ module Test3 {
//│   fun eval: (Cons[{0: anything, 1: 'a}] | Nil, 'b) -> ('c | App['c] | Abs['c])
//│ }
//│ where
//│   'a :> 'c
//│      <: Object
//│   'c :> App['c] | Abs['c] | 'a | Numb | 'd
//│   'd <: Var | Numb | Add['b] | Mul['b]
//│   'b <: App['b & (Abs['b] | Object & ~#Abs)] | Abs['b] | Object & 'd & ~#Abs & ~#App

Test3.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ 'a | App['a] | Abs['a]
//│   where
//│     'a :> App['a] | Abs['a] | Var | Abs[Var] | Numb
//│ res
//│     = Abs {}

Test3.eval(Cons(["c", Abs("d", Var("d"))], Nil), App(Abs("a", Var("a")), Add(Numb(1), Var("c"))))
//│ 'a | App['a] | Abs['a]
//│   where
//│     'a :> App['a] | Abs['a] | Var | Abs[Var] | Numb | Add[Numb | Var]
//│ res
//│     = Add {}

// * Incorrect version, for regression testing – EvalLambda should be mixed in after EvalExpr
module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ module Test3 {
//│   fun eval: (Cons[{0: anything, 1: 'a}] | Nil, 'a & (Var | Numb | Add['b] | Mul['b])) -> ('c | 'a | 'b)
//│ }
//│ where
//│   'a :> 'c | Numb | 'b
//│      <: Object
//│   'b <: Var | Numb | Add['b] | Mul['b]
//│   'c :> 'a | App['c | 'a] | Abs['c | 'a] | Var

// * Because EvalExpr does not dispatch lambdas to super and map_expr only
// * handles exprs
:e
Test3.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.234: 	Test3.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Abs[?A]` does not match type `Var | Numb | Add[?A0] | Mul[?A1]`
//│ ║  l.234: 	Test3.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ ║         	                                                 ^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.125: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.135: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ error | 'a | Numb | Abs[Var]
//│   where
//│     'a :> Numb | Abs['a | Numb | Abs[Var]] | App['a | Numb | Abs[Var]] | Var
//│ res
//│ Runtime error:
//│   Error: non-exhaustive case expression

