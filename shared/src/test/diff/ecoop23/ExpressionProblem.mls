:NewDefs


// * Motivating paper example, demonstrating the expression problem solution


class Add<out E>(lhs: E, rhs: E)
class Lit(n: Int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: Int)

fun add11 = Add(Lit(1), Lit(2))
//│ fun add11: Add[Lit]


fun eval(e) =
  if e is
    Lit(n) then n
    Add(l, r) then eval(l) + eval(r)
//│ fun eval: forall 'E. (Add['E] | Lit) -> Int
//│   where
//│     'E <: Add['E] | Lit | ~??E


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: Int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: (??E & 'E) -> Int}
//│   fun eval: (Add['E] | Lit) -> Int
//│ }


module TestLang extends EvalBase
//│ module TestLang {
//│   fun eval: (Add['E] | Lit) -> Int
//│ }
//│ where
//│   'E <: Add['E] | Lit | ~??E

TestLang.eval
//│ (Add['E] | Lit) -> Int
//│   where
//│     'E <: Add['E] | Lit | ~??E
//│ res
//│     = [Function: eval]

TestLang.eval(add11)
//│ Int
//│ res
//│     = 3


mixin EvalNothing {
  fun eval(e) = e : nothing
}
mixin EvalAddLit {
  fun eval(e) =
    if e is
      Lit(n) then n: Int
      Add(l, r) then this.eval(l) + this.eval(r)
    else super.eval(e)
}
module TestLang extends EvalNothing, EvalAddLit
//│ mixin EvalNothing() {
//│   fun eval: nothing -> nothing
//│ }
//│ mixin EvalAddLit() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: (??E & 'E) -> Int}
//│   fun eval: (Add['E] | Lit | Object & 'a & ~#Add & ~#Lit) -> (Int | 'b)
//│ }
//│ module TestLang {
//│   fun eval: (Add['E0] | Lit) -> Int
//│ }
//│ where
//│   'E0 <: Add['E0] | Lit | ~??E

TestLang.eval
//│ (Add['E] | Lit) -> Int
//│   where
//│     'E <: Add['E] | Lit | ~??E
//│ res
//│     = [Function: eval]

TestLang.eval(add11)
//│ Int
//│ res
//│     = 3


class Neg<out A>(expr: A)
//│ class Neg[A](expr: A)

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ let add2negadd11: Add[Lit | Neg[Add[Lit]]]
//│ add2negadd11
//│              = Add {}


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: (??A & 'A) -> Int}
//│   fun eval: (Neg['A] | Object & 'a & ~#Neg) -> (Int | 'b)
//│ }


module TestLang extends EvalBase, EvalNeg
//│ module TestLang {
//│   fun eval: (Neg['A] | Object & 'a & ~#Neg) -> Int
//│ }
//│ where
//│   'A <: Neg['A] | Object & 'a & ~#Neg | ~??A
//│   'a <: Add[Neg['A] | Object & 'a & ~#Neg | ~??E] | Lit

TestLang.eval
//│ (Neg['A] | Object & 'a & ~#Neg) -> Int
//│   where
//│     'A <: Neg['A] | Object & 'a & ~#Neg | ~??A
//│     'a <: Add[Neg['A] | Object & 'a & ~#Neg | ~??E] | Lit
//│ res
//│     = [Function: eval]


TestLang.eval(add11)
//│ Int
//│ res
//│     = 3

TestLang.eval(Neg(add11))
//│ Int
//│ res
//│     = -3

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ Int
//│ res
//│     = 1

TestLang.eval(Neg(Neg(add11)))
//│ Int
//│ res
//│     = 3


TestLang.eval(add2negadd11)
//│ Int
//│ res
//│     = -1

// add11

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ Int
//│ res
//│     = -1


mixin EvalNegNeg_0 {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
    // * Note: the above is equivalent to:
    // if e is Neg(f) then
    //   if f is Neg(d) then this.eval(d)
    //   else super.eval(e)
    // else super.eval(e)
}
//│ mixin EvalNegNeg_0() {
//│   super: {eval: (Neg[??A & 'A] | 'a) -> 'b}
//│   this: {eval: (??A0 & 'A0) -> 'b}
//│   fun eval: (Neg['A & (Neg['A0] | Object & ~#Neg | ~??A)] | Object & 'a & ~#Neg) -> 'b
//│ }

// * Concise alternative, usign syntax sugar:
mixin EvalNegNeg {
  fun eval(override Neg(Neg(d))) = this.eval(d)
}
//│ mixin EvalNegNeg() {
//│   super: {eval: (Neg[??A & 'A] | 'a) -> 'b}
//│   this: {eval: (??A0 & 'A0) -> 'b}
//│   fun eval: (Neg['A & (Neg['A0] | Object & ~#Neg | ~??A)] | Object & 'a & ~#Neg) -> 'b
//│ }

module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ module TestLang {
//│   fun eval: (Neg['A] | Object & 'a & ~#Neg) -> Int
//│ }
//│ where
//│   'A <: Neg['A] & ~#Neg | Neg['A & (Neg['A] | Object & 'a & ~#Neg | ~??A)] | Object & 'a & ~#Neg | ~??A0
//│   'a <: Add[Neg['A] | Object & 'a & ~#Neg | ~??E] | Lit | Neg[Neg['A] | Object & 'a & ~#Neg | ~??A1]

fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
//│ fun mk: forall 'a. Object -> (Lit | 'a)
//│   where
//│     'a :> Add[Lit | 'a] | Neg[Lit | 'a]

TestLang.eval
//│ (Neg['A] | Object & 'a & ~#Neg) -> Int
//│   where
//│     'A <: Neg['A] & ~#Neg | Neg['A & (Neg['A] | Object & 'a & ~#Neg | ~??A)] | Object & 'a & ~#Neg | ~??A0
//│     'a <: Add[Neg['A] | Object & 'a & ~#Neg | ~??E] | Lit | Neg[Neg['A] | Object & 'a & ~#Neg | ~??A1]
//│ res
//│     = [Function: eval]

TestLang.eval(mk(0))
//│ Int
//│ res
//│     = 0


