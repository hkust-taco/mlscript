:NewDefs


// https://github.com/lampepfl/dotty/issues/13162

fun method =
  class Person(val name: Str)
  module Person_ { // TODO change when module overloading is supported
    val me = Person("Cameron")
  }
  let m = Person_.me
  m
method.name
//│ fun method: Person
//│ Str
//│ res
//│     = 'Cameron'


// https://github.com/lampepfl/dotty/issues/13162#issuecomment-887557311

// * We don't currently have self bindings

// def method(): Unit = {
//   final case class Person(name: String)
//   object Person { self =>
//     val me = self.apply("Cameron")
//   }
//   val _ = Person.me
// }
// method()

:w
:e
fun method: () =
  class Person(val name: Str)
  module Person_ { self => // * defines a useless lambda!
    val me = self.apply("Cameron")
  }
  let m = Person_.me
  m
method
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.37: 	  module Person_ { self => // * defines a useless lambda!
//│ ║        	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.38: 	    val me = self.apply("Cameron")
//│ ╙──      	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `Person_` does not contain member `me`
//│ ║  l.40: 	  let m = Person_.me
//│ ╙──      	                 ^^^
//│ fun method: ()
//│ ()
//│ res
//│     = undefined


// https://github.com/lampepfl/dotty/issues/13162#issuecomment-888188804

:re
module Person {
  fun f: ()
  fun f = Person2.f
}
module Person2 {
  fun f = ()
  val me = Person.f
}
//│ module Person {
//│   fun f: ()
//│ }
//│ module Person2 {
//│   fun f: ()
//│   val me: ()
//│ }
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

fun test = Person2.me
//│ fun test: ()


// * FIXME initialization check? or different codegen?
fun test =
  module Person {
    fun f: ()
    fun f = Person2.f
  }
  module Person2 {
    fun f = ()
    val me = Person.f
  }
  Person2.me
//│ fun test: ()

:re
test
//│ ()
//│ res
//│ Runtime error:
//│   ReferenceError: Cannot access 'Person2' before initialization

module Test {
  module Person {
    fun f: ()
    fun f = Person2.f
  }
  module Person2 {
    fun f = ()
    val me = Person.f
  }
  fun test = Person2.me
}
//│ module Test {
//│   module Person {
//│     fun f: ()
//│   }
//│   module Person2 {
//│     fun f: ()
//│     val me: ()
//│   }
//│   fun test: ()
//│ }

:re
Test.test
//│ ()
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


