:NewDefs


class demo() { constructor(param1: Int) }
val invalidConstruction = new demo(1)
//│ class demo() {
//│   constructor(param1: Int)
//│ }
//│ val invalidConstruction: demo
//│ invalidConstruction
//│                     = demo {}

:e
class demo() { constructor(param1: Int) }
val invalidConstruction = demo()
//│ ╔══[ERROR] Construction of class with auxiliary constructor should use the `new` keyword
//│ ║  l.15: 	val invalidConstruction = demo()
//│ ╙──      	                          ^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.15: 	val invalidConstruction = demo()
//│ ║        	                          ^^^^^^
//│ ╟── argument of type `[]` does not match type `[param1: Int]`
//│ ║  l.15: 	val invalidConstruction = demo()
//│ ╙──      	                              ^^
//│ class demo() {
//│   constructor(param1: Int)
//│ }
//│ val invalidConstruction: demo | error
//│ invalidConstruction
//│                     = demo {}

:e
val invalidConstruction = demo(1)
//│ ╔══[ERROR] Construction of class with auxiliary constructor should use the `new` keyword
//│ ║  l.33: 	val invalidConstruction = demo(1)
//│ ╙──      	                          ^^^^
//│ val invalidConstruction: demo
//│ invalidConstruction
//│                     = demo {}

:e
val invalidConstruction = new demo
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.42: 	val invalidConstruction = new demo
//│ ║        	                              ^^^^
//│ ╟── argument list of type `[]` does not match type `[param1: Int]`
//│ ║  l.42: 	val invalidConstruction = new demo
//│ ╙──      	                                  ^
//│ val invalidConstruction: demo | error
//│ invalidConstruction
//│                     = demo {}

:e
class demo { constructor(param1: Int) }
val invalidConstruction = demo()
//│ ╔══[ERROR] Construction of unparameterized class demo should use the `new` keyword
//│ ║  l.55: 	val invalidConstruction = demo()
//│ ╙──      	                          ^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.55: 	val invalidConstruction = demo()
//│ ║        	                          ^^^^^^
//│ ╟── argument of type `[]` does not match type `[param1: Int]`
//│ ║  l.55: 	val invalidConstruction = demo()
//│ ╙──      	                              ^^
//│ class demo {
//│   constructor(param1: Int)
//│ }
//│ val invalidConstruction: demo | error
//│ invalidConstruction
//│ Runtime error:
//│   TypeError: Class constructor demo cannot be invoked without 'new'

:e
val invalidConstruction = demo
//│ ╔══[ERROR] Construction of unparameterized class demo should use the `new` keyword
//│ ║  l.74: 	val invalidConstruction = demo
//│ ╙──      	                          ^^^^
//│ val invalidConstruction: (param1: Int) -> demo
//│ invalidConstruction
//│                     = [class demo]

:e
val invalidConstruction = new demo
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.83: 	val invalidConstruction = new demo
//│ ║        	                              ^^^^
//│ ╟── argument list of type `[]` does not match type `[param1: Int]`
//│ ║  l.83: 	val invalidConstruction = new demo
//│ ╙──      	                                  ^
//│ val invalidConstruction: demo | error
//│ invalidConstruction
//│                     = demo {}

val invalidConstruction = new demo(1)
//│ val invalidConstruction: demo
//│ invalidConstruction
//│                     = demo {}

:e
val invalidConstruction = demo()
//│ ╔══[ERROR] Construction of unparameterized class demo should use the `new` keyword
//│ ║  l.100: 	val invalidConstruction = demo()
//│ ╙──       	                          ^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.100: 	val invalidConstruction = demo()
//│ ║         	                          ^^^^^^
//│ ╟── argument of type `[]` does not match type `[param1: Int]`
//│ ║  l.100: 	val invalidConstruction = demo()
//│ ╙──       	                              ^^
//│ val invalidConstruction: demo | error
//│ invalidConstruction
//│ Runtime error:
//│   TypeError: Class constructor demo cannot be invoked without 'new'


class demo(x: Int) {
  constructor(param1: Int, param2: Int) {
    log(param1)
    log(param2)
    x = param1*param2
  }
}
//│ class demo(x: Int) {
//│   constructor(param1: Int, param2: Int)
//│ }

val validConstruction = new demo(5, 10)
//│ val validConstruction: demo
//│ validConstruction
//│                   = demo {}
//│ // Output
//│ 5
//│ 10

:e
val invalidConstruction = demo(5)
//│ ╔══[ERROR] Construction of class with auxiliary constructor should use the `new` keyword
//│ ║  l.136: 	val invalidConstruction = demo(5)
//│ ╙──       	                          ^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.136: 	val invalidConstruction = demo(5)
//│ ║         	                          ^^^^^^^
//│ ╟── argument of type `[5]` does not match type `[param1: Int, param2: Int]`
//│ ║  l.136: 	val invalidConstruction = demo(5)
//│ ╙──       	                              ^^^
//│ val invalidConstruction: demo | error
//│ invalidConstruction
//│                     = demo {}
//│ // Output
//│ 5
//│ undefined

:e
val invalidConstruction = new demo(5)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.154: 	val invalidConstruction = new demo(5)
//│ ║         	                          ^^^^^^^^^^^
//│ ╟── argument list of type `[5]` does not match type `[param1: Int, param2: Int]`
//│ ║  l.154: 	val invalidConstruction = new demo(5)
//│ ╙──       	                                  ^^^
//│ val invalidConstruction: demo | error
//│ invalidConstruction
//│                     = demo {}
//│ // Output
//│ 5
//│ undefined



