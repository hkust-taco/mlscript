:NewDefs


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: int)


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: 'lhs -> Int}
//│   fun eval: (Add['lhs] | Lit) -> (Int | int)
//│ }


class Neg<A>(expr: A)
//│ class Neg[A](expr: A)


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: 'expr -> Int}
//│   fun eval: (Neg['expr] | #Object & 'a & ~#Neg) -> (Int | 'b)
//│ }


mixin EvalNegNeg {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNegNeg() {
//│   super: {eval: (Neg['A] | 'a) -> 'b}
//│   this: {eval: 'expr -> 'b}
//│   fun eval: (Neg['A & (Neg['expr] | #Object & ~#Neg)] | #Object & 'a & ~#Neg) -> 'b
//│ }


module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.50: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of type `Int`
//│ ║  l.13: 	      Lit(n) then n: int
//│ ║        	                     ^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.28: 	    if e is Neg(d) then 0 - this.eval(d)
//│ ╙──      	                            ^^^^^^^^^^^^
//│ module TestLang() {
//│   fun eval: 'a -> (Int | int)
//│ }
//│ where
//│   'a <: Neg['A] | #Object & 'b & ~#Neg
//│   'A <: Neg['a & 'A] | Neg['A] & ~#Neg | #Object & 'b & ~#Neg
//│   'b <: Add['a] | Lit | Neg['a]


fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
TestLang.eval(mk(0))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.69: 	fun mk(n) = if n is
//│ ║        	               ^^^^
//│ ║  l.70: 	  0 then Lit(0)
//│ ║        	^^^
//│ ╟── integer literal of type `0` is not an instance of type `number`
//│ ║  l.70: 	  0 then Lit(0)
//│ ╙──      	  ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.70: 	  0 then Lit(0)
//│ ║        	         ^^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `int`
//│ ║  l.70: 	  0 then Lit(0)
//│ ║        	             ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.5: 	class Lit(n: int)
//│ ╙──     	             ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.69: 	fun mk(n) = if n is
//│ ║        	               ^^^^
//│ ║  l.70: 	  0 then Lit(0)
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.71: 	  1 then Neg(mk(n))
//│ ║        	^^^
//│ ╟── integer literal of type `1` is not an instance of type `number`
//│ ║  l.71: 	  1 then Neg(mk(n))
//│ ╙──      	  ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.73: 	TestLang.eval(mk(0))
//│ ║        	              ^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `number`
//│ ║  l.73: 	TestLang.eval(mk(0))
//│ ║        	                 ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.69: 	fun mk(n) = if n is
//│ ╙──      	               ^
//│ fun mk: forall 'E. number -> 'E
//│ Int | int
//│ where
//│   'E :> Add['E] | Lit | Neg['E] | error
//│ res
//│     = [Function: mk]
