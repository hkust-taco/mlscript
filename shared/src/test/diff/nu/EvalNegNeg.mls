:NewDefs


class Add<E>(lhs: E, rhs: E)
class Lit(n: Int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: Int)


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: Int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: 'lhs -> Int}
//│   fun eval: (Add['lhs] | Lit) -> Int
//│ }


class Neg<A>(expr: A)
//│ class Neg[A](expr: A)


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: 'expr -> Int}
//│   fun eval: (Neg['expr] | #Object & 'a & ~#Neg) -> (Int | 'b)
//│ }


mixin EvalNegNeg {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNegNeg() {
//│   super: {eval: (Neg['A] | 'a) -> 'b}
//│   this: {eval: 'expr -> 'b}
//│   fun eval: (Neg['A & (Neg['expr] | #Object & ~#Neg)] | #Object & 'a & ~#Neg) -> 'b
//│ }


module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ module TestLang() {
//│   fun eval: 'a -> Int
//│ }
//│ where
//│   'a <: Neg['A] | #Object & 'b & ~#Neg
//│   'A <: Neg['a & 'A] | Neg['A] & ~#Neg | #Object & 'b & ~#Neg
//│   'b <: Add['a] | Lit | Neg['a]


fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
TestLang.eval(mk(0))
//│ fun mk: forall 'E. #Num -> 'E
//│ Int
//│ where
//│   'E :> Add['E] | Lit | Neg['E]
//│ res
//│     = [Function: mk]
