:NewDefs



class Foo[out A](x: A)
//│ class Foo[A](x: A)

fun foo(x: Foo[Int]): Foo[Num] = x
//│ fun foo: (x: Foo[Int]) -> Foo[Num]
//│ foo

:e
fun foo(x: Foo[Num]): Foo[Int] = x
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.13: 	fun foo(x: Foo[Num]): Foo[Int] = x
//│ ║        	                                 ^
//│ ╟── type `Num` is not an instance of `Int`
//│ ║  l.13: 	fun foo(x: Foo[Num]): Foo[Int] = x
//│ ║        	               ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.13: 	fun foo(x: Foo[Num]): Foo[Int] = x
//│ ╙──      	                          ^^^
//│ fun foo: (x: Foo[Num]) -> Foo[Int]
//│ foo


class Foo[in A](x: A -> Int)
//│ class Foo[A](x: A -> Int)

fun foo(x: Foo[Num]): Foo[Int] = x
//│ fun foo: (x: Foo[Num]) -> Foo[Int]
//│ foo

:e
fun foo(x: Foo[Int]): Foo[Num] = x
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.35: 	fun foo(x: Foo[Int]): Foo[Num] = x
//│ ║        	                                 ^
//│ ╟── type `Num` is not an instance of `Int`
//│ ║  l.35: 	fun foo(x: Foo[Int]): Foo[Num] = x
//│ ║        	                          ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.35: 	fun foo(x: Foo[Int]): Foo[Num] = x
//│ ╙──      	               ^^^
//│ fun foo: (x: Foo[Int]) -> Foo[Num]
//│ foo



// * Note that not checking variance annotations can actually be made sound in MLscript,
// *  but this would be surprising for users, who would find type errors at the definition's use sites.


// :e // TODO check variance annotations!
class Oops0[in A](val x: A)
//│ class Oops0[A](x: A)

// :e // TODO check variance annotations!
class Oops0[out A](val x: A -> Int)
//│ class Oops0[A](x: A -> Int)

let o = Oops0(id)
//│ let o: Oops0[nothing]
//│ o
//│   = Oops0 {}

// * What used to happens is `Oops9{ A = nothing..'? }` was inferred for `o` (consistent with `A`'s covariance),
// *  so all negative occurrences of `o.A` were viewed as `nothing` from the outside, resulting in `o.x : nothing -> Int`
// * No lomnger the case since I simplified substitution for variant type arguments, to improve inferred type simplification.
o.x
//│ Int -> Int
//│ res
//│     = [Function: id]

// * Similarly, `Oops0[Int]` here used to expand to the equivalent `Oops0{ A = nothing..Int }`, giving `(o : Oops0[Int]).x : nothing -> Int`
(o : Oops0[Int]).x
//│ Int -> Int
//│ res
//│     = [Function: id]

// * So code like this no longer reports an error:
// :e
o.x(123)
//│ Int
//│ res
//│     = 123

// :e
(o : Oops0[Int]).x(123)
//│ Int
//│ res
//│     = 123


class Oops1[out A](val x: A -> A, val y: A)
//│ class Oops1[A](x: A -> A, y: A)

let o = Oops1(id, 123)
//│ let o: Oops1[123]
//│ o
//│   = Oops1 {}

o.x
//│ 'A -> (123 | 'A)
//│ res
//│     = [Function: id]

// :e
o.x(123)
//│ 123
//│ res
//│     = 123

:re
o.x(error) + 1
//│ Int
//│ res
//│     Runtime error:
//│       Error: an error was thrown


class Oops2[out A](val x: A -> A, val y: A)
//│ class Oops2[A](x: A -> A, y: A)

let o = Oops2(id, 123)
//│ let o: Oops2[123]
//│ o
//│   = Oops2 {}

o.x
//│ 'A -> (123 | 'A)
//│ res
//│     = [Function: id]

// :e
o.x(123)
//│ 123
//│ res
//│     = 123

// :e // * We will be able to make this work later, through `o.x : o.A -> o.A` and `o.y : o.A`
o.x(o.y)
//│ 123
//│ res
//│     = 123

:re
o.x(error) + 1
//│ Int
//│ res
//│     Runtime error:
//│       Error: an error was thrown


