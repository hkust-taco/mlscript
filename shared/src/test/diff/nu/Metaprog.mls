:NewDefs


class Code[out A, out Ctx]
//│ class Code[A, Ctx] {
//│   constructor()
//│ }

class IntLit(value: Int) extends Code[Int, nothing]
//│ class IntLit(value: Int) extends Code

class Add[out C](lhs: Code[Int, C], rhs: Code[Int, C]) extends Code[Int, C]
//│ class Add[C](lhs: Code[Int, C], rhs: Code[Int, C]) extends Code

fun bind(x: Code['a, 'c], k: (forall 'cc: Code['a, 'cc] -> Code['b, 'cc])): Code['b, 'c] = k(x)
//│ fun bind: forall 'a 'c 'b. (x: Code['a, 'c], k: forall 'cc. Code['a, 'cc] -> Code['b, 'cc]) -> Code['b, 'c]


// * Note: extrusion
fun test(f) =
  bind of IntLit(42), n =>
  f(n)
  Add(n, IntLit(1))
//│ fun test: (Code[Int, ??cc] -> ()) -> Code[Int, nothing]


abstract class Test[C] {
  // * Represents what happens in "... ${input} ..." when a binding of C is in scope
  fun unquote: (input: Code['a, C | 'c]) -> Code[Int, 'c]
  fun getVar: Code[Int, C]
  fun test0 = this.unquote of IntLit(1)
  fun test1 = this.unquote of Add(this.getVar, IntLit(1))
}
//│ abstract class Test[C] {
//│   fun getVar: Code[Int, C]
//│   fun test0: Code[Int, nothing]
//│   fun test1: Code[Int, nothing]
//│   fun unquote: forall 'c. (input: Code[anything, 'c | C]) -> Code[Int, 'c]
//│ }


:NoJS

fun mkVar(f: forall 'C: Test['C] -> 'a): 'a
//│ fun mkVar: forall 'a. (f: forall 'C. Test['C] -> 'a) -> 'a

mkVar of t0 =>
  t0.unquote of Add(t0.getVar, IntLit(1))
//│ Code[Int, nothing]

mkVar of t0 =>
  Add(t0.getVar, IntLit(1))
//│ Add[anything]

mkVar of t0 =>
  mkVar of t1 =>
    t1.unquote of t0.unquote of Add(t0.getVar, t1.getVar)
//│ Code[Int, ??C & ~??C0]

mkVar of t0 =>
  mkVar of t1 =>
    t0.unquote of t1.unquote of Add(t0.getVar, t1.getVar)
//│ Code[Int, nothing]


