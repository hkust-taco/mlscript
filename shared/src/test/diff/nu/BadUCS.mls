:NewDefs


class Foo
//│ class Foo

fun foo(x) = if x is Foo then 0
//│ fun foo: Foo -> 0


module Bar {
  class Foo0
}
//│ module Bar {
//│   class Foo0
//│ }

fun foo(x) = if x is Bar then 0
//│ fun foo: Bar -> 0

:e
fun foo(x) = if x is Foo0 then 0
//│ ╔══[ERROR] Cannot find constructor `Foo0` in scope
//│ ║  l.22: 	fun foo(x) = if x is Foo0 then 0
//│ ╙──      	                     ^^^^
//│ fun foo: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared


type F = Foo
//│ type F = Foo

:e
fun foo(x) = if x is F then 0
//│ ╔══[ERROR] Cannot find constructor `F` in scope
//│ ║  l.35: 	fun foo(x) = if x is F then 0
//│ ╙──      	                     ^
//│ fun foo: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

:e
fun foo(x) = if x is F() then 0
//│ ╔══[ERROR] Illegal pattern `F`
//│ ║  l.44: 	fun foo(x) = if x is F() then 0
//│ ╙──      	                     ^
//│ fun foo: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared


mixin M
//│ mixin M()

:e
fun foo(x) = if x is M then 0
//│ ╔══[ERROR] Cannot find constructor `M` in scope
//│ ║  l.57: 	fun foo(x) = if x is M then 0
//│ ╙──      	                     ^
//│ fun foo: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

:e
fun foo(x) = if x is M() then 0
//│ ╔══[ERROR] Illegal pattern `M`
//│ ║  l.66: 	fun foo(x) = if x is M() then 0
//│ ╙──      	                     ^
//│ fun foo: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared


fun foo0(x, y) = if x is y then 0
//│ fun foo0: (anything, anything,) -> 0


fun foo = 0
//│ fun foo: 0

:e
fun foo0(x) = if x is foo() then 0
//│ ╔══[ERROR] Illegal pattern `foo`
//│ ║  l.83: 	fun foo0(x) = if x is foo() then 0
//│ ╙──      	                      ^^^
//│ fun foo0: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

:e
fun foo(x) = if x is foo() then 0
//│ ╔══[ERROR] Illegal pattern `foo`
//│ ║  l.92: 	fun foo(x) = if x is foo() then 0
//│ ╙──      	                     ^^^
//│ fun foo: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

module Nil
class Cons[out A](head: A, tail: Cons[A] | Nil)
//│ module Nil
//│ class Cons[A](head: A, tail: Cons[A] | Nil)

fun join(xs) =
  if xs is
    Nil then ""
    Cons(x, Nil) then toString(x)
    Cons(x, xs') then concat(toString(x))(concat(", ")(join(xs')))
//│ fun join: (Cons[anything] | Nil) -> Str
