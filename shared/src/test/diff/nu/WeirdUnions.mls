:NewDefs



fun f: Str | [Str, Int]
//│ fun f: Str | [Str, Int]

fun f: [Str] | [Str, Int]
//│ fun f: Array[Int | Str] & {0: Str}

fun f: (Str | [Str, Int])
//│ fun f: Str | [Str, Int]

:e
fun f: Str | (Str, Int)
//│ ╔══[ERROR] type identifier not found: ,
//│ ║  l.15: 	fun f: Str | (Str, Int)
//│ ╙──      	             ^^^^^^^^^^
//│ fun f: Str | error


fun f: Str | ([Str, Int])
//│ fun f: Str | [Str, Int]

:e
fun f: Str | ((Str, Int))
//│ ╔══[ERROR] type identifier not found: ,
//│ ║  l.26: 	fun f: Str | ((Str, Int))
//│ ╙──      	             ^^^^^^^^^^^^
//│ fun f: Str | error



// * This type merges the input tuples, resulting in the union seen above:
fun f: (Str => Str) & ((Str, Int) => Str)
//│ fun f: (...Array[Int | Str] & {0: Str}) -> Str

f("abc", "abc")
//│ Str
//│ res
//│     = <no result>
//│       f is not implemented


// * Note: the merge doesn't happen when the result type is different...
fun f: (Str => Str) & ((Str, Int) => Int)
//│ fun f: Str -> Str & (Str, Int) -> Int

// * ...resulting in approximation at call sites (we don't handle overloading)
f("abc", "abc")
//│ Int | Str
//│ res
//│     = <no result>
//│       f is not implemented

f("abcabc")
//│ Int | Str
//│ res
//│     = <no result>
//│       f is not implemented



// * Mismatched argument list sizes yields surprising results:
let r = if true then id else (x, y) => [y, x]
//│ let r: (...nothing) -> [nothing, nothing]
//│ r
//│   = [Function: id]

:e // * Expected: the function is uncallable until we implement syntax `r(...error)`
r(error)
r(error, error)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.71: 	r(error)
//│ ║        	^^^^^^^^
//│ ╟── argument of type `[nothing]` does not match type `[?a, ?b]`
//│ ║  l.71: 	r(error)
//│ ║        	 ^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.65: 	let r = if true then id else (x, y) => [y, x]
//│ ╙──      	                              ^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.72: 	r(error, error)
//│ ║        	^^^^^^^^^^^^^^^
//│ ╟── argument list of type `[nothing, nothing]` does not match type `[?a]`
//│ ║  l.72: 	r(error, error)
//│ ╙──      	 ^^^^^^^^^^^^^^
//│ error | [nothing, nothing]
//│ res
//│ Runtime error:
//│   Error: an error was thrown
//│ res
//│ Runtime error:
//│   Error: an error was thrown

// * Note: the correct version:
let r = if true then id else ([x, y]) => [y, x]
//│ let r: forall 'a 'b 'c. (['a, 'b] & 'c) -> (['b, 'a] | 'c)
//│ r
//│   = [Function: id]

r of [0, 1]
//│ [0 | 1, 0 | 1]
//│ res
//│     = [ 0, 1 ]

// Also currently parses the same:
let r = if true then id else [x, y] => [y, x]
//│ let r: forall 'a 'b 'c. (['c, 'a] & 'b) -> (['a, 'c] | 'b)
//│ r
//│   = [Function: id]


