:NewDefs


fun foo(x) = (x, x)
//│ fun foo: forall 'a. 'a -> ['a, 'a]
//│ foo

id
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: id]

let r = foo(id)
//│ let r: [forall 'a. 'a -> 'a, forall 'a. 'a -> 'a]
//│ r
//│   = [ [Function: id], [Function: id] ]


fun fst(x, _) = x
fun snd(_, x) = x
//│ fun fst: forall 'a. ('a, anything) -> 'a
//│ fun snd: forall 'b. (anything, 'b) -> 'b
//│ fst
//│ snd

fst(1, 2)
//│ 1
//│ res
//│     = 1

:e
fst([1, 2])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.32: 	fst([1, 2])
//│ ║        	^^^^^^^^^^^
//│ ╟── argument of type `[[1, 2]]` does not match type `[?a, ?b]`
//│ ║  l.32: 	fst([1, 2])
//│ ║        	   ^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.19: 	fun fst(x, _) = x
//│ ╙──      	       ^^^^^^
//│ error
//│ res
//│     = [ 1, 2 ]


fun fst([x, _]) = x
fun snd([_, x]) = x
//│ fun fst: forall 'a. (['a, anything]) -> 'a
//│ fun snd: forall 'b. ([anything, 'b]) -> 'b
//│ fst
//│ snd

let s = fst(r)
//│ let s: forall 'a. 'a -> 'a
//│ s
//│   = [Function: id]

s("hello")
//│ "hello"
//│ res
//│     = 'hello'

s(123)
//│ 123
//│ res
//│     = 123

fst(r)("hello")
//│ "hello"
//│ res
//│     = 'hello'


