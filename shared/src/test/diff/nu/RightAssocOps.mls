:NewDefs


// * Operators that end with `:` are right-associative


fun (+:) pre(x: Int, xs) = [[x], xs]
fun (:+) post(xs, x: Int) = [xs, [x]]
fun (++) conc(xs, ys) = [xs, ys]
//│ fun (+:) pre: forall 'a. (x: Int, 'a) -> [[Int], 'a]
//│ fun (:+) post: forall 'b. ('b, x: Int) -> ['b, [Int]]
//│ fun (++) conc: forall 'c 'd. ('d, 'c) -> ['d, 'c]


1 +: 2 +: 3 +: []
//│ [[Int], [[Int], [[Int], []]]]
//│ res
//│     = [ [ 1 ], [ [ 2 ], [ [Array], [] ] ] ]

[] :+ 1 :+ 2 :+ 3
//│ [[[[], [Int]], [Int]], [Int]]
//│ res
//│     = [ [ [ [], [Array] ], [ 2 ] ], [ 3 ] ]

[1, 2, 3] ++ [4, 5, 6]
//│ [[1, 2, 3], [4, 5, 6]]
//│ res
//│     = [ [ 1, 2, 3 ], [ 4, 5, 6 ] ]

:p
1 +: "a" ++ "b" :+ 2
//│ |1| |+:| |"a"| |++| |"b"| |:+| |2|
//│ AST: TypingUnit(App(Var(+:), Tup(_: IntLit(1), _: App(Var(:+), Tup(_: App(Var(++), Tup(_: StrLit(a), _: StrLit(b))), _: IntLit(2))))))
//│ Parsed: +:(1, :+(++("a", "b",), 2,),);
//│ [[Int], [["a", "b"], [Int]]]
//│ res
//│     = [ [ 1 ], [ [ 'a', 'b' ], [ 2 ] ] ]

:p
1 +: "a" :+ 2 ++ "b"
//│ |1| |+:| |"a"| |:+| |2| |++| |"b"|
//│ AST: TypingUnit(App(Var(+:), Tup(_: IntLit(1), _: App(Var(++), Tup(_: App(Var(:+), Tup(_: StrLit(a), _: IntLit(2))), _: StrLit(b))))))
//│ Parsed: +:(1, ++(:+("a", 2,), "b",),);
//│ [[Int], [["a", [Int]], "b"]]
//│ res
//│     = [ [ 1 ], [ [ 'a', [Array] ], 'b' ] ]

:p
:e
1 +: "a" ++ 2 +: "b"
//│ |1| |+:| |"a"| |++| |2| |+:| |"b"|
//│ AST: TypingUnit(App(Var(+:), Tup(_: IntLit(1), _: App(Var(+:), Tup(_: App(Var(++), Tup(_: StrLit(a), _: IntLit(2))), _: StrLit(b))))))
//│ Parsed: +:(1, +:(++("a", 2,), "b",),);
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.50: 	1 +: "a" ++ 2 +: "b"
//│ ║        	     ^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `[?a, ?b]` is not an instance of type `Int`
//│ ║  l.9: 	fun (++) conc(xs, ys) = [xs, ys]
//│ ║       	                        ^^^^^^^^
//│ ╟── but it flows into operator application with expected type `Int`
//│ ║  l.50: 	1 +: "a" ++ 2 +: "b"
//│ ║        	     ^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.7: 	fun (+:) pre(x: Int, xs) = [[x], xs]
//│ ╙──     	                ^^^
//│ [[Int], error | [[Int], "b"]]
//│ res
//│     = [ [ 1 ], [ [ [Array] ], 'b' ] ]

1 +: "a" ++ (2 +: "b")
//│ [[Int], ["a", [[Int], "b"]]]
//│ res
//│     = [ [ 1 ], [ 'a', [ [Array], 'b' ] ] ]


