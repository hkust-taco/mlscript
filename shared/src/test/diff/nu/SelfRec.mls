:NewDefs



class Foo1(val x: Int) {
  fun test = Foo1(1).x
}
//│ class Foo1(x: Int) {
//│   fun test: Int
//│ }

:e
class Foo1X(x: 0 | 1) extends Foo1(x) {
  fun test2 = Foo1X(1).x
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.14: 	  fun test2 = Foo1X(1).x
//│ ╙──      	                      ^^
//│ ╔══[ERROR] Inherited parameter named `x` is not virtual and cannot be overridden
//│ ║  l.13: 	class Foo1X(x: 0 | 1) extends Foo1(x) {
//│ ║        	            ^
//│ ╟── Originally declared here:
//│ ║  l.5: 	class Foo1(val x: Int) {
//│ ╙──     	               ^
//│ class Foo1X(x: 0 | 1) extends Foo1 {
//│   fun test: Int
//│   fun test2: error
//│ }


class Foo2[A](val x: A) {
  fun test = Foo2(1).x
}
//│ class Foo2[A](x: A) {
//│   fun test: 1
//│ }

:e
class Foo2X(x: 0 | 1) extends Foo2(x) {
  fun test2 = Foo2X(1).x
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.40: 	  fun test2 = Foo2X(1).x
//│ ╙──      	                      ^^
//│ ╔══[ERROR] Inherited parameter named `x` is not virtual and cannot be overridden
//│ ║  l.39: 	class Foo2X(x: 0 | 1) extends Foo2(x) {
//│ ║        	            ^
//│ ╟── Originally declared here:
//│ ║  l.31: 	class Foo2[A](val x: A) {
//│ ╙──      	                  ^
//│ class Foo2X(x: 0 | 1) extends Foo2 {
//│   fun test: 1
//│   fun test2: error
//│ }

:e
Foo2X(1).x
//│ ╔══[ERROR] Parameter 'x' cannot tbe accessed as a field
//│ ║  l.57: 	Foo2X(1).x
//│ ║        	        ^^
//│ ╟── Either make the parameter a `val` or access it through destructuring
//│ ║  l.39: 	class Foo2X(x: 0 | 1) extends Foo2(x) {
//│ ╙──      	            ^
//│ 0 | 1 | error
//│ res
//│     = 1

:e // TODO improve type checking
class Foo2X(a: 0 | 1) extends Foo2(a) {
  fun test2 = Foo2X(1).x
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.70: 	  fun test2 = Foo2X(1).x
//│ ╙──      	                      ^^
//│ class Foo2X(a: 0 | 1) extends Foo2 {
//│   fun test: 1
//│   fun test2: error
//│ }

Foo2X(1).x
//│ 0 | 1
//│ res
//│     = 1


class Foo3[A](val x: A) {
  fun test = Foo3(1)
  fun foo = Foo3
}
//│ class Foo3[A](x: A) {
//│   fun foo: (x: A) -> Foo3[A]
//│   fun test: forall 'A. Foo3['A]
//│ }
//│ where
//│   'A :> 1

Foo3
//│ forall 'A. (x: 'A) -> Foo3['A]
//│ res
//│     = [Function (anonymous)] {
//│         class: [class Foo3],
//│         unapply: [Function: unapply]
//│       }

Foo3(1)
//│ Foo3['A]
//│   where
//│     'A :> 1
//│ res
//│     = Foo3 {}

Foo3(1).x
//│ 1
//│ res
//│     = 1

Foo3(1).foo
//│ forall 'A. (x: 'A) -> Foo3['A]
//│ res
//│     = [Function (anonymous)] {
//│         class: [class Foo3],
//│         unapply: [Function: unapply]
//│       }

:e
class Foo4 {
  fun test = [Foo4.test]
}
//│ ╔══[ERROR] Class Foo4 cannot be instantiated as it exposes no constructor
//│ ║  l.127: 	  fun test = [Foo4.test]
//│ ╙──       	              ^^^^
//│ class Foo4 {
//│   constructor()
//│   fun test: [error]
//│ }

:e
class Foo5(x: Int) {
  fun test = [Foo5(5).test]
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.139: 	  fun test = [Foo5(5).test]
//│ ╙──       	                     ^^^^^
//│ class Foo5(x: Int) {
//│   fun test: [error]
//│ }

:e
class Foo6[A](x: A) {
  fun test1 = [Foo6(x).test1]
  fun test2 = [Foo6(123).test2]
  fun test3 = [Foo6([x]).test3]
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.150: 	  fun test1 = [Foo6(x).test1]
//│ ╙──       	                      ^^^^^^
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.151: 	  fun test2 = [Foo6(123).test2]
//│ ╙──       	                        ^^^^^^
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.152: 	  fun test3 = [Foo6([x]).test3]
//│ ╙──       	                        ^^^^^^
//│ class Foo6[A](x: A) {
//│   fun test1: [error]
//│   fun test2: [error]
//│   fun test3: [error]
//│ }

module N
//│ module N

:e
class Foo7[A](head: A, tail: Foo7[A] | N) {
  fun test1 = if tail is
    N then head
    _ then tail.test1
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.176: 	    _ then tail.test1
//│ ╙──       	               ^^^^^^
//│ class Foo7[A](head: A, tail: Foo7[A] | N) {
//│   fun test1: error | A
//│ }

class Foo7_A[A](head: A, tail: Foo7_A[A] | N) {
  fun test1: A
  fun test1 = if tail is
    N then head
    _ then tail.test1
}
//│ class Foo7_A[A](head: A, tail: Foo7_A[A] | N) {
//│   fun test1: A
//│ }

class Foo7_A2[A](head: A, tail: Foo7_A[A] | N) {
  fun test1: A = if tail is
    N then head
    _ then tail.test1
}
//│ class Foo7_A2[A](head: A, tail: Foo7_A[A] | N) {
//│   fun test1: A
//│ }

class Foo7_2_A[A](head: A, tail: Foo7_A[Int] | N) {
  fun test1: Int | A = if tail is
    N then head
    _ then tail.test1
}
//│ class Foo7_2_A[A](head: A, tail: Foo7_A[Int] | N) {
//│   fun test1: Int | A
//│ }

:e
class Foo8[A](x: A) {
  fun test1[B](y: B): A =
    let tmp = Foo8(y).test1(x)
    x
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.216: 	    let tmp = Foo8(y).test1(x)
//│ ╙──       	                     ^^^^^^
//│ class Foo8[A](x: A) {
//│   fun test1: (y: anything) -> A
//│ }




:e // * FIXME this is caused by the self-annotation...
abstract class List(val length: Int): Cons
class Cons(tail: List) extends List(tail.length + 1)
//│ ╔══[ERROR] Unhandled cyclic parent specification
//│ ║  l.231: 	class Cons(tail: List) extends List(tail.length + 1)
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.231: 	class Cons(tail: List) extends List(tail.length + 1)
//│ ╙──       	                                        ^^^^^^^
//│ abstract class List(length: Int): Cons
//│ class Cons(tail: List) extends List

// * Note: full (non-minimized) definitions:

:e // * FIXME
abstract class List[out A](val length: Int): Cons[A] | Nil
class Cons[out A](val head: A, val tail: List[A]) extends List[A](tail.length + 1)
module Nil extends List[nothing](0)
//│ ╔══[ERROR] Unhandled cyclic parent specification
//│ ║  l.245: 	class Cons[out A](val head: A, val tail: List[A]) extends List[A](tail.length + 1)
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.245: 	class Cons[out A](val head: A, val tail: List[A]) extends List[A](tail.length + 1)
//│ ╙──       	                                                                      ^^^^^^^
//│ abstract class List[A](length: Int): Cons[A] | Nil
//│ class Cons[A](head: A, tail: List[A]) extends List
//│ module Nil extends List


