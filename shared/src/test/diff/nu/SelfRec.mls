:NewDefs



class Foo1(x: Int) {
  fun test = Foo1(1).x
}
//│ class Foo1(x: Int) {
//│   fun test: Int
//│ }

class Foo2[A](x: A) {
  fun test = Foo2(1).x
}
//│ class Foo2[A](x: A) {
//│   fun test: 1
//│ }


class Foo3[A](x: A) {
  fun test = Foo3(1)
  fun foo = Foo3
}
//│ class Foo3[A](x: A) {
//│   fun foo: (x: A,) -> Foo3[A]
//│   fun test: Foo3[1]
//│ }

Foo3
//│ forall 'A. (x: 'A,) -> Foo3['A]
//│ res
//│     = [Function (anonymous)] { class: [class Foo3] }

Foo3(1)
//│ Foo3[1]
//│ res
//│     = Foo3 {}

Foo3(1).x
//│ 1
//│ res
//│     = 1

Foo3(1).foo
//│ forall 'A. (x: 'A,) -> Foo3['A]
//│ res
//│     = [Function (anonymous)] { class: [class Foo3] }

:e
class Foo4 {
  fun test = [Foo4.test]
}
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.51: 	  fun test = [Foo4.test]
//│ ║        	              ^^^^^^^^^
//│ ╟── reference of type `() -> #Foo4` does not have field 'test'
//│ ║  l.51: 	  fun test = [Foo4.test]
//│ ╙──      	              ^^^^
//│ class Foo4 {
//│   fun test: (error,)
//│ }

:e
class Foo5(x: Int) {
  fun test = [Foo5(5).test]
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.65: 	  fun test = [Foo5(5).test]
//│ ╙──      	                     ^^^^^
//│ class Foo5(x: Int) {
//│   fun test: (error,)
//│ }

:e
class Foo6[A](x: A) {
  fun test1 = [Foo6(x).test1]
  fun test2 = [Foo6(123).test2]
  fun test3 = [Foo6([x]).test3]
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.76: 	  fun test1 = [Foo6(x).test1]
//│ ╙──      	                      ^^^^^^
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.77: 	  fun test2 = [Foo6(123).test2]
//│ ╙──      	                        ^^^^^^
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.78: 	  fun test3 = [Foo6([x]).test3]
//│ ╙──      	                        ^^^^^^
//│ class Foo6[A](x: A) {
//│   fun test1: (error,)
//│   fun test2: (error,)
//│   fun test3: (error,)
//│ }

module N
//│ module N

:e
class Foo7[A](head: A, tail: Foo7[A] | N) {
  fun test1 = if tail is
    N then head
    _ then tail.test1
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.102: 	    _ then tail.test1
//│ ╙──       	               ^^^^^^
//│ class Foo7[A](head: A, tail: Foo7[A] | N) {
//│   fun test1: A | error
//│ }

class Foo7_A[A](head: A, tail: Foo7_A[A] | N) {
  fun test1: A
  fun test1 = if tail is
    N then head
    _ then tail.test1
}
//│ class Foo7_A[A](head: A, tail: Foo7_A[A] | N) {
//│   fun test1: A
//│ }

class Foo7_A2[A](head: A, tail: Foo7_A[A] | N) {
  fun test1: A = if tail is
    N then head
    _ then tail.test1
}
//│ class Foo7_A2[A](head: A, tail: Foo7_A[A] | N) {
//│   fun test1: A
//│ }

class Foo7_2_A[A](head: A, tail: Foo7_A[Int] | N) {
  fun test1: Int | A = if tail is
    N then head
    _ then tail.test1
}
//│ class Foo7_2_A[A](head: A, tail: Foo7_A[Int] | N) {
//│   fun test1: A | Int
//│ }

:e
class Foo8[A](x: A) {
  fun test1[B](y: B): A =
    let tmp = Foo8(y).test1(x)
    x
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.142: 	    let tmp = Foo8(y).test1(x)
//│ ╙──       	                     ^^^^^^
//│ class Foo8[A](x: A) {
//│   fun test1: (y: anything,) -> A
//│ }


