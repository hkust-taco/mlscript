// * This is an example program where the error we get is really not ideal

:NewDefs


// * An example recursive definition:

fun test(pt1, pt2) = pt1.color === pt1.color and
  let p1 = pt1.parent
  let p2 = pt2.parent
  if p1 is undefined then true
  else if p2 is undefined then true
  else test(p1, p2)
//│ fun test: forall 'a 'b 'c. ('a, 'c) -> Bool
//│   where
//│     'c <: {parent: Object & 'c & ~() | ()}
//│     'a <: {color: Eql['b] & 'b, parent: Object & 'a & ~() | ()}


// * This works out fine:

class MyPoint1[Col](val color: Col, val parent: MyPoint1[Col] | undefined)
//│ class MyPoint1[Col](color: Col, parent: MyPoint1[Col] | ())

val p = MyPoint1(0, undefined)
//│ val p: MyPoint1['Col]
//│   where
//│     'Col :> 0
//│ p
//│   = MyPoint1 {}

test(p, p)
//│ Bool
//│ res
//│     = true


// * BUT... if we forgot to pass the type argument to MyPoint2 (getting a raw/nominal-tag type),
// * the error is not helpful at all:

class MyPoint2[Col](val color: Col, val parent: MyPoint2 | undefined)
//│ class MyPoint2[Col](color: Col, parent: MyPoint2[anything] | ())

val p = MyPoint2(0, undefined)
//│ val p: MyPoint2[0]
//│ p
//│   = MyPoint2 {}

:e
test(p, p)
//│ ╔══[ERROR] Type error in application
//│ ║  l.50: 	test(p, p)
//│ ║        	^^^^^^^^^^
//│ ╟── type variable `Col` leaks out of its scope
//│ ║  l.41: 	class MyPoint2[Col](val color: Col, val parent: MyPoint2 | undefined)
//│ ║        	               ^^^
//│ ╟── into field selection of type `#Eql`
//│ ║  l.8: 	fun test(pt1, pt2) = pt1.color === pt1.color and
//│ ╙──     	                     ^^^^^^^^^
//│ error
//│ res
//│     = true



// TODO[ucs] ideally this should work

fun test(pt1, pt2) = pt1.color === pt1.color and
  let p1 = pt1.parent
  let p2 = pt2.parent
  if p1 is undefined then p2 is undefined
  else test(p1, p2)
//│ fun test: forall 'a 'b 'c. ('a, 'c) -> Bool
//│   where
//│     'c <: {parent: Object & 'c}
//│     'a <: {color: Eql['b] & 'b, parent: Object & 'a & ~() | ()}

:e // TODO support
test(p, p)
//│ ╔══[ERROR] Type error in application
//│ ║  l.79: 	test(p, p)
//│ ║        	^^^^^^^^^^
//│ ╟── type variable `Col` leaks out of its scope
//│ ║  l.41: 	class MyPoint2[Col](val color: Col, val parent: MyPoint2 | undefined)
//│ ║        	               ^^^
//│ ╟── into field selection of type `#Eql`
//│ ║  l.68: 	fun test(pt1, pt2) = pt1.color === pt1.color and
//│ ╙──      	                     ^^^^^^^^^
//│ error
//│ res
//│     = true



