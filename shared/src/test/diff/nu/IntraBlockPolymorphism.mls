:NewDefs


// * Note: eventually we should progressively type check every mutually-recursive group
// *  in topological order, to maximize polymorphism.
// * But currently we just type check them in srouce code order.
// * So the following inferred types differ:

fun i(x) = x
let a = i(0)
let b = i(true)
//│ fun i: forall 'a. 'a -> 'a
//│ let a: 0
//│ let b: true
//│ a
//│   = 0
//│ b
//│   = true

:re // FIXME shouldn't be a reference error
let a = i(0)
fun i(x) = x
let b = i(true)
//│ let a: 'a | 0 | true
//│ fun i: forall 'b. ('a & 'b) -> ('b | 0)
//│ let b: 0 | true
//│ a
//│ Runtime error:
//│   ReferenceError: i1 is not defined
//│ b
//│   = true

:re // FIXME shouldn't be a reference error
let a = i(0)
let b = i(true)
fun i(x) = x
//│ let a: 'a | 0 | true
//│ let b: 'a | 0 | true
//│ fun i: forall 'b. ('a & 'b) -> ('b | 0 | true)
//│ a
//│ Runtime error:
//│   ReferenceError: i2 is not defined
//│ b
//│ Runtime error:
//│   ReferenceError: i2 is not defined


module Test {
  fun i(x) = x
  let a = i(0)
  let b = i(true)
}
//│ module Test {
//│   let a: 0
//│   let b: true
//│   fun i: forall 'a. 'a -> 'a
//│ }



