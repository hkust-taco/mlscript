:NewDefs

class Foo() {
  virtual fun f(x: Int) = x + 1
  val g: Int = 0
}
//│ class Foo() {
//│   fun f: (x: Int) -> Int
//│   val g: Int
//│ }

class Bar() extends Foo {
  fun f(x: Int) = x + 2
}
//│ class Bar() extends Foo {
//│   fun f: (x: Int) -> Int
//│   val g: Int
//│ }

Bar().f(40)
//│ Int
//│ res
//│     = 42

:e
class Baz() extends Foo {
  val g = 1
}
//│ ╔══[ERROR] Value member `g` is not virtual and cannot be overridden
//│ ║  l.27: 	  val g = 1
//│ ║        	      ^^^^^
//│ ╟── Originally declared here:
//│ ║  l.5: 	  val g: Int = 0
//│ ╙──     	      ^^^^^^^^^^
//│ class Baz() extends Foo {
//│   fun f: (x: Int) -> Int
//│   val g: 1
//│ }

mixin X {
  fun f(x) = x + 42
}
mixin XX {
  fun f(x) = super.f(x) + 42
}
class T() extends X, XX
//│ mixin X() {
//│   fun f: Int -> Int
//│ }
//│ mixin XX() {
//│   super: {f: 'a -> Int}
//│   fun f: 'a -> Int
//│ }
//│ class T() {
//│   fun f: Int -> Int
//│ }

T().f(0 - 42)
//│ Int
//│ res
//│     = 42

abstract class M1() {
  val foo: Str
}
class M2(s: Str) extends M1 {
  val foo = s
}
M2("foo").foo
//│ abstract class M1() {
//│   val foo: Str
//│ }
//│ class M2(s: Str) extends M1 {
//│   val foo: Str
//│ }
//│ Str
//│ res
//│     = 'foo'

class U() {
  fun f: Int -> Int
  fun f(x) = x + 1
}
//│ class U() {
//│   fun f: Int -> Int
//│ }

:e
class V1() {
  virtual val x = 42
  fun foo = x // unqualified access!
}
//│ ╔══[ERROR] Unqualified access to virtual member x
//│ ║  l.91: 	  fun foo = x // unqualified access!
//│ ║        	      ^^^^^^^
//│ ╟── Declared here:
//│ ║  l.90: 	  virtual val x = 42
//│ ╙──      	              ^^^^^^
//│ class V1() {
//│   fun foo: 42
//│   val x: 42
//│ }

class V2() {
  val x: Int
  virtual val x = 42
  fun foo: Int = this.x
}
//│ class V2() {
//│   fun foo: Int
//│   val x: Int
//│ }


:e
class C() {
  virtual fun x : Int
  fun x = 1
  fun foo0 = x // should error
}
C().x
//│ ╔══[ERROR] Unqualified access to virtual member x
//│ ║  l.119: 	  fun foo0 = x // should error
//│ ║         	      ^^^^^^^^
//│ ╟── Declared here:
//│ ║  l.118: 	  fun x = 1
//│ ╙──       	      ^^^^^
//│ class C() {
//│   fun foo0: 1
//│   fun x: Int
//│ }
//│ Int
//│ res
//│     = 1

module D extends C {
  fun x = 2
}
D.x
//│ module D extends C {
//│   fun foo0: 1
//│   fun x: 2
//│ }
//│ 2
//│ res
//│     = 2

