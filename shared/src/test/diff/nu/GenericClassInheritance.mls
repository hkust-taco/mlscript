:NewDefs

class Room[A](name: Str) {
    fun foo(x: A) = x
}
//│ class Room[A](name: Str) {
//│   fun foo: (x: A,) -> A
//│ }

class BigRoom extends Room[Bool]("big")
//│ class BigRoom extends Room {
//│   fun foo: (x: 'A,) -> 'A
//│ }
//│ where
//│   'A := Bool

// * Note that this essentially infers Room[Bool]
class InferredRoom extends Room("infer") {
    fun foo(x) = x && true
}
//│ class InferredRoom extends Room {
//│   fun foo: Bool -> Bool
//│ }

(new InferredRoom) : Room['X]
//│ Room['X]
//│   where
//│     'X := Bool
//│ res
//│     = InferredRoom {}

:e
class TooManyRoom extends Room[Int, Str]("too many")
//│ ╔══[ERROR] class Room expects 1 type parameter(s); got 2
//│ ║  l.33: 	class TooManyRoom extends Room[Int, Str]("too many")
//│ ╙──      	                          ^^^^^^^^^^^^^
//│ class TooManyRoom extends Room {
//│   fun foo: (x: 'A,) -> 'A
//│ }
//│ where
//│   'A := Int

:e
class WrongRoom extends Room[Bool]("wrong") {
    fun foo(x) = x + 1
}
//│ ╔══[ERROR] Type mismatch in definition of method foo:
//│ ║  l.45: 	    fun foo(x) = x + 1
//│ ║        	        ^^^^^^^^^^^^^^
//│ ╟── type `Bool` is not an instance of `Int`
//│ ║  l.44: 	class WrongRoom extends Room[Bool]("wrong") {
//│ ║        	                             ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.45: 	    fun foo(x) = x + 1
//│ ╙──      	                 ^
//│ ╔══[ERROR] Type mismatch in definition of method foo:
//│ ║  l.45: 	    fun foo(x) = x + 1
//│ ║        	        ^^^^^^^^^^^^^^
//│ ╟── operator application of type `Int` is not an instance of `Bool`
//│ ║  l.45: 	    fun foo(x) = x + 1
//│ ║        	                 ^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.44: 	class WrongRoom extends Room[Bool]("wrong") {
//│ ║        	                             ^^^^
//│ ╟── from reference:
//│ ║  l.4: 	    fun foo(x: A) = x
//│ ╙──     	                    ^
//│ class WrongRoom extends Room {
//│   fun foo: Int -> Int
//│ }


class C0[A] { val a: A }
//│ class C0[A] {
//│   let a: A
//│ }

class C1[A] extends C0[A] { val a = a }
//│ class C1[A] extends C0 {
//│   let a: nothing
//│ }

:pe
:e
new C1 : C1[Int]
//│ ╔══[PARSE ERROR] Unexpected type ascription after `new` keyword
//│ ║  l.85: 	new C1 : C1[Int]
//│ ╙──      	    ^^
//│ ╔══[ERROR] Currently unsupported `new` syntax
//│ ║  l.85: 	new C1 : C1[Int]
//│ ╙──      	^^^
//│ error
//│ res
//│     = {}

((new C1) : C1[Int]) : C0['X]
//│ C0[Int]
//│ res
//│     = C1 {}

(new C1).a
//│ nothing
//│ res
//│     = undefined


mixin M1[A] {
    fun f1(x: A): A = x
    fun f2(x: A): (A, A) = (x, x)
}
//│ mixin M1[A]() {
//│   fun f1: (x: A,) -> A
//│   fun f2: (x: A,) -> (A, A,)
//│ }

class A1 extends M1 {
    fun f1(x: Int) = x
}
//│ class A1 {
//│   fun f1: (x: Int,) -> Int
//│   fun f2: (x: 'A,) -> ('A, 'A,)
//│ }

class A2[S, T] extends M1[(S, T)]
//│ class A2[S, T] {
//│   fun f1: (x: (S, T,),) -> (S, T,)
//│   fun f2: (x: (S, T,),) -> ((S, T,), (S, T,),)
//│ }

class A3(f1: Bool => Bool) extends M1
//│ class A3(f1: Bool -> Bool) {
//│   fun f1: (x: 'A,) -> 'A
//│   fun f2: (x: 'A,) -> ('A, 'A,)
//│ }

mixin M2[A] {
    fun m: A = this.a
}
//│ mixin M2[A]() {
//│   this: {a: A}
//│   fun m: A
//│ }

class B1(a: Int) extends M2[Int]
//│ class B1(a: Int) {
//│   fun m: Int
//│ }

class B2[A](a: Int => A) extends M2
//│ class B2[A](a: Int -> A) {
//│   fun m: Int -> A
//│ }

:e
class E1(a: Int) extends M2[Bool]
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.155: 	class E1(a: Int) extends M2[Bool]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `Int` is not an instance of type `Bool`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.155: 	class E1(a: Int) extends M2[Bool]
//│ ║         	                            ^^^^
//│ ╟── from field selection:
//│ ║  l.137: 	    fun m: A = this.a
//│ ╙──       	               ^^^^^^
//│ class E1(a: Int) {
//│   fun m: Bool
//│ }
