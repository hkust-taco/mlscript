:NewDefs


class A
//│ class A {
//│   constructor()
//│ }

class B(m: Int) extends A
//│ class B(m: Int) extends A


class A(n: Int)
//│ class A(n: Int)

class B(m: Int) extends A(m + 1)
//│ class B(m: Int) extends A


class A {
  fun a1: Int
  fun a1 = 1
  fun a2 = 2
}
//│ class A {
//│   constructor()
//│   fun a1: Int
//│   fun a2: 2
//│ }

class B extends A
//│ class B extends A {
//│   constructor()
//│   fun a1: Int
//│   fun a2: 2
//│ }


// * Interestingly, we can currently inherit from modules...

module C { fun test = 0 }
//│ module C {
//│   fun test: 0
//│ }

class D() extends C
//│ class D() extends C {
//│   fun test: 0
//│ }

D().test
//│ 0
//│ res
//│     = 0


class E(val m: Int) extends A {
  constructor(a: Int, b: Int) {
    m = a + b
    log of concat("Here's m: ")(toString of m)
  }
}
//│ class E(m: Int) extends A {
//│   constructor(a: Int, b: Int)
//│   fun a1: Int
//│   fun a2: 2
//│ }

// * FIXME codegen
E(1).m
//│ Int
//│ res
//│     = NaN
//│ // Output
//│ Here's m: NaN

(new E(1, 2)).m
//│ Int
//│ res
//│     = 3
//│ // Output
//│ Here's m: 3

if new E(1, 2) is E(x) then x
//│ Int
//│ res
//│     = 3
//│ // Output
//│ Here's m: 3

:e
module F extends E
//│ ╔══[ERROR] class E expects 2 parameter(s); got 0
//│ ║  l.92: 	module F extends E
//│ ╙──      	                 ^
//│ module F extends A, E {
//│   fun a1: Int
//│   fun a2: 2
//│ }

:e
module F extends E(123)
//│ ╔══[ERROR] class E expects 2 parameter(s); got 1
//│ ║  l.102: 	module F extends E(123)
//│ ╙──       	                 ^^^^^
//│ module F extends A, E {
//│   fun a1: Int
//│   fun a2: 2
//│ }

module F extends E(123, 456)
//│ module F extends A, E {
//│   fun a1: Int
//│   fun a2: 2
//│ }

// * Note: strangely, we see here the ctor output from the previous definitions of the F module 🤔
F.m
//│ Int
//│ res
//│     = 579
//│ // Output
//│ Here's m: NaN
//│ Here's m: NaN
//│ Here's m: 579


class G(x: Int) extends E(x, x + 1)
//│ class G(x: Int) extends A, E {
//│   fun a1: Int
//│   fun a2: 2
//│ }

G(123).m
//│ Int
//│ res
//│     = 247
//│ // Output
//│ Here's m: 247


:e // TODO support
class H extends E {
  constructor(a: Int, b: Int) {
    super(a, b)
  }
}
//│ ╔══[ERROR] class E expects 2 parameter(s); got 0
//│ ║  l.143: 	class H extends E {
//│ ╙──       	                ^
//│ ╔══[ERROR] Illegal use of `super`
//│ ║  l.145: 	    super(a, b)
//│ ╙──       	    ^^^^^
//│ ╔══[ERROR] identifier not found: super
//│ ║  l.145: 	    super(a, b)
//│ ╙──       	    ^^^^^
//│ class H extends A, E {
//│   constructor(a: Int, b: Int)
//│   fun a1: Int
//│   fun a2: 2
//│ }

:re
new H(111, 222)
//│ H
//│ res
//│     Runtime error:
//│       ReferenceError: Super constructor may only be called once
//│ // Output
//│ Here's m: NaN
//│ Here's m: 333


