:NewDefs


class A
//│ class A

class B(m: int) extends A
//│ class B(m: int) extends A


class A(n: int)
//│ class A(n: int)

class B(m: int) extends A(m + 1)
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.14: 	class B(m: int) extends A(m + 1)
//│ ║        	                          ^^^
//│ ╟── type `int` is not an instance of type `Int`
//│ ║  l.14: 	class B(m: int) extends A(m + 1)
//│ ║        	           ^^^
//│ ╟── but it flows into reference with expected type `Int`
//│ ║  l.14: 	class B(m: int) extends A(m + 1)
//│ ╙──      	                          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.14: 	class B(m: int) extends A(m + 1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `Int` is not an instance of type `int`
//│ ║  l.14: 	class B(m: int) extends A(m + 1)
//│ ║        	                          ^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.11: 	class A(n: int)
//│ ╙──      	           ^^^
//│ class B(m: int) extends A


class A {
  fun a1: int
  fun a1 = 1
  fun a2 = 2
}
//│ ╔══[ERROR] Type mismatch in definition of method a1:
//│ ║  l.38: 	  fun a1 = 1
//│ ║        	      ^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `int`
//│ ║  l.38: 	  fun a1 = 1
//│ ║        	           ^
//│ ╟── but it flows into definition of method a1 with expected type `int`
//│ ║  l.38: 	  fun a1 = 1
//│ ║        	      ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.37: 	  fun a1: int
//│ ║        	          ^^^
//│ ╟── from signature of member `a1`:
//│ ║  l.37: 	  fun a1: int
//│ ╙──      	      ^^^^^^^
//│ class A {
//│   fun a1: int
//│   fun a2: 2
//│ }

class B extends A
//│ class B extends A {
//│   fun a1: int
//│   fun a2: 2
//│ }


