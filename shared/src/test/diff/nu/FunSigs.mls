:NewDefs



fun log(msg: Str): unit
//│ fun log: (msg: Str) -> unit
//│ log

let f =
  log("ok")
  123
//│ let f: 123
//│ f
//│   = <no result>
//│     log is not implemented

fun log: Str -> unit
//│ fun log: Str -> unit
//│ log

fun log: Str => unit
//│ fun log: Str -> unit
//│ log

log("ok")
//│ unit
//│ res
//│     = <no result>
//│       log is not implemented



fun con: Str => Str => Str
fun con = concat
//│ fun con: Str -> Str -> Str
//│ fun con: Str -> Str -> Str
//│ con
//│ con

con("aa")("bbb")
//│ Str
//│ res
//│     = 'aabbb'


fun con: Str => Str => Str
//│ fun con: Str -> Str -> Str
//│ con

fun con = concat
//│ fun con: Str -> Str -> Str
//│ con

con("aa")("bbb")
//│ Str
//│ res
//│     = 'aabbb'



fun oops: Str => Str
//│ fun oops: Str -> Str
//│ oops

fun oops = 0
//│ fun oops: 0
//│ oops

oops
//│ 0
//│ res
//│     = 0


:e
fun oops: Str => Str
fun oops = 0
//│ ╔══[ERROR] Type mismatch in definition:
//│ ║  l.77: 	fun oops = 0
//│ ║        	    ^^^^^^^^
//│ ╟── integer literal of type `0` is not a function
//│ ║  l.77: 	fun oops = 0
//│ ║        	           ^
//│ ╟── but it flows into definition of method oops with expected type `Str -> Str`
//│ ║  l.77: 	fun oops = 0
//│ ║        	    ^^^^^^^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.76: 	fun oops: Str => Str
//│ ╙──      	          ^^^^^^^^^^
//│ fun oops: 0
//│ fun oops: Str -> Str
//│ oops
//│ oops

oops
//│ Str -> Str
//│ res
//│     = 0


