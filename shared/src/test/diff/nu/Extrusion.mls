:NewDefs


fun f(y) =
  let local = forall 'A; (x: 'A) =>
    y(x) + 1
    x
  y
//│ fun f: forall 'a. (??A -> Int & 'a) -> 'a

:e
f(id)
//│ ╔══[ERROR] Type error in application
//│ ║  l.12: 	f(id)
//│ ║        	^^^^^
//│ ╟── type variable `'A` leaks out of its scope
//│ ║  l.5: 	  let local = forall 'A; (x: 'A) =>
//│ ║       	                     ^^
//│ ╟── into application of type `Int`
//│ ║  l.6: 	    y(x) + 1
//│ ║       	    ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.6: 	    y(x) + 1
//│ ╙──     	    ^
//│ forall 'a. error | 'a -> 'a
//│ res
//│     = [Function: id]


fun f(y) =
  let local = forall 'A; (x: 'A) =>
    (y : forall 'a; 'a -> 'a)(x)
    x
  y
//│ fun f: forall 'b. (forall 'a. 'a -> 'a & 'b) -> 'b

f(id)
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: id]


