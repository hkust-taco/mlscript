:NewDefs


trait T { fun x: Int }
mixin M(val x: Bool)
//│ trait T {
//│   fun x: Int
//│ }
//│ mixin M(x: Bool)

:e
module C extends T, M(false)
C.x
//│ ╔══[ERROR] Type mismatch in reference:
//│ ║  l.12: 	module C extends T, M(false)
//│ ║        	                      ^^^^^
//│ ╟── reference of type `false` is not an instance of type `Int`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.4: 	trait T { fun x: Int }
//│ ║       	                 ^^^
//│ ╟── from signature of member `x`:
//│ ║  l.4: 	trait T { fun x: Int }
//│ ╙──     	              ^^^^^^
//│ module C extends T
//│ false
//│ res
//│     = false


trait T { fun x: Int }
mixin M(val x: Num)
//│ trait T {
//│   fun x: Int
//│ }
//│ mixin M(x: Num)

module C extends T, M(0)
C.x
//│ module C extends T
//│ 0
//│ res
//│     = 0


trait T { fun x: Int }
mixin M(x: Bool)
//│ trait T {
//│   fun x: Int
//│ }
//│ mixin M(x: Bool)

:e
module C extends T, M(false)
C.x
//│ ╔══[ERROR] Member `x` is declared (or its declaration is inherited) but is not implemented in `C`
//│ ║  l.53: 	module C extends T, M(false)
//│ ║        	       ^
//│ ╟── Declared here:
//│ ║  l.45: 	trait T { fun x: Int }
//│ ╙──      	          ^^^^^^^^^^
//│ module C extends T {
//│   fun x: Int
//│ }
//│ Int
//│ res
//│     = undefined


