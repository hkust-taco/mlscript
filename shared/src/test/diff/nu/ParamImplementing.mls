:NewDefs


trait T { fun x: Int }
mixin M(x: bool)
//│ trait T {
//│   fun x: Int
//│ }
//│ mixin M(x: bool)

:e
class C extends T, M(false)
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.12: 	class C extends T, M(false)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `False` is not an instance of type `bool`
//│ ║  l.12: 	class C extends T, M(false)
//│ ║        	                     ^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.5: 	mixin M(x: bool)
//│ ╙──     	           ^^^^
//│ ╔══[ERROR] Type mismatch in reference:
//│ ║  l.12: 	class C extends T, M(false)
//│ ║        	                     ^^^^^
//│ ╟── reference of type `False` is not an instance of type `Int`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.4: 	trait T { fun x: Int }
//│ ║       	                 ^^^
//│ ╟── from signature of member `x`:
//│ ║  l.4: 	trait T { fun x: Int }
//│ ╙──     	              ^^^^^^
//│ class C extends T


trait T { fun x: Int }
mixin M(x: Num)
//│ trait T {
//│   fun x: Int
//│ }
//│ mixin M(x: Num)

class C extends T, M(0)
//│ class C extends T


