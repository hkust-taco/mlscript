:NewDefs


1
//│ 1
//│ res
//│     = 1

2 + 2
//│ Int
//│ res
//│     = 4

let r = { x: 1 }
//│ let r: {x: 1}
//│ r
//│   = { x: 1 }

r.x + 1
//│ Int
//│ res
//│     = 2


x => x + 1
//│ Int -> Int
//│ res
//│     = [Function: res]

{ y } => y
//│ forall 'a. {y: 'a} -> 'a
//│ res
//│     = [Function: res]

fun f({ y }) = y
//│ fun f: forall 'a. {y: 'a} -> 'a

fun f of { y } = y
//│ fun f: forall 'a. {y: 'a} -> 'a

f({y: 1})
//│ 1
//│ res
//│     = 1


fun f of x, y = x + y
//│ fun f: (Int, Int) -> Int

f of 1, 2
//│ Int
//│ res
//│     = 3


fun f of [x, y] = x + y
//│ fun f: ([Int, Int]) -> Int

f of [1, 2]
//│ Int
//│ res
//│     = 3


let f = (x, y) => x + y
//│ let f: (Int, Int) -> Int
//│ f
//│   = [Function: f5]

f(1, 2)
//│ Int
//│ res
//│     = 3

:e
f([1, 2])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.76: 	f([1, 2])
//│ ║        	^^^^^^^^^
//│ ╟── argument of type `[[1, 2]]` does not match type `[?a, ?b]`
//│ ║  l.76: 	f([1, 2])
//│ ║        	 ^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.65: 	let f = (x, y) => x + y
//│ ╙──      	         ^^^^
//│ Int | error
//│ res
//│     = '1,2undefined'



:pe
let f = ((x, y)) => x + y
//│ ╔══[ERROR] Unsupported pattern shape:
//│ ║  l.93: 	let f = ((x, y)) => x + y
//│ ╙──      	         ^^^^^^
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.93: 	let f = ((x, y)) => x + y
//│ ╙──      	                    ^
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.93: 	let f = ((x, y)) => x + y
//│ ╙──      	                        ^
//│ let f: error -> Int
//│ Code generation encountered an error:
//│   term App(Var(,), Tup(_: Var(x), _: Var(y))) is not a valid pattern

:e
f(1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.108: 	f(1, 2)
//│ ║         	^^^^^^^
//│ ╟── argument list of type `[1, 2]` does not match type `[error]`
//│ ║  l.108: 	f(1, 2)
//│ ╙──       	 ^^^^^^
//│ Int | error
//│ res
//│ Runtime error:
//│   ReferenceError: f6 is not defined

:pe
f((1, 2))
//│ Int
//│ res
//│ Runtime error:
//│   ReferenceError: f6 is not defined

f([1, 2])
//│ Int
//│ res
//│ Runtime error:
//│   ReferenceError: f6 is not defined

:e
f[1, 2]
//│ ╔══[ERROR] Type application syntax is not yet supported
//│ ║  l.134: 	f[1, 2]
//│ ╙──       	^^^^^^^
//│ error -> Int
//│ res
//│ Runtime error:
//│   ReferenceError: f6 is not defined


:pe
let f = (((x, y))) => x + y
//│ ╔══[ERROR] Unsupported pattern shape:
//│ ║  l.145: 	let f = (((x, y))) => x + y
//│ ╙──       	          ^^^^^^
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.145: 	let f = (((x, y))) => x + y
//│ ╙──       	                      ^
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.145: 	let f = (((x, y))) => x + y
//│ ╙──       	                          ^
//│ let f: error -> Int
//│ Code generation encountered an error:
//│   term App(Var(,), Tup(_: Var(x), _: Var(y))) is not a valid pattern


// * TODO maybe parse as type lambda?
let f = [x, y] => x + y
//│ let f: ([Int, Int]) -> Int
//│ f
//│   = [Function: f9]

:e
f(1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.167: 	f(1, 2)
//│ ║         	^^^^^^^
//│ ╟── argument list of type `[1, 2]` does not match type `[[?a, ?b]]`
//│ ║  l.167: 	f(1, 2)
//│ ╙──       	 ^^^^^^
//│ Int | error
//│ res
//│ Runtime error:
//│   TypeError: number 1 is not iterable (cannot read property Symbol(Symbol.iterator))

f([1, 2])
//│ Int
//│ res
//│     = 3


let f = ([x, y]) => x + y
//│ let f: ([Int, Int]) -> Int
//│ f
//│   = [Function: f11]

f([1, 2])
//│ Int
//│ res
//│     = 3

:e
f(1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.196: 	f(1, 2)
//│ ║         	^^^^^^^
//│ ╟── argument list of type `[1, 2]` does not match type `[[?a, ?b]]`
//│ ║  l.196: 	f(1, 2)
//│ ╙──       	 ^^^^^^
//│ Int | error
//│ res
//│ Runtime error:
//│   TypeError: number 1 is not iterable (cannot read property Symbol(Symbol.iterator))


let f = [[[x, y]]] => x + y
//│ let f: ([[[Int, Int]]]) -> Int
//│ f
//│   = [Function: f13]

:e
f([[1, 2]])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.215: 	f([[1, 2]])
//│ ║         	^^^^^^^^^^^
//│ ╟── tuple literal of type `[1, 2]` does not match type `[[?a, ?b]]`
//│ ║  l.215: 	f([[1, 2]])
//│ ╙──       	   ^^^^^^
//│ Int | error
//│ res
//│ Runtime error:
//│   TypeError: number 1 is not iterable (cannot read property Symbol(Symbol.iterator))

