:NewDefs
:NoJS


class Add0<E>(lhs: E)
//│ class Add0[E](lhs: E)

fun eval(e) = if e is Add0(l) then eval(l)
//│ fun eval: forall 'a. 'a -> nothing
//│   where
//│     'a <: Add0['a]


class Add<E>(lhs: E, rhs: E)
class Lit(val value: Int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(value: Int)

let add11 = Add(Lit(1), Lit(2))
//│ let add11: Add['E]
//│   where
//│     'E :> Lit

fun eval(e) =
  if e is
    Lit(n) then n: Int
    Add(l, r) then eval(l) + eval(r)
//│ fun eval: forall 'a. 'a -> Int
//│   where
//│     'a <: Add['a] | Lit


mixin EvalLit {
  fun eval(e) =
    if e is
      Lit(n) then n
}
//│ mixin EvalLit() {
//│   fun eval: Lit -> Int
//│ }

mixin EvalLit {
  fun eval(e: Lit) = e.value
}
//│ mixin EvalLit() {
//│   fun eval: (e: Lit) -> Int
//│ }


mixin EvalAdd {
  fun eval(e) =
    if e is
      Add(l, r) then this.eval(l)
}
//│ mixin EvalAdd() {
//│   this: {eval: 'a -> 'b}
//│   fun eval: Add['a] -> 'b
//│ }

module TestLang extends EvalAdd
//│ module TestLang {
//│   fun eval: Add['a] -> nothing
//│ }
//│ where
//│   'a <: Add['a]

TestLang.eval
//│ Add['a] -> nothing
//│   where
//│     'a <: Add['a]



mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: Int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: 'a -> Int}
//│   fun eval: (Add['a] | Lit) -> Int
//│ }


module TestLang extends EvalBase
//│ module TestLang {
//│   fun eval: (Add['a] | Lit) -> Int
//│ }
//│ where
//│   'a <: Add['a] | Lit

TestLang.eval
//│ (Add['a] | Lit) -> Int
//│   where
//│     'a <: Add['a] | Lit



add11
//│ Add['E]
//│   where
//│     'E :> Lit

TestLang.eval(add11)
//│ Int

add11
//│ Add['E]
//│   where
//│     'E :> Lit
//│        <: 'a
//│     'a <: Add['a] | Lit

TestLang.eval(add11)
//│ Int

add11
//│ Add['E]
//│   where
//│     'E :> Lit
//│        <: 'a & 'b
//│     'b <: Add['b] | Lit
//│     'a <: Add['a] | Lit



class Neg<A>(expr: A)
//│ class Neg[A](expr: A)

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ let add2negadd11: Add['E]
//│   where
//│     'E :> Lit | Neg['A]
//│     'A :> Add['E0]
//│     'E0 :> Lit
//│         <: 'a & 'b
//│     'b <: Add['b] | Lit
//│     'a <: Add['a] | Lit


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: 'c -> Int}
//│   fun eval: (Neg['c] | Object & 'a & ~#Neg) -> (Int | 'b)
//│ }


module TestLang extends EvalBase, EvalNeg
//│ module TestLang {
//│   fun eval: (Neg['a] | Object & 'b & ~#Neg) -> Int
//│ }
//│ where
//│   'a <: Neg['a] | Object & 'b & ~#Neg
//│   'b <: Add['a] | Lit

TestLang.eval
//│ (Neg['a] | Object & 'b & ~#Neg) -> Int
//│   where
//│     'a <: Neg['a] | Object & 'b & ~#Neg
//│     'b <: Add['a] | Lit


TestLang.eval(add11)
//│ Int

TestLang.eval(Neg(add11))
//│ Int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ Int

TestLang.eval(Neg(Neg(add11)))
//│ Int


TestLang.eval(add2negadd11)
//│ Int

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ Int


