:NewDefs


module M {
  let x = 0
}
//│ module M {
//│   let x: 0
//│ }

:e
M.x
//│ ╔══[ERROR] Let binding 'x' cannot tbe accessed as a field
//│ ║  l.12: 	M.x
//│ ║        	 ^^
//│ ╟── Use a `val` declaration to make it a field
//│ ║  l.5: 	  let x = 0
//│ ╙──     	      ^^^^^
//│ 0 | error
//│ res
//│     = undefined


abstract class Base { val x: Int }
//│ abstract class Base {
//│   val x: Int
//│ }

:e
class Der extends Base { let x = true }
//│ ╔══[ERROR] Cannot implement value member 'x' with a let binding
//│ ║  l.30: 	class Der extends Base { let x = true }
//│ ║        	                             ^^^^^^^^
//│ ╟── Originally declared here:
//│ ║  l.24: 	abstract class Base { val x: Int }
//│ ╙──      	                      ^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in definition of let binding x:
//│ ║  l.30: 	class Der extends Base { let x = true }
//│ ║        	                             ^^^^^^^^
//│ ╟── reference of type `true` is not an instance of `Int`
//│ ║  l.30: 	class Der extends Base { let x = true }
//│ ║        	                                 ^^^^
//│ ╟── but it flows into definition of let binding x with expected type `Int`
//│ ║  l.30: 	class Der extends Base { let x = true }
//│ ║        	                             ^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.24: 	abstract class Base { val x: Int }
//│ ║        	                             ^^^
//│ ╟── from signature of member `x`:
//│ ║  l.24: 	abstract class Base { val x: Int }
//│ ╙──      	                          ^^^^^^
//│ ╔══[ERROR] Member `x` is declared (or its declaration is inherited) but is not implemented in `Der`
//│ ║  l.30: 	class Der extends Base { let x = true }
//│ ║        	      ^^^
//│ ╟── Declared here:
//│ ║  l.24: 	abstract class Base { val x: Int }
//│ ║        	                      ^^^^^^^^^^
//│ ╟── Note: value member `x` is private and cannot be used as a valid implementation
//│ ║  l.30: 	class Der extends Base { let x = true }
//│ ╙──      	                             ^^^^^^^^
//│ class Der extends Base {
//│   constructor()
//│   let x: true
//│ }

:e
module Der extends Base { let x = 0 }
//│ ╔══[ERROR] Cannot implement value member 'x' with a let binding
//│ ║  l.67: 	module Der extends Base { let x = 0 }
//│ ║        	                              ^^^^^
//│ ╟── Originally declared here:
//│ ║  l.24: 	abstract class Base { val x: Int }
//│ ╙──      	                      ^^^^^^^^^^
//│ ╔══[ERROR] Member `x` is declared (or its declaration is inherited) but is not implemented in `Der`
//│ ║  l.67: 	module Der extends Base { let x = 0 }
//│ ║        	       ^^^
//│ ╟── Declared here:
//│ ║  l.24: 	abstract class Base { val x: Int }
//│ ║        	                      ^^^^^^^^^^
//│ ╟── Note: value member `x` is private and cannot be used as a valid implementation
//│ ║  l.67: 	module Der extends Base { let x = 0 }
//│ ╙──      	                              ^^^^^
//│ module Der extends Base {
//│   let x: 0
//│ }

:e
Der.x
//│ ╔══[ERROR] Let binding 'x' cannot tbe accessed as a field
//│ ║  l.88: 	Der.x
//│ ║        	   ^^
//│ ╟── Use a `val` declaration to make it a field
//│ ║  l.67: 	module Der extends Base { let x = 0 }
//│ ╙──      	                              ^^^^^
//│ 0 | error
//│ res
//│     = undefined

(Der : Base).x
//│ Int
//│ res
//│     = undefined



module M {
  val x = 1
  fun foo = x
  // foo, ()
}
M.x
M.foo
//│ module M {
//│   fun foo: 1
//│   val x: 1
//│ }
//│ 1
//│ res
//│     = 1
//│ res
//│     = 1

// * TODO init checking
module M {
  val x = foo
  fun foo = x
  // foo, ()
}
M.x
M.foo
//│ module M {
//│   fun foo: nothing
//│   val x: nothing
//│ }
//│ nothing
//│ res
//│     = undefined
//│ res
//│     = undefined

module M {
  let x = foo
  fun foo = 1
  // foo, ()
}
M.foo
//│ module M {
//│   fun foo: 1
//│   let x: 1
//│ }
//│ 1
//│ res
//│     = 1

// * TODO init checking
module M {
  let x = foo
  fun foo = x
  // foo, ()
}
M.foo
//│ module M {
//│   fun foo: nothing
//│   let x: nothing
//│ }
//│ nothing
//│ res
//│     = undefined

:e
M.x
//│ ╔══[ERROR] Let binding 'x' cannot tbe accessed as a field
//│ ║  l.171: 	M.x
//│ ║         	 ^^
//│ ╟── Use a `val` declaration to make it a field
//│ ║  l.157: 	  let x = foo
//│ ╙──       	      ^^^^^^^
//│ error
//│ res
//│     = undefined

module M {
  let x = 1
  let y = foo
  fun foo = x
  fun bar = y
  // foo, ()
}
M.foo
M.bar
//│ module M {
//│   fun bar: 1
//│   fun foo: 1
//│   let x: 1
//│   let y: 1
//│ }
//│ 1
//│ res
//│     = 1
//│ res
//│     = 1

// * TODO init checking
module M {
  let y = foo
  let x = 1
  fun foo = x
  fun bar = y
  // foo, ()
}
M.foo
M.bar
//│ module M {
//│   fun bar: 1
//│   fun foo: 1
//│   let x: 1
//│   let y: 1
//│ }
//│ 1
//│ res
//│     = 1
//│ res
//│     = undefined


// * TODO init checking
module M {
  let x = 1
  let y = foo
  val foo = x
  val bar = y
  // foo, ()
}
M.foo
M.bar
//│ module M {
//│   val bar: 1
//│   val foo: 1
//│   let x: 1
//│   let y: 1
//│ }
//│ 1
//│ res
//│     = 1
//│ res
//│     = undefined



abstract class Foo {
  let size: Int = 1
  fun get = size + 1
}
//│ abstract class Foo {
//│   fun get: Int
//│   let size: Int
//│ }

:e
abstract class Foo {
  let size: Int
  fun get = size + 1
}
//│ ╔══[ERROR] `let` bindings must have a right-hand side
//│ ║  l.261: 	  let size: Int
//│ ╙──       	  ^^^^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: size
//│ ║  l.262: 	  fun get = size + 1
//│ ╙──       	            ^^^^
//│ abstract class Foo {
//│   fun get: Int
//│ }
//│ Code generation encountered an error:
//│   unresolved symbol size

:e
abstract class Foo {
  let size: Int = 1
  fun get = this.size + 1
}
//│ ╔══[ERROR] Type `#Foo` does not contain member `size`
//│ ║  l.279: 	  fun get = this.size + 1
//│ ╙──       	                ^^^^^
//│ abstract class Foo {
//│   fun get: Int
//│   let size: Int
//│ }

module F extends Foo
//│ module F extends Foo {
//│   fun get: Int
//│   let size: Int
//│ }

:e
F.size
//│ ╔══[ERROR] Let binding 'size' cannot tbe accessed as a field
//│ ║  l.296: 	F.size
//│ ║         	 ^^^^^
//│ ╟── Use a `val` declaration to make it a field
//│ ║  l.278: 	  let size: Int = 1
//│ ╙──       	      ^^^^^^^^^^^^^
//│ Int | error
//│ res
//│     = undefined

module F extends Foo { val size = 123 }
//│ module F extends Foo {
//│   fun get: Int
//│   val size: 123
//│ }

F.get
//│ Int
//│ res
//│     = 124

F.size
//│ 123
//│ res
//│     = 123

module F extends Foo { fun size = 123 }
//│ module F extends Foo {
//│   fun get: Int
//│   fun size: 123
//│ }

F.get
//│ Int
//│ res
//│     = 124

F.size
//│ 123
//│ res
//│     = 123

module F extends Foo { let size = 123 }
//│ module F extends Foo {
//│   fun get: Int
//│   let size: 123
//│ }

// * Garbage result since `Foo` is ill-typed
F.get
//│ Int
//│ res
//│     = NaN

:e
F.size
//│ ╔══[ERROR] Let binding 'size' cannot tbe accessed as a field
//│ ║  l.352: 	F.size
//│ ║         	 ^^^^^
//│ ╟── Use a `val` declaration to make it a field
//│ ║  l.339: 	module F extends Foo { let size = 123 }
//│ ╙──       	                           ^^^^^^^^^^
//│ 123 | error
//│ res
//│     = undefined


class Foo(x: Int) { fun get0 = x }
//│ class Foo(x: Int) {
//│   fun get0: Int
//│ }

:e
class Bar extends Foo(123) { fun get2 = this.x }
//│ ╔══[ERROR] Indirectly-recursive member should have a type signature
//│ ║  l.370: 	class Bar extends Foo(123) { fun get2 = this.x }
//│ ╙──       	                                            ^^
//│ class Bar extends Foo {
//│   constructor()
//│   fun get0: Int
//│   fun get2: error
//│ }

:e
module Bar extends Foo(123) { val x: Int; fun get2 = this.x }
//│ ╔══[ERROR] Member `x` is declared (or its declaration is inherited) but is not implemented in `Bar`
//│ ║  l.381: 	module Bar extends Foo(123) { val x: Int; fun get2 = this.x }
//│ ║         	       ^^^
//│ ╟── Declared here:
//│ ║  l.381: 	module Bar extends Foo(123) { val x: Int; fun get2 = this.x }
//│ ║         	                              ^^^^^^^^^^
//│ ╟── Note: value member `x` is private and cannot be used as a valid implementation
//│ ║  l.364: 	class Foo(x: Int) { fun get0 = x }
//│ ╙──       	          ^
//│ module Bar extends Foo {
//│   fun get0: Int
//│   fun get2: Int
//│   val x: Int
//│ }

Bar.x
//│ Int
//│ res
//│     = undefined

Bar.get0
//│ Int
//│ res
//│     = 123

Bar.get2
//│ Int
//│ res
//│     = undefined



