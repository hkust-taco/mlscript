:NewDefs


module M {
  type T = Int -> Int
  class C(n: Int)
  fun mkC = C
}
//│ module M {
//│   class C(n: Int)
//│   type T = Int -> Int
//│   fun mkC: (n: Int) -> C
//│ }

let x: M.T = id
//│ let x: Int -> Int
//│ x
//│   = [Function: id]

fun foo(x: M.C) = x
//│ fun foo: (x: C) -> C


foo(M.mkC(42))
//│ C
//│ res
//│     = C {}


:e
42 : M.mkC
//│ ╔══[ERROR] Type mismatch in type selection:
//│ ║  l.31: 	42 : M.mkC
//│ ║        	      ^^^^
//│ ╟── member of type `(n: Int) -> C` is not mutable
//│ ║  l.7: 	  fun mkC = C
//│ ║       	      ^^^^^^^
//│ ╟── but it flows into type selection with expected type `?mkC`
//│ ║  l.31: 	42 : M.mkC
//│ ╙──      	      ^^^^
//│ (n: Int) -> C
//│ res
//│     = 42


