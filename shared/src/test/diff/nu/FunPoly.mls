:NewDefs



fun id(x) = x
//│ fun id: forall 'a. 'a -> 'a

[id(1), id(true)]
//│ (1, true,)
//│ res
//│     = [ 1, true ]

not(id(true))
//│ Bool
//│ res
//│     = false



fun id(x) = x
[id(1), id(true)]
//│ fun id: forall 'a. 'a -> 'a
//│ (1, true,)
//│ res
//│     = [Function: id1]



// * Currently, we type entire typing units monomorphically;
// * later we should try to separate mutually-recursive components and generalize them independently.
fun test = [id(1), id(true)]
fun id(x) = x
//│ fun test: forall 'a 'b. (1 | true | 'b, 1 | true | 'a,)
//│ fun id: forall 'a 'b. ('a & 'b) -> (1 | true | 'b)

[id(1), id(true)]
//│ (1 | true, 1 | true,)
//│ res
//│     = [ 1, true ]

:e
not(id(true))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.42: 	not(id(true))
//│ ║        	^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `Bool`
//│ ║  l.31: 	fun test = [id(1), id(true)]
//│ ║        	               ^
//│ ╟── but it flows into application with expected type `Bool`
//│ ║  l.42: 	not(id(true))
//│ ╙──      	    ^^^^^^^^
//│ error | false | true
//│ res
//│     = false



fun test = [Helper.id(1), Helper.id(true)]
module Helper {
  fun id(x) = x
}
//│ fun test: (1, true,)
//│ module Helper {
//│   fun id: 'a -> 'a
//│ }



