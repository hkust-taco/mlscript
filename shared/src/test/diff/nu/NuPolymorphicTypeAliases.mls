:NewDefs


type F[A] = forall 'a: (A, 'a) -> [A, 'a]
//│ type F[A] = forall 'a. (A, 'a) -> [A, 'a]


fun f[B] =
  ((x: B, y) => [x, y]) : F[B]
//│ fun f: forall 'B. F['B]

fun f = forall 'B:
  ((x: 'B, y) => [x, y]) : F['B]
//│ fun f: forall 'B. F['B]


module A {
  type F[A] = forall 'a: (A, 'a) -> [A, 'a]
}
//│ module A {
//│   type F[A] = forall 'a. (A, 'a) -> [A, 'a]
//│ }

:pe // TODO
fun f[B] =
  ((x: B, y) => [x, y]) : A.F[B]
//│ ╔══[PARSE ERROR] Not a recognized type
//│ ║  l.26: 	  ((x: B, y) => [x, y]) : A.F[B]
//│ ╙──      	                          ^^^^^^
//│ fun f: anything


class Test[B] {
  fun f(f: F[B]): F[B] = (x, y) => f(x, y)
}
//│ class Test[B] {
//│   constructor()
//│   fun f: (f: F[B]) -> F[B]
//│ }

class Test[B](f: F[B]) {
  fun g: F[B] = (x, y) => f(x, y)
}
//│ class Test[B](f: F[B]) {
//│   fun g: F[B]
//│ }

class Test[B] {
  discard of ((x: B, y) => [x, y]) : F[B]
}
//│ class Test[B] {
//│   constructor()
//│ }


type F[A] = (A, 'a) -> [A, 'a]
//│ type F[A] = (A, 'a) -> [A, 'a]


fun f[B] =
  ((x: B, y) => [x, y]) : F[B]
//│ fun f: forall 'B. F['B]

fun f = forall 'B:
  ((x: 'B, y) => [x, y]) : F['B]
//│ fun f: forall 'B. F['B]


class Test[B] {
  fun f(f: F[B]): F[B] = (x, y) => f(x, y)
}
//│ class Test[B] {
//│   constructor()
//│   fun f: (f: F[B]) -> F[B]
//│ }



// * Note: NOT polymorphic!
type T = 'a -> 'a
//│ type T = 'a -> 'a

(id : T)(0)
//│ 0
//│ res
//│     = 0

(id : T)(true)
//│ 0 | true
//│ res
//│     = true


