:NewDefs



declare fun btoa: nothing
declare fun atob: nothing
//│ fun btoa: nothing
//│ fun atob: nothing

let str = btoa("hello")
atob(str)
//│ let str: nothing
//│ nothing
//│ str
//│     = 'aGVsbG8='
//│ res
//│     = 'hello'


declare module console {
  fun error: Str -> unit
}
//│ declare module console {
//│   fun error: Str -> unit
//│ }

console.error("hello")
//│ unit
//│ res
//│     = undefined
//│ // Output
//│ hello

:e
console.log("hello")
//│ ╔══[ERROR] Type `console` does not contain member `log`
//│ ║  l.35: 	console.log("hello")
//│ ╙──      	       ^^^^
//│ error
//│ res
//│     = undefined



declare module Foo {
  fun foo: Int
}
//│ declare module Foo {
//│   fun foo: Int
//│ }

:re
Foo.foo
//│ Int
//│ res
//│ Runtime error:
//│   ReferenceError: Foo is not defined


declare type A = Int
//│ type A = Int

42 : A
//│ A
//│ res
//│     = 42



declare class Sanitizer {
  fun sanitizeFor(element: Str, input: Str): Str
}
//│ declare class Sanitizer {
//│   fun sanitizeFor: (element: Str, input: Str,) -> Str
//│ }

:re
let s = Sanitizer()
//│ let s: Sanitizer
//│ s
//│ Runtime error:
//│   ReferenceError: Sanitizer is not defined



// * TODO allow Buffer2 to be named Buffer...
// :d
declare module Buffer {
  class Buffer2 {
    val length: Int
  }
  fun bar: Int
  fun from(a: Array[Int]): Buffer2 = from(a)
  // fun from1(a: Array[Int]): this.Buffer2 = from1(a) // FIXME
  // fun from2(a: Array[Int]): Buffer.Buffer2 = from2(a) // FIXME
}
//│ declare module Buffer {
//│   class Buffer2 {
//│     let length: Int
//│   }
//│   fun bar: Int
//│   fun from: (a: Array[Int],) -> Buffer2
//│ }

let b = Buffer.from([0, 1, 2])
//│ let b: Buffer2
//│ b
//│   = <Buffer 00 01 02>

b.length
//│ Int
//│ res
//│     = 3




:pe
declare 42
//│ ╔══[PARSE ERROR] Unexpected literal token after modifier
//│ ║  l.119: 	declare 42
//│ ╙──       	        ^^
//│ ╔══[PARSE ERROR] Unexpected literal token after modifier
//│ ║  l.119: 	declare 42
//│ ╙──       	        ^^
//│ 42
//│ res
//│     = 42


