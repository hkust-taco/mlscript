:NewDefs



fun foo(x: 'a | undefined) = if x is undefined then error else x
//│ fun foo: forall 'a. (x: Object & 'a & ~undefined | undefined) -> 'a


class Abstract[A] {
  // * Below, 'a in `foo` is basically `A & ~undefined`
  
  fun bar0(x: (A | undefined) & Object) =
    if x is undefined then error else x
  
  fun bar1(x: (A | undefined) & Object) =
    foo(x)
  
  fun bar2(x: (A | undefined) & Object) =
    x : Object & 'a & ~undefined | undefined
  
  fun baz(a: A & Object) = [bar0(a), bar1(a), bar2(a)]
}
//│ class Abstract[A] {
//│   constructor()
//│   fun bar0: (x: Object & A | undefined) -> (Object & A & ~undefined)
//│   fun bar1: (x: Object & A | undefined) -> (Object & A & ~undefined)
//│   fun bar2: (x: Object & A | undefined) -> (Object & A & ~undefined | undefined)
//│   fun baz: (a: Object & A) -> [Object & A & ~undefined, Object & A & ~undefined, Object & A & ~undefined | undefined]
//│ }


:e
class Abstract[A] {
  fun bar(x: A & ~undefined | undefined) =
    if x is undefined then error else x
}
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.35: 	    if x is undefined then error else x
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `A & ~undefined` is not an instance of type `Object`
//│ ║  l.34: 	  fun bar(x: A & ~undefined | undefined) =
//│ ║        	             ^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Object`
//│ ║  l.35: 	    if x is undefined then error else x
//│ ╙──      	       ^
//│ class Abstract[A] {
//│   constructor()
//│   fun bar: (x: undefined | A & ~undefined) -> (A & ~undefined)
//│ }


