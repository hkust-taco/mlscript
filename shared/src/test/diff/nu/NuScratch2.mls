:NewDefs


// :d
// :ds
fun (+:) pre(x: Int, xs) = [[x], xs]
fun (:+) post(xs, x: Int) = [xs, [x]]
fun (++) conc(xs, ys) = [xs, ys]
//│ fun (+:) pre: forall 'a. (x: Int, 'a) -> [[Int], 'a]
//│ fun (:+) post: forall 'b. ('b, x: Int) -> ['b, [Int]]
//│ fun (++) conc: forall 'c 'd. ('c, 'd) -> ['c, 'd]




type a = 0 | "0" | 2 | "2" | 10
//│ type a = "0" | "2" | 0 | 10 | 2

type a = "0" | 0 | 2 | "2" | 10
//│ type a = "0" | "2" | 0 | 10 | 2



type f = forall 'a: ('a      ) -> 'a where 'a : Int
//│ type f = forall 'a. (Int & 'a) -> 'a

type f = (forall 'a: ('a      ) -> 'a where 'a : Int)
//│ type f = forall 'a. (Int & 'a) -> 'a

type g = forall 'a: ('a & Int) -> 'a
//│ type g = forall 'a. (Int & 'a) -> 'a

(id : f) : g
//│ g
//│ res
//│     = [Function: id]


type f = (forall 'a: ('a      ) -> 'a where 'a : Int)
type g =  forall 'a: ('a & Int) -> 'a
//│ type f = forall 'a. (Int & 'a) -> 'a
//│ type g = forall 'a0. (Int & 'a0) -> 'a0

(id : f) : g
(id : g) : f
//│ f
//│ res
//│     = [Function: id]
//│ res
//│     = [Function: id]

x => (id : f)(x) : Int
//│ Int -> Int
//│ res
//│     = [Function: res]

