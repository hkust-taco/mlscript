:NewDefs



class Foo()
123
//│ class Foo()
//│ 123
//│ res
//│     = 123

Foo
//│ () -> Foo
//│ res
//│     = [Function (anonymous)] {
//│         class: [class Foo],
//│         unapply: [Function: unapply]
//│       }

// TODO
fun fooo(x) =
  class C(y, z)
  C(0, x)
//│ ╔══[ERROR] Class parameters currently need type annotations
//│ ║  l.22: 	  class C(y, z)
//│ ╙──      	          ^
//│ ╔══[ERROR] Class parameters currently need type annotations
//│ ║  l.22: 	  class C(y, z)
//│ ╙──      	             ^
//│ fun fooo: error -> C



fun foo = bar
fun bar = foo
//│ fun foo: nothing
//│ fun bar: nothing

:re
foo(bar)
//│ nothing
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


fun foo = {x: foo}
//│ fun foo: forall 'foo. 'foo
//│   where
//│     'foo :> {x: 'foo}


fun foo = {x: bar}
fun bar = {y: foo}
//│ fun foo: forall 'foo. 'foo
//│ fun bar: forall 'foo. {y: 'foo}
//│ where
//│   'foo :> {x: {y: 'foo}}

:re
foo
//│ forall 'foo. 'foo
//│   where
//│     'foo :> {x: {y: 'foo}}
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:ns
:re
foo
//│ forall 'foo. {x: {y: 'foo}}
//│   where
//│     'foo :> {x: {y: 'foo}}
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
foo.x
//│ {y: 'foo}
//│   where
//│     'foo :> {x: {y: 'foo}}
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
foo.x.y
//│ 'foo
//│   where
//│     'foo :> {x: {y: 'foo}}
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


fun foo(a) = {h: a, t: bar(a)}
fun bar(b) = foo(b)
//│ fun foo: forall 'a 'b. 'a -> 'b
//│ fun bar: forall 'a 'b. 'a -> 'b
//│ where
//│   'b :> {h: 'a, t: 'b}

:ns
foo
//│ forall 'a 'b 'c. 'a -> {h: 'a, t: 'c}
//│   where
//│     'c :> {h: 'a, t: 'c}
//│     'a <: 'b
//│     'b <: 'a
//│ res
//│     = [Function: foo3]


fun foo(a) = {h1: a, t1: bar(a)}
fun bar(b) = {h2: b, t2: foo(b)}
//│ fun foo: forall 'a 'b 'c. 'c -> {h1: 'c, t1: 'a}
//│ fun bar: forall 'b 'c. 'c -> {h2: 'c, t2: 'b}
//│ where
//│   'a :> {h2: 'c, t2: 'b}
//│   'b :> {h1: 'c, t1: 'a}



module Test0_1 {
  fun a = Test0_2.b
}
module Test0_2 {
  fun b = 123
}
//│ module Test0_1 {
//│   fun a: 123
//│ }
//│ module Test0_2 {
//│   fun b: 123
//│ }

Test0_1.a
//│ 123
//│ res
//│     = 123

class Test0_1 {
  fun a = Test0_2().b
}
class Test0_2() {
  fun b = 123
}
//│ class Test0_1 {
//│   constructor()
//│   fun a: 123
//│ }
//│ class Test0_2() {
//│   fun b: 123
//│ }


:e
module Test1_1 {
  fun a = Test1_2.b
}
module Test1_2 {
  fun b = Test1_1.a
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.164: 	  fun b = Test1_1.a
//│ ╙──       	                 ^^
//│ module Test1_1 {
//│   fun a: error
//│ }
//│ module Test1_2 {
//│   fun b: error
//│ }

:re
Test1_1.a
//│ error
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


:e
class Test1_1 {
  fun a = Test1_2().b
}
class Test1_2 {
  fun b = Test1_1().a
}
//│ ╔══[ERROR] Class Test1_2 cannot be instantiated as it exposes no such constructor
//│ ║  l.186: 	  fun a = Test1_2().b
//│ ╙──       	          ^^^^^^^
//│ ╔══[ERROR] Class Test1_1 cannot be instantiated as it exposes no such constructor
//│ ║  l.189: 	  fun b = Test1_1().a
//│ ╙──       	          ^^^^^^^
//│ class Test1_1 {
//│   constructor()
//│   fun a: error
//│ }
//│ class Test1_2 {
//│   constructor()
//│   fun b: error
//│ }

:e
class Test1_1() {
  fun a = Test1_2().b
}
class Test1_2() {
  fun b = Test1_1().a
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.211: 	  fun b = Test1_1().a
//│ ╙──       	                   ^^
//│ class Test1_1() {
//│   fun a: error
//│ }
//│ class Test1_2() {
//│   fun b: error
//│ }

:e
class Test1_1 {
  fun a = (new Test1_2).b
}
class Test1_2 {
  fun b = (new Test1_1).a
}
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.224: 	class Test1_1 {
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.225: 	  fun a = (new Test1_2).b
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.226: 	}
//│ ╙──       	^
//│ class Test1_1 {
//│   constructor()
//│   fun a: error
//│ }
//│ class Test1_2 {
//│   constructor()
//│   fun b: error
//│ }


:e
module Test2_1 {
  fun t2 = Test2_2
  fun a = Test2_2.b
  fun d = Test2_2.e
  fun n = 456
}
module Test2_2 {
  fun b = 123
  fun c = Test2_1.a
  fun e = Test2_1.n
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.256: 	  fun c = Test2_1.a
//│ ╙──       	                 ^^
//│ module Test2_1 {
//│   fun a: 123 | error
//│   fun d: error
//│   fun n: 456
//│   fun t2: Test2_2
//│ }
//│ module Test2_2 {
//│   fun b: 123
//│   fun c: error
//│   fun e: error
//│ }

Test2_1.t2.b
//│ 123
//│ res
//│     = 123

Test2_1.a
//│ 123 | error
//│ res
//│     = 123

Test2_1.d
//│ error
//│ res
//│     = 456

Test2_1.n
//│ 456
//│ res
//│     = 456

module Test2_1 {
  fun t2 = Test2_2
  fun a: Int
  fun a = Test2_2.b
  fun d = Test2_2.e
  fun n: Int
  fun n = 456
}
module Test2_2 {
  fun b = 123
  fun c = Test2_1.a
  fun e = Test2_1.n
}
//│ module Test2_1 {
//│   fun a: Int
//│   fun d: Int
//│   fun n: Int
//│   fun t2: Test2_2
//│ }
//│ module Test2_2 {
//│   fun b: 123
//│   fun c: Int
//│   fun e: Int
//│ }

Test2_1.t2.b
//│ 123
//│ res
//│     = 123

Test2_1.a
//│ Int
//│ res
//│     = 123

Test2_1.d
//│ Int
//│ res
//│     = 456

Test2_1.n
//│ Int
//│ res
//│     = 456


class Test2(val n: Int) {
  fun inc = Test3.inc(this)
}
module Test3 {
  fun inc(t: Test2) = Test2(t.n + 1)
}
//│ class Test2(n: Int) {
//│   fun inc: Test2
//│ }
//│ module Test3 {
//│   fun inc: (t: Test2) -> Test2
//│ }

