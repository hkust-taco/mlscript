:NewDefs



class Foo()
123
//│ class Foo()
//│ 123
//│ res
//│     = 123

Foo
//│ () -> Foo
//│ res
//│     = [Function (anonymous)] { class: [class Foo] }

// TODO
fun fooo(x) =
  class C(y, z)
  C(0, x)
//│ ╔══[ERROR] Class parameters currently need type annotations
//│ ║  l.19: 	  class C(y, z)
//│ ╙──      	          ^
//│ ╔══[ERROR] Class parameters currently need type annotations
//│ ║  l.19: 	  class C(y, z)
//│ ╙──      	             ^
//│ fun fooo: error -> C



:ge // FIXME; + re-enable JS in tests below
fun foo = bar
fun bar = foo
//│ fun foo: nothing
//│ fun bar: nothing
//│ Code generation encountered an error:
//│   unresolved symbol bar

:NoJS // TODO

foo(bar)
//│ nothing


fun foo = {x: foo}
//│ fun foo: forall 'foo. 'foo
//│   where
//│     'foo :> {x: 'foo}


fun foo = {x: bar}
fun bar = {y: foo}
//│ fun foo: forall 'foo. 'foo
//│ fun bar: forall 'foo. {y: 'foo}
//│ where
//│   'foo :> {x: {y: 'foo}}

foo
//│ forall 'foo. 'foo
//│   where
//│     'foo :> {x: {y: 'foo}}

:ns
foo
//│ forall 'foo. {x: {y: 'foo}}
//│   where
//│     'foo :> {x: {y: 'foo}}

foo.x
//│ 'x
//│   where
//│     'x :> {y: {x: 'x}}

foo.x.y
//│ 'foo
//│   where
//│     'foo :> {x: {y: 'foo}}


fun foo(a) = {h: a, t: bar(a)}
fun bar(b) = foo(b)
//│ fun foo: forall 'a 'b. 'a -> 'b
//│ fun bar: forall 'a 'b. 'a -> 'b
//│ where
//│   'b :> {h: 'a, t: 'b}

:ns
foo
//│ forall 'a 'b 'c. 'a -> {h: 'a, t: 'c}
//│   where
//│     'c :> {h: 'a, t: 'c}
//│     'a <: 'b
//│     'b <: 'a


fun foo(a) = {h1: a, t1: bar(a)}
fun bar(b) = {h2: b, t2: foo(b)}
//│ fun foo: forall 'a 'b 'c. 'a -> 'b
//│ fun bar: forall 'a 'c. 'a -> 'c
//│ where
//│   'b :> {h1: 'a, t1: 'c}
//│   'c :> {h2: 'a, t2: 'b}



module Test0_1 {
  fun a = Test0_2.b
}
module Test0_2 {
  fun b = 123
}
//│ module Test0_1 {
//│   fun a: 123
//│ }
//│ module Test0_2 {
//│   fun b: 123
//│ }

Test0_1.a
//│ 123

class Test0_1 {
  fun a = Test0_2().b
}
class Test0_2() {
  fun b = 123
}
//│ class Test0_1 {
//│   fun a: 123
//│ }
//│ class Test0_2() {
//│   fun b: 123
//│ }


:e
module Test1_1 {
  fun a = Test1_2.b
}
module Test1_2 {
  fun b = Test1_1.a
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.141: 	  fun b = Test1_1.a
//│ ╙──       	                 ^^
//│ module Test1_1 {
//│   fun a: error
//│ }
//│ module Test1_2 {
//│   fun b: error
//│ }

Test1_1.a
//│ error


:e
class Test1_1 {
  fun a = Test1_2().b
}
class Test1_2 {
  fun b = Test1_1().a
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.162: 	  fun b = Test1_1().a
//│ ╙──       	                   ^^
//│ class Test1_1 {
//│   fun a: error
//│ }
//│ class Test1_2 {
//│   fun b: error
//│ }


:e
module Test2_1 {
  fun t2 = Test2_2
  fun a = Test2_2.b
  fun d = Test2_2.e
  fun n = 456
}
module Test2_2 {
  fun b = 123
  fun c = Test2_1.a
  fun e = Test2_1.n
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.184: 	  fun c = Test2_1.a
//│ ╙──       	                 ^^
//│ module Test2_1 {
//│   fun a: 123 | error
//│   fun d: error
//│   fun n: 456
//│   fun t2: Test2_2
//│ }
//│ module Test2_2 {
//│   fun b: 123
//│   fun c: error
//│   fun e: error
//│ }

Test2_1.t2.b
//│ 123

Test2_1.a
//│ 123 | error

Test2_1.d
//│ error

Test2_1.n
//│ 456

module Test2_1 {
  fun t2 = Test2_2
  fun a: int
  fun a = Test2_2.b
  fun d = Test2_2.e
  fun n: int
  fun n = 456
}
module Test2_2 {
  fun b = 123
  fun c = Test2_1.a
  fun e = Test2_1.n
}
//│ ╔══[ERROR] Type mismatch in definition of method a:
//│ ║  l.217: 	  fun a = Test2_2.b
//│ ║         	      ^^^^^^^^^^^^^
//│ ╟── integer literal of type `123` is not an instance of type `int`
//│ ║  l.223: 	  fun b = 123
//│ ║         	          ^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.217: 	  fun a = Test2_2.b
//│ ║         	          ^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.216: 	  fun a: int
//│ ║         	         ^^^
//│ ╟── from signature of member `a`:
//│ ║  l.216: 	  fun a: int
//│ ╙──       	      ^^^^^^
//│ ╔══[ERROR] Type mismatch in definition of method n:
//│ ║  l.220: 	  fun n = 456
//│ ║         	      ^^^^^^^
//│ ╟── integer literal of type `456` is not an instance of type `int`
//│ ║  l.220: 	  fun n = 456
//│ ║         	          ^^^
//│ ╟── but it flows into definition of method n with expected type `int`
//│ ║  l.220: 	  fun n = 456
//│ ║         	      ^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.219: 	  fun n: int
//│ ║         	         ^^^
//│ ╟── from signature of member `n`:
//│ ║  l.219: 	  fun n: int
//│ ╙──       	      ^^^^^^
//│ module Test2_1 {
//│   fun a: int
//│   fun d: int
//│   fun n: int
//│   fun t2: Test2_2
//│ }
//│ module Test2_2 {
//│   fun b: 123
//│   fun c: int
//│   fun e: int
//│ }

Test2_1.t2.b
//│ 123

Test2_1.a
//│ int

Test2_1.d
//│ int

Test2_1.n
//│ int


class Test2(n: int) {
  fun inc = Test3.inc(this)
}
module Test3 {
  fun inc(t: Test2) = Test2(t.n + 1)
}
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.286: 	  fun inc(t: Test2) = Test2(t.n + 1)
//│ ║         	                            ^^^^^
//│ ╟── type `int` is not an instance of type `Int`
//│ ║  l.282: 	class Test2(n: int) {
//│ ║         	               ^^^
//│ ╟── but it flows into field selection with expected type `Int`
//│ ║  l.286: 	  fun inc(t: Test2) = Test2(t.n + 1)
//│ ╙──       	                            ^^^
//│ class Test2(n: int) {
//│   fun inc: Test2 | error
//│ }
//│ module Test3 {
//│   fun inc: (t: Test2,) -> (Test2 | error)
//│ }

