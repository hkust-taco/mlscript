:NewDefs



// * Standard definitions:


declare fun String: anything -> Str
//│ fun String: anything -> Str

fun (++) stringConcat(a, b) = concat(a)(b)
//│ fun (++) stringConcat: (Str, Str) -> Str

fun (|>) pipe(x, f) = f(x)
fun (<|) pepi(f, x) = f(x)
//│ fun (|>) pipe: forall 'a 'b. ('a, 'a -> 'b) -> 'b
//│ fun (<|) pepi: forall 'c 'd. ('c -> 'd, 'c) -> 'd


// * Hack to throw exceptions
:e
declare class throw(arg: anything): nothing
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.22: 	declare class throw(arg: anything): nothing
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `#Throw & {arg: anything}` does not match type `nothing`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.22: 	declare class throw(arg: anything): nothing
//│ ╙──      	                                    ^^^^^^^
//│ declare class throw(arg: anything): nothing

fun raise(err) =
  throw(err)
  error
//│ fun raise: anything -> nothing

:re
raise(1); 0
//│ 0
//│ res
//│ Runtime error:
//│   1
//│ res
//│     = 0

fun test = raise(1); 0
//│ fun test: nothing
//│ 0
//│ res
//│     = 0

:re
test
//│ nothing
//│ res
//│ Runtime error:
//│   1

fun test = raise(1), 0
//│ fun test: 0

:re
test
//│ 0
//│ res
//│ Runtime error:
//│   1

fun test =
  raise(1)
  error
//│ fun test: nothing

:re
test
//│ nothing
//│ res
//│ Runtime error:
//│   1


abstract class Option[out A]: Some[A] | None
class Some[out A](val value: A) extends Option[A]
module None extends Option[nothing]
//│ abstract class Option[A]: None | Some[A]
//│ class Some[A](value: A) extends Option
//│ module None extends Option

abstract class List[out A]: (Cons[A] | Nil) { virtual val length: Int }
class Cons[out A](val head: A, val tail: List[A]) extends List[A] {
  val length: Int
  val length = tail.length + 1
  fun toString() = "Cons(" ++ String(head) ++ ", " ++ String(tail) ++ ")"
}
module Nil extends List[nothing] {
  val length = 0
  fun toString() = "Nil"
}
//│ abstract class List[A]: Cons[A] | Nil {
//│   val length: Int
//│ }
//│ class Cons[A](head: A, tail: List[A]) extends List {
//│   val length: Int
//│   fun toString: () -> Str
//│ }
//│ module Nil extends List {
//│   val length: 0
//│   fun toString: () -> "Nil"
//│ }

fun (::) cons(x, xs) = Cons(x, xs)
fun (:::) concatList(xs, ys) = if xs is
  Nil then ys
  Cons(x, xs) then x :: xs ::: ys
//│ fun (::) cons: forall 'A. ('A, List['A]) -> Cons['A]
//│ fun (:::) concatList: forall 'A0 'A1 'a. (Cons['A0] | Nil, List['A1] & 'a) -> (Cons[??A & 'A0 | 'A1] | 'a)

module Lists { // TODO use name List when module overloading is supported:
  
  fun map(f) = case
    Nil then Nil
    Cons(x, xs) then f(x) :: map(f)(xs)
  
  fun zip(xs, ys) = if xs is
    Nil then Nil
    Cons(x, xs) then if ys is
      Nil then Nil
      Cons(y, ys) then
        [x, y] :: zip(xs, ys)
  
  fun assoc(e) = case
    Cons(kv, rest) then
      if kv.key === e then Some(kv.value)
      else assoc(e)(rest)
    Nil then None
  
}
//│ module Lists {
//│   fun assoc: forall 'a 'value. 'a -> (Cons[{key: Eql['a], value: 'value} | ~??A] | Nil) -> (None | Some['value])
//│   fun map: forall 'A 'A0. ((??A0 & 'A) -> 'A0) -> (Cons['A] | Nil) -> (Cons['A0] | Nil)
//│   fun zip: forall 'A1 'A2. (Cons['A1] | Nil, Cons['A2] | Nil) -> (Cons[[??A1 & 'A1, ??A2 & 'A2]] | Nil)
//│ }

let xs = 1 :: 2 :: 3 :: Nil
//│ let xs: Cons[1 | 2 | 3]
//│ xs
//│    = Cons {}

String of xs ::: 4 :: 5 :: Nil
//│ Str
//│ res
//│     = 'Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, Nil)))))'


let ls = {key: "a", value: 0} :: Nil
//│ let ls: Cons[{key: "a", value: 0}]
//│ ls
//│    = Cons {}

ls |> Lists.assoc("a")
//│ None | Some[0]
//│ res
//│     = Some {}



// * Our little language:


:e // * We don't yet support upper bounds on type parameters, so we can't provide the needed `out Sub <: Term`
abstract class Term: Var | App | Lam | Sel | Rcd[Term] | Lit
class Var(val name: Str) extends Term
class App(val lhs: Term, val args: List[Term]) extends Term
class Lam(val params: List[Str], val body: Term) extends Term
class Rcd[out Sub](val fields: List[{key: Str, value: Sub}]) extends Term
class Sel(val prefix: Term, val fieldName: Str) extends Term
abstract class Lit[out A](val value: A): IntLit | StrLit extends Term
class IntLit(v: Int) extends Lit[Int](v)
class StrLit(v: Str) extends Lit[Str](v)
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.175: 	class Rcd[out Sub](val fields: List[{key: Str, value: Sub}]) extends Term
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Sub` is not an instance of type `Term`
//│ ║  l.175: 	class Rcd[out Sub](val fields: List[{key: Str, value: Sub}]) extends Term
//│ ║         	              ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.171: 	abstract class Term: Var | App | Lam | Sel | Rcd[Term] | Lit
//│ ╙──       	                                                 ^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.175: 	class Rcd[out Sub](val fields: List[{key: Str, value: Sub}]) extends Term
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Sub` does not match type `App | Lam | #Lit | Rcd[Term] | Sel | Var`
//│ ║  l.175: 	class Rcd[out Sub](val fields: List[{key: Str, value: Sub}]) extends Term
//│ ║         	              ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.171: 	abstract class Term: Var | App | Lam | Sel | Rcd[Term] | Lit
//│ ║         	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.171: 	abstract class Term: Var | App | Lam | Sel | Rcd[Term] | Lit
//│ ╙──       	                                                 ^^^^
//│ ╔══[ERROR] Type `Sub` does not contain member `Rcd#Sub`
//│ ║  l.175: 	class Rcd[out Sub](val fields: List[{key: Str, value: Sub}]) extends Term
//│ ╙──       	              ^^^
//│ abstract class Term: App | Lam | Lit[anything] | Rcd[Term] | Sel | Var
//│ class Var(name: Str) extends Term
//│ class App(lhs: Term, args: List[Term]) extends Term
//│ class Lam(params: List[Str], body: Term) extends Term
//│ class Rcd[Sub](fields: List[{key: Str, value: Sub}]) extends Term
//│ class Sel(prefix: Term, fieldName: Str) extends Term
//│ abstract class Lit[A](value: A): IntLit | StrLit extends Term
//│ class IntLit(v: Int) extends Lit, Term
//│ class StrLit(v: Str) extends Lit, Term

// * Workaround/alternative:
type Term = Var | App | Lam | Sel | Rcd[Term] | Lit
class Var(val name: Str)
class App(val lhs: Term, val args: List[Term])
class Lam(val params: List[Str], val body: Term)
class Rcd[out Sub](val fields: List[{key: Str, value: Sub}])
class Sel(val prefix: Term, val fieldName: Str)
abstract class Lit[out A](val value: A): IntLit | StrLit
class IntLit(v: Int) extends Lit[Int](v)
class StrLit(v: Str) extends Lit[Str](v)
//│ type Term = App | Lam | Lit[anything] | Rcd[Term] | Sel | Var
//│ class Var(name: Str)
//│ class App(lhs: Term, args: List[Term])
//│ class Lam(params: List[Str], body: Term)
//│ class Rcd[Sub](fields: List[{key: Str, value: Sub}])
//│ class Sel(prefix: Term, fieldName: Str)
//│ abstract class Lit[A](value: A): IntLit | StrLit
//│ class IntLit(v: Int) extends Lit
//│ class StrLit(v: Str) extends Lit

type Value = Lam | Lit | Rcd[Value]
//│ type Value = Lam | Lit[anything] | Rcd[Value]


fun err(msg) =
  throw(concat("Evaluation error: " ++ msg))
  error
//│ fun err: Str -> nothing

fun eval(t, env) = if t is
  Var(nme) then if env |> Lists.assoc(nme) is Some(v)
    then v
    else err("variable not found: " ++ nme)
  Lit then t
  Lam then t
  App(f, args) then
    let fe = eval(f, env)
    if fe is Lam(ps, bod) then
      val argse = args |> Lists.map(a => eval(a, env))
      if ps.length === argse.length then () else err("wrong number of arguments")
      let envp = Lists.zip(ps, argse) |> Lists.map of ([key, value]) => {key, value}
      eval(bod, envp ::: env)
    else err(String(fe) ++ " cannot be applied")
  Sel(pre, nme) then
    let pree = eval(pre, env)
    if pree is Rcd(xs) and xs |> Lists.assoc(nme) is Some(v) then v
    else err(String(pree) ++ " does not have field " ++ nme)
  Rcd(fs) then
    Rcd of fs |> Lists.map of {key, value} => {key, value: eval(value, env)}
//│ fun eval: forall 'Sub 'value 'a 'Sub0. (App | Lam | Lit[anything] | Rcd['Sub] | Sel | Var, Cons[{key: Eql[Str], value: 'value} | ~??A] & {List#A <: {key: Eql[Str], value: 'value} | ~??A} & List[{key: Eql[Str], value: 'value} | ~??A] | Nil & {List#A <: {key: Eql[Str], value: 'value} | ~??A} & List[{key: Eql[Str], value: 'value} | ~??A]) -> 'a
//│   where
//│     'value :> ??A0 & 'a
//│            <: Lam | Object & ~#Lam & ~#Rcd | Rcd['Sub0] | ~??A1
//│     'a :> Lam | Lit[??A2] | Rcd[Lam | Lit[??A2] | 'a] | ??A1 & 'value | ??Sub & ??A3 & 'Sub0
//│     'Sub0 :> Lam | Lit[??A2] | 'a
//│           <: Lam | Object & ~#Lam & ~#Rcd | Rcd['Sub0] | ~(??Sub & ??A3)
//│     'Sub <: App | Lam | Lit[anything] | Rcd['Sub] | Sel | Var | ~??Sub0

eval : (Term, List[{key: Str, value: Value}]) -> Value
//│ (Term, List[{key: Str, value: Value}]) -> Value
//│ res
//│     = [Function: eval]

let rcd = Rcd({key: "a", value: IntLit(0)} :: Nil)
//│ let rcd: Rcd[IntLit]
//│ rcd
//│     = Rcd {}

eval of rcd, Nil
//│ Lam | Lit[??A] | 'a
//│   where
//│     'a :> Lam | Lit[??A] | Rcd[Lam | Lit[??A] | 'a] | ??A0 & ??A1 & (Lam | Lit[??A])
//│ res
//│     = Rcd {}

eval of Sel(rcd, "a"), Nil
//│ Lam | Lit[??A & ??A0] | 'a
//│   where
//│     'a :> Lam | Lit[??A & ??A0] | Rcd[Lam | Lit[??A & ??A0] | 'a] | ??A1 & ??A2 & (Lam | Lit[??A & ??A0])
//│ res
//│     = IntLit {}

eval of App(Lam("x" :: Nil, Sel(Var("x"), "a")), rcd :: Nil), Nil
//│ Lam | Lit[??A & ??A0] | 'a
//│   where
//│     'a :> Lam | Lit[??A & ??A0] | Rcd[Lam | Lit[??A & ??A0] | 'a] | ??A1 & ??A2 & (Lam | Lit[??A & ??A0])
//│ res
//│     = IntLit {}


