:NewDefs



class A()
class B()
//│ class A()
//│ class B()

let a: Object = A()
//│ let a: Object
//│ a
//│   = A {}


module M
//│ module M

M: Object
//│ Object
//│ res
//│     = M { class: [class M] }



fun foo(x) = if x is A then true
//│ fun foo: A -> true

fun foo(x) = if x is A then true else false
//│ fun foo: Object -> Bool


:e
fun foo(x: anything) = if x is A then true
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.34: 	fun foo(x: anything) = if x is A then true
//│ ║        	                          ^^^^^^^^^^^^^^^^
//│ ╟── type `anything` is not an instance of type `Object`
//│ ║  l.34: 	fun foo(x: anything) = if x is A then true
//│ ║        	           ^^^^^^^^
//│ ╟── but it flows into reference with expected type `Object`
//│ ║  l.34: 	fun foo(x: anything) = if x is A then true
//│ ╙──      	                          ^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.34: 	fun foo(x: anything) = if x is A then true
//│ ║        	                          ^^^^^^^^^^^^^^^^
//│ ╟── type `anything` is not an instance of type `A`
//│ ║  l.34: 	fun foo(x: anything) = if x is A then true
//│ ║        	           ^^^^^^^^
//│ ╟── but it flows into reference with expected type `A`
//│ ║  l.34: 	fun foo(x: anything) = if x is A then true
//│ ║        	                          ^
//│ ╟── Note: constraint arises from class pattern:
//│ ║  l.34: 	fun foo(x: anything) = if x is A then true
//│ ╙──      	                               ^
//│ fun foo: (x: anything,) -> true

:e
fun foo(x: anything) = if x is A then true else false
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.59: 	fun foo(x: anything) = if x is A then true else false
//│ ║        	                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` is not an instance of type `Object`
//│ ║  l.59: 	fun foo(x: anything) = if x is A then true else false
//│ ║        	           ^^^^^^^^
//│ ╟── but it flows into reference with expected type `Object`
//│ ║  l.59: 	fun foo(x: anything) = if x is A then true else false
//│ ╙──      	                          ^
//│ fun foo: (x: anything,) -> Bool


fun foo(x: Object) = if x is A then true else false
//│ fun foo: (x: Object,) -> Bool


// TODO make this a rigid type variable!
// :e
fun foo = forall 'a; (x: 'a) => if x is A then true else false
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.78: 	fun foo = forall 'a; (x: 'a) => if x is A then true else false
//│ ║        	                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── rigid type variable of type `'a` is not an instance of type `Object`
//│ ║  l.78: 	fun foo = forall 'a; (x: 'a) => if x is A then true else false
//│ ║        	                 ^^
//│ ╟── but it flows into reference with expected type `Object`
//│ ║  l.78: 	fun foo = forall 'a; (x: 'a) => if x is A then true else false
//│ ╙──      	                                   ^
//│ fun foo: (x: anything,) -> Bool



:ge
Object
//│ () -> Object
//│ Code generation encountered an error:
//│   unresolved symbol Object

:ge
Object()
//│ Object
//│ Code generation encountered an error:
//│   unresolved symbol Object



// TODO
class B() extends Object
//│ class B() extends Object
//│ Code generation encountered an error:
//│   unresolved parent Object.

// TODO
class C() extends A
//│ class C() extends A

let o: Object = C()
//│ let o: Object
//│ o
//│   = C {}

fun foo(x) = if x is
  A then true
  B then true
  else false
//│ fun foo: Object -> Bool

foo(0)
//│ Bool
//│ res
//│     = false

foo(o)
//│ Bool
//│ res
//│     = true


(0 : Int) : Object
//│ Object
//│ res
//│     = 0


