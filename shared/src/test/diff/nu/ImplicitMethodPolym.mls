:NewDefs


module M {
  fun id1(x) = x
}
//│ module M {
//│   fun id1: forall 'a. 'a -> 'a
//│ }

M.id1
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: id1]

M.id1(true)
//│ true
//│ res
//│     = true

M.id1(0)
//│ 0
//│ res
//│     = 0


module M {
  fun id1(x) = x
  let _ = id1(0)
}
//│ module M {
//│   let _: 0
//│   fun id1: forall 'a. 'a -> 'a
//│ }

M.id1
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: id1]

// :d
mixin Mx {
  fun id1(x) = x
}
//│ mixin Mx() {
//│   fun id1: 'a -> 'a
//│ }

// * Note: the order of freshening matters!
// * if TV freshened transitively from traversing the `this` refinement at a lower ctx level,
// * as in the case below, the result is different.
module M extends Mx {
  val r = this.id1(0)
}
//│ module M {
//│   fun id1: forall 'a. ('b & 'a) -> (0 | 'a)
//│   val r: 0 | 'b
//│ }

mixin Mx {
  fun id1(x) = this.id2(x)
}
//│ mixin Mx() {
//│   this: {id2: 'a -> 'b}
//│   fun id1: 'a -> 'b
//│ }

:e
module M extends Mx {
  this.id1(0)
}
//│ ╔══[ERROR] Type `#M & {id1: ?a -> ?b}` does not contain member `id2`
//│ ║  l.61: 	  fun id1(x) = this.id2(x)
//│ ╙──      	                   ^^^^
//│ module M {
//│   fun id1: anything -> error
//│ }
//│ Runtime error:
//│   TypeError: qualifier1.id2 is not a function

:e
module M extends Mx {
  fun id2(x) = [x, x]
  this.id1(0)
}
//│ ╔══[ERROR] Indirectly-recursive member should have a type signature
//│ ║  l.61: 	  fun id1(x) = this.id2(x)
//│ ╙──      	                   ^^^^
//│ module M {
//│   fun id1: anything -> error
//│   fun id2: forall 'a. 'a -> ['a, 'a]
//│ }

// * Notice that `id1` is no longer generalized!
module M extends Mx {
  fun id2: 'a => ['a, 'a]
  fun id2(x) = [x, x]
  let _ = this.id1(0)
}
//│ module M {
//│   let _: [0 | 'a, 0 | 'a]
//│   fun id1: 'a -> [0 | 'a, 0 | 'a]
//│   fun id2: forall 'a0. 'a0 -> ['a0, 'a0]
//│ }



:e // FIXME
class C {
  virtual fun id1(x) = x
  fun f = [this.id1(true), this.id1(0)]
  fun id2(x) = x
}
//│ ╔══[ERROR] Indirectly-recursive member should have a type signature
//│ ║  l.111: 	  fun f = [this.id1(true), this.id1(0)]
//│ ╙──       	               ^^^^
//│ ╔══[ERROR] Indirectly-recursive member should have a type signature
//│ ║  l.111: 	  fun f = [this.id1(true), this.id1(0)]
//│ ╙──       	                               ^^^^
//│ class C {
//│   constructor()
//│   fun f: [error, error]
//│   fun id1: forall 'a. 'a -> 'a
//│   fun id2: forall 'b. 'b -> 'b
//│ }

// TODO support
// :d
module M extends C {
  this.id2(true)
}
//│ ╔══[ERROR] Indirectly-recursive member should have a type signature
//│ ║  l.130: 	  this.id2(true)
//│ ╙──       	      ^^^^
//│ ╔══[ERROR] Cannot access `this` during object initialization
//│ ║  l.130: 	  this.id2(true)
//│ ╙──       	  ^^^^
//│ module M extends C {
//│   fun f: [error, error]
//│   fun id1: forall 'a. 'a -> 'a
//│   fun id2: forall 'b. 'b -> 'b
//│ }

// TODO support
module M extends C {
  fun g = (this.id2(true), this.id2(0))
}
//│ ╔══[ERROR] Indirectly-recursive member should have a type signature
//│ ║  l.146: 	  fun g = (this.id2(true), this.id2(0))
//│ ╙──       	               ^^^^
//│ ╔══[ERROR] Indirectly-recursive member should have a type signature
//│ ║  l.146: 	  fun g = (this.id2(true), this.id2(0))
//│ ╙──       	                               ^^^^
//│ module M extends C {
//│   fun f: [error, error]
//│   fun g: error
//│   fun id1: forall 'a. 'a -> 'a
//│   fun id2: forall 'b. 'b -> 'b
//│ }

M.id1
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: id1]

M.id2
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: id2]

M.f
//│ [error, error]
//│ res
//│     = [ true, 0 ]

M.g
//│ error
//│ res
//│     = 0


:e
module M extends C {
  fun id1 = succ
}
//│ ╔══[ERROR] Type mismatch in definition of method id1:
//│ ║  l.184: 	  fun id1 = succ
//│ ║         	      ^^^^^^^^^^
//│ ╙── variable of type `?a` is not an instance of type `Int`
//│ ╔══[ERROR] Type mismatch in definition of method id1:
//│ ║  l.184: 	  fun id1 = succ
//│ ║         	      ^^^^^^^^^^
//│ ╟── expression of type `Int` does not match type `?a`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.110: 	  virtual fun id1(x) = x
//│ ╙──       	                       ^
//│ module M extends C {
//│   fun f: [error, error]
//│   fun id1: Int -> Int
//│   fun id2: forall 'a. 'a -> 'a
//│ }

M.id1
//│ Int -> Int
//│ res
//│     = [Function: succ]


(M : C).id1(false)
//│ false
//│ res
//│     = 1


// FIXME? parsing/semantics of this, currently treated as a named tuple...
(M: C)
//│ ╔══[PARSE ERROR] Illegal position for field specification
//│ ║  l.216: 	(M: C)
//│ ╙──       	 ^^^^
//│ ╔══[ERROR] Construction of unparameterized class C should use the `new` keyword
//│ ║  l.216: 	(M: C)
//│ ╙──       	    ^
//│ () -> C
//│ res
//│     = [class C]



type Option[A] = Some[A] | None
class Some[out A](val value: A)
module None
//│ type Option[A] = Some[A] | None
//│ class Some[A](value: A)
//│ module None


// * TODO support semantics but reject at typing:
// *  polymophism should be blocked by mutation from distributing/refreshing

module M {
  mut val m = None
  fun oops(x) = set m = x
}
//│ module M {
//│   mut val m: None
//│   fun oops: None -> ()
//│ }


:e
module M {
  mut val m = None
  fun oops(x) = set this.m = x
}
//│ ╔══[ERROR] Indirectly-recursive member should have a type signature
//│ ║  l.253: 	  fun oops(x) = set this.m = x
//│ ╙──       	                        ^^
//│ module M {
//│   mut val m: None
//│   fun oops: error -> ()
//│ }


module M[A] {
  mut val m: Option[A]
  m = None
  fun oops(x) = set this.m = x
}
//│ module M[A] {
//│   mut val m: Option[A]
//│   fun oops: Option[A] -> ()
//│ }

M.m
//│ Option['A]
//│ res
//│     = None { class: [class None] }

:re // * FIXME (codegen) member definition should inherit mutability of declaration
M.oops(Some(123))
//│ ()
//│ res
//│ Runtime error:
//│   TypeError: Cannot set property m of #<M> which has only a getter

M.m
//│ Option['A]
//│ res
//│     = None { class: [class None] }

module M[A] {
  mut val m: Option[A]
  mut val m = None
  fun oops(x) = set this.m = x
}
//│ module M[A] {
//│   mut val m: Option[A]
//│   fun oops: Option[A] -> ()
//│ }

M.m
M.oops(Some(123))
M.m
//│ Option['A]
//│ res
//│     = None { class: [class None] }
//│ res
//│     = undefined
//│ res
//│     = Some {}


module M[A] {
  mut val m = None
}
//│ module M[A] {
//│   mut val m: None
//│ }

M.m
//│ None
//│ res
//│     = None { class: [class None] }

set M.m = None
//│ ()
//│ res
//│     = undefined

:e
set M.m = Some(1)
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.331: 	set M.m = Some(1)
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Some[?A]` is not an instance of `None`
//│ ║  l.331: 	set M.m = Some(1)
//│ ║         	          ^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.314: 	  mut val m = None
//│ ║         	              ^^^^
//│ ╟── from assigned selection:
//│ ║  l.331: 	set M.m = Some(1)
//│ ╙──       	    ^^^
//│ ()
//│ res
//│     = undefined


// * Another possible syntax, which we didn't go with (for now?)
:e
module M {
  mut val m = None
  fun oops(x) = m := x
}
//│ ╔══[ERROR] identifier not found: :=
//│ ║  l.353: 	  fun oops(x) = m := x
//│ ╙──       	                  ^^
//│ module M {
//│   mut val m: None
//│   fun oops: anything -> error
//│ }
//│ Code generation encountered an error:
//│   unresolved symbol :=


