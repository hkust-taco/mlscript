:NewDefs

mut let i = 0
//│ mut let i: 0
//│ i
//│   = 0

set i = 1
//│ ()
//│ res
//│     = undefined

i
//│ 0 | 1
//│ res
//│     = 1


mut let f(x) =
  set f = _ => x
  x
//│ mut let f: 'a -> 'a
//│ f
//│   = [Function: f]

f(1)
//│ 1
//│ res
//│     = 1

f(true)
//│ 1 | true
//│ res
//│     = true


class Some[A](value: A)
module None
//│ class Some[A](value: A)
//│ module None

mut let oops = None
//│ mut let oops: None
//│ oops
//│      = None { class: [class None] }

fun funny(x) =
  set oops = Some(x)
  x
//│ fun funny: forall 'a. 'a -> 'a

funny(1)
//│ 1
//│ res
//│     = 1

if oops is
  None then 0
  Some(v) then v
//│ 0 | 1
//│ res
//│     = 1

set oops = Some(123)
//│ ()
//│ res
//│     = undefined

oops
//│ None | Some[in 'A out 123 | 'A | 1]
//│ res
//│     = Some {}



mut let oops = None
//│ mut let oops: None
//│ oops
//│      = None { class: [class None] }

fun funny(x) =
  let tmp = oops
  set oops = Some(x)
  tmp
//│ fun funny: 'A -> (None | Some['A])

funny(123)
//│ None | Some[in 'A out 'A | 123]
//│ res
//│     = None { class: [class None] }

if funny("hi") is
  Some(v) then v
  else 0
//│ "hi" | 0 | 123
//│ res
//│     = 123


module None
//│ module None

mut let m = None
//│ mut let m: None
//│ m
//│   = None { class: [class None] }

mut val m = None
fun oops(x) = set m = x
//│ mut val m: 'm | None
//│ fun oops: 'm -> ()
//│ m
//│   = None { class: [class None] }


:e
let x = 1
set x = 2
x
//│ ╔══[ERROR] definition `x` is not mutable and cannot be reassigned
//│ ║  l.118: 	set x = 2
//│ ╙──       	^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.118: 	set x = 2
//│ ║         	^^^^^^^^^
//│ ╟── integer literal of type `2` does not match type `1`
//│ ║  l.118: 	set x = 2
//│ ║         	        ^
//│ ╟── Note: constraint arises from integer literal:
//│ ║  l.117: 	let x = 1
//│ ║         	        ^
//│ ╟── from definition of let binding x:
//│ ║  l.117: 	let x = 1
//│ ╙──       	    ^^^^^
//│ let x: 1
//│ 1
//│ x
//│   = 1
//│ res
//│     = undefined
//│ res
//│     = 2


mut let min = 123
//│ mut let min: 123
//│ min
//│     = 123

set min = 42
//│ ()
//│ res
//│     = undefined

min
//│ 123 | 42
//│ res
//│     = 42


fun repmin(t) =
  mut let min = 123
  let go(t) = set min = t.value
  go(t)
  min
//│ fun repmin: forall 'min. {value: 'min} -> ('min | 123)


class Leaf[out A](val value: A)
//│ class Leaf[A](value: A)

fun repmin(t) =
  mut let min = 123
  let go(t) = if t is
    Leaf(n) then set min = n
  go(t)
  min
//│ fun repmin: forall 'min. Leaf['min] -> ('min | 123)

fun repmin =
  mut let min = 123
  let go(t) = if t is
    Leaf(n) then set min = n
  [min, go]
//│ fun repmin: forall 'min. ['min | 123, Leaf['min] -> ()]


:e
mut val lol[A] = (x: A) => x
//│ ╔══[ERROR] Type parameters are not yet supported in this position
//│ ║  l.189: 	mut val lol[A] = (x: A) => x
//│ ╙──       	            ^
//│ mut val lol: (x: 'A) -> 'A
//│ lol
//│     = [Function: lol]


