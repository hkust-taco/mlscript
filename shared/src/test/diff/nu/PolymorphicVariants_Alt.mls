:NewDefs
:NoJS


// * Adapted example from Code reuse through polymorphic variants (FOSE 2000)
// * This time with a List class.

// FIXME:
//  - simplification problem or constraint bug: `'result :> anything <: Num`
//  - constraining loop with unannotated `list_assoc` ascription
//  - still a number of quite ugly types


class List<A> {
  fun match: forall 'res; (ifNil: () => 'res, ifCons: (A, List[A]) => 'res) => 'res
  fun match = error
}
let Nil: () => List<'a>
let Cons: (head: 'a, tail: List<'a>) => List<'a>
//│ class List[A] {
//│   fun match: forall 'res. (ifNil: () -> 'res, ifCons: (A, List[A],) -> 'res,) -> 'res
//│ }
//│ let Nil: forall 'a. () -> List['a]
//│ let Cons: forall 'a0. (head: 'a0, tail: List['a0],) -> List['a0]

class NotFound
class Success<A>(result: A)
//│ class NotFound
//│ class Success[A](result: A)

fun eq(l: Str, r: Str): Bool
//│ fun eq: (l: Str, r: Str,) -> Bool

// * Annotation currently needed to avoid later ascription loop (due to excessive TV refreshing?)
// fun list_assoc(s, l) =
fun list_assoc(s, l: List<'a>) =
  l.match(
    ifNil: () => NotFound(),
    ifCons: (h, t) =>
      if eq(s, h._1) then Success(h._2)
      else list_assoc(s, t)
  )
//│ fun list_assoc: forall 'a 'A. (Str, l: List['a],) -> (NotFound | Success['A])
//│   where
//│     'a <: {_1: Str, _2: 'A}

list_assoc : (Str, List<{ _1: Str, _2: 'b }>) => (NotFound | Success['b])
//│ (Str, List[{_1: Str, _2: 'b}],) -> (NotFound | Success['b])

fun list_assoc(s: Str, l: List<{ _1: Str, _2: 'b }>): NotFound | Success['b]
//│ fun list_assoc: forall 'b. (s: Str, l: List[{_1: Str, _2: 'b}],) -> (NotFound | Success['b])

class Var(s: Str)
//│ class Var(s: Str)

mixin EvalVar {
  fun eval(sub, v) =
    if v is Var(s) then
      if list_assoc(s, sub) is
        NotFound then v
        Success(r) then r
}
//│ mixin EvalVar() {
//│   fun eval: (List[{_1: Str, _2: 'b}], Var,) -> ('b | Var)
//│ }

class Abs<A>(x: Str, t: A)
class App<A>(s: A, t: A)
//│ class Abs[A](x: Str, t: A)
//│ class App[A](s: A, t: A)

fun incr(x: {a: Int}): unit
//│ fun incr: (x: {a: Int},) -> unit

fun gensym(): Str
//│ fun gensym: () -> Str

fun int_to_string(x: Int): Str
//│ fun int_to_string: (x: Int,) -> Str

mixin EvalLambda {
  fun eval(sub, v) =
    if v is
      App(t1, t2) then
        let l1 = this.eval(sub, t1)
        let l2 = this.eval(sub, t2)
        if t1 is
          Abs(x, t) then this.eval(Cons((x, l2), Nil()), t)
        else
          App(l1, l2)
      Abs(x, t) then
        let s = gensym()
        Abs(s, this.eval(Cons((x, Var(s)), sub), t))
    else
      super.eval(sub, v)
}
//│ mixin EvalLambda() {
//│   super: {eval: ('b, 'c,) -> 'd}
//│   this: {eval: ('b, 's,) -> ('A & 'e) & (List[in 'a out 'a | (Str, 'e,)], 't,) -> 'd & (List['a0], 't0,) -> 'A0}
//│   fun eval: (List['a0] & 'b, Abs['t0] | App['s & (Abs['t] | #Object & ~#Abs)] | #Object & 'c & ~#Abs & ~#App,) -> (Abs['A0] | App['A] | 'd)
//│ }
//│ where
//│   'a0 :> (Str, Var,)

module Test1 extends EvalVar, EvalLambda
//│ module Test1 {
//│   fun eval: forall 'a. (List[{_1: Str, _2: 'b}], Abs['t] | App['A] | Var,) -> ('c | 'a)
//│ }
//│ where
//│   't <: Abs['t] | App['A] | Var
//│   'A <: Abs['t & (Abs['t] | App['A] | Var)] | Abs['t] & ~#Abs | App['A] | Var
//│   'b :> Var | 'd
//│   'd :> 'c | 'a
//│   'c :> 'b | Var | 'a
//│   'a :> App['d | 'c | 'a] | Abs['c | 'a]

Test1.eval(Nil(), Var("a"))
//│ forall 'a. 'b | 'a | 'c
//│   where
//│     'b :> forall 'a. 'a | 'c
//│     'a :> App[forall 'a. 'b | 'a | 'c] | Abs[forall 'a. 'b | 'a | 'c]
//│     'c :> (forall 'a. Var | 'b | 'a) | Var

Test1.eval(Nil(), Abs("b", Var("a")))
//│ forall 'a. 'b | 'a | 'c
//│   where
//│     'b :> forall 'a. 'a | 'c
//│     'a :> App[forall 'a. 'b | 'a | 'c] | Abs[forall 'a. 'b | 'a | 'c]
//│     'c :> (forall 'a. Var | 'b | 'a) | Var

Test1.eval(Cons(("c", Var("d")), Nil()), App(Abs("b", Var("b")), Var("c")))
//│ forall 'a. 'b | 'a | 'c
//│   where
//│     'b :> forall 'a. 'a | 'c
//│     'a :> App[forall 'a. 'b | 'a | 'c] | Abs[forall 'a. 'b | 'a | 'c]
//│     'c :> (forall 'a. Var | 'b | 'a) | Var

Test1.eval(Cons(("c", Abs("d", Var("d"))), Nil()), App(Abs("b", Var("b")), Var("c")))
//│ forall 'a. 'b | 'a | 'c
//│   where
//│     'b :> forall 'a. 'a | 'c
//│     'a :> App[forall 'a. 'b | 'a | 'c] | Abs[forall 'a. 'b | 'a | 'c]
//│     'c :> (forall 'a. Abs[Var] | Var | 'b | 'a) | Var

class Num(n: Int)
class Add<A>(l: A, r: A)
class Mul<A>(l: A, r: A)
//│ class Num(n: Int)
//│ class Add[A](l: A, r: A)
//│ class Mul[A](l: A, r: A)

fun map_expr(f, v) =
  if v is
    Var then v
    Num then v
    Add(l, r) then Add(f(l), f(r))
    Mul(l, r) then Mul(f(l), f(r))
//│ fun map_expr: forall 'l 'A 'l0 'A0. ('l -> 'A & 'l0 -> 'A0, Add['l] | Mul['l0] | Num | Var,) -> (Add['A] | Mul['A0] | Num | Var)

mixin EvalExpr {
  fun eval(sub, v) =
    fun eta(e) = this.eval(sub, e)
    let vv = map_expr(eta, v)
    if vv is
      Var then super.eval(sub, vv)
      Add(Num(l), Num(r)) then Num(l + r)
      Mul(Num(l), Num(r)) then Num(l * r)
    else v
}
//│ mixin EvalExpr() {
//│   super: {eval: ('a, Var,) -> 'b}
//│   this: {eval: ('a, 'c,) -> #Object}
//│   fun eval: ('a, 'b & (Add['c] | Mul['c] | Num | Var),) -> (Num | 'b)
//│ }

module Test2 extends EvalVar, EvalExpr
//│ module Test2 {
//│   fun eval: forall 'a. (List[{_1: Str, _2: 'b}], 'a & (Add['c] | Mul['c] | Num | Var),) -> ('b | Num | Var | 'a)
//│ }
//│ where
//│   'c <: Add['c] | Mul['c] | Num | Var
//│   'b <: #Object

Test2.eval(Nil(), Var("a"))
//│ Num | Var

Test2.eval(Cons(("c", Abs("d", Var("d"))), Nil()), Var("a"))
//│ Abs[Var] | Num | Var

Test2.eval(Cons(("a", Num(1)), Nil()), Var("a"))
//│ Num | Var

Test2.eval(Cons(("a", Abs("d", Var("d"))), Nil()), Add(Num(1), Var("a")))
//│ Abs[Var] | Add[Num | Var] | Num | Var

module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ module Test3 {
//│   fun eval: forall 'a 'A. (List[{_1: Str, _2: 'b}], Abs['t] | App['A] | #Object & 'c & ~#Abs & ~#App,) -> ('d | 'a)
//│ }
//│ where
//│   'b :> Var | 'e
//│      <: #Object
//│   'e :> 'd | 'a
//│   'd :> 'b | Num | Var | 'c | 'a
//│   'a :> App['e | 'd | 'a] | Abs['d | 'a]
//│   'c <: Add['f] | Mul['f] | Num | Var
//│   'f <: Abs['t] | App['A] | #Object & 'c & ~#Abs & ~#App
//│   't <: Abs['t] | App['A] | #Object & 'c & ~#Abs & ~#App
//│   'A <: Abs['t & (Abs['t] | App['A] | #Object & 'c & ~#Abs & ~#App)] | Abs['t] & ~#Abs | App['A] | #Object & 'c & ~#Abs & ~#App

Test3.eval(Cons(("c", Abs("d", Var("d"))), Nil()), Abs("a", Var("a")))
//│ forall 'a. 'b | 'a | 'c
//│   where
//│     'b :> forall 'a. 'a | 'c
//│     'a :> App[forall 'a. 'b | 'a | 'c] | Abs[forall 'a. 'b | 'a | 'c]
//│     'c :> (forall 'a. Abs[Var] | Var | 'b | 'a) | Num | Var

Test3.eval(Cons(("c", Abs("d", Var("d"))), Nil()), App(Abs("a", Var("a")), Add(Num(1), Var("c"))))
//│ forall 'a. 'b | 'a | 'c
//│   where
//│     'b :> forall 'a. 'a | 'c
//│     'a :> App[forall 'a. 'b | 'a | 'c] | Abs[forall 'a. 'b | 'a | 'c]
//│     'c :> (forall 'a. Abs[Var] | Var | 'b | 'a) | Add[Num | Var] | Num | Var

module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ module Test3 {
//│   fun eval: forall 'a. (List[{_1: Str, _2: 'b}], 'a & (Add['c] | Mul['c] | Num | Var),) -> ('a | 'd)
//│ }
//│ where
//│   'c <: Add['c] | Mul['c] | Num | Var
//│   'b :> Var | 'e
//│      <: #Object
//│   'e :> 'd
//│   'd :> 'b | Abs[Num | 'd] | App[Num | 'e | 'd] | Num | Var

