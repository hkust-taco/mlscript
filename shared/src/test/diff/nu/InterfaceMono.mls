:NewDefs


trait Showable {
    fun toString: Str
}
//│ trait Showable {
//│   fun toString: Str
//│ }

:e
trait What0 extends woooo
//│ ╔══[ERROR] Could not find definition `woooo`
//│ ║  l.12: 	trait What0 extends woooo
//│ ╙──      	                    ^^^^^
//│ trait What0

class PoInt(x: Int, y: Int) extends Showable {
    fun mlen = x + y
    fun toString = "I'm a poInt"
}
//│ class PoInt(x: Int, y: Int) extends Showable {
//│   fun mlen: Int
//│   fun toString: "I'm a poInt"
//│ }

class What1(toString: Str) extends Showable
//│ class What1(toString: Str) extends Showable

:e
trait NoShow extends What1("hi")
//│ ╔══[ERROR] A trait can only inherit from other traits
//│ ║  l.31: 	trait NoShow extends What1("hi")
//│ ╙──      	                     ^^^^^^^^^^^
//│ trait NoShow extends Showable, What1

:e
class ErrC1 extends Showable
class ErrC2 extends Showable {
    fun toString = 114
}
class ErrC3(toString: Str -> Str) extends Showable
//│ ╔══[ERROR] Member `toString` is declared in parent but not implemented in `ErrC1`
//│ ║  l.38: 	class ErrC1 extends Showable
//│ ║        	      ^^^^^
//│ ╟── Declared here:
//│ ║  l.5: 	    fun toString: Str
//│ ╙──     	        ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in definition of method toString:
//│ ║  l.40: 	    fun toString = 114
//│ ║        	        ^^^^^^^^^^^^^^
//│ ╟── integer literal of type `114` is not an instance of type `Str`
//│ ║  l.40: 	    fun toString = 114
//│ ║        	                   ^^^
//│ ╟── but it flows into definition of method toString with expected type `Str`
//│ ║  l.40: 	    fun toString = 114
//│ ║        	        ^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.5: 	    fun toString: Str
//│ ║       	                  ^^^
//│ ╟── from signature of member `toString`:
//│ ║  l.5: 	    fun toString: Str
//│ ╙──     	        ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in function type:
//│ ║  l.42: 	class ErrC3(toString: Str -> Str) extends Showable
//│ ║        	                      ^^^^^^^^^^
//│ ╟── type `Str -> Str` is not an instance of type `Str`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.5: 	    fun toString: Str
//│ ║       	                  ^^^
//│ ╟── from signature of member `toString`:
//│ ║  l.5: 	    fun toString: Str
//│ ╙──     	        ^^^^^^^^^^^^^
//│ class ErrC1 extends Showable {
//│   fun toString: Str
//│ }
//│ class ErrC2 extends Showable {
//│   fun toString: 114
//│ }
//│ class ErrC3(toString: Str -> Str) extends Showable

trait Stadt {
    let name: Str
}
//│ trait Stadt {
//│   let name: Str
//│ }

trait RefinedStadt extends Stadt {
    let size: Int
    fun foo: Bool -> Int
}
//│ trait RefinedStadt extends Stadt {
//│   fun foo: Bool -> Int
//│   let name: Str
//│   let size: Int
//│ }

trait SizedStadt extends RefinedStadt {
    let size: 1 | 2 | 3
    fun bar: Int -> Int
}
//│ trait SizedStadt extends RefinedStadt, Stadt {
//│   fun bar: Int -> Int
//│   fun foo: Bool -> Int
//│   let name: Str
//│   let size: 1 | 2 | 3
//│ }

class Goodstatt(size: 1 | 2) extends RefinedStadt {
    let name = "good"
    fun bar(x) = x
    fun foo(t) = if t && true then this.size else 0
}
//│ class Goodstatt(size: 1 | 2) extends RefinedStadt, Stadt {
//│   fun bar: 'a -> 'a
//│   fun foo: Bool -> (0 | 1 | 2)
//│   let name: "good"
//│ }

:e
class Errcity(size: Int) extends SizedStadt {
    fun bar = "hahaha"
}
//│ ╔══[ERROR] Type mismatch in definition of method bar:
//│ ║  l.123: 	    fun bar = "hahaha"
//│ ║         	        ^^^^^^^^^^^^^^
//│ ╟── string literal of type `"hahaha"` is not a function
//│ ║  l.123: 	    fun bar = "hahaha"
//│ ║         	              ^^^^^^^^
//│ ╟── but it flows into definition of method bar with expected type `Int -> Int`
//│ ║  l.123: 	    fun bar = "hahaha"
//│ ║         	        ^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.101: 	    fun bar: Int -> Int
//│ ║         	             ^^^^^^^^^^
//│ ╟── from signature of member `bar`:
//│ ║  l.101: 	    fun bar: Int -> Int
//│ ╙──       	        ^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.122: 	class Errcity(size: Int) extends SizedStadt {
//│ ║         	                    ^^^
//│ ╟── type `Int` does not match type `1 | 2 | 3`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.100: 	    let size: 1 | 2 | 3
//│ ║         	              ^^^^^^^^^
//│ ╟── from signature of member `size`:
//│ ║  l.100: 	    let size: 1 | 2 | 3
//│ ╙──       	        ^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Member `name` is declared in parent but not implemented in `Errcity`
//│ ║  l.122: 	class Errcity(size: Int) extends SizedStadt {
//│ ║         	      ^^^^^^^
//│ ╟── Declared here:
//│ ║  l.83: 	    let name: Str
//│ ╙──      	        ^^^^^^^^^
//│ ╔══[ERROR] Member `foo` is declared in parent but not implemented in `Errcity`
//│ ║  l.122: 	class Errcity(size: Int) extends SizedStadt {
//│ ║         	      ^^^^^^^
//│ ╟── Declared here:
//│ ║  l.91: 	    fun foo: Bool -> Int
//│ ╙──      	        ^^^^^^^^^^^^^^^^
//│ class Errcity(size: Int) extends RefinedStadt, SizedStadt, Stadt {
//│   fun bar: "hahaha"
//│   fun foo: Bool -> Int
//│   let name: Str
//│ }

module Omg extends Stadt {
    fun name = "omg!!!"
    fun cool(x) = x + x
}
//│ module Omg extends Stadt {
//│   fun cool: Int -> Int
//│   fun name: "omg!!!"
//│ }

mixin More {
    fun more(x) = x == 1
    fun size = 1
    fun bar(x) = x
}
//│ mixin More() {
//│   fun bar: 'a -> 'a
//│   fun more: Num -> Bool
//│   fun size: 1
//│ }

mixin Fooo {
    fun foo(x) = 0
}
//│ mixin Fooo() {
//│   fun foo: anything -> 0
//│ }

class Grassberg(name: "grass" | "GRASS") extends More, SizedStadt, Fooo
//│ class Grassberg(name: "GRASS" | "grass") extends RefinedStadt, SizedStadt, Stadt {
//│   fun bar: forall 'a. 'a -> 'a
//│   fun foo: anything -> 0
//│   fun more: Num -> Bool
//│   fun size: 1
//│ }

:e
class Dirtberg extends More, SizedStadt, Fooo {
    let name = "dirt"
    fun size = 4    // this should not check
}
//│ ╔══[ERROR] Type mismatch in definition of method size:
//│ ║  l.206: 	    fun size = 4    // this should not check
//│ ║         	        ^^^^^^^^
//│ ╟── integer literal of type `4` does not match type `1 | 2 | 3`
//│ ║  l.206: 	    fun size = 4    // this should not check
//│ ║         	               ^
//│ ╟── but it flows into definition of method size with expected type `1 | 2 | 3`
//│ ║  l.206: 	    fun size = 4    // this should not check
//│ ║         	        ^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.100: 	    let size: 1 | 2 | 3
//│ ║         	              ^^^^^^^^^
//│ ╟── from signature of member `size`:
//│ ║  l.100: 	    let size: 1 | 2 | 3
//│ ╙──       	        ^^^^^^^^^^^^^^^
//│ class Dirtberg extends RefinedStadt, SizedStadt, Stadt {
//│   fun bar: forall 'a. 'a -> 'a
//│   fun foo: anything -> 0
//│   fun more: Num -> Bool
//│   let name: "dirt"
//│   fun size: 4
//│ }

class Iceburg(name: Str) extends RefinedStadt, More, Fooo
//│ class Iceburg(name: Str) extends RefinedStadt, Stadt {
//│   fun bar: forall 'a. 'a -> 'a
//│   fun foo: anything -> 0
//│   fun more: Num -> Bool
//│   fun size: 1
//│ }

class A { fun x: Int = 1 }
//│ class A {
//│   fun x: Int
//│ }

:e
class B extends A { fun x = "A" }
//│ ╔══[ERROR] Type mismatch in definition of method x:
//│ ║  l.245: 	class B extends A { fun x = "A" }
//│ ║         	                        ^^^^^^^
//│ ╟── string literal of type `"A"` is not an instance of type `Int`
//│ ║  l.245: 	class B extends A { fun x = "A" }
//│ ║         	                            ^^^
//│ ╟── but it flows into definition of method x with expected type `Int`
//│ ║  l.245: 	class B extends A { fun x = "A" }
//│ ║         	                        ^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.239: 	class A { fun x: Int = 1 }
//│ ║         	                 ^^^
//│ ╟── from definition of method x:
//│ ║  l.239: 	class A { fun x: Int = 1 }
//│ ╙──       	              ^^^^^^^^^^
//│ class B extends A {
//│   fun x: "A"
//│ }

class C1[A] { fun a: A = a }
//│ class C1[A] {
//│   fun a: A
//│ }

class C2 extends C1[Int] { fun a = 1 }
//│ class C2 extends C1 {
//│   fun a: 1
//│ }

// trait MyTrait[A] { type MyTrait#A = A; fun a: A = a }
// freshen/subst
// trait MyTrait[Int] { type MyTrait#A = Int; fun a: Int = a }

trait MyTrait[A] { fun a: A }
//│ trait MyTrait[A] {
//│   fun a: A
//│ }

// :ns
// :d
// :ds
class C extends MyTrait[Int] { fun a = 1 }
//│ class C extends MyTrait {
//│   fun a: 1
//│ }

:e
class C extends MyTrait[Int] { fun a = false }
//│ ╔══[ERROR] Type mismatch in definition of method a:
//│ ║  l.293: 	class C extends MyTrait[Int] { fun a = false }
//│ ║         	                                   ^^^^^^^^^
//│ ╟── reference of type `false` is not an instance of type `Int`
//│ ║  l.293: 	class C extends MyTrait[Int] { fun a = false }
//│ ║         	                                       ^^^^^
//│ ╟── but it flows into definition of method a with expected type `Int`
//│ ║  l.293: 	class C extends MyTrait[Int] { fun a = false }
//│ ║         	                                   ^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.293: 	class C extends MyTrait[Int] { fun a = false }
//│ ║         	                        ^^^
//│ ╟── from signature of member `a`:
//│ ║  l.279: 	trait MyTrait[A] { fun a: A }
//│ ╙──       	                       ^^^^
//│ class C extends MyTrait {
//│   fun a: false
//│ }


trait T1 { 
    let foo : 1 | 2 | 3 
    fun bar : Str | Bool
}
trait T2 { 
    let foo : 2 | 3 | 4
    let bar : Int | Bool
}
//│ trait T1 {
//│   fun bar: Str | false | true
//│   let foo: 1 | 2 | 3
//│ }
//│ trait T2 {
//│   let bar: Int | false | true
//│   let foo: 2 | 3 | 4
//│ }

trait T4 extends T1, T2 {
    fun foo: 2
}
//│ trait T4 extends T1, T2 {
//│   fun bar: Bool
//│   fun foo: 2
//│ }

class C1(foo: 2, bar: true) extends T4
//│ class C1(foo: 2, bar: true) extends T1, T2, T4

:e
class C3 extends T4{
    fun foo = 3
    fun bar = false
}
//│ ╔══[ERROR] Type mismatch in definition of method foo:
//│ ║  l.344: 	    fun foo = 3
//│ ║         	        ^^^^^^^
//│ ╟── integer literal of type `3` does not match type `2`
//│ ║  l.344: 	    fun foo = 3
//│ ║         	              ^
//│ ╟── but it flows into definition of method foo with expected type `2`
//│ ║  l.344: 	    fun foo = 3
//│ ║         	        ^^^^^^^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.332: 	    fun foo: 2
//│ ║         	             ^
//│ ╟── from signature of member `foo`:
//│ ║  l.332: 	    fun foo: 2
//│ ╙──       	        ^^^^^^
//│ class C3 extends T1, T2, T4 {
//│   fun bar: false
//│   fun foo: 3
//│ }

:e
class C2(foo: Int, bar: Str) extends T4
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.368: 	class C2(foo: Int, bar: Str) extends T4
//│ ║         	              ^^^
//│ ╟── type `Int` does not match type `2`
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.332: 	    fun foo: 2
//│ ║         	             ^
//│ ╟── from signature of member `foo`:
//│ ║  l.332: 	    fun foo: 2
//│ ╙──       	        ^^^^^^
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.368: 	class C2(foo: Int, bar: Str) extends T4
//│ ║         	                        ^^^
//│ ╟── type `Str` does not match type `Bool | Int`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.320: 	    let bar : Int | Bool
//│ ║         	              ^^^^^^^^^^
//│ ╟── from signature of member `bar`:
//│ ║  l.320: 	    let bar : Int | Bool
//│ ╙──       	        ^^^^^^^^^^^^^^^^
//│ class C2(foo: Int, bar: Str) extends T1, T2, T4

:e
trait T5 extends T4 {
    let foo: 4
}
//│ ╔══[ERROR] Type mismatch in signature of member `foo`:
//│ ║  l.393: 	    let foo: 4
//│ ║         	        ^^^^^^
//│ ╟── type `4` does not match type `2`
//│ ║  l.393: 	    let foo: 4
//│ ║         	             ^
//│ ╟── but it flows into signature of member `foo` with expected type `2`
//│ ║  l.393: 	    let foo: 4
//│ ║         	        ^^^^^^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.332: 	    fun foo: 2
//│ ║         	             ^
//│ ╟── from signature of member `foo`:
//│ ║  l.332: 	    fun foo: 2
//│ ╙──       	        ^^^^^^
//│ trait T5 extends T1, T2, T4 {
//│   fun bar: Bool
//│   let foo: 4
//│ }

:e
trait T3 extends T1, T2 {
    let foo: true
}
//│ ╔══[ERROR] Type mismatch in signature of member `foo`:
//│ ║  l.417: 	    let foo: true
//│ ║         	        ^^^^^^^^^
//│ ╟── type `true` does not match type `1 | 2 | 3`
//│ ║  l.417: 	    let foo: true
//│ ║         	             ^^^^
//│ ╟── but it flows into signature of member `foo` with expected type `1 | 2 | 3`
//│ ║  l.417: 	    let foo: true
//│ ║         	        ^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.315: 	    let foo : 1 | 2 | 3 
//│ ║         	              ^^^^^^^^^
//│ ╟── from signature of member `foo`:
//│ ║  l.315: 	    let foo : 1 | 2 | 3 
//│ ╙──       	        ^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in signature of member `foo`:
//│ ║  l.417: 	    let foo: true
//│ ║         	        ^^^^^^^^^
//│ ╟── type `true` does not match type `2 | 3 | 4`
//│ ║  l.417: 	    let foo: true
//│ ║         	             ^^^^
//│ ╟── but it flows into signature of member `foo` with expected type `2 | 3 | 4`
//│ ║  l.417: 	    let foo: true
//│ ║         	        ^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.319: 	    let foo : 2 | 3 | 4
//│ ║         	              ^^^^^^^^^
//│ ╟── from signature of member `foo`:
//│ ║  l.319: 	    let foo : 2 | 3 | 4
//│ ╙──       	        ^^^^^^^^^^^^^^^
//│ trait T3 extends T1, T2 {
//│   fun bar: Bool
//│   let foo: true
//│ }
