:NewDefs


mixin Base {
  let base = 42
}
//│ mixin Base() {
//│   let base: 42
//│ }

mixin BaseTest {
  fun test = super.base
}
//│ mixin BaseTest() {
//│   super: {base: 'base}
//│   fun test: 'base
//│ }


module Base0 extends Base, BaseTest
//│ module Base0 {
//│   let base: 42
//│   fun test: 42
//│ }

Base0
//│ Base0
//│ res
//│     = Base0 { class: [Function: Base0] }

Base0.test
//│ 42
//│ res
//│     = 42


:e
class Base1(base: Int) extends BaseTest {
  fun test2 = [base, this.base]
}
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.38: 	class Base1(base: Int) extends BaseTest {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.39: 	  fun test2 = [base, this.base]
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Object of type `anything` does not have field 'base'
//│ ║  l.38: 	class Base1(base: Int) extends BaseTest {
//│ ║        	                               ^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.12: 	  fun test = super.base
//│ ║        	             ^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.12: 	  fun test = super.base
//│ ╙──      	             ^^^^^
//│ class Base1(base: Int) {
//│   fun test: nothing
//│   fun test2: (Int, Int,)
//│ }


mixin BaseOf(base: Int) {
  fun original = base
}
//│ mixin BaseOf(base: Int) {
//│   fun original: Int
//│ }

mixin BaseInc {
  fun base = super.base + 1
  fun test2 = [this.original, this.base]
}
//│ mixin BaseInc() {
//│   super: {base: Int}
//│   this: {base: 'base, original: 'original}
//│   fun base: Int
//│   fun test2: ('original, 'base,)
//│ }


class Base2(x: Int) extends BaseOf(x + 1), BaseTest, BaseInc {
  fun base = x
  fun overridden = super.base
}
//│ class Base2(x: Int) {
//│   fun base: Int
//│   fun original: Int
//│   fun overridden: Int
//│   fun test: Int
//│   fun test2: (Int, Int,)
//│ }

Base2(11).base
//│ Int
//│ res
//│     = 11

Base2(11).overridden
//│ Int
//│ res
//│     = 13

Base2(11).test
//│ Int
//│ res
//│     = 12

Base2(11).test2
//│ (Int, Int,)
//│ res
//│     = [ 12, 11 ]


// TODO
class Base2(x) extends BaseOf(x + 1), BaseTest
//│ ╔══[ERROR] Class parameters currently need type annotations
//│ ║  l.114: 	class Base2(x) extends BaseOf(x + 1), BaseTest
//│ ╙──       	            ^
//│ class Base2(x: error) {
//│   fun original: Int
//│   fun test: Int
//│ }

:e
class Base1(x: Int): BaseTest
//│ ╔══[ERROR] mixin BaseTest cannot be used as a type
//│ ║  l.124: 	class Base1(x: Int): BaseTest
//│ ╙──       	                     ^^^^^^^^
//│ class Base1(x: Int): BaseTest

Base1
//│ (x: Int,) -> Base1
//│ res
//│     = [Function (anonymous)] { class: [class Base1] }

:e
1 : BaseTest
//│ ╔══[ERROR] mixin BaseTest cannot be used as a type
//│ ║  l.136: 	1 : BaseTest
//│ ╙──       	    ^^^^^^^^
//│ BaseTest
//│ res
//│     = 1

:e
error : BaseTest
//│ ╔══[ERROR] mixin BaseTest cannot be used as a type
//│ ║  l.145: 	error : BaseTest
//│ ╙──       	        ^^^^^^^^
//│ BaseTest
//│ res
//│ Runtime error:
//│   Error: unexpected runtime error


// :ns
mixin Foo {
  fun test(x) = [super.base + x, x, super.misc]
}
//│ mixin Foo() {
//│   super: {base: Int, misc: 'misc}
//│   fun test: (Int & 'a) -> (Int, 'a, 'misc,)
//│ }

:e
module Base1(base: Int, misc: string) extends Foo
//│ ╔══[ERROR] module parameters are not supported
//│ ║  l.165: 	module Base1(base: Int, misc: string) extends Foo
//│ ╙──       	             ^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.165: 	module Base1(base: Int, misc: string) extends Foo
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Object of type `anything` does not have field 'misc'
//│ ║  l.165: 	module Base1(base: Int, misc: string) extends Foo
//│ ║         	                                              ^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.157: 	  fun test(x) = [super.base + x, x, super.misc]
//│ ║         	                                    ^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.157: 	  fun test(x) = [super.base + x, x, super.misc]
//│ ╙──       	                                    ^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.165: 	module Base1(base: Int, misc: string) extends Foo
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Object of type `anything` does not have field 'base'
//│ ║  l.165: 	module Base1(base: Int, misc: string) extends Foo
//│ ║         	                                              ^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.157: 	  fun test(x) = [super.base + x, x, super.misc]
//│ ║         	                 ^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.157: 	  fun test(x) = [super.base + x, x, super.misc]
//│ ╙──       	                 ^^^^^
//│ module Base1(base: Int, misc: string) {
//│   fun test: forall 'a. (Int & 'a) -> (Int, 'a, nothing,)
//│ }

Base1.test
//│ forall 'a. (Int & 'a) -> (Int, 'a, nothing,)
//│ res
//│     = [Function: test]


mixin WrapBase {
  // fun wrap(x) = x
  // fun wrap(x) = x : Int
  fun wrapA(x: Int) = x : Int
  fun wrap(x) = x
}
//│ mixin WrapBase() {
//│   fun wrap: 'a -> 'a
//│   fun wrapA: (x: Int,) -> Int
//│ }

// :d
mixin Wrap {
  fun wrapA(x) = [super.wrapA(x)]
  fun wrap(x) = [super.wrap(x)]
}
//│ mixin Wrap() {
//│   super: {wrap: 'a -> 'b, wrapA: 'c -> 'd}
//│   fun wrap: 'a -> ('b,)
//│   fun wrapA: 'c -> ('d,)
//│ }



// :d
module WrapBase1 extends WrapBase, Wrap
//│ module WrapBase1 {
//│   fun wrap: 'a -> ('a,)
//│   fun wrapA: Int -> (Int,)
//│ }


WrapBase1
//│ WrapBase1
//│ res
//│     = WrapBase1 { class: [Function: WrapBase1] }

// :d
WrapBase1.wrapA
//│ Int -> (Int,)
//│ res
//│     = [Function: wrapA]

WrapBase1.wrap
//│ 'a -> ('a,)
//│ res
//│     = [Function: wrap]

// :d
// WrapBase1.wrap


WrapBase1.wrap(1)
//│ (1,)
//│ res
//│     = [ 1 ]

WrapBase1.wrap("ok")
//│ ("ok",)
//│ res
//│     = [ 'ok' ]


WrapBase1.wrapA(1)
//│ (Int,)
//│ res
//│     = [ 1 ]

:e
WrapBase1.wrapA("ok")
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.272: 	WrapBase1.wrapA("ok")
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"ok"` is not an instance of type `Int`
//│ ║  l.272: 	WrapBase1.wrapA("ok")
//│ ║         	                ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.216: 	  fun wrapA(x) = [super.wrapA(x)]
//│ ╙──       	                              ^
//│ (Int,) | error
//│ res
//│     = [ 'ok' ]



module WrapBase2 extends WrapBase, Wrap, Wrap, Wrap
//│ module WrapBase2 {
//│   fun wrap: 'a -> ((('a,),),)
//│   fun wrapA: Int -> (((Int,),),)
//│ }

let w = WrapBase2.wrap
//│ let w: 'a -> ((('a,),),)
//│ w
//│   = [Function: wrap]

let wd = w(1)
//│ let wd: (((1,),),)
//│ wd
//│    = [ [ [ 1 ] ] ]

// TODO implement _1
wd._1._1._1 + 1
//│ Int
//│ res
//│ Runtime error:
//│   TypeError: Cannot read properties of undefined (reading '_1')


