:NewDefs


trait Test {
  fun foo: Int
  fun bar: Bool -> Bool
}
//│ trait Test {
//│   fun bar: Bool -> Bool
//│   fun foo: Int
//│ }

fun ts(x: Test) = x.foo
//│ fun ts: (x: Test) -> Int


module M extends Test {
  fun foo = 0
  fun bar = not
}
//│ module M extends Test {
//│   fun bar: Bool -> Bool
//│   fun foo: 0
//│ }

M: Test
//│ Test
//│ res
//│     = M { class: [class M extends Object] }

ts(M)
//│ Int
//│ res
//│     = 0

trait Oth extends Test {
  let a : Int
  fun cool : Int -> Bool
}
//│ trait Oth extends Test {
//│   let a: Int
//│   fun bar: Bool -> Bool
//│   fun cool: Int -> Bool
//│   fun foo: Int
//│ }

let oth1: Oth
//│ let oth1: Oth
//│ oth1
//│      = <missing implementation>

oth1.bar(true)
//│ Bool
//│ res
//│     = <no result>
//│       oth1 is not implemented

oth1: Test
//│ Test
//│ res
//│     = <no result>
//│       oth1 is not implemented

:e
M : Oth
oth1: M
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.65: 	M : Oth
//│ ║        	^
//│ ╟── reference of type `M` is not an instance of type `Oth`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.65: 	M : Oth
//│ ╙──      	    ^^^
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.66: 	oth1: M
//│ ║        	^^^^
//│ ╟── type `#Oth` is not an instance of type `M`
//│ ║  l.47: 	let oth1: Oth
//│ ║        	          ^^^
//│ ╟── but it flows into reference with expected type `M`
//│ ║  l.66: 	oth1: M
//│ ║        	^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.66: 	oth1: M
//│ ╙──      	      ^
//│ M
//│ res
//│     = M { class: [class M extends Object] }
//│ res
//│     = <no result>
//│       oth1 is not implemented

trait Geo { 
  let v: 2 | 3 
  fun get: Int | Bool
  fun ter: Int
}
trait Anemo { 
  let v: 1 | 2
  fun get: Bool | string
  fun ter: Bool
}
//│ trait Geo {
//│   fun get: Int | false | true
//│   fun ter: Int
//│   let v: 2 | 3
//│ }
//│ trait Anemo {
//│   fun get: false | string | true
//│   fun ter: Bool
//│   let v: 1 | 2
//│ }

trait Mixed extends Geo, Anemo
//│ trait Mixed extends Anemo, Geo {
//│   fun get: Bool
//│   fun ter: nothing
//│   let v: 2
//│ }


class C() extends Test {
  fun foo: 1 = 1
  fun bar(x) = x
}
//│ class C() extends Test {
//│   fun bar: forall 'a. 'a -> 'a
//│   fun foo: 1
//│ }

mixin M {
  fun m1 = 3
}
//│ mixin M() {
//│   fun m1: 3
//│ }

class F() extends Oth, M, Mixed {
  fun cool(x) = x === 1
  fun foo = 2
  fun bar(x) = x
  fun get = true
  fun ter = ter
  let a = 3
  let v = 2
}
//│ class F() extends Anemo, Geo, Mixed, Oth, Test {
//│   let a: 3
//│   fun bar: forall 'a. 'a -> 'a
//│   fun cool: Eql[1] -> Bool
//│   fun foo: 2
//│   fun get: true
//│   fun m1: 3
//│   fun ter: nothing
//│   let v: 2
//│ }

let fi = F()
//│ let fi: F
//│ fi
//│    = F {}

fi : Oth & Geo
//│ Geo & Oth
//│ res
//│     = F {}

fi.get
//│ true
//│ res
//│     = true

fi: Test & Anemo
//│ Anemo & Test
//│ res
//│     = F {}

let fog: Oth & Mixed
//│ let fog: Mixed & Oth
//│ fog
//│     = <missing implementation>

fog: Test & Anemo
//│ Anemo & Test
//│ res
//│     = <no result>
//│       fog is not implemented

:e
fog: F
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.190: 	fog: F
//│ ║         	^^^
//│ ╟── type `Mixed & Oth` is not an instance of type `F`
//│ ║  l.178: 	let fog: Oth & Mixed
//│ ║         	         ^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `F`
//│ ║  l.190: 	fog: F
//│ ║         	^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.190: 	fog: F
//│ ╙──       	     ^
//│ F
//│ res
//│     = <no result>
//│       fog is not implemented

let c = C()
//│ let c: C
//│ c
//│   = C {}

c: Eql<C>
//│ Eql[C]
//│ res
//│     = C {}

let ct: Test = c
//│ let ct: Test
//│ ct
//│    = C {}

c.foo
//│ 1
//│ res
//│     = 1

c.bar(true)
//│ true
//│ res
//│     = true

// :d
c: Test
//│ Test
//│ res
//│     = C {}

:e
c: Oth
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.240: 	c: Oth
//│ ║         	^
//│ ╟── application of type `C` is not an instance of type `Oth`
//│ ║  l.208: 	let c = C()
//│ ║         	        ^^^
//│ ╟── but it flows into reference with expected type `#Oth`
//│ ║  l.240: 	c: Oth
//│ ║         	^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.240: 	c: Oth
//│ ╙──       	   ^^^
//│ Oth
//│ res
//│     = C {}

// :d
let c1: Test = C()
//│ let c1: Test
//│ c1
//│    = C {}

// :d
fun fcc(x: C) = x.foo
//│ fun fcc: (x: C) -> 1

fun fc(x: Test) = x
fun ffm(x: F) = x.get
//│ fun fc: (x: Test) -> Test
//│ fun ffm: (x: F) -> true

:e
fun fee(x: Test) = x: Oth
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.273: 	fun fee(x: Test) = x: Oth
//│ ║         	                   ^
//│ ╟── type `#Test` is not an instance of type `Oth`
//│ ║  l.273: 	fun fee(x: Test) = x: Oth
//│ ║         	           ^^^^
//│ ╟── but it flows into reference with expected type `#Oth`
//│ ║  l.273: 	fun fee(x: Test) = x: Oth
//│ ║         	                   ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.273: 	fun fee(x: Test) = x: Oth
//│ ╙──       	                      ^^^
//│ fun fee: (x: Test) -> Oth

fc(c)
//│ Test
//│ res
//│     = C {}

fun fts['a](x: 'a & Test) = x.foo
fts(c)
//│ fun fts: (x: Test) -> Int
//│ Int
//│ res
//│     = 1

fts(oth1)
//│ Int
//│ res
//│     = <no result>
//│       oth1 is not implemented

fts(c1)
//│ Int
//│ res
//│     = 1

trait A1 { fun a1: 1 | 2 | 3 }
trait A2 { fun a1: 2 | 3 | 4 }
//│ trait A1 {
//│   fun a1: 1 | 2 | 3
//│ }
//│ trait A2 {
//│   fun a1: 2 | 3 | 4
//│ }

:e
class Ea1 extends A1, A2 {
  fun a1 = 4
}
//│ ╔══[ERROR] Type mismatch in definition of method a1:
//│ ║  l.322: 	  fun a1 = 4
//│ ║         	      ^^^^^^
//│ ╟── integer literal of type `4` does not match type `1 | 2 | 3`
//│ ║  l.322: 	  fun a1 = 4
//│ ║         	           ^
//│ ╟── but it flows into definition of method a1 with expected type `1 | 2 | 3`
//│ ║  l.322: 	  fun a1 = 4
//│ ║         	      ^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.311: 	trait A1 { fun a1: 1 | 2 | 3 }
//│ ║         	                   ^^^^^^^^^
//│ ╟── from signature of member `a1`:
//│ ║  l.311: 	trait A1 { fun a1: 1 | 2 | 3 }
//│ ╙──       	               ^^^^^^^^^^^^^
//│ class Ea1 extends A1, A2 {
//│   constructor()
//│   fun a1: 4
//│ }

trait Ele {
  fun ce: Oth -> Test
}
//│ trait Ele {
//│   fun ce: Oth -> Test
//│ }

class CE extends Ele {
  fun ce(x) = x
}
//│ class CE extends Ele {
//│   constructor()
//│   fun ce: forall 'a. 'a -> 'a
//│ }

:e
class E1 extends Test {
  fun foo = 2
}
//│ ╔══[ERROR] Member `bar` is declared (or its declaration is inherited) but is not implemented in `E1`
//│ ║  l.360: 	class E1 extends Test {
//│ ║         	      ^^
//│ ╟── Declared here:
//│ ║  l.6: 	  fun bar: Bool -> Bool
//│ ╙──     	  ^^^^^^^^^^^^^^^^^^^^^
//│ class E1 extends Test {
//│   constructor()
//│   fun bar: Bool -> Bool
//│   fun foo: 2
//│ }

:e
trait TE1 extends C
trait TE2 extends M, Test
//│ ╔══[ERROR] A trait can only inherit from other traits
//│ ║  l.376: 	trait TE1 extends C
//│ ╙──       	                  ^
//│ ╔══[ERROR] A trait can only inherit from other traits
//│ ║  l.377: 	trait TE2 extends M, Test
//│ ╙──       	                  ^
//│ trait TE1 extends C, Test
//│ trait TE2 extends Test {
//│   fun bar: Bool -> Bool
//│   fun foo: Int
//│ }

:e
class E2 extends Test {
  fun foo = true
  fun bar(x) = x
}
//│ ╔══[ERROR] Type mismatch in definition of method foo:
//│ ║  l.392: 	  fun foo = true
//│ ║         	      ^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `Int`
//│ ║  l.392: 	  fun foo = true
//│ ║         	            ^^^^
//│ ╟── but it flows into definition of method foo with expected type `Int`
//│ ║  l.392: 	  fun foo = true
//│ ║         	      ^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.5: 	  fun foo: Int
//│ ║       	           ^^^
//│ ╟── from signature of member `foo`:
//│ ║  l.5: 	  fun foo: Int
//│ ╙──     	      ^^^^^^^^
//│ class E2 extends Test {
//│   constructor()
//│   fun bar: forall 'a. 'a -> 'a
//│   fun foo: true
//│ }

:e
class D extends Test[Int], Test[Bool]
//│ ╔══[ERROR] trait Test expects 0 type parameter(s); got 1
//│ ║  l.417: 	class D extends Test[Int], Test[Bool]
//│ ╙──       	                ^^^^^^^^
//│ ╔══[ERROR] trait Test expects 0 type parameter(s); got 1
//│ ║  l.417: 	class D extends Test[Int], Test[Bool]
//│ ╙──       	                           ^^^^^^^^^
//│ ╔══[ERROR] Member `foo` is declared (or its declaration is inherited) but is not implemented in `D`
//│ ║  l.417: 	class D extends Test[Int], Test[Bool]
//│ ║         	      ^
//│ ╟── Declared here:
//│ ║  l.5: 	  fun foo: Int
//│ ╙──     	      ^^^^^^^^
//│ ╔══[ERROR] Member `bar` is declared (or its declaration is inherited) but is not implemented in `D`
//│ ║  l.417: 	class D extends Test[Int], Test[Bool]
//│ ║         	      ^
//│ ╟── Declared here:
//│ ║  l.6: 	  fun bar: Bool -> Bool
//│ ╙──     	      ^^^^^^^^^^^^^^^^^
//│ class D extends Test {
//│   constructor()
//│   fun bar: Bool -> Bool
//│   fun foo: Int
//│ }



trait Base: A | B
class A() extends Base
class B() extends Base
//│ trait Base: A | B
//│ class A() extends Base
//│ class B() extends Base


let b: Base = A()
//│ let b: Base
//│ b
//│   = A {}

b: Base & (A | B)
//│ A & Base | B & Base
//│ res
//│     = A {}

if b is
  A then 0
  B then 1
//│ 0 | 1
//│ res
//│     = 0


fun f(x: Base) = if x is
  A then 0
  B then 1
//│ fun f: (x: Base) -> (0 | 1)

trait Base: Foo | Bar
class Foo[A](val aa: [A, A]) extends Base
class Bar[B](f: B => B) extends Base
//│ trait Base: Bar[?] | Foo[anything]
//│ class Foo[A](aa: [A, A]) extends Base
//│ class Bar[B](f: B -> B) extends Base

let f: Foo = Foo([1, 2])
//│ let f: Foo[anything]
//│ f
//│   = Foo {}

f.aa
//│ [??A, ??A]
//│ res
//│     = [ 1, 2 ]

let b: Base = f
//│ let b: Base
//│ b
//│   = Foo {}

if b is Foo(a) then a else 0
//│ 0 | [??A, ??A]
//│ res
//│     = [ 1, 2 ]

:e // * Note: an error is raised in this case and not above because B is invariant so it can't be widened
if b is Bar(f) then f else 0
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.503: 	if b is Bar(f) then f else 0
//│ ║         	   ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `B` leaks out of its scope
//│ ║  l.477: 	class Bar[B](f: B => B) extends Base
//│ ╙──       	          ^
//│ 0 | (??B & 'B) -> ('B | ??B0)
//│ res
//│     = 0

:e
if b is
  Foo(a) then a
  Bar(f) then f
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.515: 	if b is
//│ ║         	   ^^^^
//│ ║  l.516: 	  Foo(a) then a
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.517: 	  Bar(f) then f
//│ ║         	^^^^^^^^^^^^^^^
//│ ╟── type variable `B` leaks out of its scope
//│ ║  l.477: 	class Bar[B](f: B => B) extends Base
//│ ╙──       	          ^
//│ anything
//│ res
//│     = [ 1, 2 ]

:e
let tt1 = Test
//│ ╔══[ERROR] trait Test cannot be used in term position
//│ ║  l.533: 	let tt1 = Test
//│ ╙──       	          ^^^^
//│ let tt1: error
//│ Code generation encountered an error:
//│   trait used in term position

:e
fun mt(x) = if x is Test then 1 else 0
//│ ╔══[ERROR] Cannot match on trait `Test`
//│ ║  l.542: 	fun mt(x) = if x is Test then 1 else 0
//│ ╙──       	                    ^^^^
//│ fun mt: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

trait Geo
trait ZL extends Geo
trait GL extends Geo
trait WP extends ZL, GL
trait EM extends WP, Geo
//│ trait Geo
//│ trait ZL extends Geo
//│ trait GL extends Geo
//│ trait WP extends GL, Geo, ZL
//│ trait EM extends GL, Geo, WP, ZL

let g: Geo
let z: ZL
let w: WP
let e: EM
//│ let e: EM
//│ let g: Geo
//│ let w: WP
//│ let z: ZL
//│ g
//│   = <missing implementation>
//│ z
//│   = <missing implementation>
//│ w
//│   = <missing implementation>
//│ e
//│   = <missing implementation>

fun fot(x: EM): Geo = x
fun fit(x: EM): WP = x
w: Geo
z: Geo
e: WP
w: ZL & GL
e: ZL & Geo
//│ fun fot: (x: EM) -> Geo
//│ fun fit: (x: EM) -> WP
//│ Geo & ZL
//│ res
//│     = <no result>
//│       w is not implemented
//│ res
//│     = <no result>
//│       z is not implemented
//│ res
//│     = <no result>
//│       e is not implemented
//│ res
//│     = <no result>
//│       w is not implemented
//│ res
//│     = <no result>
//│       e is not implemented

:e
fun fto(w: WP): EM = w
z: WP
g: ZL
e: ZL & WP
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.605: 	fun fto(w: WP): EM = w
//│ ║         	                     ^
//│ ╟── type `#WP` is not an instance of type `EM`
//│ ║  l.605: 	fun fto(w: WP): EM = w
//│ ║         	           ^^
//│ ╟── but it flows into reference with expected type `#EM`
//│ ║  l.605: 	fun fto(w: WP): EM = w
//│ ║         	                     ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.605: 	fun fto(w: WP): EM = w
//│ ╙──       	                ^^
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.606: 	z: WP
//│ ║         	^
//│ ╟── type `#ZL` is not an instance of type `WP`
//│ ║  l.562: 	let z: ZL
//│ ║         	       ^^
//│ ╟── but it flows into reference with expected type `#WP`
//│ ║  l.606: 	z: WP
//│ ║         	^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.606: 	z: WP
//│ ╙──       	   ^^
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.607: 	g: ZL
//│ ║         	^
//│ ╟── type `#Geo` is not an instance of type `ZL`
//│ ║  l.561: 	let g: Geo
//│ ║         	       ^^^
//│ ╟── but it flows into reference with expected type `#ZL`
//│ ║  l.607: 	g: ZL
//│ ║         	^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.607: 	g: ZL
//│ ╙──       	   ^^
//│ fun fto: (w: WP) -> EM
//│ WP & ZL
//│ res
//│     = <no result>
//│       z is not implemented
//│ res
//│     = <no result>
//│       g is not implemented
//│ res
//│     = <no result>
//│       e is not implemented

class Bs(val a: Bool) {
  virtual fun foo(x) = x + 1
}
//│ class Bs(a: Bool) {
//│   fun foo: Int -> Int
//│ }

class Ih() extends Bs(false) {
  fun bar(x) = x
  fun foo(x) = 1
}
//│ class Ih() extends Bs {
//│   fun bar: forall 'a. 'a -> 'a
//│   fun foo: anything -> 1
//│ }

let ih1 = Ih()
//│ let ih1: Ih
//│ ih1
//│     = Ih {}

ih1.foo(1)
//│ 1
//│ res
//│     = 1

ih1: Bs
//│ Bs
//│ res
//│     = Ih {}

ih1.a
//│ false
//│ res
//│     = false

:e
class Eh2 extends Bs(true), Ele {
    fun foo(x) = x && false
    fun ce(x) = x
}
//│ ╔══[ERROR] Type mismatch in definition of method foo:
//│ ║  l.695: 	    fun foo(x) = x && false
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `Int & ?a` is not an instance of type `Bool`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.695: 	    fun foo(x) = x && false
//│ ╙──       	                 ^
//│ ╔══[ERROR] Type mismatch in definition of method foo:
//│ ║  l.695: 	    fun foo(x) = x && false
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `Bool` does not match type `Int | ?a`
//│ ║  l.695: 	    fun foo(x) = x && false
//│ ║         	                 ^^^^^^^^^^
//│ ╟── Note: constraint arises from operator application:
//│ ║  l.658: 	  virtual fun foo(x) = x + 1
//│ ╙──       	                       ^^^^^
//│ ╔══[ERROR] Type mismatch in definition of method foo:
//│ ║  l.695: 	    fun foo(x) = x && false
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `Bool` does not match type `Int | ?a`
//│ ║  l.695: 	    fun foo(x) = x && false
//│ ║         	                 ^^^^^^^^^^
//│ ╟── Note: constraint arises from operator application:
//│ ║  l.658: 	  virtual fun foo(x) = x + 1
//│ ╙──       	                       ^^^^^
//│ class Eh2 extends Bs, Ele {
//│   constructor()
//│   fun ce: forall 'a. 'a -> 'a
//│   fun foo: Bool -> Bool
//│ }

:e
class Eh extends Bs(1)
class Eh1 extends Bs
class Eh3 extends Bs(false), Test
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.730: 	class Eh extends Bs(1)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `Bool`
//│ ║  l.730: 	class Eh extends Bs(1)
//│ ║         	                    ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.657: 	class Bs(val a: Bool) {
//│ ╙──       	                ^^^^
//│ ╔══[ERROR] class Bs expects 1 parameter(s); got 0
//│ ║  l.731: 	class Eh1 extends Bs
//│ ╙──       	                  ^^
//│ ╔══[ERROR] Type mismatch in definition of method foo:
//│ ║  l.658: 	  virtual fun foo(x) = x + 1
//│ ║         	              ^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b. ?b)` is not an instance of type `Int`
//│ ║  l.658: 	  virtual fun foo(x) = x + 1
//│ ║         	                 ^^^^^^^^^^^
//│ ╟── but it flows into definition of method foo with expected type `Int`
//│ ║  l.658: 	  virtual fun foo(x) = x + 1
//│ ║         	              ^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.5: 	  fun foo: Int
//│ ║       	           ^^^
//│ ╟── from signature of member `foo`:
//│ ║  l.5: 	  fun foo: Int
//│ ╙──     	      ^^^^^^^^
//│ ╔══[ERROR] Member `bar` is declared (or its declaration is inherited) but is not implemented in `Eh3`
//│ ║  l.732: 	class Eh3 extends Bs(false), Test
//│ ║         	      ^^^
//│ ╟── Declared here:
//│ ║  l.6: 	  fun bar: Bool -> Bool
//│ ╙──     	  ^^^^^^^^^^^^^^^^^^^^^
//│ class Eh extends Bs {
//│   constructor()
//│   fun foo: Int -> Int
//│ }
//│ class Eh1 extends Bs {
//│   constructor()
//│   fun foo: Int -> Int
//│ }
//│ class Eh3 extends Bs, Test {
//│   constructor()
//│   fun bar: Bool -> Bool
//│   fun foo: Int -> Int
//│ }

class Ca(a: Int) extends Oth {
  fun foo = 1
  fun cool(x) = false
  fun bar(x) = x
}
//│ class Ca(a: Int) extends Oth, Test {
//│   fun bar: forall 'a. 'a -> 'a
//│   fun cool: anything -> false
//│   fun foo: 1
//│ }

class Cx(a2: 1 | 2, val b: Bool) extends Ca(a2)
//│ class Cx(a2: 1 | 2, b: Bool) extends Ca, Oth, Test {
//│   fun bar: forall 'a. 'a -> 'a
//│   fun cool: anything -> false
//│   fun foo: 1
//│ }

class Cx(a: 1 | 2, val b: Bool) extends Ca(a)
//│ class Cx(a: 1 | 2, b: Bool) extends Ca, Oth, Test {
//│   fun bar: forall 'a. 'a -> 'a
//│   fun cool: anything -> false
//│   fun foo: 1
//│ }

let cx1 = Cx(2, true)
//│ let cx1: Cx
//│ cx1
//│     = Cx {}

cx1.bar(cx1.b)
//│ Bool
//│ res
//│     = true

cx1: Test
//│ Test
//│ res
//│     = Cx {}

cx1: Ca
//│ Ca
//│ res
//│     = Cx {}

class Bc1(foo: Int)
class Bc2(bar: Bool)
abstract class Bc3 {
  let baz : Int
}
//│ class Bc1(foo: Int)
//│ class Bc2(bar: Bool)
//│ abstract class Bc3 {
//│   let baz: Int
//│ }

:e
class Bc12() extends Bc1(1), Bc2(true)
//│ ╔══[ERROR] Cannot inherit from more than one base class: Bc1 and Bc2
//│ ║  l.837: 	class Bc12() extends Bc1(1), Bc2(true)
//│ ╙──       	                             ^^^^^^^^^
//│ class Bc12() extends Bc1, Bc2
//│ Code generation encountered an error:
//│   unexpected parent symbol new class Bc2.

class Bc02() extends Bc1(1 : Int) {
  val foo = 2
}
//│ class Bc02() extends Bc1 {
//│   val foo: 2
//│ }

Bc02().foo
//│ 2
//│ res
//│     = 2

:e
class Bc31(baz: Bool) extends Bc3
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.858: 	class Bc31(baz: Bool) extends Bc3
//│ ║         	                ^^^^
//│ ╟── type `Bool` is not an instance of type `Int`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.836: 	  let baz : Int
//│ ║         	            ^^^
//│ ╟── from signature of member `baz`:
//│ ║  l.836: 	  let baz : Int
//│ ╙──       	      ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.873: 	class Bc31(baz: Bool) extends Bc3
//│ ║         	                ^^^^
//│ ╟── type `Bool` is not an instance of type `Int`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.828: 	  let baz : Int
//│ ║         	            ^^^
//│ ╟── from signature of member `baz`:
//│ ║  l.828: 	  let baz : Int
//│ ╙──       	      ^^^^^^^^^
//│ class Bc31(baz: Bool) extends Bc3

class Bc11 extends Bc1(1) {
  let foo = true
}
<<<<<<< HEAD
//│ ╔══[ERROR] Inherited parameter named `foo` is not virtual and cannot be overridden
//│ ║  l.898: 	  let foo = true
//│ ║         	      ^^^^^^^^^^
//│ ╟── Originally declared here:
//│ ║  l.833: 	class Bc1(foo: Int)
//│ ╙──       	          ^^^
||||||| b14bd8d83
//│ ╔══[ERROR] Inherited parameter named `foo` is not virtual and cannot be overridden
//│ ║  l.888: 	  let foo = true
//│ ║         	      ^^^^^^^^^^
//│ ╟── Originally declared here:
//│ ║  l.833: 	class Bc1(foo: Int)
//│ ╙──       	          ^^^
=======
>>>>>>> new-definition-typing
//│ class Bc11 extends Bc1 {
//│   constructor()
//│   let foo: true
//│ }


trait Base[A] { fun f: A -> A }
//│ trait Base[A] {
//│   fun f: A -> A
//│ }

class Der1 extends Base[Int] { fun f(x) = x + 1 }
//│ class Der1 extends Base {
//│   constructor()
//│   fun f: Int -> Int
//│ }

class Der2[A, B] extends Base[[A, B]] { fun f([x, y]) = [x, y] }
//│ class Der2[A, B] extends Base {
//│   constructor()
//│   fun f: forall 'a 'b. (['a, 'b]) -> ['a, 'b]
//│ }

:e
trait BInt extends Base[Int] {
  fun f = error
}
//│ ╔══[ERROR] Method implementations in traits are not yet supported
<<<<<<< HEAD
//│ ║  l.931: 	  fun f = error
||||||| b14bd8d83
//│ ║  l.921: 	  fun f = error
=======
//│ ║  l.899: 	  fun f = error
>>>>>>> new-definition-typing
//│ ╙──       	  ^^^^^^^^^^^^^
//│ trait BInt extends Base {
//│   fun f: nothing
//│ }

trait BPar[T] extends Base[[Int, T]]
//│ trait BPar[T] extends Base {
//│   fun f: 'A -> 'A
//│ }
//│ where
//│   'A := [Int, T]

let bi: BInt
let bp: BPar[Bool]
//│ let bi: BInt
//│ let bp: BPar[Bool]
//│ bi
//│    = <missing implementation>
//│ bp
//│    = <missing implementation>

bp: Base[[Int, Bool]]
//│ Base[[Int, Bool]]
//│ res
//│     = <no result>
//│       bp is not implemented

:e
bp: Base[[Int, Int]]
//│ ╔══[ERROR] Type mismatch in type ascription:
<<<<<<< HEAD
//│ ║  l.963: 	bp: Base[(Int, Int)]
||||||| b14bd8d83
//│ ║  l.953: 	bp: Base[(Int, Int)]
=======
//│ ║  l.931: 	bp: Base[[Int, Int]]
>>>>>>> new-definition-typing
//│ ║         	^^
//│ ╙── expression of type `true` is not an instance of type `Int`
//│ Base[[Int, Int]]
//│ res
//│     = <no result>
//│       bp is not implemented

bi.f(1)
//│ nothing
//│ res
//│     = <no result>
//│       bi is not implemented

bp.f
//│ ([Int, Bool] & 'A) -> ([Int, Bool] | 'A)
//│ res
//│     = <no result>
//│       bp is not implemented

fun fb[T](x: Base[[Int, T]], y: T) = x.f([1, y])
//│ fun fb: forall 'T. (x: Base[[Int, 'T]], y: 'T) -> [Int, 'T]

fb(bp, false)
//│ [Int, Bool]
//│ res
//│     = <no result>
//│       bp is not implemented

class CP() extends BPar[Int] {
  fun f(x) = [x.1, x.0]
}
//│ class CP() extends BPar, Base {
//│   fun f: forall 'a 'b. {0: 'a, 1: 'b} -> ['b, 'a]
//│ }

let cp1 = CP()
//│ let cp1: CP
//│ cp1
//│     = CP {}

fb(cp1, 2)
//│ [Int, Int]
//│ res
//│     = [ 2, 1 ]

trait BInfer1 extends Base
//│ trait BInfer1 extends Base {
//│   fun f: 'A -> 'A
//│ }

trait BInfer2 extends Base {
  fun f: Int -> Int
}
//│ trait BInfer2 extends Base {
//│   fun f: Int -> Int
//│ }

:e
class DerBad1 extends Base[Int, Int]
//│ ╔══[ERROR] trait Base expects 1 type parameter(s); got 2
<<<<<<< HEAD
//│ ║  l.1024: 	class DerBad1 extends Base[Int, Int]
//│ ╙──        	                      ^^^^^^^^^^^^^
||||||| b14bd8d83
//│ ║  l.1014: 	class DerBad1 extends Base[Int, Int]
//│ ╙──        	                      ^^^^^^^^^^^^^
=======
//│ ║  l.992: 	class DerBad1 extends Base[Int, Int]
//│ ╙──       	                      ^^^^^^^^^^^^^
>>>>>>> new-definition-typing
//│ ╔══[ERROR] Member `f` is declared (or its declaration is inherited) but is not implemented in `DerBad1`
<<<<<<< HEAD
//│ ║  l.1024: 	class DerBad1 extends Base[Int, Int]
//│ ║          	      ^^^^^^^
||||||| b14bd8d83
//│ ║  l.1014: 	class DerBad1 extends Base[Int, Int]
//│ ║          	      ^^^^^^^
=======
//│ ║  l.992: 	class DerBad1 extends Base[Int, Int]
//│ ║         	      ^^^^^^^
>>>>>>> new-definition-typing
//│ ╟── Declared here:
<<<<<<< HEAD
//│ ║  l.912: 	trait Base[A] { fun f: A -> A }
||||||| b14bd8d83
//│ ║  l.902: 	trait Base[A] { fun f: A -> A }
=======
//│ ║  l.880: 	trait Base[A] { fun f: A -> A }
>>>>>>> new-definition-typing
//│ ╙──       	                ^^^^^^^^^^^^^
//│ class DerBad1 extends Base {
//│   constructor()
//│   fun f: 'A -> 'A
//│ }
//│ where
//│   'A := Int

:e
class Der2[A, B] extends Base[[A, B]] { fun f([x, y]) = [y, x] }
//│ ╔══[ERROR] Type mismatch in definition of method f:
<<<<<<< HEAD
//│ ║  l.1042: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
||||||| b14bd8d83
//│ ║  l.1032: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
=======
//│ ║  l.1010: 	class Der2[A, B] extends Base[[A, B]] { fun f([x, y]) = [y, x] }
>>>>>>> new-definition-typing
//│ ║          	                                            ^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `B` does not match type `A`
<<<<<<< HEAD
//│ ║  l.1042: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
||||||| b14bd8d83
//│ ║  l.1032: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
=======
//│ ║  l.1010: 	class Der2[A, B] extends Base[[A, B]] { fun f([x, y]) = [y, x] }
>>>>>>> new-definition-typing
//│ ║          	                                                         ^
//│ ╟── Note: constraint arises from type parameter:
<<<<<<< HEAD
//│ ║  l.1042: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
||||||| b14bd8d83
//│ ║  l.1032: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
=======
//│ ║  l.1010: 	class Der2[A, B] extends Base[[A, B]] { fun f([x, y]) = [y, x] }
>>>>>>> new-definition-typing
//│ ║          	           ^
//│ ╟── Note: type parameter B is defined at:
<<<<<<< HEAD
//│ ║  l.1042: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
||||||| b14bd8d83
//│ ║  l.1032: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
=======
//│ ║  l.1010: 	class Der2[A, B] extends Base[[A, B]] { fun f([x, y]) = [y, x] }
>>>>>>> new-definition-typing
//│ ╙──        	              ^
//│ ╔══[ERROR] Type mismatch in definition of method f:
<<<<<<< HEAD
//│ ║  l.1042: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
||||||| b14bd8d83
//│ ║  l.1032: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
=======
//│ ║  l.1010: 	class Der2[A, B] extends Base[[A, B]] { fun f([x, y]) = [y, x] }
>>>>>>> new-definition-typing
//│ ║          	                                            ^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `A` does not match type `B`
<<<<<<< HEAD
//│ ║  l.1042: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
||||||| b14bd8d83
//│ ║  l.1032: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
=======
//│ ║  l.1010: 	class Der2[A, B] extends Base[[A, B]] { fun f([x, y]) = [y, x] }
>>>>>>> new-definition-typing
//│ ║          	                                                            ^
//│ ╟── Note: constraint arises from type parameter:
<<<<<<< HEAD
//│ ║  l.1042: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
||||||| b14bd8d83
//│ ║  l.1032: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
=======
//│ ║  l.1010: 	class Der2[A, B] extends Base[[A, B]] { fun f([x, y]) = [y, x] }
>>>>>>> new-definition-typing
//│ ║          	              ^
//│ ╟── Note: type parameter A is defined at:
<<<<<<< HEAD
//│ ║  l.1042: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
||||||| b14bd8d83
//│ ║  l.1032: 	class Der2[A, B] extends Base[(A, B)] { fun f((x, y)) = (y, x) }
=======
//│ ║  l.1010: 	class Der2[A, B] extends Base[[A, B]] { fun f([x, y]) = [y, x] }
>>>>>>> new-definition-typing
//│ ╙──        	           ^
//│ class Der2[A, B] extends Base {
//│   constructor()
//│   fun f: forall 'a 'b. (['a, 'b]) -> ['b, 'a]
//│ }

trait Ta[T] {
  val p: Bool
  val g: T
}
class K[A](val k: Ta[A])
//│ trait Ta[T] {
//│   val g: T
//│   val p: Bool
//│ }
//│ class K[A](k: Ta[A])

let ta1: Ta[Int]
//│ let ta1: Ta[Int]
//│ ta1
//│     = <missing implementation>

let k1 = K(ta1)
//│ let k1: K[Int]
//│ k1
//│    = <no result>
//│      ta1 is not implemented

k1.k : Ta[Int]
//│ Ta[Int]
//│ res
//│     = <no result>
//│       k1 and ta1 are not implemented

k1.k.g
//│ Int
//│ res
//│     = <no result>
//│       k1 and ta1 are not implemented

k1.k.p
//│ Bool
//│ res
//│     = <no result>
//│       k1 and ta1 are not implemented

:e
trait Tb extends Ta[Int] {
  virtual val p = false
}
//│ ╔══[ERROR] Method implementations in traits are not yet supported
<<<<<<< HEAD
//│ ║  l.1114: 	  virtual val p = false
||||||| b14bd8d83
//│ ║  l.1104: 	  virtual val p = false
=======
//│ ║  l.1082: 	  virtual val p = false
>>>>>>> new-definition-typing
//│ ╙──        	          ^^^^^^^^^^^^^
//│ trait Tb extends Ta {
//│   val g: 'T
//│   val p: false
//│ }
//│ where
//│   'T := Int

class Ctb extends Tb {
  let p = false
  let g = 2
}
//│ class Ctb extends Ta, Tb {
//│   constructor()
//│   let g: 2
//│   let p: false
//│ }

class G1[A](x: A)
//│ class G1[A](x: A)

class GI(x2: Int) extends G1[Int](x2)
//│ class GI(x2: Int) extends G1

trait Oz {
  let age: Int
}
//│ trait Oz {
//│   let age: Int
//│ }

:e
class Fischl(age: Bool) extends Oz
//│ ╔══[ERROR] Type mismatch in type reference:
<<<<<<< HEAD
//│ ║  l.1150: 	class Fischl(age: Bool) extends Oz
||||||| b14bd8d83
//│ ║  l.1140: 	class Fischl(age: Bool) extends Oz
=======
//│ ║  l.1118: 	class Fischl(age: Bool) extends Oz
>>>>>>> new-definition-typing
//│ ║          	                  ^^^^
//│ ╟── type `Bool` is not an instance of type `Int`
//│ ╟── Note: constraint arises from type reference:
<<<<<<< HEAD
//│ ║  l.1143: 	  let age: Int
||||||| b14bd8d83
//│ ║  l.1133: 	  let age: Int
=======
//│ ║  l.1111: 	  let age: Int
>>>>>>> new-definition-typing
//│ ║          	           ^^^
//│ ╟── from signature of member `age`:
<<<<<<< HEAD
//│ ║  l.1143: 	  let age: Int
//│ ╙──        	      ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.1150: 	class Fischl(age: Bool) extends Oz
//│ ║          	                  ^^^^
//│ ╟── type `Bool` is not an instance of type `Int`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.1143: 	  let age: Int
//│ ║          	           ^^^
//│ ╟── from signature of member `age`:
//│ ║  l.1143: 	  let age: Int
||||||| b14bd8d83
//│ ║  l.1133: 	  let age: Int
=======
//│ ║  l.1111: 	  let age: Int
>>>>>>> new-definition-typing
//│ ╙──        	      ^^^^^^^^
//│ class Fischl(age: Bool) extends Oz

class Klee(age: 1 | 2 | 3) extends Oz
//│ class Klee(age: 1 | 2 | 3) extends Oz

class Fate {
    virtual fun foo(x) = x + 1
}
//│ class Fate {
//│   constructor()
//│   fun foo: Int -> Int
//│ }

:e
class Go extends Fate {
    fun foo(x) = x && true
}
//│ ╔══[ERROR] Type mismatch in definition of method foo:
<<<<<<< HEAD
//│ ║  l.1186: 	    fun foo(x) = x && true
||||||| b14bd8d83
//│ ║  l.1166: 	    fun foo(x) = x && true
=======
//│ ║  l.1144: 	    fun foo(x) = x && true
>>>>>>> new-definition-typing
//│ ║          	        ^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `Int & ?a` is not an instance of type `Bool`
//│ ╟── Note: constraint arises from reference:
<<<<<<< HEAD
//│ ║  l.1186: 	    fun foo(x) = x && true
||||||| b14bd8d83
//│ ║  l.1166: 	    fun foo(x) = x && true
=======
//│ ║  l.1144: 	    fun foo(x) = x && true
>>>>>>> new-definition-typing
//│ ╙──        	                 ^
//│ ╔══[ERROR] Type mismatch in definition of method foo:
<<<<<<< HEAD
//│ ║  l.1186: 	    fun foo(x) = x && true
||||||| b14bd8d83
//│ ║  l.1166: 	    fun foo(x) = x && true
=======
//│ ║  l.1144: 	    fun foo(x) = x && true
>>>>>>> new-definition-typing
//│ ║          	        ^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `Bool` does not match type `Int | ?a`
<<<<<<< HEAD
//│ ║  l.1186: 	    fun foo(x) = x && true
||||||| b14bd8d83
//│ ║  l.1166: 	    fun foo(x) = x && true
=======
//│ ║  l.1144: 	    fun foo(x) = x && true
>>>>>>> new-definition-typing
//│ ║          	                 ^^^^^^^^^
//│ ╟── Note: constraint arises from operator application:
<<<<<<< HEAD
//│ ║  l.1177: 	    virtual fun foo(x) = x + 1
||||||| b14bd8d83
//│ ║  l.1157: 	    virtual fun foo(x) = x + 1
=======
//│ ║  l.1135: 	    virtual fun foo(x) = x + 1
>>>>>>> new-definition-typing
//│ ╙──        	                         ^^^^^
//│ ╔══[ERROR] Type mismatch in definition of method foo:
<<<<<<< HEAD
//│ ║  l.1186: 	    fun foo(x) = x && true
||||||| b14bd8d83
//│ ║  l.1166: 	    fun foo(x) = x && true
=======
//│ ║  l.1144: 	    fun foo(x) = x && true
>>>>>>> new-definition-typing
//│ ║          	        ^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `Bool` does not match type `Int | ?a`
<<<<<<< HEAD
//│ ║  l.1186: 	    fun foo(x) = x && true
||||||| b14bd8d83
//│ ║  l.1166: 	    fun foo(x) = x && true
=======
//│ ║  l.1144: 	    fun foo(x) = x && true
>>>>>>> new-definition-typing
//│ ║          	                 ^^^^^^^^^
//│ ╟── Note: constraint arises from operator application:
<<<<<<< HEAD
//│ ║  l.1177: 	    virtual fun foo(x) = x + 1
||||||| b14bd8d83
//│ ║  l.1157: 	    virtual fun foo(x) = x + 1
=======
//│ ║  l.1135: 	    virtual fun foo(x) = x + 1
>>>>>>> new-definition-typing
//│ ╙──        	                         ^^^^^
//│ class Go extends Fate {
//│   constructor()
//│   fun foo: Bool -> Bool
//│ }

class Ha { virtual val x: Int = 1 }
//│ class Ha {
//│   constructor()
//│   val x: Int
//│ }

class Haha(x: 1 | 2) extends Ha
//│ class Haha(x: 1 | 2) extends Ha

:e
class Ohhh(x: Bool) extends Ha
//│ ╔══[ERROR] Type mismatch in type reference:
<<<<<<< HEAD
//│ ║  l.1228: 	class Ohhh(x: Bool) extends Ha
//│ ║          	              ^^^^
//│ ╟── type `Bool` is not an instance of type `Int`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.1218: 	class Ha { virtual val x: Int = 1 }
//│ ╙──        	                          ^^^
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.1228: 	class Ohhh(x: Bool) extends Ha
||||||| b14bd8d83
//│ ║  l.1208: 	class Ohhh(x: Bool) extends Ha
=======
//│ ║  l.1186: 	class Ohhh(x: Bool) extends Ha
>>>>>>> new-definition-typing
//│ ║          	              ^^^^
//│ ╟── type `Bool` is not an instance of type `Int`
//│ ╟── Note: constraint arises from type reference:
<<<<<<< HEAD
//│ ║  l.1218: 	class Ha { virtual val x: Int = 1 }
||||||| b14bd8d83
//│ ║  l.1198: 	class Ha { virtual val x: Int = 1 }
=======
//│ ║  l.1176: 	class Ha { virtual val x: Int = 1 }
>>>>>>> new-definition-typing
//│ ╙──        	                          ^^^
//│ class Ohhh(x: Bool) extends Ha

trait TA[A] { let a : A }
//│ trait TA[A] {
//│   let a: A
//│ }

class G1[A, B](val a: A, val b: B) extends TA[A]
//│ class G1[A, B](a: A, b: B) extends TA

class G2[T](x: T) extends G1[T, Int](x, 1)
//│ class G2[T](x: T) extends G1, TA

let g21 = G2(false)
//│ let g21: G2['T]
//│   where
//│     'T :> false
//│ g21
//│     = G2 {}

g21: G1[Bool, Int]
//│ G1[Bool, Int]
//│ res
//│     = G2 {}

g21.a
//│ Bool
//│ res
//│     = false

g21: TA[Bool]
//│ TA[Bool]
//│ res
//│     = G2 {}
