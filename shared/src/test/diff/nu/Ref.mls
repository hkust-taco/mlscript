:NewDefs


:DontDistributeForalls



// * We should be able to define our own reference type which behaves the same as plain mutable variables, as in:

mut let r = 42
set r = "abc"
r
//│ mut let r: 42 | "abc"
//│ 42 | "abc"
//│ r
//│   = 42
//│ res
//│     = undefined
//│ res
//│     = 'abc'

:e
r + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.23: 	r + 1
//│ ║        	^^^^^
//│ ╟── string literal of type `"abc"` is not an instance of type `Int`
//│ ║  l.11: 	set r = "abc"
//│ ║        	        ^^^^^
//│ ╟── but it flows into reference with expected type `Int`
//│ ║  l.23: 	r + 1
//│ ╙──      	^
//│ error | Int
//│ res
//│     = 'abc1'


// * The definition:

class Ref[A](init: A) { mut val value: A = init }
//│ class Ref[A](init: A) {
//│   mut val value: A
//│ }

let r = Ref(42)
//│ let r: Ref['A]
//│   where
//│     'A :> 42
//│ r
//│   = Ref {}

set r.value = "abc"
//│ ()
//│ res
//│     = undefined

r.value
//│ "abc" | 42
//│ res
//│     = 'abc'

:e
r.value + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.63: 	r.value + 1
//│ ║        	^^^^^^^^^^^
//│ ╟── string literal of type `"abc"` is not an instance of type `Int`
//│ ║  l.52: 	set r.value = "abc"
//│ ║        	              ^^^^^
//│ ╟── but it flows into field selection with expected type `Int`
//│ ║  l.63: 	r.value + 1
//│ ╙──      	^^^^^^^
//│ error | Int
//│ res
//│     = 'abc1'



// * Below are some variations on Ref, for testing purposes.


class Ref() { mut val value = 0 }
//│ class Ref() {
//│   mut val value: 0
//│ }


let r = Ref()
//│ let r: Ref
//│ r
//│   = Ref {}

:e
set r.value = "abc"
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.94: 	set r.value = "abc"
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"abc"` does not match type `0`
//│ ║  l.94: 	set r.value = "abc"
//│ ║        	              ^^^^^
//│ ╟── Note: constraint arises from integer literal:
//│ ║  l.82: 	class Ref() { mut val value = 0 }
//│ ║        	                              ^
//│ ╟── from assigned selection:
//│ ║  l.94: 	set r.value = "abc"
//│ ╙──      	    ^^^^^^^
//│ ()
//│ res
//│     = undefined

r.value
//│ 0
//│ res
//│     = 'abc'

class Ref() { mut val value = 0; fun foo = set value = 42 }
//│ class Ref() {
//│   fun foo: ()
//│   mut val value: 42 | 0
//│ }

set r.value = 0
//│ ()
//│ res
//│     = undefined

set r.value = 42
//│ ()
//│ res
//│     = undefined

:e
set r.value = 666
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.133: 	set r.value = 666
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `666` does not match type `42 | 0`
//│ ║  l.133: 	set r.value = 666
//│ ║         	              ^^^
//│ ╟── Note: constraint arises from definition of value value:
//│ ║  l.116: 	class Ref() { mut val value = 0; fun foo = set value = 42 }
//│ ║         	                      ^^^^^^^^^
//│ ╟── from assigned selection:
//│ ║  l.133: 	set r.value = 666
//│ ╙──       	    ^^^^^^^
//│ ()
//│ res
//│     = undefined


:e // * TODO better error...
class Ref() { mut val value = 0; constructor() { set value = 42 } }
//│ ╔══[ERROR] Illegal assignment
//│ ║  l.152: 	class Ref() { mut val value = 0; constructor() { set value = 42 } }
//│ ║         	                                                 ^^^^^^^^^^^^^^
//│ ╟── cannot assign to reference
//│ ║  l.152: 	class Ref() { mut val value = 0; constructor() { set value = 42 } }
//│ ╙──       	                                                     ^^^^^
//│ class Ref() {
//│   constructor()
//│   mut val value: 0
//│ }

set r.value = 0
//│ ()
//│ res
//│     = undefined

:e
set r.value = 42
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.170: 	set r.value = 42
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `42` does not match type `0`
//│ ║  l.170: 	set r.value = 42
//│ ║         	              ^^
//│ ╟── Note: constraint arises from integer literal:
//│ ║  l.152: 	class Ref() { mut val value = 0; constructor() { set value = 42 } }
//│ ║         	                              ^
//│ ╟── from assigned selection:
//│ ║  l.170: 	set r.value = 42
//│ ╙──       	    ^^^^^^^
//│ ()
//│ res
//│     = undefined


class Ref() { mut val value = 0; fun foo(x) = set value = x }
//│ class Ref() {
//│   fun foo: 0 -> ()
//│   mut val value: 0
//│ }

class Ref[A](init: A) { mut val value = (); fun foo(x) = set value = x }
//│ class Ref[A](init: A) {
//│   fun foo: () -> ()
//│   mut val value: ()
//│ }

class Ref[A](init: A) { mut val value = (); fun foo(x: A) = set value = x }
//│ class Ref[A](init: A) {
//│   fun foo: (x: A) -> ()
//│   mut val value: A | ()
//│ }

class Ref[A](init: A) { mut val value = init; fun foo(x) = set value = x }
//│ class Ref[A](init: A) {
//│   fun foo: A -> ()
//│   mut val value: A
//│ }


abstract class B[A]() { fun value: A; fun get = this.value }
class Ref() extends B { mut val value = 0; fun foo = set value = 42 }
//│ abstract class B[A]() {
//│   fun get: A
//│   fun value: A
//│ }
//│ class Ref() extends B {
//│   fun foo: ()
//│   fun get: 'A
//│   mut val value: 42 | 0
//│ }
//│ where
//│   'A :> 42 | 0

let r = Ref()
//│ let r: Ref
//│ r
//│   = Ref {}

r : B['a]
//│ B['a]
//│   where
//│     'a :> 0 | 42
//│ res
//│     = Ref {}

r.value
//│ 42 | 0
//│ res
//│     = 0

set r.value = 42
//│ ()
//│ res
//│     = undefined

r.get
//│ 42 | 0
//│ res
//│     = 42


abstract class B[A]() { mut val value: A; fun get = this.value }
//│ abstract class B[A]() {
//│   fun get: A
//│   mut val value: A
//│ }

class Ref extends B { mut val value = 123 }
//│ class Ref extends B {
//│   constructor()
//│   fun get: 'A
//│   mut val value: 123
//│ }
//│ where
//│   'A :> 123

let r = new Ref
//│ let r: Ref
//│ r
//│   = Ref {}

r : B['a]
//│ B['a]
//│   where
//│     'a :> 123
//│ res
//│     = Ref {}

r.value
//│ 123
//│ res
//│     = 123

set r.value = 123
//│ ()
//│ res
//│     = undefined

r.get
//│ 123
//│ res
//│     = 123


fun g(b: B['a]) = b.get
//│ fun g: forall 'a. (b: B['a]) -> 'a

// :e // FIXME this should not work...
class Ref extends B { mut val value = 123; fun c = g(this) + 1; fun d = set value = "oops" }
//│ class Ref extends B {
//│   constructor()
//│   fun c: Int
//│   fun d: ()
//│   fun get: 'A
//│   mut val value: "oops" | 123
//│ }
//│ where
//│   'A :> "oops" | 123

let r = new Ref
//│ let r: Ref
//│ r
//│   = Ref {}

r.c
//│ Int
//│ res
//│     = 124

r.d
//│ ()
//│ res
//│     = undefined

r.value
//│ "oops" | 123
//│ res
//│     = 'oops'

// * FIXME Runtime type confusion!
r.c
//│ Int
//│ res
//│     = 'oops1'


:e
class Ref() extends B
//│ ╔══[ERROR] Member `value` is declared (or its declaration is inherited) but is not implemented in `Ref`
//│ ║  l.341: 	class Ref() extends B
//│ ║         	      ^^^
//│ ╟── Declared here:
//│ ║  l.255: 	abstract class B[A]() { mut val value: A; fun get = this.value }
//│ ╙──       	                            ^^^^^^^^^^^^
//│ class Ref() extends B {
//│   fun get: 'A
//│   mut val value: 'A
//│ }

:e
class Ref extends B { mut val value = 123; fun c = this.get + 1 }
//│ ╔══[ERROR] Indirectly-recursive member should have a type signature
//│ ║  l.354: 	class Ref extends B { mut val value = 123; fun c = this.get + 1 }
//│ ╙──       	                                                       ^^^^
//│ class Ref extends B {
//│   constructor()
//│   fun c: Int
//│   fun get: 'A
//│   mut val value: 123
//│ }
//│ where
//│   'A :> 123


:e
abstract class R() { mut val value: _ }
//│ ╔══[ERROR] type identifier not found: _
//│ ║  l.369: 	abstract class R() { mut val value: _ }
//│ ╙──       	                                    ^
//│ abstract class R() {
//│   mut val value: error
//│ }

abstract class R() { mut val value: Int }
//│ abstract class R() {
//│   mut val value: Int
//│ }

abstract class R() { mut val value: 'a }
//│ abstract class R() {
//│   mut val value: nothing
//│ }


:e
trait Foo { mut val v = 0 }
//│ ╔══[ERROR] Method implementations in traits are not yet supported
//│ ║  l.389: 	trait Foo { mut val v = 0 }
//│ ╙──       	                ^^^^^^^^^
//│ trait Foo {
//│   mut val v: 0
//│ }


