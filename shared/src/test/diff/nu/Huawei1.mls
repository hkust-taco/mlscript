:NewDefs


class C[A](x: A) {
  fun foo = x
}
//│ class C[A](x: A) {
//│   fun foo: A
//│ }

let c = C(123)
//│ let c: C['A]
//│   where
//│     'A :> 123
//│ c
//│   = C {}

class B
//│ class B {
//│   constructor()
//│ }

fun bar(c) = if c is
  C(y) then y
  B    then 0
//│ fun bar: forall 'a. (B | C['a]) -> (0 | 'a)

bar(c)
//│ 0 | 123
//│ res
//│     = 123

fun bar(c) = if c is
    C(y) then y + 1
    B    then 0
  else 1
//│ fun bar: (C[Int] | Object & ~#C) -> Int

bar(c)
//│ Int
//│ res
//│     = 124

:e
bar(C(true))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.45: 	bar(C(true))
//│ ║        	^^^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `Int`
//│ ║  l.45: 	bar(C(true))
//│ ║        	      ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.34: 	    C(y) then y + 1
//│ ║        	              ^
//│ ╟── from field selection:
//│ ║  l.4: 	class C[A](x: A) {
//│ ║       	           ^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.4: 	class C[A](x: A) {
//│ ╙──     	        ^
//│ Int | error
//│ res
//│     = 2

