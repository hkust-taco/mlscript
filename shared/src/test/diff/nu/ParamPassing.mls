:NewDefs


class Foo(x: Int)
//│ class Foo(x: Int)

class Bar(z: Int, y: Int) extends Foo(z + y)
//│ class Bar(z: Int, y: Int) extends Foo

class Bar(x: Int, y: Int) extends Foo(x + y)
//│ class Bar(x: Int, y: Int) extends Foo


class Foo(val x: Int)
//│ class Foo(x: Int)

module Bar extends Foo(11)
Bar.x
//│ module Bar extends Foo
//│ 11
//│ res
//│     = 11

:e // FIXME
module Bar extends Foo(11) { fun get = this.x }
//│ ╔══[ERROR] Indirectly-recursive member should have a type signature
//│ ║  l.25: 	module Bar extends Foo(11) { fun get = this.x }
//│ ╙──      	                                           ^^
//│ module Bar extends Foo {
//│   fun get: error
//│ }


mixin AA(a: Int) {
}
//│ mixin AA(a: Int)

mixin BB {}
//│ mixin BB()


class C(x: Int) extends BB
//│ class C(x: Int)

class D(x: Int) extends AA(x)
//│ class D(x: Int)

class E(x: Int) extends BB, AA(x)
//│ class E(x: Int)


class Foo(x: Int)
//│ class Foo(x: Int)

:e
Foo(1).x
//│ ╔══[ERROR] Parameter 'x' cannot be accessed as a field
//│ ║  l.56: 	Foo(1).x
//│ ║        	      ^^
//│ ╟── Either make the parameter a `val` or access it through destructuring
//│ ║  l.52: 	class Foo(x: Int)
//│ ╙──      	          ^
//│ Int | error
//│ res
//│     = undefined

:e
Foo(1).#x
//│ ╔══[ERROR] identifier not found: .#
//│ ║  l.68: 	Foo(1).#x
//│ ╙──      	      ^^
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.68: 	Foo(1).#x
//│ ╙──      	        ^
//│ error
//│ Code generation encountered an error:
//│   unresolved symbol .#

if Foo(1) is Foo(x) then x
//│ Int
//│ res
//│     = 1


class Foo(val x: Int)
//│ class Foo(x: Int)

Foo(1).x
//│ Int
//│ res
//│     = 1

if Foo(1) is Foo(x) then x
//│ Int
//│ res
//│     = 1


:e
class Bar(x: Int) extends Foo(x)
//│ ╔══[ERROR] Inherited parameter named 'x' is not virtual and cannot be overridden
//│ ║  l.100: 	class Bar(x: Int) extends Foo(x)
//│ ║         	          ^
//│ ╟── Originally declared here:
//│ ║  l.85: 	class Foo(val x: Int)
//│ ╙──      	              ^
//│ class Bar(x: Int) extends Foo

:e
Bar(11).x
//│ ╔══[ERROR] Parameter 'x' cannot be accessed as a field
//│ ║  l.110: 	Bar(11).x
//│ ║         	       ^^
//│ ╟── Either make the parameter a `val` or access it through destructuring
//│ ║  l.100: 	class Bar(x: Int) extends Foo(x)
//│ ╙──       	          ^
//│ Int | error
//│ res
//│     = 11


:e
class Bar(val x: Int) extends Foo(x + 1)
//│ ╔══[ERROR] Inherited parameter named 'x' is not virtual and cannot be overridden
//│ ║  l.123: 	class Bar(val x: Int) extends Foo(x + 1)
//│ ║         	              ^
//│ ╟── Originally declared here:
//│ ║  l.85: 	class Foo(val x: Int)
//│ ╙──      	              ^
//│ class Bar(x: Int) extends Foo

Bar(11).x
//│ Int
//│ res
//│     = 11

:e
class Bar extends Foo(1) { val x: 2 }
//│ ╔══[ERROR] Inherited parameter named 'x' is not virtual and cannot be overridden
//│ ║  l.138: 	class Bar extends Foo(1) { val x: 2 }
//│ ║         	                           ^^^^^^^^
//│ ╟── Originally declared here:
//│ ║  l.85: 	class Foo(val x: Int)
//│ ╙──      	              ^
//│ class Bar extends Foo {
//│   constructor()
//│   val x: 2
//│ }

:e
module Bar extends Foo(1) { fun x = 2 }
//│ ╔══[ERROR] Inherited parameter named 'x' is not virtual and cannot be overridden
//│ ║  l.151: 	module Bar extends Foo(1) { fun x = 2 }
//│ ║         	                                ^^^^^
//│ ╟── Originally declared here:
//│ ║  l.85: 	class Foo(val x: Int)
//│ ╙──      	              ^
//│ module Bar extends Foo {
//│   fun x: 2
//│ }


class A(val x: Int)
//│ class A(x: Int)

module B extends A(42)
//│ module B extends A

B.x
//│ 42
//│ res
//│     = 42


class A(x: Int)
//│ class A(x: Int)

module B extends A(42)
//│ module B extends A

:e
B.x
//│ ╔══[ERROR] Parameter 'x' cannot be accessed as a field
//│ ║  l.182: 	B.x
//│ ║         	 ^^
//│ ╟── Either make the parameter a `val` or access it through destructuring
//│ ║  l.175: 	class A(x: Int)
//│ ╙──       	        ^
//│ Int | error
//│ res
//│     = undefined



abstract class Foo[A](val x: A) { fun y = x; fun i: A -> A }
//│ abstract class Foo[A](x: A) {
//│   fun i: A -> A
//│   fun y: A
//│ }

abstract class Bar extends Foo(0)
//│ abstract class Bar extends Foo {
//│   fun i: 'A -> 'A
//│   fun y: 'A
//│ }
//│ where
//│   'A :> 0

module Baz extends Foo(0) { fun i = id }
[Baz.x, Baz.i]
//│ module Baz extends Foo {
//│   fun i: forall 'a. 'a -> 'a
//│   fun y: 'A
//│ }
//│ [0, forall 'a. 'a -> 'a]
//│ where
//│   'A :> 0
//│ res
//│     = [ 0, [Function: id] ]

:e
module Bazz extends Foo(0) {
  val x: 2
}
//│ ╔══[ERROR] Inherited parameter named 'x' is not virtual and cannot be overridden
//│ ║  l.223: 	  val x: 2
//│ ║         	  ^^^^^^^^
//│ ╟── Originally declared here:
//│ ║  l.195: 	abstract class Foo[A](val x: A) { fun y = x; fun i: A -> A }
//│ ╙──       	                          ^
//│ ╔══[ERROR] Member `i` is declared (or its declaration is inherited) but is not implemented in `Bazz`
//│ ║  l.222: 	module Bazz extends Foo(0) {
//│ ║         	       ^^^^
//│ ╟── Declared here:
//│ ║  l.195: 	abstract class Foo[A](val x: A) { fun y = x; fun i: A -> A }
//│ ╙──       	                                             ^^^^^^^^^^^^^
//│ module Bazz extends Foo {
//│   fun i: 'A -> 'A
//│   val x: 2
//│   fun y: 'A
//│ }
//│ where
//│   'A :> 0


