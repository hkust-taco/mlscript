:NewDefs


:js
fun f(x) = x > 0 && f(x - 1)
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.5: 	fun f(x) = x > 0 && f(x - 1)
//│ ║       	           ^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `number`
//│ ║  l.5: 	fun f(x) = x > 0 && f(x - 1)
//│ ╙──     	               ^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.5: 	fun f(x) = x > 0 && f(x - 1)
//│ ║       	                      ^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `int`
//│ ║  l.5: 	fun f(x) = x > 0 && f(x - 1)
//│ ╙──     	                          ^
//│ fun f: int -> bool
//│ // Prelude
//│ let res;
//│ class TypingUnit {}
//│ const typing_unit = new TypingUnit;
//│ // Query 1
//│ globalThis.f = function f(x) {
//│   return x > 0 && f(x - 1);
//│ };
//│ // End of generated code

f(12)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.29: 	f(12)
//│ ║        	^^^^^
//│ ╟── integer literal of type `12` is not an instance of type `int`
//│ ║  l.29: 	f(12)
//│ ║        	  ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.5: 	fun f(x) = x > 0 && f(x - 1)
//│ ╙──     	                      ^
//│ bool | error
//│ res
//│     = false

:js
let rec f(x) = x > 0 && f(x - 1)
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.44: 	let rec f(x) = x > 0 && f(x - 1)
//│ ║        	               ^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `number`
//│ ║  l.44: 	let rec f(x) = x > 0 && f(x - 1)
//│ ╙──      	                   ^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.44: 	let rec f(x) = x > 0 && f(x - 1)
//│ ║        	                          ^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `int`
//│ ║  l.44: 	let rec f(x) = x > 0 && f(x - 1)
//│ ╙──      	                              ^
//│ let rec f: int -> bool
//│ // Prelude
//│ class TypingUnit2 {}
//│ const typing_unit2 = new TypingUnit2;
//│ // Query 1
//│ globalThis.f1 = function f1(x) {
//│   return x > 0 && f1(x - 1);
//│ };
//│ // End of generated code
//│ f
//│   = [Function: f1]

f(12)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.69: 	f(12)
//│ ║        	^^^^^
//│ ╟── integer literal of type `12` is not an instance of type `int`
//│ ║  l.69: 	f(12)
//│ ║        	  ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.44: 	let rec f(x) = x > 0 && f(x - 1)
//│ ╙──      	                          ^
//│ bool | error
//│ res
//│     = false

:js
let rec f() =
  f()
//│ let rec f: () -> nothing
//│ // Prelude
//│ class TypingUnit4 {}
//│ const typing_unit4 = new TypingUnit4;
//│ // Query 1
//│ globalThis.f2 = function f2() {
//│   return ((() => {
//│     return f2();
//│   })());
//│ };
//│ // End of generated code
//│ f
//│   = [Function: f2]

:re
f()
//│ nothing
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// TODO (for later) this should be rejected by the type checker
:ge
:js
let rec f =
  f
//│ let rec f: nothing
//│ Code generation encountered an error:
//│   unguarded recursive use of by-value binding f

:re
:js
f
//│ nothing
//│ // Prelude
//│ class TypingUnit7 {}
//│ const typing_unit7 = new TypingUnit7;
//│ // Query 1
//│ res = f3;
//│ // End of generated code
//│ res
//│ Runtime error:
//│   ReferenceError: f3 is not defined

:p
let rec f = 1
//│ |#let| |#rec| |f| |#=| |1|
//│ Parsed: let rec f = 1;
//│ let rec f: 1
//│ f
//│   = 1

let rec f =
  1
//│ let rec f: 1
//│ f
//│   = 1


// FIXME should work
// No recursion:
let foo = 1
let foo = foo + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.148: 	let foo = foo + 1
//│ ║         	          ^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `int`
//│ ║  l.148: 	let foo = foo + 1
//│ ╙──       	                ^
//│ let foo: 1
//│ let foo: error | int
//│ foo
//│     = 1
//│ foo
//│     = 2


