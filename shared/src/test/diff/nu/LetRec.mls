:NewDefs


:js
fun f(x) = x > 0 && f(x - 1)
//│ fun f: Int -> Bool
//│ // Prelude
//│ let res;
//│ class TypingUnit {}
//│ const typing_unit = new TypingUnit;
//│ // Query 1
//│ globalThis.f = function f(x) {
//│   return x > 0 && f(x - 1);
//│ };
//│ // End of generated code

f(12)
//│ Bool
//│ res
//│     = false

:js
let rec f(x) = x > 0 && f(x - 1)
//│ let rec f: Int -> Bool
//│ // Prelude
//│ class TypingUnit2 {}
//│ const typing_unit2 = new TypingUnit2;
//│ // Query 1
//│ globalThis.f1 = function f1(x) {
//│   return x > 0 && f1(x - 1);
//│ };
//│ // End of generated code
//│ f
//│   = [Function: f1]

f(12)
//│ Bool
//│ res
//│     = false

:js
let rec f() =
  f()
//│ let rec f: () -> nothing
//│ // Prelude
//│ class TypingUnit4 {}
//│ const typing_unit4 = new TypingUnit4;
//│ // Query 1
//│ globalThis.f2 = function f2() {
//│   return ((() => {
//│     return f2();
//│   })());
//│ };
//│ // End of generated code
//│ f
//│   = [Function: f2]

:re
f()
//│ nothing
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// :e // TODO this should be rejected by the type checker
:ge
:js
let rec f =
  f
//│ let rec f: nothing
//│ Code generation encountered an error:
//│   unguarded recursive use of by-value binding f

:re
:js
f
//│ nothing
//│ // Prelude
//│ class TypingUnit7 {}
//│ const typing_unit7 = new TypingUnit7;
//│ // Query 1
//│ res = f3;
//│ // End of generated code
//│ res
//│ Runtime error:
//│   ReferenceError: f3 is not defined

// :e // TODO this should be rejected by the type checker
:ge
:js
fun test =
  let rec f =
    f
//│ fun test: ()
//│ Code generation encountered an error:
//│   unguarded recursive use of by-value binding f

fun test =
  let rec f() = f()
//│ fun test: ()

fun test =
  let rec lol = () => lol
//│ fun test: ()

fun test =
  let rec lol() = lol
  lol
//│ fun test: forall 'lol. 'lol
//│   where
//│     'lol :> () -> 'lol

let rec lol = () => lol
//│ let rec lol: forall 'lol. 'lol
//│   where
//│     'lol :> () -> 'lol
//│ lol
//│     = [Function: lol]

:p
let rec f = 1
//│ |#let| |#rec| |f| |#=| |1|
//│ AST: TypingUnit(NuFunDef(Some(true), f, None, [], IntLit(1)))
//│ Parsed: let rec f = 1;
//│ let rec f: 1
//│ f
//│   = 1

let rec f =
  1
//│ let rec f: 1
//│ f
//│   = 1


// :e // FIXME
:ge
let foo = foo
//│ let foo: nothing
//│ Code generation encountered an error:
//│   unguarded recursive use of by-value binding foo


// FIXME should work
// No recursion:
let foo = 1
let foo = foo + 1
//│ let foo: 1
//│ let foo: Int
//│ foo
//│     = 1
//│ foo
//│     = 2


// FIXME
let foo = foo.x
//│ let foo: nothing
//│ Code generation encountered an error:
//│   unguarded recursive use of by-value binding foo

// :e // FIXME
:ge
foo()()
//│ nothing
//│ Code generation encountered an error:
//│   unguarded recursive use of by-value binding foo


