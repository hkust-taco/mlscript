:NewParser

:js
fun f(x) = x > 0 && f(x - 1)
//│ // Prelude
//│ let res;
//│ // Query 1
//│ globalThis.f = function f(x) {
//│   return x > 0 && f(x - 1);
//│ };
//│ // End of generated code
//│ f: int -> bool
//│  = [Function: f]

f(12)
//│ res: bool
//│    = false

// FIXME this should be allowed since it's a function!
:js
let rec f(x) = x > 0 && f(x - 1)
//│ f: int -> bool
//│ Code generation encountered an error:
//│   recursive by-value use of f is forbidden

// FIXME this should be allowed since it's a function!
f(12)
//│ res: bool
//│ Code generation encountered an error:
//│   recursive by-value use of f is forbidden

// FIXME this should be allowed since it's a function!
:js
let rec f() =
  f()
//│ f: () -> nothing
//│ Code generation encountered an error:
//│   recursive by-value use of f is forbidden

:ge
f()
//│ res: nothing
//│ Code generation encountered an error:
//│   recursive by-value use of f is forbidden

// TODO (for later) this should be rejected by the type checker
:js
let rec f =
  f
//│ f: nothing
//│ Code generation encountered an error:
//│   recursive by-value use of f is forbidden

// FIXME this is not a recursive use!
f
//│ res: nothing
//│ Code generation encountered an error:
//│   recursive by-value use of f is forbidden




