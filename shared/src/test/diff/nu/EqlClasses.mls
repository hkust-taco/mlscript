:NewDefs



module Mod
//│ module Mod

:e
Mod === Mod
//│ ╔══[ERROR] Module 'Mod' does not support equality comparison because it does not have a parameter list
//│ ║  l.9: 	Mod === Mod
//│ ╙──     	^^^^^^^^^^^
//│ error | false | true
//│ res
//│     = true


class Cls1()
//│ class Cls1()

Cls1() === Cls1()
//│ Bool
//│ res
//│     = false


class Cls2(x: Int)
//│ class Cls2(x: Int)

:e // TODO better error – or actually only support data classes
Cls2(0) === Cls2(1)
//│ ╔══[ERROR] Parameter 'x' cannot tbe accessed as a field
//│ ║  l.27: 	class Cls2(x: Int)
//│ ║        	           ^
//│ ╟── Either make the parameter a `val` or access it through destructuring
//│ ║  l.27: 	class Cls2(x: Int)
//│ ╙──      	           ^
//│ error | false | true
//│ res
//│     = false


class Cls2(val x: Int)
//│ class Cls2(x: Int)

Cls2(0) === Cls2(1)
//│ Bool
//│ res
//│     = false



class Pair[A](val fst: A, val snd: A)
//  extends (A <: Eql[A]) => Eql[Pair[A]]
//│ class Pair[A](fst: A, snd: A)

let p = Pair(1, 2)
//│ let p: Pair[1 | 2]
//│ p
//│   = Pair {}

p === p
//│ Bool
//│ res
//│     = true


x => p === x
//│ {fst: Eql[1 | 2], snd: Eql[1 | 2]} -> Bool
//│ res
//│     = [Function: res]

x => x === p
//│ Eql[Pair[1 | 2]] -> Bool
//│ res
//│     = [Function: res]

p === { fst: 1, snd: 2 }
//│ Bool
//│ res
//│     = false

:e
{ fst: 1, snd: 2 } === p
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.84: 	{ fst: 1, snd: 2 } === p
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── record literal of type `{fst: 1, snd: 2}` is not an instance of type `Eql`
//│ ║  l.84: 	{ fst: 1, snd: 2 } === p
//│ ╙──      	       ^^^^^^^^^
//│ error | false | true
//│ res
//│     = false

let r = {x: 42, y: y => y}
//│ let r: {x: 42, y: forall 'a. 'a -> 'a}
//│ r
//│   = { x: 42, y: [Function: y] }

r : {x: Int}
//│ {x: Int}
//│ res
//│     = { x: 42, y: [Function: y] }


:e
x => { a: 0 } === x
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.107: 	x => { a: 0 } === x
//│ ║         	     ^^^^^^^^^^^^^^
//│ ╟── record literal of type `{a: 0}` is not an instance of type `Eql`
//│ ║  l.107: 	x => { a: 0 } === x
//│ ╙──       	          ^
//│ anything -> (error | false | true)
//│ res
//│ Syntax error:
//│   Unexpected token '==='

x => x === { a: 0 }
//│ Eql[{a: 0}] -> Bool
//│ res
//│     = [Function: res]



let q = Pair(1, "oops")
//│ let q: Pair["oops" | 1]
//│ q
//│   = Pair {}

:e
q === q
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.132: 	q === q
//│ ║         	^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `Str`
//│ ║  l.126: 	let q = Pair(1, "oops")
//│ ╙──       	             ^
//│ error | false | true
//│ res
//│     = true


class Pair2[A, B](val fst: A, val snd: B)
//│ class Pair2[A, B](fst: A, snd: B)

let q = Pair2(1, "oops")
//│ let q: Pair2[1, "oops"]
//│ q
//│   = Pair2 {}

q === q
//│ Bool
//│ res
//│     = true



class MP[Col](val color: Col)
//│ class MP[Col](color: Col)

val mp = MP(1)
//│ val mp: MP[1]
//│ mp
//│    = MP {}

mp === mp
//│ Bool
//│ res
//│     = true

fun cmp(lhs, rhs) = lhs.color === rhs.color
//│ fun cmp: forall 'a. ({color: Eql['a]}, {color: 'a}) -> Bool

cmp(mp, mp)
//│ Bool
//│ res
//│     = true

module Mix {
  fun compare(lhs, rhs) = (lhs.color === rhs.color)
}
module Comp extends Mix
//│ module Mix {
//│   fun compare: forall 'a. ({color: Eql['a]}, {color: 'a}) -> Bool
//│ }
//│ module Comp extends Mix {
//│   fun compare: forall 'b. ({color: Eql['b]}, {color: 'b}) -> Bool
//│ }

Comp.compare(mp, mp)
//│ Bool
//│ res
//│     = true




// *** NOTES ***

// * Intended type for comparing Cons:
// Eql[Cons & { head: Eql['h], tail: Eql['t] } | ~Cons & List]


// * Original code
// x: Int
// y: Int
// x == y

// * Refactored code (we want an error)
// x: Option[Int]
// y: Int
// x == y
// -->
// x.exists(_ == y)

// * Should not be equatable:
// Int | Option[Int]


