:NewDefs



module Mod
//│ module Mod()

Mod === Mod
//│ Bool
//│ res
//│     = true


class Cls1()
//│ class Cls1()

Cls1() === Cls1()
//│ Bool
//│ res
//│     = false


class Cls2(x: int)
//│ class Cls2(x: int)

Cls2(0) === Cls2(1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.26: 	Cls2(0) === Cls2(1)
//│ ║        	^^^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `int`
//│ ║  l.26: 	Cls2(0) === Cls2(1)
//│ ║        	     ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.23: 	class Cls2(x: int)
//│ ╙──      	              ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.26: 	Cls2(0) === Cls2(1)
//│ ║        	            ^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `int`
//│ ║  l.26: 	Cls2(0) === Cls2(1)
//│ ║        	                 ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.23: 	class Cls2(x: int)
//│ ╙──      	              ^^^
//│ Bool
//│ res
//│     = false



class Pair[A](fst: A, snd: A)
//  extends (A <: Eql[A]) => Eql[Pair[A]]
//│ class Pair[A](fst: A, snd: A)

let p = Pair(1, 2)
//│ let p: Pair[1 | 2]
//│ p
//│   = Pair {}

p === p
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.60: 	p === p
//│ ║        	^^^^^^^
//│ ╟── integer literal of type `2` is not an instance of type `Eql`
//│ ║  l.55: 	let p = Pair(1, 2)
//│ ╙──      	                ^
//│ error
//│ res
//│     = true


x => p === x
//│ {fst: Eql[1 | 2], snd: Eql[1 | 2]} -> Bool
//│ res
//│     = [Function: res]

x => x === p
//│ Eql[Pair[1 | 2]] -> Bool
//│ res
//│     = [Function: res]

p === { fst: 1, snd: 2 }
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.82: 	p === { fst: 1, snd: 2 }
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `2` is not an instance of type `Eql`
//│ ║  l.82: 	p === { fst: 1, snd: 2 }
//│ ╙──      	                     ^
//│ error
//│ res
//│     = false

:e
{ fst: 1, snd: 2 } === p
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.94: 	{ fst: 1, snd: 2 } === p
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── record literal of type `{fst: 1, snd: 2}` is not an instance of type `Eql`
//│ ║  l.94: 	{ fst: 1, snd: 2 } === p
//│ ╙──      	       ^^^^^^^^^
//│ Bool | error
//│ res
//│     = false

let r = {x: 42, y: y => y}
//│ let r: {x: 42, y: forall 'a. 'a -> 'a}
//│ r
//│   = { x: 42, y: [Function: y] }

r : {x: int}
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.110: 	r : {x: int}
//│ ║         	^
//│ ╟── integer literal of type `42` is not an instance of type `int`
//│ ║  l.105: 	let r = {x: 42, y: y => y}
//│ ║         	            ^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.110: 	r : {x: int}
//│ ╙──       	        ^^^
//│ {x: int}
//│ res
//│     = { x: 42, y: [Function: y] }


:e
x => { a: 0 } === x
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.126: 	x => { a: 0 } === x
//│ ║         	     ^^^^^^^^^^^^
//│ ╟── record literal of type `{a: 0}` is not an instance of type `Eql`
//│ ║  l.126: 	x => { a: 0 } === x
//│ ╙──       	          ^
//│ anything -> (Bool | error)
//│ res
//│ Syntax error:
//│   Unexpected token '==='

x => x === { a: 0 }
//│ Eql[{a: 0}] -> Bool
//│ res
//│     = [Function: res]



let q = Pair(1, "oops")
//│ let q: Pair["oops" | 1]
//│ q
//│   = Pair {}

:e
q === q
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.151: 	q === q
//│ ║         	^^^^^^^
//│ ╟── string literal of type `"oops"` is not an instance of type `Eql`
//│ ║  l.145: 	let q = Pair(1, "oops")
//│ ╙──       	                ^^^^^^
//│ error
//│ res
//│     = true


class Pair2[A, B](fst: A, snd: B)
//│ class Pair2[A, B](fst: A, snd: B)

let q = Pair2(1, "oops")
//│ let q: Pair2[1, "oops"]
//│ q
//│   = Pair2 {}

q === q
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.171: 	q === q
//│ ║         	^^^^^^^
//│ ╟── string literal of type `"oops"` is not an instance of type `Eql`
//│ ║  l.166: 	let q = Pair2(1, "oops")
//│ ╙──       	                 ^^^^^^
//│ error
//│ res
//│     = true




// *** NOTES ***

// * Intended type for comparing Cons:
// Eql[Cons & { head: Eql['h], tail: Eql['t] } | ~Cons & List]


// * Original code
// x: Int
// y: Int
// x == y

// * Refactored code (we want an error)
// x: Option[Int]
// y: Int
// x == y
// -->
// x.exists(_ == y)

// * Should not be equatable:
// Int | Option[Int]


