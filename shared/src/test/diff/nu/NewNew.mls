:NewDefs


class Foo(val x: Int)
//│ class Foo(x: Int)

let f = Foo(1)
//│ let f: Foo
//│ f
//│   = Foo {}

f.x
//│ Int
//│ res
//│     = 1

let f = new Foo(1)
//│ let f: Foo
//│ f
//│   = Foo {}

f.x
//│ Int
//│ res
//│     = 1

new Foo(1).x
//│ Int
//│ res
//│     = 1

if f is Foo then 1 else 0
//│ 0 | 1
//│ res
//│     = 1

if f is Foo(a) then a else 0
//│ Int
//│ res
//│     = 1

let f = Foo
//│ let f: (x: Int) -> Foo
//│ f
//│   = [Function (anonymous)] {
//│       class: [class Foo],
//│       unapply: [Function: unapply]
//│     }

f(1)
//│ Foo
//│ res
//│     = Foo {}


class Foo {
  constructor(x: Int){}
  val y = 2
}
//│ class Foo {
//│   constructor(x: Int)
//│   val y: 2
//│ }

new Foo(1).y
//│ 2
//│ res
//│     = 2

:e
let f = Foo(1)
//│ ╔══[ERROR] Construction of unparameterized class Foo should use the `new` keyword
//│ ║  l.71: 	let f = Foo(1)
//│ ╙──      	        ^^^
//│ let f: Foo
//│ f
//│ Runtime error:
//│   TypeError: Class constructor Foo cannot be invoked without 'new'

:e
let f = new Foo
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.81: 	let f = new Foo
//│ ║        	            ^^^
//│ ╟── argument list of type `[]` does not match type `[x: Int]`
//│ ║  l.81: 	let f = new Foo
//│ ╙──      	               ^
//│ let f: Foo | error
//│ f
//│   = Foo {}

:e
f(1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.93: 	f(1)
//│ ║        	^^^^
//│ ╟── application of type `Foo` is not a function
//│ ║  l.81: 	let f = new Foo
//│ ║        	            ^^^
//│ ╟── but it flows into reference with expected type `1 -> ?a`
//│ ║  l.93: 	f(1)
//│ ╙──      	^
//│ error
//│ res
//│ Runtime error:
//│   TypeError: f9 is not a function

:e
new Foo("2")
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.109: 	new Foo("2")
//│ ║         	^^^^^^^^^^^^
//│ ╟── string literal of type `"2"` is not an instance of type `Int`
//│ ║  l.109: 	new Foo("2")
//│ ║         	        ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.57: 	  constructor(x: Int){}
//│ ╙──      	                 ^^^
//│ Foo | error
//│ res
//│     = Foo {}

:e
new Foo()
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.124: 	new Foo()
//│ ║         	^^^^^^^^^
//│ ╟── argument list of type `[]` does not match type `[x: Int]`
//│ ║  l.124: 	new Foo()
//│ ╙──       	       ^^
//│ Foo | error
//│ res
//│     = Foo {}



class PoInt[A](x: A, y: A)
//│ class PoInt[A](x: A, y: A)

new PoInt(1, 2)
//│ PoInt[1 | 2]
//│ res
//│     = PoInt {}

:e
new PoInt
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.146: 	new PoInt
//│ ║         	    ^^^^^
//│ ╟── argument list of type `[]` does not match type `[x: ?A, y: ?A]`
//│ ║  l.146: 	new PoInt
//│ ╙──       	         ^
//│ PoInt[nothing] | error
//│ res
//│     = PoInt {}

:e
new PoInt['_]
//│ ╔══[ERROR] Type arguments in `new` expressions are not yet supported
//│ ║  l.158: 	new PoInt['_]
//│ ╙──       	    ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.158: 	new PoInt['_]
//│ ║         	    ^^^^^^^^^
//│ ╟── argument list of type `[]` does not match type `[x: ?A, y: ?A]`
//│ ║  l.158: 	new PoInt['_]
//│ ╙──       	             ^
//│ PoInt[nothing] | error
//│ Code generation encountered an error:
//│   Unsupported `new` class term: TyApp(Var(PoInt), List('_))

:e
new PoInt[Str](0, 0)
//│ ╔══[ERROR] Type arguments in `new` expressions are not yet supported
//│ ║  l.173: 	new PoInt[Str](0, 0)
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^
//│ PoInt[0]
//│ Code generation encountered an error:
//│   Unsupported `new` class term: TyApp(Var(PoInt), List(TypeName(Str)))

type T = PoInt[Str]
//│ type T = PoInt[Str]

:e
new T(0, 0)
//│ ╔══[ERROR] Type alias T cannot be used in `new` expression
//│ ║  l.185: 	new T(0, 0)
//│ ╙──       	^^^^^^^^^^^
//│ error
//│ Code generation encountered an error:
//│   type alias T is not a valid expression

let origin = new PoInt(0, 0)
//│ let origin: PoInt[0]
//│ origin
//│        = PoInt {}

:e // TODO support
let origin = PoInt[Int](0, 0)
//│ ╔══[ERROR] Type application syntax is not yet supported
//│ ║  l.199: 	let origin = PoInt[Int](0, 0)
//│ ╙──       	             ^^^^^^^^^^
//│ let origin: PoInt[0]
//│ origin
//│        = PoInt {}

:e // TODO support
let origin = new PoInt[Int](0, 0)
//│ ╔══[ERROR] Type arguments in `new` expressions are not yet supported
//│ ║  l.208: 	let origin = new PoInt[Int](0, 0)
//│ ╙──       	             ^^^^^^^^^^^^^^^^^^^^
//│ let origin: PoInt[0]
//│ Code generation encountered an error:
//│   Unsupported `new` class term: TyApp(Var(PoInt), List(TypeName(Int)))


:e // TODO support
new {}
//│ ╔══[ERROR] Unexpected type `anything` after `new` keyword
//│ ║  l.218: 	new {}
//│ ╙──       	    ^^
//│ error
//│ Code generation encountered an error:
//│   Unsupported `new` class term: Bra(rcd = true, Rcd())

:pe
:e
new
//│ ╔══[PARSE ERROR] Unexpected end of input; an expression was expected here
//│ ║  l.228: 	new
//│ ╙──       	   ^
//│ ╔══[ERROR] Unexpected type `()` after `new` keyword
//│ ║  l.228: 	new
//│ ╙──       	   ^
//│ error
//│ Code generation encountered an error:
//│   Unsupported `new` class term: UnitLit(true)

:e // support?
new
  x: 0
//│ ╔══[ERROR] Not a recognized type
//│ ║  l.241: 	  x: 0
//│ ╙──       	  ^
//│ ╔══[ERROR] Unexpected type `nothing` after `new` keyword
//│ ║  l.241: 	  x: 0
//│ ╙──       	  ^
//│ error
//│ Code generation encountered an error:
//│   Unsupported `new` class term: Blk(...)




fun f(x) = {x}
//│ fun f: forall 'a. 'a -> {x: 'a}

:e
new f(1)
//│ ╔══[ERROR] type identifier not found: f
//│ ║  l.259: 	new f(1)
//│ ╙──       	    ^
//│ error
//│ res
//│     = { x: 1 }


module Oops
//│ module Oops

:e
new Oops
//│ ╔══[ERROR] Module Oops cannot be used in `new` expression
//│ ║  l.272: 	new Oops
//│ ╙──       	    ^^^^
//│ error
//│ res
//│     = Oops {}


:e
new Oops2
trait Oops2
//│ ╔══[ERROR] Trait Oops2 cannot be used in `new` expression
//│ ║  l.282: 	new Oops2
//│ ╙──       	    ^^^^^
//│ trait Oops2
//│ error
//│ Code generation encountered an error:
//│   trait used in term position



module A { class B }
//│ module A {
//│   class B {
//│     constructor()
//│   }
//│ }

:ge // TODO support
new A.B
//│ B
//│ Code generation encountered an error:
//│   Unsupported `new` class term: Sel(Var(A), B)


