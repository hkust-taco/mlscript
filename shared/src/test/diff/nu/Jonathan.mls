:NewDefs
:NoJS


// * A monadic effect type, covariant in base type and effect type
class Effectful[out A, out E](value: A) {
  fun flatMap[B](f: A => Effectful[B, E]): Effectful[B, E] =
    f(value)
}
fun pure[A](a: A): Effectful['a, 'e] = Effectful(a)
//│ class Effectful[A, E](value: A) {
//│   fun flatMap: forall 'B. (f: A -> Effectful['B, E]) -> Effectful['B, E]
//│ }
//│ fun pure: forall 'A. (a: 'A) -> Effectful['A, nothing]

// * Some effect tags
module IO
module Block
//│ module IO
//│ module Block

// * Some example functions
fun println(x: anything): Effectful[(), IO]
fun readLine: Effectful[Str, IO | Block]
//│ fun println: (x: anything) -> Effectful[[], IO]
//│ fun readLine: Effectful[Str, Block | IO]


// * Define NonBlocking as an effectful computation that does not block (using type-level difference `\`)
type NonBlocking[out A, out E] = Effectful[A, E \ Block]
//│ type NonBlocking[A, E] = Effectful[A, E & ~Block]

// * Example use of NonBlocking in an annotation; the type arguments are inferred
fun f(x) = x : NonBlocking
//│ fun f: forall 'a 'b. NonBlocking['a, 'b] -> NonBlocking['a, 'b]


// * the `listener` callback should be non-blocking
fun onMousePressed(listener) =
  let l(e) = listener(e) : NonBlocking
  l(0).flatMap of a => l(1).flatMap of b => pure of ()
//│ fun onMousePressed: forall 'a. ((0 | 1) -> NonBlocking[anything, 'a]) -> Effectful[[], 'a & ~Block]


// * OK: `println` does not block
onMousePressed(event => println("Clicked!"))
//│ Effectful[[], IO & ~Block]

// * NOT OK: `readLine` blocks
:e
onMousePressed(event => readLine.flatMap(println))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.51: 	onMousePressed(event => readLine.flatMap(println))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Block` does not match type `~Block`
//│ ║  l.24: 	fun readLine: Effectful[Str, IO | Block]
//│ ╙──      	                                  ^^^^^
//│ Effectful[[], IO & ~Block] | error


class Event
class MouseEvent: Event
module Register
//│ class Event {
//│   constructor()
//│ }
//│ class MouseEvent: Event {
//│   constructor()
//│ }
//│ module Register

fun onMousePressed(listener) =
  let l(e: MouseEvent) = listener(e) : Effectful[(), 'e \ Block \ Register]
  ()
//│ fun onMousePressed: (MouseEvent -> Effectful[[], ~Block & ~Register]) -> []

// def onMouseClick ( f : Event -> Unit \ { ef - Register }): Unit \ { Register }
fun onMouseClick(f: Event -> Effectful[(), 'e \ Register]): Effectful[(), Register]
//│ fun onMouseClick: (f: Event -> Effectful[[], ~Register]) -> Effectful[[], Register]

onMouseClick of ev => pure of ()
//│ Effectful[[], Register]

:e
onMouseClick of ev =>
  onMouseClick(ev => pure of ()).flatMap of _ =>
    pure of ()
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.85: 	onMouseClick of ev =>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.86: 	  onMouseClick(ev => pure of ()).flatMap of _ =>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.87: 	    pure of ()
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── type `Register` does not match type `~Register`
//│ ║  l.78: 	fun onMouseClick(f: Event -> Effectful[(), 'e \ Register]): Effectful[(), Register]
//│ ╙──      	                                                                          ^^^^^^^^
//│ Effectful[[], Register] | error


