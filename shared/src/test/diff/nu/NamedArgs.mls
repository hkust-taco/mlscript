:NewDefs


fun test(x: 'a) = if x is undefined then 0 else x + 1
//│ fun test: (x: Int | undefined) -> Int

test(x: 0)
//│ Int
//│ res
//│     = 1

:e
test(x: 0, 1)
//│ ╔══[ERROR] Unnamed arguments should appear first when using named arguments
//│ ║  l.13: 	test(x: 0, 1)
//│ ╙──      	    ^^^^^^^^^
//│ error
//│ res
//│     = 1

:e
test(y: 0)
//│ ╔══[ERROR] Argument named 'x' is missing from this function call
//│ ║  l.22: 	test(y: 0)
//│ ╙──      	    ^^^^^^
//│ Int
//│ res
//│ Runtime error:
//│   Error: an error was thrown


fun test(x: 'a, y: 'b) = [x, y]
//│ fun test: forall 'a 'b. (x: 'a, y: 'b) -> ['a, 'b]

:e
test(x: 1, 2)
//│ ╔══[ERROR] Unnamed arguments should appear first when using named arguments
//│ ║  l.36: 	test(x: 1, 2)
//│ ╙──      	    ^^^^^^^^^
//│ error
//│ res
//│     = [ 1, 2 ]

:e
test(x: 1, z: 3)
//│ ╔══[ERROR] Argument named 'y' is missing from this function call
//│ ║  l.45: 	test(x: 1, z: 3)
//│ ╙──      	    ^^^^^^^^^^^^
//│ [1, nothing]
//│ res
//│ Runtime error:
//│   Error: an error was thrown

:e
test(y: 0)
//│ ╔══[ERROR] Number of arguments doesn't match function signature `forall 'a 'b. (x: 'a, y: 'b) -> ['a, 'b]`
//│ ║  l.55: 	test(y: 0)
//│ ╙──      	    ^^^^^^
//│ error
//│ res
//│     = [ 0, undefined ]

:e
test(1, x: 0)
//│ ╔══[ERROR] Argument for parameter 'x' is duplicated
//│ ║  l.64: 	test(1, x: 0)
//│ ╙──      	    ^^^^^^^^^
//│ ╔══[ERROR] Argument named 'y' is missing from this function call
//│ ║  l.64: 	test(1, x: 0)
//│ ╙──      	    ^^^^^^^^^
//│ [0, nothing]
//│ res
//│ Runtime error:
//│   Error: an error was thrown

// * Notice no let binding is generated for the first argument
:js
test(0, y: 1)
//│ [0, 1]
//│ // Prelude
//│ class TypingUnit9 {}
//│ const typing_unit9 = new TypingUnit9;
//│ // Query 1
//│ res = test1(0, 1);
//│ // End of generated code
//│ res
//│     = [ 0, 1 ]

id(test)(0, y: 1)
//│ [0, 1]
//│ res
//│     = [ 0, 1 ]

id(if true then test else error)(0, y: 1)
//│ [0, 1]
//│ res
//│     = [ 0, 1 ]

:e
id(if true then test else id)(0, y: 1)
//│ ╔══[ERROR] Cannot retrieve appropriate function signature from type `?a` for applying named arguments
//│ ║  l.100: 	id(if true then test else id)(0, y: 1)
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ error
//│ res
//│     = [ 0, 1 ]

// * No let binding in that value of argument is a var or literal
:js
let tmp = 2
test(0, y: tmp)
test(0, y: 200)
//│ let tmp: 2
//│ [0, 200]
//│ // Prelude
//│ class TypingUnit13 {}
//│ const typing_unit13 = new TypingUnit13;
//│ // Query 1
//│ globalThis.tmp = 2;
//│ // Query 2
//│ res = test1(0, tmp);
//│ // Query 3
//│ res = test1(0, 200);
//│ // End of generated code
//│ tmp
//│     = 2
//│ res
//│     = [ 0, 2 ]
//│ res
//│     = [ 0, 200 ]


:js
test(0, y: 1 + 2)
//│ [0, Int]
//│ // Prelude
//│ class TypingUnit14 {}
//│ const typing_unit14 = new TypingUnit14;
//│ // Query 1
//│ res = ((y_1) => test1(0, y_1))(1 + 2);
//│ // End of generated code
//│ res
//│     = [ 0, 3 ]



fun fff(x: Int, y: Int, z: Int) = (x - y) * z
//│ fun fff: (x: Int, y: Int, z: Int) -> Int

// * Testing renaming
:e
fff(y: 2, z: y_1 + 1, x: z_1 - 2)
//│ ╔══[ERROR] identifier not found: y_1
//│ ║  l.152: 	fff(y: 2, z: y_1 + 1, x: z_1 - 2)
//│ ╙──       	             ^^^
//│ ╔══[ERROR] identifier not found: z_1
//│ ║  l.152: 	fff(y: 2, z: y_1 + 1, x: z_1 - 2)
//│ ╙──       	                         ^^^
//│ Int
//│ Code generation encountered an error:
//│   unresolved symbol z_1

:js
let y_1 = 2
let z_1 = 3
fff(y: 2, z: y_1 + 1, x: z_1 - 2)
//│ let y_1: 2
//│ let z_1: 3
//│ Int
//│ // Prelude
//│ class TypingUnit17 {}
//│ const typing_unit17 = new TypingUnit17;
//│ // Query 1
//│ globalThis["y_1"] = 2;
//│ // Query 2
//│ globalThis["z_1"] = 3;
//│ // Query 3
//│ res = ((z_2) => ((x_1) => fff(x_1, 2, z_2))(z_1 - 2))(y_1 + 1);
//│ // End of generated code
//│ y_1
//│     = 2
//│ z_1
//│     = 3
//│ res
//│     = -3


class A() {
  fun ma(x: Int, y: Int) = x - y
  fun mma(x: Int, y: Int) = y - x
} 
//│ class A() {
//│   fun ma: (x: Int, y: Int) -> Int
//│   fun mma: (x: Int, y: Int) -> Int
//│ }

let x = A()
x.ma(y: 2, x: 1)
//│ let x: A
//│ Int
//│ x
//│   = A {}
//│ res
//│     = -1

A().ma(x: 1, y: 2)
//│ Int
//│ res
//│     = -1

id(x).ma(y: 2, x: 1)
//│ Int
//│ res
//│     = -1


fun print(x: Int) = (y: Int, z: Int) => log([x, y, z])
let p = print(0)
//│ fun print: (x: Int) -> (y: Int, z: Int) -> undefined
//│ let p: (y: Int, z: Int) -> undefined
//│ p
//│   = [Function (anonymous)]

p(z: 1, y: 2)
//│ undefined
//│ res
//│     = undefined
//│ // Output
//│ [ 0, 2, 1 ]

:e
fun print(x) = (y, z) => log([x, y, z])
let p = print(0)
p(z: 1, y: 2)
//│ ╔══[ERROR] Cannot use named arguments as the function type has untyped arguments
//│ ║  l.234: 	p(z: 1, y: 2)
//│ ╙──       	 ^^^^^^^^^^^^
//│ fun print: anything -> (anything, anything) -> undefined
//│ let p: (anything, anything) -> undefined
//│ error
//│ p
//│   = [Function (anonymous)]
//│ res
//│     = undefined
//│ // Output
//│ [ 0, 1, 2 ]


class Baz() {
  fun f(x: Int, y: Int) = log([x, y])
}
Baz().f(y: 1, x: 2)
//│ class Baz() {
//│   fun f: (x: Int, y: Int) -> undefined
//│ }
//│ undefined
//│ res
//│     = undefined
//│ // Output
//│ [ 2, 1 ]

let b = Baz()
b.f(y: 1, x: 2)
//│ let b: Baz
//│ undefined
//│ b
//│   = Baz {}
//│ res
//│     = undefined
//│ // Output
//│ [ 2, 1 ]


class A(val x: Int, val y: Int)
//│ class A(x: Int, y: Int)

let z = A(y: 2, x: 1)
z.x
z.y
//│ let z: A
//│ Int
//│ z
//│   = A {}
//│ res
//│     = 1
//│ res
//│     = 2

:e
(f => f(x: a))
//│ ╔══[ERROR] Cannot retrieve appropriate function signature from type `?a` for applying named arguments
//│ ║  l.290: 	(f => f(x: a))
//│ ╙──       	      ^
//│ anything -> error
//│ Code generation encountered an error:
//│   unresolved symbol a

:e
(f => f)(error)(x: a)
//│ ╔══[ERROR] Cannot retrieve appropriate function signature from type `?a` for applying named arguments
//│ ║  l.299: 	(f => f)(error)(x: a)
//│ ╙──       	^^^^^^^^^^^^^^^
//│ error
//│ Code generation encountered an error:
//│   unresolved symbol a

:e
(f => f)(42)(x: a)
//│ ╔══[ERROR] Cannot retrieve appropriate function signature from type `?a` for applying named arguments
//│ ║  l.308: 	(f => f)(42)(x: a)
//│ ╙──       	^^^^^^^^^^^^
//│ error
//│ Code generation encountered an error:
//│   unresolved symbol a

:e
(f => f)(if true then 123 else false)(x: a)
//│ ╔══[ERROR] Cannot retrieve appropriate function signature from type `?a` for applying named arguments
//│ ║  l.317: 	(f => f)(if true then 123 else false)(x: a)
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ error
//│ Code generation encountered an error:
//│   unresolved symbol a

(f => f)(if true then (x: Int) => x + 1 else error)(x: 123)
//│ Int
//│ res
//│     = 124

:e
(f => if true then f else id)(if true then (x: Int) => x + 1 else id)(x: 123)
//│ ╔══[ERROR] Cannot retrieve appropriate function signature from type `?a` for applying named arguments
//│ ║  l.331: 	(f => if true then f else id)(if true then (x: Int) => x + 1 else id)(x: 123)
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ error
//│ res
//│     = 124

:e
(f => if true then f else id)(if true then (x: Int) => x + 1 else (x: Int) => x + 1)(x: 123)
//│ ╔══[ERROR] Cannot retrieve appropriate function signature from type `?a` for applying named arguments
//│ ║  l.340: 	(f => if true then f else id)(if true then (x: Int) => x + 1 else (x: Int) => x + 1)(x: 123)
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ error
//│ res
//│     = 124


fun foo(f: (x: Int) => Int) = f(x: 123)
//│ fun foo: (f: (x: Int) -> Int) -> Int

fun foo(f: ((x: Int) => Int) & 'a) = [f(x: 123), f]
//│ fun foo: forall 'a 'b. (f: (x: Int) -> Int & 123 -> 'b & 'a) -> ['b, (x: Int) -> Int & 'a]

foo((x: Int) => 1)
//│ [1, (x: Int) -> 1]
//│ res
//│     = [ 1, [Function (anonymous)] ]


:e
fun foo(f: ((x: Int) => Int) | 'a) = f(x: 123)
//│ ╔══[ERROR] Cannot retrieve appropriate function signature from type `'a | (x: Int) -> Int` for applying named arguments
//│ ║  l.362: 	fun foo(f: ((x: Int) => Int) | 'a) = f(x: 123)
//│ ╙──       	                                     ^
//│ fun foo: (f: anything) -> error


// * the result of the if-then-else is a TV with two LBs: the type of x and the function type
:e
fun foo(x) = (if true then (x: Int) => x + 1 else x)(x: 123)
//│ ╔══[ERROR] Cannot retrieve appropriate function signature from type `(x: Int) -> ?a | ?b` for applying named arguments
//│ ║  l.371: 	fun foo(x) = (if true then (x: Int) => x + 1 else x)(x: 123)
//│ ╙──       	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ fun foo: anything -> error

foo((y: Int) => y)
//│ error
//│ res
//│     = 124


:e // TODO later: this could be made to work...
fun foo(x) = (if true then (x: Int) => x + 1 else (x: Int) => x + 1)(x: 123)
//│ ╔══[ERROR] Cannot retrieve appropriate function signature from type `(x: Int) -> (?a | ?b)` for applying named arguments
//│ ║  l.384: 	fun foo(x) = (if true then (x: Int) => x + 1 else (x: Int) => x + 1)(x: 123)
//│ ╙──       	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ fun foo: anything -> error


fun foo(x) = if true then (x: Int) => x + 1 else x
//│ fun foo: forall 'a. 'a -> ((x: Int) -> Int | 'a)

:e
foo((y: Int) => y)(x: 123)
//│ ╔══[ERROR] Cannot retrieve appropriate function signature from type `?a` for applying named arguments
//│ ║  l.395: 	foo((y: Int) => y)(x: 123)
//│ ╙──       	^^^^^^^^^^^^^^^^^^
//│ error
//│ res
//│     = 124

:e
foo((x: Int) => x - 1)(x: 123)
//│ ╔══[ERROR] Cannot retrieve appropriate function signature from type `?a` for applying named arguments
//│ ║  l.404: 	foo((x: Int) => x - 1)(x: 123)
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^
//│ error
//│ res
//│     = 124


fun foo1(x) = [x + 1, x]
//│ fun foo1: forall 'a. (Int & 'a) -> [Int, 'a]

:e
foo1(x: 123)
//│ ╔══[ERROR] Cannot use named arguments as the function type has untyped arguments
//│ ║  l.417: 	foo1(x: 123)
//│ ╙──       	    ^^^^^^^^
//│ error
//│ res
//│     = [ 124, 123 ]


fun foo1(x: Int & 'a) = [x + 1, x]
//│ fun foo1: forall 'a. (x: Int & 'a) -> [Int, Int & 'a]

foo1(x: 123)
//│ [Int, 123]
//│ res
//│     = [ 124, 123 ]

