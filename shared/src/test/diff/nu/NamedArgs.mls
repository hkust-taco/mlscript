:NewDefs


fun test(x: 'a) = if x is undefined then 0 else x + 1
//│ fun test: (x: Int | undefined,) -> Int

:e
test(x: 0, 1)
//│ ╔══[ERROR] the unnamed args should appear first when using named args!
//│ ║  l.8: 	test(x: 0, 1)
//│ ╙──     	    ^^^^^^^^^
//│ error
//│ res
//│     = 1

// FIXME "dummy"
:e
test(y: 0)
//│ ╔══[ERROR] name x is missed in function call
//│ ║  l.18: 	test(y: 0)
//│ ╙──      	    ^^^^^^
//│ /!!!\ Uncaught error: java.lang.Error: name x is missed in function call


fun test(x: 'a, y: 'b) = [x, y]
//│ fun test: forall 'a 'b. (x: 'a, y: 'b,) -> ('a, 'b,)

:e
test(y: 0)
//│ ╔══[ERROR] number of parameters dosen't match with the function signature!
//│ ║  l.29: 	test(y: 0)
//│ ╙──      	    ^^^^^^
//│ error
//│ res
//│     = [ 0, undefined ]

// FIXME extra error "name y is missed in function call"
:e
test(1, x: 0)
//│ ╔══[ERROR] parameter x is duplicate!
//│ ║  l.39: 	test(1, x: 0)
//│ ╙──      	    ^^^^^^^^^
//│ ╔══[ERROR] name y is missed in function call
//│ ║  l.39: 	test(1, x: 0)
//│ ╙──      	    ^^^^^^^^^
//│ /!!!\ Uncaught error: java.lang.Error: name y is missed in function call

// * Notice no let binding is generated for the first argument
:js
test(0, y: 1)
//│ (0, 1,)
//│ // Prelude
//│ class TypingUnit4 {}
//│ const typing_unit4 = new TypingUnit4;
//│ // Query 1
//│ res = ((y_1) => test1(0, y_1))(1);
//│ // End of generated code
//│ res
//│     = [ 0, 1 ]


fun fff(x: Int, y: Int, z: Int) = (x - y) * z
//│ fun fff: (x: Int, y: Int, z: Int,) -> Int

// * Testing renaming
:e
fff(y: 2, z: y_1 + 1, x: z_1 - 2)
//│ ╔══[ERROR] identifier not found: y_1
//│ ║  l.67: 	fff(y: 2, z: y_1 + 1, x: z_1 - 2)
//│ ╙──      	             ^^^
//│ ╔══[ERROR] identifier not found: z_1
//│ ║  l.67: 	fff(y: 2, z: y_1 + 1, x: z_1 - 2)
//│ ╙──      	                         ^^^
//│ Int
//│ Code generation encountered an error:
//│   unresolved symbol z_1

let y_1 = 2
let z_1 = 3
fff(y: 2, z: y_1 + 1, x: z_1 - 2)
//│ let y_1: 2
//│ let z_1: 3
//│ Int
//│ y_1
//│     = 2
//│ z_1
//│     = 3
//│ res
//│     = -3


class A() {
  fun ma(x: Int, y: Int) = x - y
  fun mma(x: Int, y: Int) = y - x
} 
//│ class A() {
//│   fun ma: (x: Int, y: Int,) -> Int
//│   fun mma: (x: Int, y: Int,) -> Int
//│ }

let x = A()
x.ma(y: 2, x: 1)
//│ let x: A
//│ Int
//│ x
//│   = A {}
//│ res
//│     = -1

A().ma(x: 1, y: 2)
//│ Int
//│ res
//│     = -1

id(x).ma(y: 2, x: 1)
//│ Int
//│ res
//│     = -1


fun print(x: Int) = (y: Int, z: Int) => log([x, y, z])
let p = print(0)
//│ fun print: (x: Int,) -> (y: Int, z: Int,) -> undefined
//│ let p: (y: Int, z: Int,) -> undefined
//│ p
//│   = [Function: print]

p(z: 1, y: 2)
//│ undefined
//│ res
//│     = undefined
//│ // Output
//│ [ 0, 2, 1 ]

:e
fun print(x) = (y, z) => log([x, y, z])
let p = print(0)
p(z: 1, y: 2)
//│ ╔══[ERROR] cannot use named args in this case.
//│ ║  l.138: 	p(z: 1, y: 2)
//│ ╙──       	 ^^^^^^^^^^^^
//│ /!!!\ Uncaught error: java.lang.Error: cannot use named args in this case.
//│ 	at: mlscript.Typer.$anonfun$typeTerm$31(Typer.scala:1044)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:1039)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:1206)
//│ 	at: mlscript.Typer.typeTerms(Typer.scala:1353)
//│ 	at: mlscript.NuTypeDefs.go$1(NuTypeDefs.scala:577)
//│ 	at: mlscript.NuTypeDefs.$anonfun$typeTypingUnit$12(NuTypeDefs.scala:587)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:32)
//│ 	at: mlscript.NuTypeDefs.$anonfun$typeTypingUnit$2(NuTypeDefs.scala:587)


class Baz() {
  fun f(x: Int, y: Int) = log([x, y])
}
Baz().f(y: 1, x: 2)
//│ class Baz() {
//│   fun f: (x: Int, y: Int,) -> undefined
//│ }
//│ undefined
//│ res
//│     = undefined
//│ // Output
//│ [ 2, 1 ]

let b = Baz()
b.f(y: 1, x: 2)
//│ let b: Baz
//│ undefined
//│ b
//│   = Baz {}
//│ res
//│     = undefined
//│ // Output
//│ [ 2, 1 ]


class A(x: Int, y: Int)
//│ class A(x: Int, y: Int)

let z = A(y: 2, x: 1)
z.x
z.y
//│ let z: A
//│ Int
//│ z
//│   = A {}
//│ res
//│     = 1
//│ res
//│     = 2
