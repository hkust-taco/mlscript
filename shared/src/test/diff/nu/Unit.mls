:NewDefs


()
//│ ()
//│ res
//│     = undefined

fun x: ()
fun x = ()
//│ fun x: ()
//│ fun x: ()

x
//│ ()
//│ res
//│     = undefined


:e // we used to treat () as an empty array; should in fact be JS's `undefined`
x : Array['a]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.21: 	x : Array['a]
//│ ║        	^
//│ ╟── type `()` does not match type `Array['a]`
//│ ║  l.9: 	fun x: ()
//│ ║       	       ^^
//│ ╟── but it flows into reference with expected type `Array['a]`
//│ ║  l.21: 	x : Array['a]
//│ ║        	^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.21: 	x : Array['a]
//│ ╙──      	    ^^^^^^^^^
//│ Array[nothing]
//│ res
//│     = undefined

x : undefined
//│ ()
//│ res
//│     = undefined

fun x: ()
fun x = undefined
//│ fun x: ()
//│ fun x: ()


:e
fun x: ()
fun x = 1
//│ ╔══[ERROR] Type mismatch in definition:
//│ ║  l.51: 	fun x = 1
//│ ║        	    ^^^^^
//│ ╟── integer literal of type `1` does not match type `()`
//│ ║  l.51: 	fun x = 1
//│ ║        	        ^
//│ ╟── but it flows into definition of method x with expected type `()`
//│ ║  l.51: 	fun x = 1
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.50: 	fun x: ()
//│ ╙──      	       ^^
//│ fun x: 1
//│ fun x: ()


(1)
//│ 1
//│ res
//│     = 1

// :pe // TODO?
(1,)
//│ 1
//│ res
//│     = 1

:pe
(1,2)
//│ 2
//│ res
//│     = 2

(let x = 1)
//│ ()
//│ res
//│     = undefined

:pe
(let x = 1 in)
//│ ╔══[PARSE ERROR] Unexpected 'in' keyword here
//│ ║  l.91: 	(let x = 1 in)
//│ ╙──      	           ^^
//│ ()
//│ res
//│     = undefined

(log(1))
//│ ()
//│ res
//│     = undefined
//│ // Output
//│ 1

:pe
(log(1);)
//│ ╔══[PARSE ERROR] Unexpected semicolon here
//│ ║  l.107: 	(log(1);)
//│ ╙──       	       ^
//│ ()
//│ res
//│     = undefined
//│ // Output
//│ 1

(log(1); 2)
//│ ╔══[PARSE ERROR] Unexpected semicolon here
//│ ║  l.117: 	(log(1); 2)
//│ ╙──       	       ^
//│ ()
//│ res
//│     = undefined
//│ // Output
//│ 1

(log(1); ())
//│ ╔══[PARSE ERROR] Unexpected semicolon here
//│ ║  l.127: 	(log(1); ())
//│ ╙──       	       ^
//│ ()
//│ res
//│     = undefined
//│ // Output
//│ 1

(((log((())))))
//│ ()
//│ res
//│     = undefined
//│ // Output
//│ undefined



:pe
(1, 2)
//│ 2
//│ res
//│     = 2


x => x
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: res]

(x) => x
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: res]

(x, y) => x + y
//│ (Int, Int) -> Int
//│ res
//│     = [Function: res]


(1, 2) => 3
//│ (1, 2) -> 3
//│ res
//│     = [Function: res]


:pe
1 => (2, 3)
//│ 1 -> 3
//│ res
//│     = [Function: res]


fun f(x, y) = x + y
//│ fun f: (Int, Int) -> Int

f(1, 2)
//│ Int
//│ res
//│     = 3

f of 1, 2
//│ Int
//│ res
//│     = 3

:pe
:e
f of (1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.197: 	f of (1, 2)
//│ ║         	^^^^^^^^^^^
//│ ╟── argument of type `[?a]` does not match type `[?b, ?c]`
//│ ║  l.197: 	f of (1, 2)
//│ ║         	     ^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.182: 	fun f(x, y) = x + y
//│ ╙──       	     ^^^^^^
//│ Int | error
//│ res
//│     = NaN



:w
0; 0
//│ 0
//│ res
//│     = 0
//│ res
//│     = 0

:w
succ(0); 0
//│ 0
//│ res
//│     = 1
//│ res
//│     = 0

discard(succ(0)); 0
//│ 0
//│ res
//│     = undefined
//│ res
//│     = 0

discard of succ(0); 0
//│ 0
//│ res
//│     = undefined
//│ res
//│     = 0

let _ = succ(0); 0
//│ let _: Int
//│ 0
//│ _
//│   = 1
//│ res
//│     = 0


x => x; ()
//│ ()
//│ res
//│     = [Function: res]
//│ res
//│     = undefined

x => x; ()
//│ ()
//│ res
//│     = [Function: res]
//│ res
//│     = undefined

:w
fun f =
  x => x; ()
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.268: 	  x => x; ()
//│ ╙──       	  ^^^^^^
//│ fun f: ()

fun f =
  discard of x => x; ()
//│ fun f: ()

:w
fun f =
  x => x
  ()
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.280: 	  x => x
//│ ╙──       	  ^^^^^^
//│ fun f: ()


:w
module Test {
  123
}
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.290: 	  123
//│ ╙──       	  ^^^
//│ module Test

:w
module Test {
  123
  456
}
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.299: 	  123
//│ ╙──       	  ^^^
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.300: 	  456
//│ ╙──       	  ^^^
//│ module Test

:w
module Test {
  x => x
}
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.312: 	  x => x
//│ ╙──       	  ^^^^^^
//│ module Test



:e
fun foo =
  let tmp = 0
foo + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.324: 	foo + 1
//│ ║         	^^^^^^^
//│ ╟── definition of method foo of type `()` is not an instance of type `Int`
//│ ║  l.322: 	fun foo =
//│ ║         	    ^^^^^
//│ ║  l.323: 	  let tmp = 0
//│ ║         	^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Int`
//│ ║  l.324: 	foo + 1
//│ ╙──       	^^^
//│ fun foo: ()
//│ Int | error
//│ res
//│     = NaN



