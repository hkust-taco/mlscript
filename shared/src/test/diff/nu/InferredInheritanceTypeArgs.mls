:NewDefs


mixin Test[A] {
  fun bar: (A, A)
  fun bar = (this.a, this.a)
}
//│ mixin Test[A]() {
//│   this: {a: A}
//│   fun bar: [A, A]
//│ }

class A(val a: Int) extends Test
//│ class A(a: Int) {
//│   fun bar: [Int, Int]
//│ }

:e
class A(a: Int) extends Test
//│ ╔══[ERROR] Parameter 'a' cannot tbe accessed as a field
//│ ║  l.6: 	  fun bar = (this.a, this.a)
//│ ╙──     	                         ^^
//│ ╔══[ERROR] Parameter 'a' cannot tbe accessed as a field
//│ ║  l.6: 	  fun bar = (this.a, this.a)
//│ ╙──     	                 ^^
//│ class A(a: Int) {
//│   fun bar: [Int, Int]
//│ }

mixin Test2[S, T] {
  fun x: (S, T)
  fun x = (this.s, this.t)
  fun fb: S => (S, S)
  fun fb(h: S) = (this.s, h)
}
//│ mixin Test2[S, T]() {
//│   this: {s: S, t: T}
//│   fun fb: S -> [S, S]
//│   fun x: [S, T]
//│ }

class A1[B](val s: Bool, val t: B) extends Test2[Bool, B]
//│ class A1[B](s: Bool, t: B) {
//│   fun fb: (Bool & 'S) -> [Bool | 'S, Bool | 'S]
//│   fun x: [Bool | 'S, B]
//│ }

// * TODO: Investigate type of fb
class A2[A](val s: A, val t: Int) extends Test2
//│ class A2[A](s: A, t: Int) {
//│   fun fb: 'S -> [A | 'S, A | 'S]
//│   fun x: [A | 'S, Int]
//│ }

// * TODO: Investigate type of fb
class A3(val s: Int, val t: Bool) extends Test2
//│ class A3(s: Int, t: Bool) {
//│   fun fb: 'S -> [Int | 'S, Int | 'S]
//│   fun x: [Int | 'S, Bool]
//│ }

class P(val p: Int) { 
  virtual fun foo(x) = x + p 
}
//│ class P(p: Int) {
//│   fun foo: Int -> Int
//│ }

:e // TODO improve type checking
class C1(a: Int) extends P(a) { fun bar = this.foo(0) }
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.70: 	class C1(a: Int) extends P(a) { fun bar = this.foo(0) }
//│ ╙──      	                                              ^^^^
//│ class C1(a: Int) extends P {
//│   fun bar: error
//│   fun foo: Int -> Int
//│ }

:e // TODO improve type checking
class C2(a: Int, b: Int) extends P(a + b) {
  fun foo(x) = x * this.p + a * b
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.81: 	  fun foo(x) = x * this.p + a * b
//│ ╙──      	                       ^^
//│ class C2(a: Int, b: Int) extends P {
//│   fun foo: Int -> Int
//│ }

let c2 =  C2(1, 2)
//│ let c2: C2
//│ c2
//│    = C2 {}

c2.foo(2)
//│ Int
//│ res
//│     = 8

c2.p
//│ Int
//│ res
//│     = 3


class Test[A](val x: A)
//│ class Test[A](x: A)

class A(a: Int) extends Test(a)
//│ class A(a: Int) extends Test

let a1 = A(1)
//│ let a1: A
//│ a1
//│    = A {}

a1: Test['x]
//│ Test['x]
//│   where
//│     'x :> Int
//│ res
//│     = A {}

a1.x
//│ Int
//│ res
//│     = 1




trait Foo[A] { fun foo(x: A): A }
//│ trait Foo[A] {
//│   fun foo: (x: A) -> A
//│ }

// * This is pretty funky but it seems sound for now...
// * Inherited Foo's type arg is left "unspecified", and since it is not constrained,
// * it can be instantiated to any type by downstream callers of the methods!
module B extends Foo { fun foo(x) = x }
//│ module B extends Foo {
//│   fun foo: forall 'a. 'a -> 'a
//│ }

B : Foo['X]
//│ Foo['X]
//│ res
//│     = B { class: [class B extends Object] }

B.foo
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: foo]

B.foo(1)
//│ 1
//│ res
//│     = 1

module B extends Foo { fun foo(x) = x + 1 }
//│ module B extends Foo {
//│   fun foo: Int -> Int
//│ }

B : Foo['X]
//│ Foo[Int]
//│ res
//│     = B { class: [class B extends Object] }

B.foo
//│ Int -> Int
//│ res
//│     = [Function: foo]


// * TODO: when 
:pe
trait Foo[type A] { fun foo(x: A): A }
//│ ╔══[PARSE ERROR] Unexpected 'type' keyword here
//│ ║  l.178: 	trait Foo[type A] { fun foo(x: A): A }
//│ ╙──       	          ^^^^
//│ trait Foo {
//│   fun foo: (x: A) -> A
//│ }


trait Foo[A] { fun a: A; fun foo(x: A): A }
//│ trait Foo[A] {
//│   fun a: A
//│   fun foo: (x: A) -> A
//│ }

class Bar[B](a: B) extends Foo { fun foo(x) = x }
//│ class Bar[B](a: B) extends Foo {
//│   fun foo: forall 'a. 'a -> 'a
//│ }

let b = Bar(123)
//│ let b: Bar[123]
//│ b
//│   = Bar {}

b : Foo['X]
//│ Foo['X]
//│   where
//│     'X :> 123
//│ res
//│     = Bar {}

b.foo
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: foo]


// * Note the shadowed type variable `A` in `foo`
trait Foo[A] { fun foo[A](x: A): A }
//│ trait Foo[A] {
//│   fun foo: forall 'A. (x: 'A) -> 'A
//│ }

class B extends Foo { fun foo(x) = x }
//│ class B extends Foo {
//│   constructor()
//│   fun foo: forall 'a. 'a -> 'a
//│ }

:e
class B extends Foo { fun foo(x) = x + 1 }
//│ ╔══[ERROR] Type mismatch in definition of method foo:
//│ ║  l.229: 	class B extends Foo { fun foo(x) = x + 1 }
//│ ║         	                          ^^^^^^^^^^^^^^
//│ ╟── type `A` is not an instance of type `Int`
//│ ║  l.217: 	trait Foo[A] { fun foo[A](x: A): A }
//│ ║         	                       ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.229: 	class B extends Foo { fun foo(x) = x + 1 }
//│ ╙──       	                                   ^
//│ ╔══[ERROR] Type mismatch in definition of method foo:
//│ ║  l.229: 	class B extends Foo { fun foo(x) = x + 1 }
//│ ║         	                          ^^^^^^^^^^^^^^
//│ ╟── operator application of type `Int` does not match type `A`
//│ ║  l.229: 	class B extends Foo { fun foo(x) = x + 1 }
//│ ║         	                                   ^^^^^
//│ ╟── Note: constraint arises from method type parameter:
//│ ║  l.217: 	trait Foo[A] { fun foo[A](x: A): A }
//│ ╙──       	                       ^
//│ class B extends Foo {
//│   constructor()
//│   fun foo: Int -> Int
//│ }

