:NewDefs
:NoJS


class Union[out Region](val a: Region)
// class Union[Region](a: Region)
//│ class Union[Region](a: Region)

fun go(x) = Union(go(x))
let circles = go(2)
//│ fun go: forall 'Region. anything -> 'Region
//│ let circles: forall 'Region0. 'Region0
//│ where
//│   'Region0 :> Union['Region0]
//│   'Region :> Union['Region]


fun contains(a) =
  if a is Union then contains(a.a)
//│ fun contains: forall 'a. 'a -> nothing
//│   where
//│     'a <: Union['a]

contains(circles)
//│ nothing


mixin Contains {
  fun contains(a) =
    if a is Union then this.contains(a.a)
}
//│ mixin Contains() {
//│   this: {contains: 'a ->{'c} 'b}
//│   fun contains: Union['a] ->{'c} 'b
//│ }

module TestContains extends Contains
//│ module TestContains {
//│   fun contains: 'a -> nothing
//│ }
//│ where
//│   'a <: Union['a]

TestContains.contains(circles)
//│ nothing


