:NewDefs


fun (++) stringConcat(a, b) = concat(a)(b)
//│ fun (++) stringConcat: (Str, Str) -> Str

type List[out A] = Cons[A] | Nil
class Cons[out A](head: A, tail: List[A]) {
  fun join(sep: Str): Str
  fun join(sep) =
    if tail is
      Nil then toString(head)
      Cons(x, Nil) then toString(head) ++ sep ++ toString(x)
      Cons(x, xs) then toString(head) ++ sep ++ toString(x) ++ sep ++ xs.join(sep)
}
module Nil {
  fun join(sep: Str): Str = ""
  fun contains(x): Bool = false
}
//│ type List[A] = Cons[A] | Nil
//│ class Cons[A](head: A, tail: List[A]) {
//│   fun join: (sep: Str) -> Str
//│ }
//│ module Nil {
//│   fun contains: anything -> Bool
//│   fun join: (sep: Str) -> Str
//│ }


fun (::) cons[A](x: A, xs: List[A]): List[A] = Cons(x, xs)
//│ fun (::) cons: forall 'A. (x: 'A, xs: List['A]) -> List['A]

(1 :: Nil).join(", ")
(1 :: (2 :: Nil)).join(", ")
(1 :: (2 :: (3 :: Nil))).join(", ")
(1 :: (2 :: (3 :: (4 :: Nil)))).join(", ")
(1 :: (2 :: (3 :: (4 :: (5 :: Nil))))).join(", ")
//│ Str
//│ res
//│     = '1'
//│ res
//│     = '1, 2'
//│ res
//│     = '1, 2, 3'
//│ res
//│     = '1, 2, 3, 4'
//│ res
//│     = '1, 2, 3, 4, 5'


fun (:-) listExclude(xs, x) =
  if xs is
    Nil then Nil
    Cons(x', xs') and
      x === x' then xs' :- x
      else x' :: (xs' :- x)
//│ fun (:-) listExclude: forall 'A. (Cons['A] | Nil, Eql[??A & 'A]) -> (Nil | List[??A & 'A])

(Nil :- 0).join(", ")
((0 :: Nil) :- 0).join(", ")
((1 :: Nil) :- 0).join(", ")
((1 :: (2 :: Nil)) :- 0).join(", ")
//│ Str
//│ res
//│     = ''
//│ res
//│     = ''
//│ res
//│     = '1'
//│ res
//│     = '1, 2'


("x" :: Nil).join(", ")
//│ Str
//│ res
//│     = 'x'


