:NewDefs


let x: Eql[Int]
//│ let x: Eql[Int]
//│ x
//│   = <missing implementation>

x === 1
//│ Bool
//│ res
//│     = <no result>
//│       x is not implemented

:e
1 === x
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.16: 	1 === x
//│ ║        	^^^^^^^
//│ ╟── type `#Eql & {Eql#A :> Int}` is not an instance of type `Num`
//│ ║  l.4: 	let x: Eql[Int]
//│ ║       	       ^^^^^^^^
//│ ╟── but it flows into reference with expected type `#Num`
//│ ║  l.16: 	1 === x
//│ ╙──      	      ^
//│ Bool | error
//│ res
//│     = <no result>
//│       x is not implemented

:e
x === x
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.32: 	x === x
//│ ║        	^^^^^^^
//│ ╟── type `#Eql & {Eql#A :> Int}` is not an instance of type `Int`
//│ ║  l.4: 	let x: Eql[Int]
//│ ║       	       ^^^^^^^^
//│ ╟── but it flows into reference with expected type `Int`
//│ ║  l.32: 	x === x
//│ ╙──      	      ^
//│ Bool | error
//│ res
//│     = <no result>
//│       x is not implemented


fun test1(x) =
  x === x
//│ fun test1: forall 'a. (Eql['a] & 'a) -> Bool

fun test2(x, y) =
  x === y
//│ fun test2: forall 'a. (Eql['a], 'a,) -> Bool


1 : Eql['a]
//│ Eql[#Num]
//│ res
//│     = 1

1 : Eql[Int]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.62: 	1 : Eql[Int]
//│ ║        	^
//│ ╙── expression of type `Int` is not an instance of type `Num`
//│ Eql[Int]
//│ res
//│     = 1

1 : Eql[1]
//│ Eql[1]
//│ res
//│     = 1

test1(1)
//│ Bool
//│ res
//│     = true


let n: Int = 1
//│ let n: Int
//│ n
//│   = 1

n : Eql['a]
//│ Eql[anything]
//│ res
//│     = 1

test1(n)
//│ Bool
//│ res
//│     = true


let n: number
//│ let n: number
//│ n
//│   = <missing implementation>

test1(n)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.103: 	test1(n)
//│ ║         	^^^^^^^^
//│ ╟── type `number` is not an instance of type `Num`
//│ ║  l.98: 	let n: number
//│ ║        	       ^^^^^^
//│ ╟── but it flows into reference with expected type `#Num`
//│ ║  l.103: 	test1(n)
//│ ╙──       	      ^
//│ Bool | error
//│ res
//│     = <no result>
//│       n is not implemented

let d = 1/2
//│ let d: #Num
//│ d
//│   = 0.5

test1(d)
//│ Bool
//│ res
//│     = true

test1("hello")
//│ Bool
//│ res
//│     = true


test2(0, 1)
//│ Bool
//│ res
//│     = false

test2(0, d)
//│ Bool
//│ res
//│     = false

x => test2(0, x)
//│ #Num -> Bool
//│ res
//│     = [Function: res]

x => test2(x, 0)
//│ Eql[0] -> Bool
//│ res
//│     = [Function: res]

x => test2(d, x)
//│ anything -> Bool
//│ res
//│     = [Function: res]

x => test2(x, d)
//│ Eql[#Num] -> Bool
//│ res
//│     = [Function: res]


:e
test2(1, "oops")
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.166: 	test2(1, "oops")
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"oops"` is not an instance of type `Num`
//│ ║  l.166: 	test2(1, "oops")
//│ ║         	         ^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.53: 	  x === y
//│ ╙──      	        ^
//│ Bool | error
//│ res
//│     = false

:e
test2("oops", 1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.181: 	test2("oops", 1)
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `Str`
//│ ║  l.181: 	test2("oops", 1)
//│ ║         	              ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.53: 	  x === y
//│ ╙──      	        ^
//│ Bool | error
//│ res
//│     = false

:e
test2(1, {})
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.196: 	test2(1, {})
//│ ║         	^^^^^^^^^^^^
//│ ╟── record literal of type `anything` is not an instance of type `Num`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.53: 	  x === y
//│ ╙──      	        ^
//│ Bool | error
//│ res
//│     = false

:e
test2({}, 1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.209: 	test2({}, 1)
//│ ║         	^^^^^^^^^^^^
//│ ╟── record literal of type `anything` is not an instance of type `Eql`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.53: 	  x === y
//│ ╙──      	  ^
//│ Bool | error
//│ res
//│     = false

:e
test2({}, {})
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.222: 	test2({}, {})
//│ ║         	^^^^^^^^^^^^^
//│ ╟── record literal of type `anything` is not an instance of type `Eql`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.53: 	  x === y
//│ ╙──      	  ^
//│ Bool | error
//│ res
//│     = false


