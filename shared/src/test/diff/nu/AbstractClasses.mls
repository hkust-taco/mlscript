:NewDefs



abstract class Foo(x: Int) {
  fun f(y: Int) = x + y
}
//│ abstract class Foo(x: Int) {
//│   fun f: (y: Int,) -> Int
//│ }

:e
Foo(1)
//│ ╔══[ERROR] Class Foo is abstract and cannot be instantiated
//│ ║  l.13: 	Foo(1)
//│ ╙──      	^^^
//│ Foo
//│ res
//│     = Foo {}

:e // TODO allow with `new` keyword
new Foo(1)
//│ ╔══[ERROR] Class Foo is abstract and cannot be instantiated
//│ ║  l.22: 	new Foo(1)
//│ ╙──      	    ^^^^^^
//│ Foo
//│ res
//│     = Foo {}


abstract class Foo(x: Int) {
  fun f: Int -> Int
}
//│ abstract class Foo(x: Int) {
//│   fun f: Int -> Int
//│ }

:e
Foo(1)
//│ ╔══[ERROR] Class Foo is abstract and cannot be instantiated
//│ ║  l.39: 	Foo(1)
//│ ╙──      	^^^
//│ Foo
//│ res
//│     = Foo {}

:e // TODO support
new Foo(1) { fun f = id }
//│ ╔══[ERROR] Currently unsupported `new` syntax
//│ ║  l.48: 	new Foo(1) { fun f = id }
//│ ╙──      	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ error
//│ Code generation encountered an error:
//│   custom class body is not supported yet


abstract class Bar extends Foo(1)
//│ abstract class Bar extends Foo {
//│   fun f: Int -> Int
//│ }

:e
module Baz extends Bar
Baz.f(1)
//│ ╔══[ERROR] Member `f` is declared in parent but not implemented in `Baz`
//│ ║  l.63: 	module Baz extends Bar
//│ ║        	       ^^^
//│ ╟── Declared here:
//│ ║  l.32: 	  fun f: Int -> Int
//│ ╙──      	      ^^^^^^^^^^^^^
//│ module Baz extends Bar, Foo {
//│   fun f: Int -> Int
//│ }
//│ Int
//│ res
//│ Runtime error:
//│   TypeError: Baz.f is not a function

module Baz extends Bar {
  fun f(x) = x + 1
}
Baz.f(1)
//│ module Baz extends Bar, Foo {
//│   fun f: Int -> Int
//│ }
//│ Int
//│ res
//│     = 2



abstract class C1 { fun x: Int | string }
//│ abstract class C1 {
//│   fun x: Int | string
//│ }

trait T1 { fun x: Int | Bool }
//│ trait T1 {
//│   fun x: Int | false | true
//│ }

:e
class C2 extends C1, T1
//│ ╔══[ERROR] Member `x` is declared in parent but not implemented in `C2`
//│ ║  l.103: 	class C2 extends C1, T1
//│ ║         	      ^^
//│ ╟── Declared here:
//│ ║  l.92: 	abstract class C1 { fun x: Int | string }
//│ ╙──      	                        ^^^^^^^^^^^^^^^
//│ class C2 extends C1, T1 {
//│   fun x: Int
//│ }

class C2 extends C1, T1 { fun x = 1 }
//│ class C2 extends C1, T1 {
//│   fun x: 1
//│ }

abstract class C2 extends C1, T1
//│ abstract class C2 extends C1, T1 {
//│   fun x: Int
//│ }

:e
class C3 extends C2
//│ ╔══[ERROR] Member `x` is declared in parent but not implemented in `C3`
//│ ║  l.125: 	class C3 extends C2
//│ ║         	      ^^
//│ ╟── Declared here:
//│ ║  l.92: 	abstract class C1 { fun x: Int | string }
//│ ╙──      	                        ^^^^^^^^^^^^^^^
//│ class C3 extends C1, C2, T1 {
//│   fun x: Int
//│ }

class C3 extends C2 { fun x = 1 }
//│ class C3 extends C1, C2, T1 {
//│   fun x: 1
//│ }



:ge // TODO report this as a type error
abstract class C {
  fun x : Int
  fun foo0 = x
  fun foo1 = this.x
}
//│ abstract class C {
//│   fun foo0: Int
//│   fun foo1: Int
//│   fun x: Int
//│ }
//│ Code generation encountered an error:
//│   unresolved symbol x

:ge // TODO report this as a type error
class C {
  val x : Int
  fun foo0 = x
  fun foo1 = this.x
}
//│ class C {
//│   fun foo0: Int
//│   fun foo1: Int
//│   let x: Int
//│ }
//│ Code generation encountered an error:
//│   unresolved symbol x


