:NewDefs
:NoJS


// * TODO diffs to check
// shared/src/test/diff/mlscript/FunnySubsumptions.mls
// shared/src/test/diff/mlscript/Addable.mls
// shared/src/test/diff/ecoop23/SimpleRegionDSL_annot.mls



mut let foo_ty = error
//│ mut let foo_ty: nothing

// :d // to see the typing trace
:ns // to disable simplification
let rec body(x) =
  log of x.m + 1
  set foo_ty = body
  x
//│ let rec body: forall 'a 'm. 'a -> 'a
//│   where
//│     'a :> 'b
//│        <: 'c & {m: 'm}
//│     'm :> 'm0
//│        <: Int
//│     'c :> 'b
//│     'b <: {m: 'm0}
//│     'm0 <: Int

foo_ty of {m: 1}
//│ {m: 1}

foo_ty of {m: 2}
//│ {m: 1 | 2}

body({m: 3})
//│ {m: 1 | 2 | 3}

body({m: 4})
//│ {m: 1 | 2 | 4}


// let test = fun extr ->
//   let f = fun x ->
//     let tmp = extr x in x
//   in {l = f; r = extr}



// let a = if true then id else {x: 1}

let a = if true then id else "{x: 1}"
//│ let a: forall 'a. "{x: 1}" | 'a -> 'a



class C[A]()
class D[A]()
//│ class C[A]()
//│ class D[A]()

let b = if true then C() else D()
//│ let b: forall 'A 'A0. C['A] | D['A0]

let b = if true then D() else C()
//│ let b: forall 'A 'A0. C['A] | D['A0]

// :ds
let f(x) = if true then x else C()
//│ let f: forall 'a. 'a -> (forall 'A. C['A] | 'a)


