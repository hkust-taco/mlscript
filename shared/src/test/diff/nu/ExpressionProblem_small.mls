:NewDefs
:NoJS


class Neg[A](expr: A)
class Add[E](lhs: E, rhs: E)
class Lit(n: int)
//│ class Neg[A](expr: A)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: int)

let add11 = Add(Lit(1), Lit(2))
let add2negadd11 = Add(Lit(2), Neg(add11))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.12: 	let add11 = Add(Lit(1), Lit(2))
//│ ║        	                ^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `int`
//│ ║  l.12: 	let add11 = Add(Lit(1), Lit(2))
//│ ║        	                    ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.7: 	class Lit(n: int)
//│ ╙──     	             ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.12: 	let add11 = Add(Lit(1), Lit(2))
//│ ║        	                        ^^^^^^
//│ ╟── integer literal of type `2` is not an instance of type `int`
//│ ║  l.12: 	let add11 = Add(Lit(1), Lit(2))
//│ ║        	                            ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.7: 	class Lit(n: int)
//│ ╙──     	             ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.13: 	let add2negadd11 = Add(Lit(2), Neg(add11))
//│ ║        	                       ^^^^^^
//│ ╟── integer literal of type `2` is not an instance of type `int`
//│ ║  l.13: 	let add2negadd11 = Add(Lit(2), Neg(add11))
//│ ║        	                           ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.7: 	class Lit(n: int)
//│ ╙──     	             ^^^
//│ let add11: Add[Lit | error]
//│ let add2negadd11: Add[Lit | Neg[Add[Lit | error]] | error]

mixin EvalNothing {
  fun eval(e: nothing) = e
}
mixin EvalAddLit {
  fun eval(e) =
    if e is
      Lit(n) then n
      Add(l, r) then this.eval(l) + this.eval(r)
    else super.eval(e)
}
mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNothing() {
//│   fun eval: (e: nothing,) -> nothing
//│ }
//│ mixin EvalAddLit() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: 'lhs -> Int}
//│   fun eval: (Add['lhs] | Lit | #Object & 'a & ~#Add & ~#Lit) -> (Int | int | 'b)
//│ }
//│ mixin EvalNeg() {
//│   super: {eval: 'c -> 'd}
//│   this: {eval: 'expr -> Int}
//│   fun eval: (Neg['expr] | #Object & 'c & ~#Neg) -> (Int | 'd)
//│ }

module TestLang extends EvalNothing, EvalAddLit, EvalNeg
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.73: 	module TestLang extends EvalNothing, EvalAddLit, EvalNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of type `Int`
//│ ║  l.7: 	class Lit(n: int)
//│ ║       	             ^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.56: 	    if e is Neg(d) then 0 - this.eval(d)
//│ ╙──      	                            ^^^^^^^^^^^^
//│ module TestLang() {
//│   fun eval: 'a -> (Int | int)
//│ }
//│ where
//│   'a <: Add['a] | Lit | Neg['a]

TestLang.eval
//│ 'a -> (Int | int)
//│   where
//│     'a <: Add['a] | Lit | Neg['a]


