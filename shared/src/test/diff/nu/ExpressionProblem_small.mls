:NewDefs
:NoJS


class Neg[out A](expr: A)
class Add[out E](lhs: E, rhs: E)
class Lit(n: Int)
//│ class Neg[A](expr: A)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: Int)

let add11 = Add(Lit(1), Lit(2))
let add2negadd11 = Add(Lit(2), Neg(add11))
//│ let add11: Add[Lit]
//│ let add2negadd11: Add[Lit | Neg[Add[Lit]]]

mixin EvalNothing {
  fun eval(e: nothing) = e
}
mixin EvalAddLit {
  fun eval(e) =
    if e is
      Lit(n) then n
      Add(l, r) then this.eval(l) + this.eval(r)
    else super.eval(e)
}
mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNothing() {
//│   fun eval: (e: nothing) -> nothing
//│ }
//│ mixin EvalAddLit() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: (??E & 'E) -> Int}
//│   fun eval: (Add['E] | Lit | Object & 'a & ~#Add & ~#Lit) -> (Int | 'b)
//│ }
//│ mixin EvalNeg() {
//│   super: {eval: 'c -> 'd}
//│   this: {eval: (??A & 'A) -> Int}
//│   fun eval: (Neg['A] | Object & 'c & ~#Neg) -> (Int | 'd)
//│ }

module TestLang extends EvalNothing, EvalAddLit, EvalNeg
//│ module TestLang {
//│   fun eval: (Neg['A] | Object & 'a & ~#Neg) -> Int
//│ }
//│ where
//│   'A <: Neg['A] | Object & 'a & ~#Neg | ~??A
//│   'a <: Add[Neg['A] | Object & 'a & ~#Neg | ~??E] | Lit

TestLang.eval
//│ (Neg['A] | Object & 'a & ~#Neg) -> Int
//│   where
//│     'A <: Neg['A] | Object & 'a & ~#Neg | ~??A
//│     'a <: Add[Neg['A] | Object & 'a & ~#Neg | ~??E] | Lit


