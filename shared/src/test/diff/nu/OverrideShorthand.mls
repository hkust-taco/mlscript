:NewDefs



class Pair(lhs: Int, rhs: Int)
//│ class Pair(lhs: Int, rhs: Int)


:p
:e
fun f(override Pair(x, y)) = x + y
//│ |#fun| |f|(|#override| |Pair|(|x|,| |y|)|)| |#=| |x| |+| |y|
//│ AST: TypingUnit(List(NuFunDef(None,Var(f),None,List(),Left(Lam(Tup(List((None,Fld(_,Var(_$0))))),If(IfOpApp(Var(_$0),Var(is),IfThen(App(Var(Pair),Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y)))))),App(Var(+),Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y)))))))),Some(App(Sel(Super(),Var(f)),Tup(List((None,Fld(_,Var(_$0)))))))))))))
//│ Parsed: fun f = (_$0,) => if _$0 is (Pair(x, y,)) then +(x, y,) else (super).f(_$0,);
//│ ╔══[ERROR] identifier not found: super
//│ ║  l.11: 	fun f(override Pair(x, y)) = x + y
//│ ╙──      	      ^^^^^^^^
//│ fun f: Object -> (Int | error)
//│ Syntax error:
//│   'super' keyword unexpected here


mixin Test {
  fun f(override Pair(x, y)) = x + y
}
//│ mixin Test() {
//│   super: {f: 'a -> 'b}
//│   fun f: (Pair | Object & 'a & ~#Pair) -> (Int | 'b)
//│ }


:pe
:e
fun f(override Pair(x, y), z) = x + y
//│ ╔══[PARSE ERROR] Unsupported 'override' parameter list shape
//│ ║  l.34: 	fun f(override Pair(x, y), z) = x + y
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Unsupported pattern shape:
//│ ║  l.34: 	fun f(override Pair(x, y), z) = x + y
//│ ╙──      	               ^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.34: 	fun f(override Pair(x, y), z) = x + y
//│ ╙──      	                                ^
//│ ╔══[ERROR] identifier not found: y
//│ ║  l.34: 	fun f(override Pair(x, y), z) = x + y
//│ ╙──      	                                    ^
//│ fun f: (error, anything) -> Int
//│ Code generation encountered an error:
//│   term App(Var(Pair),Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y)))))) is not a valid pattern


// TODO
// :pe
// fun f(override Pair(x, y)): Int


