:NewDefs


class Foo(): {}
//│ class Foo()

class Foo(): {} {
  fun x = 0
}
//│ class Foo() {
//│   fun x: 0
//│ }

class Foo(): { x: Int } {
  fun x = 0
}
//│ class Foo(): {x: Int} {
//│   fun x: 0
//│ }

class Foo(): { x: 'FigureItOut } {
  fun x = 0
}
//│ class Foo(): {x: ??FigureItOut} {
//│   fun x: 0
//│ }

:e
not(Foo().x)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.29: 	not(Foo().x)
//│ ║        	^^^^^^^^^^^^
//│ ╟── field selection of type `0 & ??FigureItOut` is not an instance of type `Bool`
//│ ║  l.29: 	not(Foo().x)
//│ ╙──      	    ^^^^^^^
//│ error | false | true
//│ res
//│     = true

(f: Foo) => f.x
//│ (f: Foo) -> (0 & ??FigureItOut)
//│ res
//│     = [Function: res]


trait B
//│ trait B

// :e // TODO check classes against their signatures!
class A(): B
//│ class A(): B

A() : B
//│ B
//│ res
//│     = A {}

abstract class A(): B
//│ abstract class A(): B

:e
A() : B
//│ ╔══[ERROR] Class A is abstract and cannot be instantiated
//│ ║  l.62: 	A() : B
//│ ╙──      	^
//│ B
//│ res
//│     = A {}

module C extends A, B
//│ module C extends A, B

C : B
//│ B
//│ res
//│     = C { class: [class C extends A] }


