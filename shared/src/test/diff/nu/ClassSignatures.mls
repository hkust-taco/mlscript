:NewDefs


abstract class C0: C1 | C2
class C1() extends C0
module C2 extends C0
//│ abstract class C0: C1 | C2
//│ class C1() extends C0
//│ module C2 extends C0

fun foo(x: C0) = if x is
  C1 then 1
  C2 then 2
//│ fun foo: (x: C0) -> (1 | 2)

fun foo(x: C0) = x : C1 | C2
//│ fun foo: (x: C0) -> (C1 | C2)

fun foo(x) = if x is
  C1 then 1
  C2 then 2
//│ fun foo: (C1 | C2) -> (1 | 2)

foo(C1()) + foo(C2)
//│ Int
//│ res
//│     = 3


:e
class C3 extends C0
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.31: 	class C3 extends C0
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `#C3` does not match type `C1 | C2`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.4: 	abstract class C0: C1 | C2
//│ ╙──     	                   ^^^^^^^
//│ class C3 extends C0 {
//│   constructor()
//│ }


trait B
//│ trait B

:w
:e
class A(): B
//│ ╔══[WARNING] Self-type annotations have no effects on non-abstract class definitions
//│ ║  l.49: 	class A(): B
//│ ║        	           ^
//│ ╙── Did you mean to use `extends` and inherit from a parent class?
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.49: 	class A(): B
//│ ║        	^^^^^^^^^
//│ ╟── expression of type `#A` is not an instance of type `B`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.49: 	class A(): B
//│ ╙──      	           ^
//│ class A(): B

A() : B
//│ B
//│ res
//│     = A {}

abstract class A(): B
//│ abstract class A(): B

:e
A() : B
//│ ╔══[ERROR] Class A is abstract and cannot be instantiated
//│ ║  l.72: 	A() : B
//│ ╙──      	^
//│ B
//│ res
//│     = A {}

module C extends A, B
//│ module C extends A, B

C : B
//│ B
//│ res
//│     = C { class: [class C extends A] }


:w
:e
class A(): C
class B() extends A
class C() extends B
//│ ╔══[WARNING] Self-type annotations have no effects on non-abstract class definitions
//│ ║  l.91: 	class A(): C
//│ ║        	           ^
//│ ╙── Did you mean to use `extends` and inherit from a parent class?
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.91: 	class A(): C
//│ ║        	^^^^^^^^^
//│ ╟── expression of type `#A` is not an instance of type `C`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.91: 	class A(): C
//│ ╙──      	           ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.92: 	class B() extends A
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `#B` is not an instance of type `C`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.91: 	class A(): C
//│ ╙──      	           ^
//│ class A(): C
//│ class B() extends A
//│ class C() extends A, B

:e
abstract class A(): C
class B() extends A
class C() extends B
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.118: 	class B() extends A
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `#B` is not an instance of type `C`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.117: 	abstract class A(): C
//│ ╙──       	                    ^
//│ abstract class A(): C
//│ class B() extends A
//│ class C() extends A, B

abstract class A(): C
abstract class B() extends A
class C() extends B
//│ abstract class A(): C
//│ abstract class B() extends A
//│ class C() extends A, B

// :e // FIXME transitivity of self types
class D() extends B
//│ class D() extends A, B

:e // FIXME transitivity of self types
fun test(x: B): C = x
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.143: 	fun test(x: B): C = x
//│ ║         	                    ^
//│ ╟── type `B` is not an instance of `C`
//│ ║  l.143: 	fun test(x: B): C = x
//│ ║         	            ^
//│ ╟── but it flows into reference with expected type `C`
//│ ║  l.143: 	fun test(x: B): C = x
//│ ║         	                    ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.143: 	fun test(x: B): C = x
//│ ╙──       	                ^
//│ fun test: (x: B) -> C


