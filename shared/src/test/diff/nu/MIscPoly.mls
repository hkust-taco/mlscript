:NewDefs



[(x: 'a) => x]
//│ [forall 'a. (x: 'a) -> 'a]
//│ res
//│     = [ [Function (anonymous)] ]

[forall 'a: (x: 'a) => x]
//│ [forall 'a. (x: 'a) -> 'a]
//│ res
//│     = [ [Function (anonymous)] ]



abstract class C0[A] {
  fun use: forall 'r: [A, 'r -> 'r]
}
//│ abstract class C0[A] {
//│   fun use: forall 'r. [A, 'r -> 'r]
//│ }

class C1 extends C0[Int] {
  fun use = [0, id]
}
//│ class C1 extends C0 {
//│   constructor()
//│   fun use: [0, forall 'a. 'a -> 'a]
//│ }

class C1[AA](aa: AA) extends C0[AA] {
  fun use = [aa, id]
}
//│ class C1[AA](aa: AA) extends C0 {
//│   fun use: [AA, forall 'a. 'a -> 'a]
//│ }



// * FIXME currently we always distribute `forall` types;
// * but this is not sound when distributing into a non-function such as an object type
// * as long as we perform object type intersection merges (which we want to)

class C[A](){fun f: A -> A = id}
//│ class C[A]() {
//│   fun f: A -> A
//│ }

let c = C()
//│ let c: forall 'A. C['A]
//│ c
//│   = C {}

// :e // FIXME
let d = c : C[Int] & C[Str]
//│ let d: C[in Int | Str out nothing]
//│ d
//│   = C {}

// :e // FIXME
let r = d.f(0)
//│ let r: nothing
//│ r
//│   = 0

:re
r()
//│ nothing
//│ res
//│ Runtime error:
//│   TypeError: r is not a function






