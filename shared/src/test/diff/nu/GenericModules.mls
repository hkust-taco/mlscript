:NewDefs


// * TODO generic module definitions need to be restricted so they do not include nay state
// * to avoid unsoundness...


module Test[A] {
  fun foo: A -> A = id
}
//│ module Test[A] {
//│   fun foo: A -> A
//│ }

Test.foo(1) + 1
//│ Int
//│ res
//│     = 2

not(Test.foo(true))
//│ Bool
//│ res
//│     = false

Test.foo
//│ 'A -> 'A
//│ res
//│     = [Function: id]


// * FIXME merging generic module types, as we currently do, is unsound:

let t = Test : Test[Int] & Test[Str]
//│ let t: Test[in Int | Str out nothing]
//│ t
//│   = Test { class: [class Test] }

t.foo
//│ (Int | Str) -> nothing
//│ res
//│     = [Function: id]

:re
t.foo(1)(2)
//│ nothing
//│ res
//│ Runtime error:
//│   TypeError: t.foo(...) is not a function



module Test<A> {
  fun foo: A => A
  fun foo = id
  fun bar: A => A = id
  fun baz(x: A) = x
  fun poly0: 'a -> 'a
  fun poly0 = id
  fun poly1: forall 'a: 'a -> 'a
  fun poly1 = id
  fun poly2: 'a -> 'a = id
}
//│ module Test[A] {
//│   fun bar: A -> A
//│   fun baz: (x: A) -> A
//│   fun foo: A -> A
//│   fun poly0: forall 'a. 'a -> 'a
//│   fun poly1: forall 'a0. 'a0 -> 'a0
//│   fun poly2: forall 'a1. 'a1 -> 'a1
//│ }

Test.foo
//│ 'A -> 'A
//│ res
//│     = [Function: id]

Test.bar
//│ 'A -> 'A
//│ res
//│     = [Function: id]

Test.baz
//│ (x: 'A) -> 'A
//│ res
//│     = [Function: baz]

Test.poly0
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: id]

Test.poly1
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: id]

Test.poly2
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: id]

Test.foo(1)
//│ 1
//│ res
//│     = 1

:re
Test.foo(error) + 1
//│ Int
//│ res
//│ Runtime error:
//│   Error: an error was thrown

:e
Test<Int> .foo
//│ ╔══[ERROR] Type application syntax is not yet supported
//│ ║  l.115: 	Test<Int> .foo
//│ ╙──       	^^^^^^^^^
//│ 'A -> 'A
//│ res
//│     = [Function: id]

:e
(Test<Int>).foo
//│ ╔══[ERROR] Type application syntax is not yet supported
//│ ║  l.124: 	(Test<Int>).foo
//│ ╙──       	 ^^^^^^^^^
//│ 'A -> 'A
//│ res
//│     = [Function: id]


Test
//│ forall 'A. Test['A]
//│ res
//│     = Test { class: [class Test] }

Test : Test<'a>
//│ Test['a]
//│ res
//│     = Test { class: [class Test] }


fun test(x) = if x is Test then x.foo
//│ fun test: forall 'A. Test['A] -> 'A -> 'A

test(Test)
//│ 'A -> 'A
//│ res
//│     = [Function: id]


module Test<A> {
  fun foo = id
}
//│ module Test[A] {
//│   fun foo: forall 'a. 'a -> 'a
//│ }

Test.foo
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: id]


module Test<A> {
  fun foo: A => A
  fun foo = id
}
//│ module Test[A] {
//│   fun foo: A -> A
//│ }

Test.foo
//│ 'A -> 'A
//│ res
//│     = [Function: id]




