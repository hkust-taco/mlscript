:NewDefs



mixin M0(x: Int)
//│ mixin M0(x: Int)

:e
class C0 extends M0
//│ ╔══[ERROR] mixin M0 expects 1 parameter(s); got 0
//│ ║  l.9: 	class C0 extends M0
//│ ╙──     	                 ^^
//│ class C0 {
//│   constructor()
//│ }

:e
class C0 extends M0(1, 2)
//│ ╔══[ERROR] mixin M0 expects 1 parameter(s); got 2
//│ ║  l.18: 	class C0 extends M0(1, 2)
//│ ╙──      	                 ^^^^^^^
//│ class C0 {
//│   constructor()
//│ }

:e
class C0 extends M0(true)
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.27: 	class C0 extends M0(true)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `Int`
//│ ║  l.27: 	class C0 extends M0(true)
//│ ║        	                    ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.5: 	mixin M0(x: Int)
//│ ╙──     	            ^^^
//│ class C0 {
//│   constructor()
//│ }


module Foo {
  fun foo = 0
  fun bar = foo
}
[Foo.foo, Foo.bar]
//│ module Foo {
//│   fun bar: 0
//│   fun foo: 0
//│ }
//│ [0, 0]
//│ res
//│     = [ 0, 0 ]

// * FIXME add initialization checking for non-lazy fields
module Foo {
  let foo = 0
  fun bar = foo
}
[Foo.foo, Foo.bar]
//│ module Foo {
//│   fun bar: 0
//│   let foo: 0
//│ }
//│ [0, 0]
//│ res
//│     = [ undefined, 0 ]


module Bar {
  fun hello = 0
  type I = Int
}
//│ module Bar {
//│   type I = Int
//│   fun hello: 0
//│ }

:e
hello
//│ ╔══[ERROR] identifier not found: hello
//│ ║  l.80: 	hello
//│ ╙──      	^^^^^
//│ error
//│ Code generation encountered an error:
//│   unresolved symbol hello

:e
1 : I
//│ ╔══[ERROR] type identifier not found: I
//│ ║  l.89: 	1 : I
//│ ╙──      	    ^
//│ error
//│ res
//│     = 1


:e
class Foo[A] { 42: A }
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.99: 	class Foo[A] { 42: A }
//│ ║        	               ^^
//│ ╟── integer literal of type `42` does not match type `A`
//│ ╟── Note: constraint arises from type parameter:
//│ ║  l.99: 	class Foo[A] { 42: A }
//│ ╙──      	          ^
//│ class Foo[A] {
//│   constructor()
//│ }


:e
class C1 { fun oops = this.x }
//│ ╔══[ERROR] Type `#C1` does not contain member `x`
//│ ║  l.113: 	class C1 { fun oops = this.x }
//│ ╙──       	                          ^^
//│ class C1 {
//│   constructor()
//│   fun oops: error
//│ }


:e
class C { fun x: Int }
//│ ╔══[ERROR] Member `x` is declared (or its declaration is inherited) but is not implemented in `C`
//│ ║  l.124: 	class C { fun x: Int }
//│ ║         	      ^
//│ ╟── Declared here:
//│ ║  l.124: 	class C { fun x: Int }
//│ ╙──       	              ^^^^^^
//│ class C {
//│   constructor()
//│   fun x: Int
//│ }

:e
class C { val x: Int }
//│ ╔══[ERROR] Member `x` is declared (or its declaration is inherited) but is not implemented in `C`
//│ ║  l.137: 	class C { val x: Int }
//│ ║         	      ^
//│ ╟── Declared here:
//│ ║  l.137: 	class C { val x: Int }
//│ ╙──       	              ^^^^^^
//│ class C {
//│   constructor()
//│   val x: Int
//│ }


