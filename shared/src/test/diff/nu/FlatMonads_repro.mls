:NewDefs


abstract class IO[A] {
  fun bind(f) = Bind(this, f)
  fun hey = this
  fun run: A
}
class Bind[CC, AA](underlying: IO[CC], f: CC -> IO[AA]) extends IO[AA] {
  fun run = f(underlying.run).run
}
class Pure[A](value: A) extends IO[A] {
  fun run = value
}
//│ abstract class IO[A] {
//│   fun bind: forall 'AA. (A -> IO['AA]) -> Bind[A, 'AA]
//│   fun hey: IO[A]
//│   fun run: A
//│ }
//│ class Bind[CC, AA](underlying: IO[CC], f: CC -> IO[AA]) extends IO {
//│   fun bind: forall 'AA0. ('A -> IO['AA0]) -> Bind['A, 'AA0]
//│   fun hey: IO['A]
//│   fun run: AA
//│ }
//│ class Pure[A](value: A) extends IO {
//│   fun bind: forall 'AA1. (A -> IO['AA1]) -> Bind[in A & 'A0 out A, 'AA1]
//│   fun hey: IO['A0]
//│   fun run: A
//│ }
//│ where
//│   'A0 := A
//│   'A := AA

module readInt extends IO[Int] { fun run: Int = 42 }
//│ module readInt extends IO {
//│   fun bind: forall 'AA. ('A -> IO['AA]) -> Bind[Int & 'A, 'AA]
//│   fun hey: IO['A]
//│   fun run: Int
//│ }
//│ where
//│   'A := Int


let ri(f) = Bind(Pure(42), f)
// let ri(f) = Bind(Pure(42) : IO[Int], f)
// let ri(f) = Bind(error : IO[Int], f)
//│ let ri: forall 'CC 'AA. ('CC -> IO['AA]) -> Bind['CC, 'AA]
//│   where
//│     'CC :> 42
//│ ri
//│    = [Function: ri]

ri(Pure)
//│ Bind['CC, 'AA]
//│   where
//│     'CC :> 42
//│         <: 'AA
//│     'AA :> 42
//│ res
//│     = Bind {}

readInt.bind
//│ forall 'AA. (Int -> IO['AA]) -> Bind[Int, 'AA]
//│ res
//│     = [Function: bind]

Bind(readInt, Pure)
//│ Bind[Int & 'AA, 'AA]
//│   where
//│     'AA :> Int
//│ res
//│     = Bind {}


// TODO prevent JS method extrusion; force explicit use of eta epxansion

let b = readInt.bind : (Int -> IO['B]) -> Bind[Int, 'B]
//│ let b: (Int -> IO['B]) -> Bind[Int, 'B]
//│ b
//│   = [Function: bind]

let b = readInt.bind : ('A -> IO['B]) -> Bind['A, 'B] where 'A : Int
//│ let b: (Int -> IO['B]) -> Bind[Int, 'B]
//│ b
//│   = [Function: bind]

let b = readInt.bind : ('A -> IO['B]) -> Bind['A, 'B] where Int : 'A
//│ let b: (Int -> IO['B]) -> Bind[Int, 'B]
//│ b
//│   = [Function: bind]


let r = b of Pure
//│ let r: Bind[in Int & 'B out Int, 'B]
//│   where
//│     'B :> Int
//│ r
//│   = Bind {}

:re // FIXME `undefined` due to JS method extrusion
r.run
//│ Int
//│ res
//│     Runtime error:
//│       TypeError: Cannot read properties of undefined (reading 'run')


let r = readInt.bind of Pure
//│ let r: Bind[in Int & 'AA out Int, 'AA]
//│   where
//│     'AA :> Int
//│ r
//│   = Bind {}

r.run
//│ Int
//│ res
//│     = 42

x => readInt.bind of x
//│ (Int -> IO['AA]) -> Bind[Int, 'AA]
//│ res
//│     = [Function: res]

readInt.bind of Pure
//│ Bind[in Int & 'AA out Int, 'AA]
//│   where
//│     'AA :> Int
//│ res
//│     = Bind {}

readInt: IO['a]
//│ IO[Int]
//│ res
//│     = readInt { class: [class readInt extends IO] }

(readInt : IO[Int]).bind
//│ forall 'AA. (Int -> IO['AA]) -> Bind[Int, 'AA]
//│ res
//│     = [Function: bind]

readInt.run
//│ Int
//│ res
//│     = 42

x => Pure(x).run
//│ 'run -> 'run
//│ res
//│     = [Function: res]


fun loop0 = readInt.bind of Pure
fun loop1 = readInt.bind of (Pure : Int => IO[Int])
fun loop2 = readInt.bind of ((x: Int) => Pure(x))
fun loop3 = readInt.bind of (x => Pure(x) : IO[Int])
//│ fun loop0: forall 'AA. Bind[in Int & 'AA out Int, 'AA]
//│ fun loop1: Bind[Int, Int]
//│ fun loop2: forall 'AA0. Bind[Int, 'AA0]
//│ fun loop3: Bind[Int, Int]
//│ where
//│   'AA0 :> Int
//│   'AA :> Int

fun (#>>) bindOp(x, f) = x.bind(f)
//│ fun (#>>) bindOp: forall 'a 'b. ({bind: 'a -> 'b}, 'a) -> 'b

fun loop =
  readInt #>> n =>
  Pure(n)
//│ fun loop: forall 'AA. Bind[in Int & 'AA out Int, 'AA]
//│   where
//│     'AA :> Int



val x: Bind['A, 'B] where undefined : 'A;; 'A : 'B
//│ val x: forall 'A 'B. Bind['A, 'B]
//│   where
//│     'A :> undefined
//│        <: 'B
//│     'B :> undefined
//│ x
//│   = <missing implementation>

x.run
//│ undefined
//│ res
//│     = <no result>
//│       x is not implemented

val x: Bind['A, 'B] where 'A : undefined;; 'A : 'B
//│ val x: forall 'A 'B. Bind['A, 'B]
//│   where
//│     'A <: undefined & 'B
//│ x
//│   = <missing implementation>

x.run
//│ nothing
//│ res
//│     = <no result>
//│       x is not implemented

val x: Bind[Int, Bool]
//│ val x: Bind[Int, Bool]
//│ x
//│   = <missing implementation>

// :d
x.run
//│ Bool
//│ res
//│     = <no result>
//│       x is not implemented




