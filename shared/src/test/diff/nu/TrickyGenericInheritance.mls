:NewDefs



trait T1[A] {
  fun f: A -> A
}
//│ trait T1[A] {
//│   fun f: A -> A
//│ }

class C1 extends T1 {
  fun f(x: Int) = x
}
//│ class C1 extends T1 {
//│   constructor()
//│   fun f: (x: Int) -> Int
//│ }

class C1 extends T1['FigureItOut] {
  fun f(x: Int) = x
}
//│ class C1 extends T1 {
//│   constructor()
//│   fun f: (x: Int) -> Int
//│ }

let c1 = new C1
//│ let c1: C1
//│ c1
//│    = C1 {}

c1.f
//│ (x: Int) -> Int
//│ res
//│     = [Function: f]

(c1 : T1).f
//│ ??A -> ??A0
//│ res
//│     = [Function: f]

(c1 : T1['X]).f
//│ Int -> Int
//│ res
//│     = [Function: f]

:ns
(c1 : T1).f
//│ 'f
//│   where
//│     'f :> in ??A out ??A0 -> in ??A out ??A0
//│ res
//│     = [Function: f]

:ns
(c1 : T1['X]).f
//│ 'f
//│   where
//│     'f :> 'X -> 'X
//│     'X :> Int
//│        <: 'FigureItOut
//│     'FigureItOut :> Int
//│                  <: 'X & Int
//│ res
//│     = [Function: f]

:e
(c1 : T1['X]).f(false)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.69: 	(c1 : T1['X]).f(false)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `false` is not an instance of type `Int`
//│ ║  l.69: 	(c1 : T1['X]).f(false)
//│ ║        	                ^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.21: 	  fun f(x: Int) = x
//│ ║        	           ^^^
//│ ╟── from type variable:
//│ ║  l.69: 	(c1 : T1['X]).f(false)
//│ ╙──      	         ^^
//│ Int | error | false
//│ res
//│     = false



// * The more tricky case:

:e
trait T2[A] {
  fun f: A -> A
  val r = C2().f(false)
}
class C2 extends T2['FigureItOut] {
  fun f(x: Int) = x
}
//│ ╔══[ERROR] Method implementations in traits are not yet supported
//│ ║  l.93: 	  val r = C2().f(false)
//│ ╙──      	  ^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Class C2 cannot be instantiated as it exposes no such constructor
//│ ║  l.93: 	  val r = C2().f(false)
//│ ╙──      	          ^^
//│ trait T2[A] {
//│   fun f: A -> A
//│   val r: error
//│ }
//│ class C2 extends T2 {
//│   constructor()
//│   fun f: (x: Int) -> Int
//│   val r: error
//│ }

:e
trait T3[A] {
  fun f: A -> A
  val r = (C3() : T3['X]).f(false)
}
class C3 extends T3['FigureItOut] {
  fun f(x: Int) = x
}
//│ ╔══[ERROR] Method implementations in traits are not yet supported
//│ ║  l.117: 	  val r = (C3() : T3['X]).f(false)
//│ ╙──       	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Class C3 cannot be instantiated as it exposes no such constructor
//│ ║  l.117: 	  val r = (C3() : T3['X]).f(false)
//│ ╙──       	           ^^
//│ trait T3[A] {
//│   fun f: A -> A
//│   val r: false
//│ }
//│ class C3 extends T3 {
//│   constructor()
//│   fun f: (x: Int) -> Int
//│   val r: false
//│ }

:e // FIXME
C3() : T3['X]
//│ ╔══[ERROR] Construction of unparameterized class C3 should use the `new` keyword
//│ ║  l.139: 	C3() : T3['X]
//│ ╙──       	^^
//│ T3[Int]
//│ res
//│     Runtime error:
//│       TypeError: Class constructor C3 cannot be invoked without 'new'



// FIXME
abstract class IO[A] {
  fun test = Bind(this) : IO[Int]
}
class Bind[A](underlying: IO[A]) extends IO[Int]
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.151: 	abstract class IO[A] {
//│ ║         	         ^^^^^^^^^^^^^
//│ ║  l.152: 	  fun test = Bind(this) : IO[Int]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.153: 	}
//│ ╙──       	^
//│ ╔══[ERROR] Type `Bind[?A]` does not contain member `IO#A`
//│ ║  l.151: 	abstract class IO[A] {
//│ ╙──       	                  ^
//│ abstract class IO[A] {
//│   fun test: IO[Int]
//│ }
//│ class Bind[A](underlying: IO[A]) extends IO

// FIXME
abstract class IO[A] {
  fun map[B]: (A -> B) -> IO[B] // * Removing this works...
  fun map(f) = Map(this, f)
  fun run: A
}
class Map[A, B](underlying: IO[A], f: A -> B) extends IO[B] {
  fun run: B = error
}
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.171: 	abstract class IO[A] {
//│ ║         	         ^^^^^^^^^^^^^
//│ ║  l.172: 	  fun map[B]: (A -> B) -> IO[B] // * Removing this works...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.173: 	  fun map(f) = Map(this, f)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.174: 	  fun run: A
//│ ║         	^^^^^^^^^^^^
//│ ║  l.175: 	}
//│ ╙──       	^
//│ ╔══[ERROR] Type `Map[?A, ?B]` does not contain member `IO#A`
//│ ║  l.171: 	abstract class IO[A] {
//│ ╙──       	                  ^
//│ ╔══[ERROR] Type mismatch in definition of method map:
//│ ║  l.173: 	  fun map(f) = Map(this, f)
//│ ║         	      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Map[?A, ?B]` does not have field 'IO#A'
//│ ║  l.173: 	  fun map(f) = Map(this, f)
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.172: 	  fun map[B]: (A -> B) -> IO[B] // * Removing this works...
//│ ╙──       	                          ^^^^^
//│ abstract class IO[A] {
//│   fun map: forall 'B. (A -> 'B) -> IO['B]
//│   fun run: A
//│ }
//│ class Map[A, B](underlying: IO[A], f: A -> B) extends IO {
//│   fun run: B
//│ }

// FIXME
abstract class IO[A] {
  fun bind[B]: (A -> IO[B]) -> IO[B] // * FIXME: causes cycle error
  fun bind(f) = Bind(this, f)
  fun run: A
}
class Bind[A, B](underlying: IO[A], f: A -> IO[B]) extends IO[B] {
  fun run = f(underlying.run).run
}
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.211: 	abstract class IO[A] {
//│ ║         	         ^^^^^^^^^^^^^
//│ ║  l.212: 	  fun bind[B]: (A -> IO[B]) -> IO[B] // * FIXME: causes cycle error
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.213: 	  fun bind(f) = Bind(this, f)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.214: 	  fun run: A
//│ ║         	^^^^^^^^^^^^
//│ ║  l.215: 	}
//│ ╙──       	^
//│ ╔══[ERROR] Type `Bind[?A, ?B]` does not contain member `IO#A`
//│ ║  l.211: 	abstract class IO[A] {
//│ ╙──       	                  ^
//│ ╔══[ERROR] Type mismatch in definition of method bind:
//│ ║  l.213: 	  fun bind(f) = Bind(this, f)
//│ ║         	      ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Bind[?A, ?B]` does not have field 'IO#A'
//│ ║  l.213: 	  fun bind(f) = Bind(this, f)
//│ ║         	                ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.212: 	  fun bind[B]: (A -> IO[B]) -> IO[B] // * FIXME: causes cycle error
//│ ╙──       	                               ^^^^^
//│ abstract class IO[A] {
//│   fun bind: forall 'B. (A -> IO['B]) -> IO['B]
//│   fun run: A
//│ }
//│ class Bind[A, B](underlying: IO[A], f: A -> IO[B]) extends IO {
//│   fun run: B
//│ }


// TODO support
abstract class IO[A] {
  class Bind[B]() extends IO[B]
}
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.252: 	abstract class IO[A] {
//│ ║         	         ^^^^^^^^^^^^^
//│ ║  l.253: 	  class Bind[B]() extends IO[B]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.254: 	}
//│ ╙──       	^
//│ abstract class IO[A] {
//│   class Bind[B]() extends IO
//│ }


