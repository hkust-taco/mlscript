:NewDefs


// * A test to show how to add meta data to underlying values by wrapping them.


mixin Base {
  fun unwrap(x) = x
  fun rewrap(x, f) = f(x)
}
//│ mixin Base() {
//│   fun rewrap: ('a, 'a -> 'b) -> 'b
//│   fun unwrap: 'c -> 'c
//│ }


mixin WithUid {
  fun unwrap(x) = super.unwrap(x).underlying
  fun rewrap(x, f) = super.rewrap(x, y => { underlying: f(y.underlying), uid: y.uid })
  fun getUid(x) = super.unwrap(x).uid
  fun setUid(x, uid: Int) = super.rewrap(x, y => {
    underlying: y.underlying,
    uid
  })
}
//│ mixin WithUid() {
//│   super: {
//│     rewrap: ('a, forall 'uid. {uid: 'uid, underlying: 'underlying} -> {uid: 'uid, underlying: 'b}) -> 'c & ('d, forall 'underlying0. {underlying: 'underlying0} -> {uid: Int, underlying: 'underlying0}) -> 'e,
//│     unwrap: 'f -> {underlying: 'underlying1} & 'g -> {uid: 'uid0}
//│   }
//│   fun getUid: 'g -> 'uid0
//│   fun rewrap: ('a, 'underlying -> 'b) -> 'c
//│   fun setUid: ('d, uid: Int) -> 'e
//│   fun unwrap: 'f -> 'underlying1
//│ }


class Type(val name: Str)
//│ class Type(name: Str)

mixin WithType {
  fun unwrap(x) = super.unwrap(x).underlying
  fun rewrap(x, f) = super.rewrap(x, y => { underlying: f(y.underlying), ty: y.ty })
  fun getType(x) = super.unwrap(x).ty
  fun setType(x, ty: Type) = super.rewrap(x, y => {
    underlying: y.underlying,
    ty
  })
}
//│ mixin WithType() {
//│   super: {
//│     rewrap: ('a, forall 'ty. {ty: 'ty, underlying: 'underlying} -> {ty: 'ty, underlying: 'b}) -> 'c & ('d, forall 'underlying0. {underlying: 'underlying0} -> {ty: Type, underlying: 'underlying0}) -> 'e,
//│     unwrap: 'f -> {underlying: 'underlying1} & 'g -> {ty: 'ty0}
//│   }
//│   fun getType: 'g -> 'ty0
//│   fun rewrap: ('a, 'underlying -> 'b) -> 'c
//│   fun setType: ('d, ty: Type) -> 'e
//│   fun unwrap: 'f -> 'underlying1
//│ }


module Test0 extends Base, WithUid
//│ module Test0 {
//│   fun getUid: {uid: 'uid, underlying: 'underlying} -> 'uid
//│   fun rewrap: ({uid: 'uid0, underlying: 'underlying0 & 'underlying1}, 'underlying1 -> 'underlying0) -> {uid: Int | 'uid0, underlying: 'underlying0}
//│   fun setUid: ({uid: 'uid0, underlying: 'underlying0 & 'underlying1}, uid: Int) -> {uid: Int | 'uid0, underlying: 'underlying0}
//│   fun unwrap: {uid: 'uid, underlying: 'underlying} -> 'underlying
//│ }

module Test0 extends Base, WithUid, WithUid
//│ module Test0 {
//│   fun getUid: {uid: anything, underlying: {uid: 'uid, underlying: 'underlying}} -> 'uid
//│   fun rewrap: ({
//│     uid: 'uid0,
//│     underlying: {uid: 'uid1, underlying: 'underlying0 & 'underlying1} & 'underlying2
//│   }, 'underlying1 -> 'underlying0) -> {
//│     uid: Int | 'uid0,
//│     underlying: 'underlying2 | {uid: Int | 'uid1, underlying: 'underlying0}
//│   }
//│   fun setUid: ({
//│     uid: 'uid0,
//│     underlying: {uid: 'uid1, underlying: 'underlying0 & 'underlying1} & 'underlying2
//│   }, uid: Int) -> {
//│     uid: Int | 'uid0,
//│     underlying: 'underlying2 | {uid: Int | 'uid1, underlying: 'underlying0}
//│   }
//│   fun unwrap: {uid: anything, underlying: {uid: 'uid, underlying: 'underlying}} -> 'underlying
//│ }


module Test1 extends Base, WithUid, WithType
//│ module Test1 {
//│   fun getType: {uid: 'uid, underlying: {ty: 'ty, underlying: 'underlying}} -> 'ty
//│   fun getUid: {uid: 'uid, underlying: {ty: 'ty, underlying: 'underlying}} -> 'uid
//│   fun rewrap: ({
//│     uid: 'uid0,
//│     underlying: {ty: 'ty0, underlying: 'underlying0 & 'underlying1} & 'underlying2
//│   }, 'underlying1 -> 'underlying0) -> {
//│     uid: Int | 'uid0,
//│     underlying: 'underlying2 | {ty: Type | 'ty0, underlying: 'underlying0}
//│   }
//│   fun setType: ({
//│     uid: 'uid0,
//│     underlying: {ty: 'ty0, underlying: 'underlying0 & 'underlying1} & 'underlying2
//│   }, ty: Type) -> {
//│     uid: Int | 'uid0,
//│     underlying: 'underlying2 | {ty: Type | 'ty0, underlying: 'underlying0}
//│   }
//│   fun setUid: ({
//│     uid: 'uid0,
//│     underlying: {ty: 'ty0, underlying: 'underlying0 & 'underlying1} & 'underlying2
//│   }, uid: Int) -> {
//│     uid: Int | 'uid0,
//│     underlying: 'underlying2 | {ty: Type | 'ty0, underlying: 'underlying0}
//│   }
//│   fun unwrap: {uid: 'uid, underlying: {ty: 'ty, underlying: 'underlying}} -> 'underlying
//│ }

let uid = 0
let ty = Type("A")
let underlying = 42
let a = { uid, underlying: { ty, underlying } }
//│ let uid: 0
//│ let ty: Type
//│ let underlying: 42
//│ let a: {uid: 0, underlying: {ty: Type, underlying: 42}}
//│ uid
//│     = 0
//│ ty
//│    = Type {}
//│ underlying
//│            = 42
//│ a
//│   = { uid: 0, underlying: { ty: Type {}, underlying: 42 } }

Test1.unwrap(a)
//│ 42
//│ res
//│     = 42

Test1.getUid(a)
//│ 0
//│ res
//│     = 0

Test1.setUid(a, 1)
//│ {uid: Int, underlying: {ty: Type, underlying: 42}}
//│ res
//│     = { underlying: { ty: Type {}, underlying: 42 }, uid: 1 }

Test1.getType(a).name
//│ Str
//│ res
//│     = 'A'

a.underlying.ty.name
//│ Str
//│ res
//│     = 'A'

let b = Test1.setType(a, Type("B"))
//│ let b: {uid: Int, underlying: {ty: Type, underlying: 42}}
//│ b
//│   = { underlying: { underlying: 42, ty: Type {} }, uid: 0 }

Test1.getType(b).name
//│ Str
//│ res
//│     = 'B'

b.underlying.ty.name
//│ Str
//│ res
//│     = 'B'


