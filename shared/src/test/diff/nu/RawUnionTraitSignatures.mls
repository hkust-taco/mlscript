:NewDefs



trait Foo[A] { fun x: A }
//│ trait Foo[A] {
//│   fun x: A
//│ }


trait Base1: Foo
//│ trait Base1: #Foo

(b: Base1) => b.x
//│ (b: Base1) -> ??A
//│ res
//│     = [Function: res]

(b: Base1) => b : Foo
//│ (b: Base1) -> #Foo
//│ res
//│     = [Function: res]

:e
(b: Base1) => b : Foo['X]
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.25: 	(b: Base1) => b : Foo['X]
//│ ║        	              ^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.25: 	(b: Base1) => b : Foo['X]
//│ ║        	                      ^^
//│ ╟── back into type variable `A`
//│ ║  l.5: 	trait Foo[A] { fun x: A }
//│ ╙──     	          ^
//│ forall 'X. (b: Base1) -> Foo['X]
//│   where
//│     'X :> ??A
//│        <: ??A0
//│ res
//│     = [Function: res]

:e
1 : Foo[Int]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.43: 	1 : Foo[Int]
//│ ║        	^
//│ ╟── integer literal of type `1` is not an instance of type `Foo`
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.43: 	1 : Foo[Int]
//│ ╙──      	    ^^^^^^^^
//│ Foo[Int]
//│ res
//│     = 1


trait Base1: Foo { val x: Int }
//│ trait Base1: #Foo {
//│   val x: Int
//│ }

(b: Base1) => b.x
//│ (b: Base1) -> (Int & ??A)
//│ res
//│     = [Function: res]


trait Base1: Foo[1 | 2] { val x: 0 | 1 }
//│ trait Base1: Foo[1 | 2] {
//│   val x: 0 | 1
//│ }

(b: Base1) => b.x
//│ (b: Base1) -> 1
//│ res
//│     = [Function: res]


trait Base2: Foo['FigureItOut]
//│ trait Base2: Foo[in ??FigureItOut out ??FigureItOut0]

(b: Base2) => b.x
//│ (b: Base2) -> ??FigureItOut
//│ res
//│     = [Function: res]

(b: Base1) => b : Foo
//│ (b: Base1) -> #Foo
//│ res
//│     = [Function: res]

// :e
// FIXME
(b: Base2) => b : Foo['X]
//│ forall 'X. (b: Base2) -> Foo['X]
//│   where
//│     'X :> ??FigureItOut
//│        <: ??FigureItOut0
//│ res
//│     = [Function: res]


:e
class Impl extends Base2
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.103: 	class Impl extends Base2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `#Impl` is not an instance of type `Foo`
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.78: 	trait Base2: Foo['FigureItOut]
//│ ╙──      	             ^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `#Impl` does not contain member `Foo#A`
//│ ║  l.5: 	trait Foo[A] { fun x: A }
//│ ╙──     	          ^
//│ class Impl extends Base2 {
//│   constructor()
//│ }

:e
(x: Impl) => x : Base2
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.119: 	(x: Impl) => x : Base2
//│ ║         	             ^
//│ ╟── type `Impl` is not an instance of type `Foo`
//│ ║  l.119: 	(x: Impl) => x : Base2
//│ ║         	    ^^^^
//│ ╟── but it flows into reference with expected type `#Foo`
//│ ║  l.119: 	(x: Impl) => x : Base2
//│ ║         	             ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.78: 	trait Base2: Foo['FigureItOut]
//│ ║        	             ^^^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.119: 	(x: Impl) => x : Base2
//│ ╙──       	                 ^^^^^
//│ (x: Impl) -> Base2
//│ res
//│     = [Function: res]

:e
class Impl() extends Base2, Foo
//│ ╔══[ERROR] Type error in type declaration
//│ ║  l.140: 	class Impl() extends Base2, Foo
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'FigureItOut` leaks out of its scope
//│ ║  l.78: 	trait Base2: Foo['FigureItOut]
//│ ╙──      	                 ^^^^^^^^^^^^
//│ ╔══[ERROR] Member `x` is declared (or its declaration is inherited) but is not implemented in `Impl`
//│ ║  l.140: 	class Impl() extends Base2, Foo
//│ ║         	      ^^^^
//│ ╟── Declared here:
//│ ║  l.5: 	trait Foo[A] { fun x: A }
//│ ╙──     	               ^^^^^^^^
//│ class Impl() extends Base2, Foo {
//│   fun x: 'A
//│ }

:e
class Impl() extends Base2, Foo {
  fun x = 1
}
//│ ╔══[ERROR] Type error in type declaration
//│ ║  l.158: 	class Impl() extends Base2, Foo {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.159: 	  fun x = 1
//│ ║         	^^^^^^^^^^^
//│ ║  l.160: 	}
//│ ║         	^
//│ ╟── type variable `'FigureItOut` leaks out of its scope
//│ ║  l.78: 	trait Base2: Foo['FigureItOut]
//│ ╙──      	                 ^^^^^^^^^^^^
//│ class Impl() extends Base2, Foo {
//│   fun x: 1
//│ }

Impl().x
//│ 1
//│ res
//│     = 1

:e
Impl() : Base2
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.181: 	Impl() : Base2
//│ ║         	^^^^^^
//│ ╟── type variable `'FigureItOut` leaks out of its scope
//│ ║  l.159: 	  fun x = 1
//│ ╙──       	          ^
//│ Base2
//│ res
//│     = Impl {}

:e
(Impl() : Base2).x
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.193: 	(Impl() : Base2).x
//│ ║         	 ^^^^^^
//│ ╟── type variable `'FigureItOut` leaks out of its scope
//│ ║  l.159: 	  fun x = 1
//│ ╙──       	          ^
//│ ??FigureItOut
//│ res
//│     = 1

:e
class Impl2() extends Base2, Foo[Int] {
  fun x = 1
}
//│ ╔══[ERROR] Type error in type declaration
//│ ║  l.205: 	class Impl2() extends Base2, Foo[Int] {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.206: 	  fun x = 1
//│ ║         	^^^^^^^^^^^
//│ ║  l.207: 	}
//│ ║         	^
//│ ╟── type variable `'FigureItOut` leaks out of its scope
//│ ║  l.205: 	class Impl2() extends Base2, Foo[Int] {
//│ ╙──       	                                 ^^^
//│ ╔══[ERROR] Type error in type declaration
//│ ║  l.205: 	class Impl2() extends Base2, Foo[Int] {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.206: 	  fun x = 1
//│ ║         	^^^^^^^^^^^
//│ ║  l.207: 	}
//│ ║         	^
//│ ╟── type variable `'FigureItOut` leaks out of its scope
//│ ║  l.78: 	trait Base2: Foo['FigureItOut]
//│ ║        	                 ^^^^^^^^^^^^
//│ ╟── into type `Int`
//│ ║  l.205: 	class Impl2() extends Base2, Foo[Int] {
//│ ╙──       	                                 ^^^
//│ class Impl2() extends Base2, Foo {
//│   fun x: 1
//│ }

:e
(Impl2() : Base2).x
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.236: 	(Impl2() : Base2).x
//│ ║         	 ^^^^^^^
//│ ╟── type variable `'FigureItOut` leaks out of its scope
//│ ║  l.205: 	class Impl2() extends Base2, Foo[Int] {
//│ ╙──       	                                 ^^^
//│ ??FigureItOut
//│ res
//│     = 1



trait Test1[A] { fun x: A }
trait Test2[A]: Test1[[A, A]]
//│ trait Test1[A] {
//│   fun x: A
//│ }
//│ trait Test2[A]: Test1[[A, A]]

(t: Test2[Int]) => t.x
//│ (t: Test2[Int]) -> [Int, Int]
//│ res
//│     = [Function: res]



