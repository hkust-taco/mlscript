:NewDefs


type I = Int
//│ type I = Int

class CI1
//│ class CI1

// :e
type AI1 = Array[Int]
//│ type AI1 = Array[Int]

type AI2 = Array<Int>
//│ type AI2 = Array[Int]

:e
<<<<<<<
type AI3(n) = Array[Int]
//│ ╔══[ERROR] Class parameters currently need type annotations
//│ ║  l.18: 	type AI3(n) = Array[Int]
//│ ╙──      	         ^
//│ ╔══[ERROR] type alias definitions cannot have value parameters
//│ ║  l.18: 	type AI3(n) = Array[Int]
||||||| 99d688be
type AI3(n) = Array[int]
//│ ╔══[ERROR] Class parameters currently need type annotations
//│ ║  l.18: 	type AI3(n) = Array[int]
//│ ╙──      	         ^
//│ ╔══[ERROR] type alias definitions cannot have value parameters
//│ ║  l.18: 	type AI3(n) = Array[int]
=======
type AI3(n) = Array[int]
//│ ╔══[ERROR] Type alias definitions cannot have value parameters
//│ ║  l.18: 	type AI3(n) = Array[int]
>>>>>>>

// :e
type AI3[A] = Array<A>
//│ type AI3[A] = Array[A]

type AI4<A> = Array<A>
//│ type AI4[A] = Array[A]

let r = 123
//│ let r: 123
//│ r
//│   = 123

r: I
//│ I
//│ res
//│     = 123

let a = [r, r, r]
//│ let a: (123, 123, 123,)
//│ a
//│   = [ 123, 123, 123 ]

a : AI1
//│ AI1
//│ res
//│     = [ 123, 123, 123 ]

a : AI2
//│ AI2
//│ res
//│     = [ 123, 123, 123 ]

a : AI3[Int]
//│ AI3[Int]
//│ res
//│     = [ 123, 123, 123 ]

a : AI4<Int>
//│ AI4[Int]
//│ res
//│     = [ 123, 123, 123 ]

