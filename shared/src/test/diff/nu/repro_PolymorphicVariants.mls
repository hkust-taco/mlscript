:NewDefs

// Test that reprduces subtle type simplification bug

class Cons[out A](head: A, tail: Cons[A] | Nil)
module Nil
//│ class Cons[A](head: A, tail: Cons[A] | Nil)
//│ module Nil

class Abs[A](x: string, t: A)
class App[A](s: A, t: A)
//│ class Abs[A](x: string, t: A)
//│ class App[A](s: A, t: A)

fun eval(sub, v) =
  if v is
    Abs(x, t) then
      eval(Cons((error, error), Nil), error)
      eval(Cons(error, sub), error)
      error
//│ fun eval: (Cons[anything] | Nil, Abs[anything],) -> nothing

mixin EvalLambda {
  fun eval(sub, v) =
    if v is
      Abs(x, t) then
        this.eval(Cons((error, error), Nil), error)
        this.eval(Cons((x, error), sub), error)
        error
}
//│ mixin EvalLambda() {
//│   this: {eval: (Cons[(string, nothing,) | 'A], nothing,) -> anything}
//│   fun eval: (Cons['A] | Nil, Abs[anything],) -> nothing
//│ }

// * Note: this used to crash because of a current type simplification bug: analyze2 does not traverse TVs witht he correct PolMap
// *  The original unreduced version in PolymorphicVariants.mls still crashes...
// :ds
module Test1 extends EvalLambda
//│ module Test1 {
//│   fun eval: (Cons[anything] | Nil, Abs[anything],) -> nothing
//│ }

