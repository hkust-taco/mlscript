:NewDefs


// Tuple literals use square brackets.
let t = [0, 1, 2]
//│ let t: [0, 1, 2]
//│ t
//│   = [ 0, 1, 2 ]


// Tuple indices are zero-based.
t.0
t.1
t.2
//│ 2
//│ res
//│     = 0
//│ res
//│     = 1
//│ res
//│     = 2


// Tuple indices cannot be negative.
:e
t.-1
//│ ╔══[ERROR] identifier not found: .-
//│ ║  l.26: 	t.-1
//│ ╙──      	 ^^
//│ error
//│ Code generation encountered an error:
//│   unresolved symbol .-


// Non-zero tuple indices cannot start with a zero.
:e
t.01
//│ ╔══[ERROR] identifier not found: .
//│ ║  l.37: 	t.01
//│ ╙──      	 ^
//│ error
//│ Code generation encountered an error:
//│   unresolved symbol .


// Out of bounds indices cause type errors.
:e
t.3
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.48: 	t.3
//│ ║        	^^^
//│ ╟── tuple literal of type `{0: 0, 1: 1, 2: 2}` does not have field '3'
//│ ║  l.5: 	let t = [0, 1, 2]
//│ ║       	        ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{3: ?a}`
//│ ║  l.48: 	t.3
//│ ╙──      	^
//│ error
//│ res
//│     = undefined


// Note that record field can be arbitrary integer literals.
{ 000000: "just zero" }
{ 042: "cuarenta y dos" }
//│ {42: "cuarenta y dos"}
//│ res
//│     = { '0': 'just zero' }
//│ res
//│     = { '42': 'cuarenta y dos' }


// Negative integer record fields are disallowed, which aligns with JavaScript.
:pe
:e
{ -1: "oh no" }
//│ ╔══[PARSE ERROR] Record field should have a name
//│ ╙──
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ╟── integer literal of type `-1` does not match type `"oh no"`
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.76: 	{ -1: "oh no" }
//│ ╙──      	      ^^^^^^^
//│ {<error>: "oh no"}
//│ res
//│     = { '<error>': -1 }


// Note that leading zeros of integer record fields are ignored.
// And duplicate fields lead to errors.
:e
{ 0: "oh", 00: "no" }
//│ ╔══[ERROR] Multiple declarations of field name 0 in record literal
//│ ║  l.92: 	{ 0: "oh", 00: "no" }
//│ ║        	     ^^^^^^^^^^^^^^
//│ ╟── Declared at
//│ ║  l.92: 	{ 0: "oh", 00: "no" }
//│ ║        	  ^
//│ ╟── Declared at
//│ ║  l.92: 	{ 0: "oh", 00: "no" }
//│ ╙──      	           ^^
//│ {0: "oh", 0: "no"}
//│ res
//│     = { '0': 'no' }


// Fields that are integers or start with an underscore should not be used as name hints.
fun f(x) = x._q
fun g(x) = x._1
fun h(x) = x.1
//│ fun f: forall 'a. {_q: 'a} -> 'a
//│ fun g: forall 'b. {_1: 'b} -> 'b
//│ fun h: forall 'c. {1: 'c} -> 'c


// Other fields should be used as name hints.
fun p(x) = x.y
//│ fun p: forall 'y. {y: 'y} -> 'y
