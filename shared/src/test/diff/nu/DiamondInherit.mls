:NewDefs




trait Foo[A] { fun foo: A }
//│ trait Foo[A] {
//│   fun foo: A
//│ }

module Bar extends Foo[Int | Bool], Foo[Int | Str] {
  fun foo = 123
}
//│ module Bar extends Foo {
//│   fun foo: 123
//│ }

Bar.foo
//│ 123
//│ res
//│     = 123

Bar : Foo['X]
//│ Foo['X]
//│   where
//│     'X := Int | Str
//│ res
//│     = Bar { class: [class Bar extends Object] }

(Bar : Foo['X]).foo
//│ Int | Str
//│ res
//│     = 123


trait Foo[A] { fun foo: A;; fun bar: A -> A }
//│ trait Foo[A] {
//│   fun bar: A -> A
//│   fun foo: A
//│ }

module Bar extends Foo[Int | Bool], Foo[Int | Str] {
  fun foo = 123
  fun bar = id
}
//│ module Bar extends Foo {
//│   fun bar: forall 'a. 'a -> 'a
//│   fun foo: 123
//│ }

Bar.bar
//│ forall 'a. 'a -> 'a
//│ res
//│     = [Function: id]

Bar : Foo['X]
//│ Foo['X]
//│   where
//│     'X := Int | Str
//│ res
//│     = Bar { class: [class Bar extends Object] }


trait T1 extends Foo[Int | Bool]
//│ trait T1 extends Foo {
//│   fun bar: 'A -> 'A
//│   fun foo: 'A
//│ }
//│ where
//│   'A := in Bool | Int out Int | false | true

module Bar extends T1, Foo[Int | Str] {
  fun foo = 123
  fun bar = id
}
//│ module Bar extends Foo, T1 {
//│   fun bar: forall 'a. 'a -> 'a
//│   fun foo: 123
//│ }

(Bar : Foo['X]).foo
//│ Int | Str
//│ res
//│     = 123

(Bar : Foo['X]).bar
//│ ('X & (Int | Str)) -> (Int | Str | 'X)
//│ res
//│     = [Function: id]

(Bar : T1).foo
//│ Int | false | true
//│ res
//│     = 123

let f = (Bar : T1).bar
f(true)
//│ let f: ('A & (Bool | Int)) -> (Int | false | true | 'A)
//│ Int | false | true
//│ f
//│   = [Function: id]
//│ res
//│     = true

:e
module Bar extends T1, Foo[Int | Str] {
  fun foo = 123
  fun bar(x) = x + 1
}
//│ ╔══[ERROR] Type mismatch in definition of method bar:
//│ ║  l.108: 	  fun bar(x) = x + 1
//│ ║         	      ^^^^^^^^^^^^^^
//│ ╟── type `Bool` is not an instance of `Int`
//│ ║  l.64: 	trait T1 extends Foo[Int | Bool]
//│ ║        	                           ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.108: 	  fun bar(x) = x + 1
//│ ╙──       	               ^
//│ ╔══[ERROR] Type mismatch in definition of method bar:
//│ ║  l.108: 	  fun bar(x) = x + 1
//│ ║         	      ^^^^^^^^^^^^^^
//│ ╟── type `Str` is not an instance of `Int`
//│ ║  l.106: 	module Bar extends T1, Foo[Int | Str] {
//│ ║         	                                 ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.108: 	  fun bar(x) = x + 1
//│ ╙──       	               ^
//│ module Bar extends Foo, T1 {
//│   fun bar: Int -> Int
//│   fun foo: 123
//│ }


trait Base[A] { fun foo: A;; fun bar: A -> A }
trait Derived1[A] extends Base[A]
trait Derived2 extends Base[[Int | Str, Int | Str]]
//│ trait Base[A] {
//│   fun bar: A -> A
//│   fun foo: A
//│ }
//│ trait Derived1[A] extends Base {
//│   fun bar: 'A -> 'A
//│   fun foo: 'A
//│ }
//│ trait Derived2 extends Base {
//│   fun bar: 'A0 -> 'A0
//│   fun foo: 'A0
//│ }
//│ where
//│   'A0 := [Int | Str, Int | Str]
//│   'A := A

class Final extends Derived1[[Int, Int]], Derived2 {
  fun foo = [123, 456]
  fun bar([x, y]) = [error, error]
}
//│ class Final extends Base, Derived1, Derived2 {
//│   constructor()
//│   fun bar: ([anything, anything]) -> [nothing, nothing]
//│   fun foo: [123, 456]
//│ }

class Final extends Derived1[[Int, Int]], Derived2 {
  fun foo = [123, 456]
  fun bar([x, y]) = [y, x]
}
//│ class Final extends Base, Derived1, Derived2 {
//│   constructor()
//│   fun bar: forall 'a 'b. (['a, 'b]) -> ['b, 'a]
//│   fun foo: [123, 456]
//│ }


