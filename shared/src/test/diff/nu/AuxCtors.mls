:NewDefs


class C(val x: Int) { constructor(y: Int) { x = y } }
new C(123).x
//│ class C(x: Int) {
//│   constructor(y: Int)
//│ }
//│ Int
//│ res
//│     = 123

class C(val x: Int) { constructor(y) { x = y } }
new C(123).x
//│ class C(x: Int) {
//│   constructor(y: Int)
//│ }
//│ Int
//│ res
//│     = 123

class C(val x: Int) { constructor(y: Int) { log(y);; x = y;; log(x) } }
new C(123).x
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.22: 	class C(val x: Int) { constructor(y: Int) { log(y);; x = y;; log(x) } }
//│ ╙──      	                                                   ^
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.22: 	class C(val x: Int) { constructor(y: Int) { log(y);; x = y;; log(x) } }
//│ ╙──      	                                                           ^
//│ class C(x: Int) {
//│   constructor(y: Int)
//│ }
//│ Int
//│ res
//│     = 123
//│ // Output
//│ 123
//│ 123

:e
class C(val x: Int) { constructor(y: Int) { x = y;; log(x);; x = y + 1;; log(x) } }
new C(123).x
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.41: 	class C(val x: Int) { constructor(y: Int) { x = y;; log(x);; x = y + 1;; log(x) } }
//│ ╙──      	                                                  ^
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.41: 	class C(val x: Int) { constructor(y: Int) { x = y;; log(x);; x = y + 1;; log(x) } }
//│ ╙──      	                                                           ^
//│ ╔══[ERROR] Class parameter 'x' was already set
//│ ║  l.41: 	class C(val x: Int) { constructor(y: Int) { x = y;; log(x);; x = y + 1;; log(x) } }
//│ ╙──      	                                                             ^
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.41: 	class C(val x: Int) { constructor(y: Int) { x = y;; log(x);; x = y + 1;; log(x) } }
//│ ╙──      	                                                                       ^
//│ class C(x: Int) {
//│   constructor(y: Int)
//│ }
//│ Int
//│ res
//│     = 124
//│ // Output
//│ 123
//│ 124

:e
class C(val x: Int) { constructor(y: Int) { log(x);; x = y } }
//│ ╔══[ERROR] identifier not found: x
//│ ║  l.66: 	class C(val x: Int) { constructor(y: Int) { log(x);; x = y } }
//│ ╙──      	                                                ^
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.66: 	class C(val x: Int) { constructor(y: Int) { log(x);; x = y } }
//│ ╙──      	                                                   ^
//│ class C(x: Int) {
//│   constructor(y: Int)
//│ }
//│ Code generation encountered an error:
//│   unresolved symbol x

:e
class C(val x: Int) { constructor(y: Str) { x = y } }
//│ ╔══[ERROR] Type mismatch in auxiliary class constructor:
//│ ║  l.80: 	class C(val x: Int) { constructor(y: Str) { x = y } }
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Str` is not an instance of `Int`
//│ ║  l.80: 	class C(val x: Int) { constructor(y: Str) { x = y } }
//│ ║        	                                     ^^^
//│ ╟── but it flows into reference with expected type `Int`
//│ ║  l.80: 	class C(val x: Int) { constructor(y: Str) { x = y } }
//│ ║        	                                                ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.80: 	class C(val x: Int) { constructor(y: Str) { x = y } }
//│ ╙──      	               ^^^
//│ class C(x: Int) {
//│   constructor(y: Str)
//│ }

:e
class C(val x: Int) { constructor(y: Int) { z = y } }
//│ ╔══[ERROR] Unknown class parameter 'z'
//│ ║  l.98: 	class C(val x: Int) { constructor(y: Int) { z = y } }
//│ ╙──      	                                            ^
//│ class C(x: Int) {
//│   constructor(y: Int)
//│ }
//│ Syntax error:
//│   Private field '#z' must be declared in an enclosing class

:e
class C(val x: Int) { constructor(val y: Int) { x = y } }
//│ ╔══[ERROR] Cannot use `val` in constructor parameters
//│ ║  l.109: 	class C(val x: Int) { constructor(val y: Int) { x = y } }
//│ ╙──       	                                      ^
//│ class C(x: Int) {
//│   constructor(y: Int)
//│ }

:e
class C(val x: Int) { constructor(val y) { x = y } }
//│ ╔══[ERROR] Cannot use `val` in constructor parameters
//│ ║  l.118: 	class C(val x: Int) { constructor(val y) { x = y } }
//│ ╙──       	                                      ^
//│ class C(x: Int) {
//│   constructor(y: Int)
//│ }

:e
class C(val x: Int) { constructor(2 + 2) { x = 0 } }
//│ ╔══[ERROR] Unsupported constructor parameter shape
//│ ║  l.127: 	class C(val x: Int) { constructor(2 + 2) { x = 0 } }
//│ ╙──       	                                  ^^^^^
//│ class C(x: Int) {
//│   constructor(<error>: error)
//│ }
//│ Code generation encountered an error:
//│   Unexpected constructor parameters in C.


class C(val x: Int, y: Int) {
  constructor(z: Int) { x = z;; y = z }
  log([x, y])
}
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.139: 	  constructor(z: Int) { x = z;; y = z }
//│ ╙──       	                              ^
//│ class C(x: Int, y: Int) {
//│   constructor(z: Int)
//│ }

:e
C(11)
//│ ╔══[ERROR] Construction of class with auxiliary constructor should use the `new` keyword
//│ ║  l.150: 	C(11)
//│ ╙──       	^
//│ C
//│ res
//│     = C {}
//│ // Output
//│ [ 11, 11 ]

:e
new C(1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.161: 	new C(1, 2)
//│ ║         	^^^^^^^^^^^
//│ ╟── tuple literal of type `[1, 2]` does not match type `[z: Int]`
//│ ║  l.161: 	new C(1, 2)
//│ ╙──       	     ^^^^^^
//│ C | error
//│ res
//│     = C {}
//│ // Output
//│ [ 1, 1 ]

new C(11)
//│ C
//│ res
//│     = C {}
//│ // Output
//│ [ 11, 11 ]

:e
new C(1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.182: 	new C(1, 2)
//│ ║         	^^^^^^^^^^^
//│ ╟── tuple literal of type `[1, 2]` does not match type `[z: Int]`
//│ ║  l.182: 	new C(1, 2)
//│ ╙──       	     ^^^^^^
//│ C | error
//│ res
//│     = C {}
//│ // Output
//│ [ 1, 1 ]

:pe
:w
class C { constructor(x: Int);; constructor(y: Int) }
//│ ╔══[PARSE ERROR] A class may have at most one explicit constructor
//│ ║  l.197: 	class C { constructor(x: Int);; constructor(y: Int) }
//│ ╙──       	^^^^^
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.197: 	class C { constructor(x: Int);; constructor(y: Int) }
//│ ╙──       	                             ^
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.197: 	class C { constructor(x: Int);; constructor(y: Int) }
//│ ╙──       	                              ^
//│ class C {
//│   constructor(x: Int)
//│ }


:w // * FIXME
class Foo { constructor(x: Int){};; val y = 2 }
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.213: 	class Foo { constructor(x: Int){};; val y = 2 }
//│ ╙──       	                                 ^
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.213: 	class Foo { constructor(x: Int){};; val y = 2 }
//│ ╙──       	                                  ^
//│ class Foo {
//│   constructor(x: Int)
//│   val y: 2
//│ }

:pe
:e
class Foo { constructor(x: Int){}; val y = 2 }
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.227: 	class Foo { constructor(x: Int){}; val y = 2 }
//│ ╙──       	                                 ^
//│ class Foo {
//│   constructor(x: Int)
//│   val y: 2
//│ }

class Foo {
  constructor(x: Int){}
  val y = 2
}
//│ class Foo {
//│   constructor(x: Int)
//│   val y: 2
//│ }


