:NewDefs


declare fun String: anything -> Str
//│ fun String: anything -> Str
//│ String


abstract class IO[A] {
  fun bind(f) = Bind(this, f)
  fun run: A
}
class Pure[A](value: A) extends IO[A] {
  fun run = value
}
class Bind[A, B](underlying: IO[A], f: A -> IO[B]) extends IO[B] {
  fun run = f(underlying.run).run
}
//│ abstract class IO[A] {
//│   fun bind: forall 'B. (A -> IO['B]) -> Bind[A, 'B]
//│   fun run: A
//│ }
//│ class Pure[A](value: A) extends IO {
//│   fun bind: forall 'B0. (A -> IO['B0]) -> Bind[in A & 'A out A, 'B0]
//│   fun run: A
//│ }
//│ class Bind[A, B](underlying: IO[A], f: A -> IO[B]) extends IO {
//│   fun bind: forall 'B1. (B -> IO['B1]) -> Bind[in B & 'A0 out B, 'B1]
//│   fun run: B
//│ }
//│ where
//│   'A0 := B
//│   'A := A

module readInt extends IO[Int] { fun run: Int = 42 }
class printLine(str: Str) extends IO[undefined] { fun run = log(str) }
//│ module readInt extends IO {
//│   fun bind: forall 'B. ('A -> IO['B]) -> Bind[Int & 'A, 'B]
//│   fun run: Int
//│ }
//│ class printLine(str: Str) extends IO {
//│   fun bind: forall 'B0. ('A0 -> IO['B0]) -> Bind[undefined & 'A0, 'B0]
//│   fun run: undefined
//│ }
//│ where
//│   'A0 := undefined
//│   'A := Int


// * Nested indent:

val main =
  printLine("Hi! Input two numbers: ").bind of _ =>
    readInt.bind of n =>
      readInt.bind of m =>
        val sum = n + m
        printLine(concat("The sum is: ")(String of sum)).bind of _ =>
          Pure(sum)
//│ val main: Bind[undefined, 'B]
//│   where
//│     'B :> Int
//│ main
//│      = Bind {}

main.run
//│ Int
//│ res
//│     = 84
//│ // Output
//│ Hi! Input two numbers: 
//│ The sum is: 84


// * Flat indent:

val main =
  printLine("Hi! Input two numbers: ").bind of _ =>
  readInt.bind of n =>
  readInt.bind of m =>
  val sum = n + m
  printLine(concat("The sum is: ")(String of sum)).bind of _ =>
  Pure(sum)
//│ val main: Bind[undefined, 'B]
//│   where
//│     'B :> Int
//│ main
//│      = Bind {}

main.run
//│ Int
//│ res
//│     = 84
//│ // Output
//│ Hi! Input two numbers: 
//│ The sum is: 84


// * TODO improve this error (parameter list repr.)
:e
printLine("").bind of [] => error
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.100: 	printLine("").bind of [] => error
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `[?A]` does not match type `[]`
//│ ║  l.16: 	class Bind[A, B](underlying: IO[A], f: A -> IO[B]) extends IO[B] {
//│ ╙──      	                                       ^
//│ Bind[undefined, 'B] | error
//│ res
//│     = Bind {}


// * Using a shortand operator for `bind`... What's the use of a `do` notation?! :^)

fun (#>>) bind[A, B](x: IO[A], f: A -> IO[B]): IO[B] = x.bind(f)
//│ fun (#>>) bind: forall 'A 'B. (x: IO['A], f: 'A -> IO['B]) -> IO['B]
//│ bind

val main =
  printLine("Hi! Input two numbers: ") #>> _ =>
  readInt #>> n =>
  readInt #>> m =>
  val sum = n + m
  printLine(concat("The sum is: ")(String of sum)) #>> _ =>
  Pure(sum)
//│ val main: IO['B]
//│   where
//│     'B :> Int
//│ main
//│      = Bind {}

main.run
//│ Int
//│ res
//│     = 84
//│ // Output
//│ Hi! Input two numbers: 
//│ The sum is: 84

fun loop =
  printLine("Input a positive number: ") #>> _ =>
  readInt #>> n =>
  if n < 0 then loop else Pure(n)
//│ fun loop: forall 'B. IO['B]
//│   where
//│     'B :> Int
//│ loop

let r = loop.run
//│ let r: Int
//│ r
//│   = 42
//│ // Output
//│ Input a positive number: 


// * Using another shortand operator for `map`

fun (>>) compose[A, B, C](f: A -> B, g: B -> C): A -> C = x => g(f(x))
fun (#>) map[A, B](x: IO[A], f: A -> B): IO[B] = x.bind(f >> Pure)
//│ fun (>>) compose: forall 'A 'B 'C. (f: 'A -> 'B, g: 'B -> 'C) -> 'A -> 'C
//│ fun (#>) map: forall 'A0 'B0. (x: IO['A0], f: 'A0 -> 'B0) -> IO['B0]
//│ compose
//│ map

val main =
  printLine("Hi! Input two numbers: ") #>> _ =>
  readInt #>> n =>
  readInt #>> m =>
  val sum = n + m
  printLine(concat("The sum is: ")(String of sum)) #> _ =>
  sum
//│ val main: IO['B]
//│   where
//│     'B :> Int
//│ main
//│      = Bind {}


// * With no type annotations:

fun (>>) compose(f, g) = x => g(f(x))
fun (#>>) bind(x, f) = x.bind(f)
fun (#>) map(x, f) = x.bind(f >> Pure)
//│ fun (>>) compose: forall 'a 'b 'c. ('c -> 'a, 'a -> 'b) -> 'c -> 'b
//│ fun (#>>) bind: forall 'd 'e. ({bind: 'd -> 'e}, 'd) -> 'e
//│ fun (#>) map: forall 'f 'A 'g. ({bind: ('f -> Pure['A]) -> 'g}, 'f -> 'A) -> 'g
//│ compose
//│ bind
//│ map

val main =
  printLine("Hi! Input two numbers: ") #>> _ =>
  readInt #>> n =>
  readInt #>> m =>
  val sum = n + m
  printLine(concat("The sum is: ")(String of sum)) #> _ =>
  sum
//│ val main: Bind[undefined, 'B]
//│   where
//│     'B :> Int
//│ main
//│      = Bind {}

main.run
//│ Int
//│ res
//│     = 84
//│ // Output
//│ Hi! Input two numbers: 
//│ The sum is: 84

fun loop =
  printLine("Input a positive number: ") #>> _ =>
  readInt #>> n =>
  if n < 0 then loop else Pure(n)
//│ fun loop: forall 'B. Bind[undefined, 'B]
//│   where
//│     'B :> Int
//│ loop

let r = loop.run
//│ let r: Int
//│ r
//│   = 42
//│ // Output
//│ Input a positive number: 


// * Abstracting over the monad:

fun main(ctx) =
  ctx.printLine("Hi! Input two numbers: ") #>> _ =>
  ctx.readInt #>> n =>
  ctx.readInt #>> m =>
  val sum = n + m
  ctx.printLine(concat("The sum is: ")(String of sum)) #>> _ =>
  ctx.pure(sum)
//│ fun main: forall 'a 'b 'c 'd 'e. {
//│   printLine: "Hi! Input two numbers: " -> {bind: (anything -> 'a) -> 'e} & Str -> {bind: (anything -> 'd) -> 'c},
//│   pure: Int -> 'd,
//│   readInt: {bind: (Int -> 'b) -> 'a & (Int -> 'c) -> 'b}
//│ } -> 'e
//│ main

val defaultCtx = {printLine, readInt, pure: Pure}
//│ val defaultCtx: {
//│   printLine: (str: Str) -> printLine,
//│   pure: forall 'A. (value: 'A) -> Pure['A],
//│   readInt: readInt
//│ }
//│ defaultCtx
//│            = {
//│                printLine: [Function (anonymous)] {
//│                  class: [class printLine extends IO],
//│                  unapply: [Function: unapply]
//│                },
//│                readInt: readInt { class: [class readInt extends IO] },
//│                pure: [Function (anonymous)] {
//│                  class: [class Pure extends IO],
//│                  unapply: [Function: unapply]
//│                }
//│              }

main(defaultCtx).run
//│ Int
//│ res
//│     = 84
//│ // Output
//│ Hi! Input two numbers: 
//│ The sum is: 84

fun loop(ctx) =
  ctx.printLine("Input a positive number: ") #>> _ =>
  ctx.readInt #>> n =>
  if n < 0 then loop(ctx) else ctx.pure(n)
//│ fun loop: forall 'a 'b 'c 'd. {
//│   printLine: "Input a positive number: " -> {bind: (anything -> 'a) -> 'b},
//│   pure: 'c -> 'd,
//│   readInt: {bind: ((Num & 'c) -> ('d | 'b)) -> 'a}
//│ } -> 'b
//│ loop

let r = loop(defaultCtx)
//│ let r: Bind[undefined, 'B]
//│   where
//│     'B :> Int
//│ r
//│   = Bind {}

let r = loop(defaultCtx).run
//│ let r: Int
//│ r
//│   = 42
//│ // Output
//│ Input a positive number: 

:e
not(r)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.298: 	not(r)
//│ ║         	^^^^^^
//│ ╟── type `Int` is not an instance of type `Bool`
//│ ║  l.35: 	module readInt extends IO[Int] { fun run: Int = 42 }
//│ ║        	                          ^^^
//│ ╟── but it flows into reference with expected type `Bool`
//│ ║  l.298: 	not(r)
//│ ╙──       	    ^
//│ error | false | true
//│ res
//│     = false


// * Note: using inferred parent type arguments

module readInt extends IO { fun run = 42 }
class printLine(str: Str) extends IO { fun run = log(str) }
//│ module readInt extends IO {
//│   fun bind: forall 'B. ('A -> IO['B]) -> Bind['A, 'B]
//│   fun run: 42
//│ }
//│ class printLine(str: Str) extends IO {
//│   fun bind: forall 'B0. ('A0 -> IO['B0]) -> Bind['A0, 'B0]
//│   fun run: undefined
//│ }
//│ where
//│   'A0 :> undefined
//│   'A :> 42

val main =
  printLine("Hi! Input two numbers: ").bind of _ =>
  readInt.bind of n =>
  readInt.bind of m =>
  val sum = n + m
  printLine(concat("The sum is: ")(String of sum)).bind of _ =>
  Pure(sum)
//│ val main: Bind[in 'A out undefined | 'A, 'B]
//│   where
//│     'B :> Int
//│ main
//│      = Bind {}

main
//│ Bind[in 'A out undefined | 'A, 'B]
//│   where
//│     'B :> Int
//│ res
//│     = Bind {}


:e
let r = printLine("").bind of 0 => Pure(1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.351: 	let r = printLine("").bind of 0 => Pure(1)
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `undefined` does not match type `0`
//│ ║  l.316: 	class printLine(str: Str) extends IO { fun run = log(str) }
//│ ║         	                                                 ^^^^^^^^
//│ ╟── Note: constraint arises from integer literal:
//│ ║  l.351: 	let r = printLine("").bind of 0 => Pure(1)
//│ ╙──       	                              ^
//│ let r: Bind[in 0 & 'A out undefined | 'A, 'B] | error
//│   where
//│     'B :> 1
//│ r
//│   = Bind {}

:e
let r = printLine("").bind of x =>
log(x.a)
Pure(1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.368: 	let r = printLine("").bind of x =>
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.369: 	log(x.a)
//│ ║         	^^^^^^^^^
//│ ║  l.370: 	Pure(1)
//│ ║         	^^^^^^^
//│ ╟── application of type `undefined` does not have field 'a'
//│ ║  l.316: 	class printLine(str: Str) extends IO { fun run = log(str) }
//│ ║         	                                                 ^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.369: 	log(x.a)
//│ ║         	    ^^^
//│ ╟── from reference:
//│ ║  l.369: 	log(x.a)
//│ ╙──       	    ^
//│ let r: Bind[in {a: anything} & 'A out undefined | 'A, 'B] | error
//│   where
//│     'B :> 1
//│ r
//│   = Bind {}

:re
r.run
//│ 1 | error
//│ res
//│     Runtime error:
//│       TypeError: Cannot read properties of undefined (reading 'a')


// * We can even technically support the following syntax...

:NoJS // * TODO We'll need to support functions extended with fields

// * An interface that describes monadic functions with a field `run`
declare trait IO[A]: forall 'b: (A -> IO['b]) -> IO['b] {
  fun run: A
}
declare fun pure: 'a -> IO['a]
declare fun readInt: IO[Int]
declare fun printLine: Str -> IO[()]
//│ declare trait IO[A]: forall 'b. (A -> IO['b]) -> IO['b] {
//│   fun run: A
//│ }
//│ fun printLine: Str -> IO[[]]
//│ fun pure: forall 'a. 'a -> IO['a]
//│ fun readInt: IO[Int]

val main =
  printLine("Hi! Input two numbers: ") of _ =>
  readInt of n =>
  readInt of m =>
  val sum = n + m
  printLine(concat("The sum is: ")(String of sum)) of _ =>
  pure(sum)
//│ val main: IO['b]
//│   where
//│     'b :> Int

main.run
//│ Int


