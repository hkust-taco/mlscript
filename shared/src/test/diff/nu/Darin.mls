:NewDefs


class Some[out A](val x: A)
//│ class Some[A](x: A)


let s = Some(Some(42))
//│ let s: Some[Some[42]]
//│ s
//│   = Some {}


// * Expected error:

:e
s : Some[Int] | ()
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.17: 	s : Some[Int] | ()
//│ ║        	^
//│ ╟── application of type `Some[?A]` is not an instance of type `Int`
//│ ║  l.8: 	let s = Some(Some(42))
//│ ╙──     	             ^^^^^^^^
//│ Some[Int] | ()
//│ res
//│     = Some {}


// * Yet, repeating the same code no longer yields the error:

s : Some[Int] | ()
//│ Some[Int] | ()
//│ res
//│     = Some {}

// * This is because type inference sometimes takes some shortcuts (using a subtyping check instead of full constraining)
// * that assume that previously-typed code was correctly typed
// * (because subtyping checks may leverage previously-added bounds even when these were inconsistent).
// * So this lack of repeated errors is not a soundness problem nor a bug.


// * Note: a case where the shortcut does not currently trigger:

:e
s : Some[Int]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.45: 	s : Some[Int]
//│ ║        	^
//│ ╟── application of type `Some[?A]` is not an instance of `Int`
//│ ║  l.8: 	let s = Some(Some(42))
//│ ║       	             ^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.45: 	s : Some[Int]
//│ ╙──      	         ^^^
//│ Some[Int]
//│ res
//│     = Some {}



