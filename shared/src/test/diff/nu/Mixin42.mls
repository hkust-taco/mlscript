:NewDefs



mixin M1 { fun test = 21 }
mixin M2 { fun test = super.test * this.factor }
mixin M3 { val factor = 2 }
class C1() extends M1, M2, M3
C1().test
//│ mixin M1() {
//│   fun test: 21
//│ }
//│ mixin M2() {
//│   super: {test: Int}
//│   this: {factor: Int}
//│   fun test: Int
//│ }
//│ mixin M3() {
//│   val factor: 2
//│ }
//│ class C1() {
//│   val factor: 2
//│   fun test: Int
//│ }
//│ Int
//│ res
//│     = 42



class C1(val factor: Int) extends M1, M2
C1(2).test
//│ class C1(factor: Int) {
//│   fun test: Int
//│ }
//│ Int
//│ res
//│     = 42


class C1(val factor: Int) extends M1, M2
//│ class C1(factor: Int) {
//│   fun test: Int
//│ }



:e
class C1() extends M1, M2 { val factor = 2 }
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.6: 	mixin M2 { fun test = super.test * this.factor }
//│ ╙──     	                                       ^^^^^^^
//│ class C1() {
//│   val factor: 2
//│   fun test: Int
//│ }

// * Note that this `val` definition is not yet treated as a type signature/annotation
:e
class C1() extends M1, M2 { val factor: Int = 2 }
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.6: 	mixin M2 { fun test = super.test * this.factor }
//│ ╙──     	                                       ^^^^^^^
//│ class C1() {
//│   val factor: Int
//│   fun test: Int
//│ }


abstract class C1 extends M1, M2 { val factor: Int }
module C2 extends C1 { val factor = 2 }
C2.test
//│ abstract class C1 {
//│   val factor: Int
//│   fun test: Int
//│ }
//│ module C2 extends C1 {
//│   val factor: 2
//│   fun test: Int
//│ }
//│ Int
//│ res
//│     = 42


class C1() extends M1, M2 { val factor: Int;; val factor = 2 }
C1().test
//│ class C1() {
//│   val factor: Int
//│   fun test: Int
//│ }
//│ Int
//│ res
//│     = 42


abstract class C0 { val factor = 2 }
//│ abstract class C0 {
//│   val factor: 2
//│ }

:e
class C1() extends C0, M1, M2
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.6: 	mixin M2 { fun test = super.test * this.factor }
//│ ╙──     	                                       ^^^^^^^
//│ class C1() extends C0 {
//│   val factor: 2
//│   fun test: Int
//│ }


abstract class C0 { val factor: Int }
//│ abstract class C0 {
//│   val factor: Int
//│ }

:e // * TODO support
class C1() extends C0, M1, M2 { val factor = 2 }
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.6: 	mixin M2 { fun test = super.test * this.factor }
//│ ╙──     	                                       ^^^^^^^
//│ class C1() extends C0 {
//│   val factor: 2
//│   fun test: Int
//│ }


