:NewDefs


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
class Neg<A>(expr: A)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: int)
//│ class Neg[A](expr: A)


// Note the inferred type because of current UCS limitation
mixin EvalBase {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else if e is Neg(d) then 0 - this.eval(d)
    else if e is
      Lit(n) then n
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.16: 	    else if e is Neg(d) then 0 - this.eval(d)
//│ ║        	                             ^^^
//│ ╟── integer literal of type `0` is not an instance of type `int`
//│ ║  l.16: 	    else if e is Neg(d) then 0 - this.eval(d)
//│ ╙──      	                             ^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.16: 	    else if e is Neg(d) then 0 - this.eval(d)
//│ ║        	                             ^^^
//│ ╟── integer literal of type `0` is not an instance of type `int`
//│ ║  l.16: 	    else if e is Neg(d) then 0 - this.eval(d)
//│ ╙──      	                             ^
//│ mixin EvalBase() {
//│   this: {eval: nothing -> 'a & 'lhs -> int}
//│   fun eval: (Add['lhs] | Lit | Neg[nothing]) -> (error | int | 'a)
//│ }

// module TestLang extends EvalBase, EvalNeg
module TestLang extends EvalBase
//│ module TestLang() {
//│   fun eval: 'a -> (error | int)
//│ }
//│ where
//│   'a <: Add['a] | Lit | Neg[nothing]


fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.47: 	fun mk(n) = if n is
//│ ║        	               ^^^^
//│ ║  l.48: 	  0 then Lit(0)
//│ ║        	^^^
//│ ╟── integer literal of type `0` is not an instance of type `number`
//│ ║  l.48: 	  0 then Lit(0)
//│ ╙──      	  ^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.47: 	fun mk(n) = if n is
//│ ║        	               ^^^^
//│ ║  l.48: 	  0 then Lit(0)
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.49: 	  1 then Neg(mk(n))
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ║  l.50: 	  _ then Add(mk(n), mk(n))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `bool` is not an instance of type `Object`
//│ ║  l.47: 	fun mk(n) = if n is
//│ ║        	               ^^^^
//│ ║  l.48: 	  0 then Lit(0)
//│ ╙──      	^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.48: 	  0 then Lit(0)
//│ ║        	         ^^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `int`
//│ ║  l.48: 	  0 then Lit(0)
//│ ║        	             ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.5: 	class Lit(n: int)
//│ ╙──     	             ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.47: 	fun mk(n) = if n is
//│ ║        	               ^^^^
//│ ║  l.48: 	  0 then Lit(0)
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.49: 	  1 then Neg(mk(n))
//│ ║        	^^^
//│ ╟── integer literal of type `1` is not an instance of type `number`
//│ ║  l.49: 	  1 then Neg(mk(n))
//│ ╙──      	  ^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.47: 	fun mk(n) = if n is
//│ ║        	               ^^^^
//│ ║  l.48: 	  0 then Lit(0)
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.49: 	  1 then Neg(mk(n))
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ║  l.50: 	  _ then Add(mk(n), mk(n))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `bool` is not an instance of type `Object`
//│ ║  l.47: 	fun mk(n) = if n is
//│ ║        	               ^^^^
//│ ║  l.48: 	  0 then Lit(0)
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.49: 	  1 then Neg(mk(n))
//│ ╙──      	^^^
//│ fun mk: forall 'E. number -> 'E
//│   where
//│     'E :> Add['E] | Lit | Neg['E] | error

// TODO support this in UCS
:stats
TestLang.eval(mk(0))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.114: 	TestLang.eval(mk(0))
//│ ║         	              ^^^^^
//│ ╟── integer literal of type `0` is not an instance of type `number`
//│ ║  l.114: 	TestLang.eval(mk(0))
//│ ║         	                 ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.47: 	fun mk(n) = if n is
//│ ╙──      	               ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.114: 	TestLang.eval(mk(0))
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Lit` does not match type `nothing`
//│ ║  l.48: 	  0 then Lit(0)
//│ ║        	         ^^^^^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.6: 	class Neg<A>(expr: A)
//│ ╙──     	          ^
//│ error | int
//│ res
//│     = 0
//│ constrain calls  : 340
//│ annoying  calls  : 116
//│ subtyping calls  : 4729


