:NewDefs


class Add<out E>(lhs: E, rhs: E)
class Lit(n: Int)
class Neg<out A>(expr: A)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: Int)
//│ class Neg[A](expr: A)


// Note the inferred type because of current UCS limitation
mixin EvalBase {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else if e is Neg(d) then 0 - this.eval(d)
    else if e is
      Lit(n) then n
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: (??A & 'A) -> 'a & (??A0 & 'A0 | ??E & 'E) -> Int}
//│   fun eval: (Add['E] | Lit | Neg['A0 & (Neg['A] | Object & ~#Neg | ~??A0)]) -> (Int | 'a)
//│ }

// module TestLang extends EvalBase, EvalNeg
module TestLang extends EvalBase
//│ module TestLang {
//│   fun eval: (Add['E] | Lit | Neg['A]) -> Int
//│ }
//│ where
//│   'E <: Add['E] | Lit | Neg['A] | ~??E
//│   'A <: Add['E] | Lit | Neg['A] & ~#Neg | Neg['A & (Add['E] | Lit | Neg['A] | ~??A)] | ~??A0


fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
//│ fun mk: forall 'a. Object -> (Lit | 'a)
//│   where
//│     'a :> Add[Lit | 'a] | Neg[Lit | 'a]

:stats
TestLang.eval(mk(0))
//│ Int
//│ res
//│     = 0
//│ constrain calls  : 246
//│ annoying  calls  : 55
//│ subtyping calls  : 2390


