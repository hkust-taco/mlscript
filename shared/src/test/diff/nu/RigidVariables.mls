:NewDefs


// * Flexible

fun f(x: 'test) = [x.b, x]
//│ fun f: forall 'b 'test. (x: {b: 'b} & 'test) -> ['b, 'test]
//│ f


// * Rigid

:e
fun f[A](x: A) = x.b
//│ ╔══[ERROR] Type `A` does not contain member `b`
//│ ║  l.14: 	fun f[A](x: A) = x.b
//│ ╙──      	                  ^^
//│ fun f: (x: anything) -> error
//│ f

fun f[A](x: A & { b: ' }) = x.b
//│ fun f: forall 'b. (x: {b: 'b}) -> 'b
//│ f

:e
module Foo {
  fun f[A](x: A) = x.b
}
//│ ╔══[ERROR] Type `A` does not contain member `b`
//│ ║  l.27: 	  fun f[A](x: A) = x.b
//│ ╙──      	                    ^^
//│ module Foo {
//│   fun f: (x: anything) -> error
//│ }

:e
class Foo[A](x: A) {
  fun f = x.b
}
//│ ╔══[ERROR] Type `A` does not contain member `b`
//│ ║  l.38: 	  fun f = x.b
//│ ╙──      	           ^^
//│ class Foo[A](x: A) {
//│   fun f: error
//│ }


