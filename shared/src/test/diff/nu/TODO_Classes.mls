:NewDefs



// *** First-class classes *** //


class C
//│ class C {
//│   constructor()
//│ }

class D(x: Int)
//│ class D(x: Int)

:e
fun foo(c) = new c
//│ ╔══[ERROR] type identifier not found: c
//│ ║  l.17: 	fun foo(c) = new c
//│ ╙──      	                 ^
//│ fun foo: anything -> error

:re
foo(() => 123)
//│ error
//│ res
//│ Runtime error:
//│   TypeError: c is not a constructor

:e
foo(C)
//│ ╔══[ERROR] Construction of unparameterized class C should use the `new` keyword
//│ ║  l.31: 	foo(C)
//│ ╙──      	    ^
//│ error
//│ res
//│     = C {}


:e
fun bar(c) = new c(123)
//│ ╔══[ERROR] type identifier not found: c
//│ ║  l.41: 	fun bar(c) = new c(123)
//│ ╙──      	                 ^
//│ fun bar: anything -> error

:re
bar(D)
//│ error
//│ res
//│ Runtime error:
//│   TypeError: c is not a constructor

:e // TODO accept when we have first-class classes
bar(D.class)
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.55: 	bar(D.class)
//│ ║        	    ^^^^^^^
//│ ╟── reference of type `(x: Int) -> D` does not have field 'class'
//│ ║  l.55: 	bar(D.class)
//│ ╙──      	    ^
//│ error
//│ res
//│     = D {}



// *** Refinements *** //


class C
//│ class C {
//│   constructor()
//│ }

:e // TODO support
new C { val x = 1 }
//│ ╔══[ERROR] Refinement terms are not yet supported
//│ ║  l.77: 	new C { val x = 1 }
//│ ╙──      	^^^^^^^^^^^^^^^^^^^
//│ error
//│ Code generation encountered an error:
//│   cannot generate code for term Rft(NuNew(Var(C)),TypingUnit(List(NuFunDef(Some(false),Var(x),None,List(),Left(IntLit(1))))))



// *** Path-dependent types *** //


class Cls[A] { fun x: A = x }
//│ class Cls[A] {
//│   constructor()
//│   fun x: A
//│ }

let c = new Cls
//│ let c: Cls[nothing]
//│ c
//│   = Cls {}

// FIXME
let y: c.A = c.x
//│ ╔══[ERROR] type identifier not found: c
//│ ║  l.102: 	let y: c.A = c.x
//│ ╙──       	       ^
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing



// *** GADTs *** //


class Cls[A] { fun x: A = x;; fun g: A -> Int;; fun g = g }
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.113: 	class Cls[A] { fun x: A = x;; fun g: A -> Int;; fun g = g }
//│ ╙──       	                            ^
//│ ╔══[WARNING] Pure expression does nothing in statement position.
//│ ║  l.113: 	class Cls[A] { fun x: A = x;; fun g: A -> Int;; fun g = g }
//│ ╙──       	                                              ^
//│ class Cls[A] {
//│   constructor()
//│   fun g: A -> Int
//│   fun x: A
//│ }


:e // TODO
fun test(a: Object) = if a is
  Cls then a.x
  else error
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.128: 	fun test(a: Object) = if a is
//│ ║         	                         ^^^^
//│ ║  l.129: 	  Cls then a.x
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.130: 	  else error
//│ ║         	^^^^^^^^^^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.113: 	class Cls[A] { fun x: A = x;; fun g: A -> Int;; fun g = g }
//│ ╙──       	          ^
//│ fun test: (a: Object) -> (error | ??A)

:e // TODO
fun test(a: Object) = if a is
  Cls then a.g(a.x) // a.x : a.A ; a.g : a.A -> a.A
  else 0
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.144: 	fun test(a: Object) = if a is
//│ ║         	                         ^^^^
//│ ║  l.145: 	  Cls then a.g(a.x) // a.x : a.A ; a.g : a.A -> a.A
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.146: 	  else 0
//│ ║         	^^^^^^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.113: 	class Cls[A] { fun x: A = x;; fun g: A -> Int;; fun g = g }
//│ ╙──       	          ^
//│ fun test: (a: Object) -> Int


class Cls[out A] { fun x: A = x }
//│ class Cls[A] {
//│   constructor()
//│   fun x: A
//│ }

fun test(a: Object) = if a is
  Cls then a.x
  else error
//│ fun test: (a: Object) -> ??A

fun test(a: Object) = if a is
  Cls then a
  else error
//│ fun test: (a: Object) -> Cls[??A]

:re
test(0).x
//│ ??A
//│ res
//│ Runtime error:
//│   Error: an error was thrown


// class Expr[T] {
//   constructor
//     IntLit(n: Int) { T = Int }
//     BoolLit(b: Bool) { T = Bool }
// }
// 
// fun foo(x) = if x is
//    IntLit then x.n as x.T
//    BoolLit then x.b
// foo: (x: IntLit | BoolLit) -> x.T | Bool
// 
// fun foo(x) = if x is
//    IntLit then x.n as x.T
//    BoolLit then x.b as x.T
// foo: (x: IntLit | BoolLit) -> x.T
//   <: Expr['a] -> 'a
// 
// fun foo(x: Expr[T]): T = if x is
//    IntLit then x.n // in Scala, compiler sees x.n : Int = x.T <: T
//    BoolLit then x.b

abstract class Expr[A]: (IntLit | BoolLit) {}
class IntLit() extends Expr[Int]
class BoolLit() extends Expr[Bool]
//│ abstract class Expr[A]: BoolLit | IntLit
//│ class IntLit() extends Expr
//│ class BoolLit() extends Expr

fun test(f: ((IntLit | BoolLit) -> Int)) =
  f : Expr[anything] -> Int
//│ fun test: (f: (BoolLit | IntLit) -> Int) -> Expr[anything] -> Int

class OopsLit() extends Expr[Bool]
//│ class OopsLit() extends Expr

fun test(a) = if a is
  IntLit then 0
  OopsLit then 1
//│ fun test: (IntLit | OopsLit) -> (0 | 1)


