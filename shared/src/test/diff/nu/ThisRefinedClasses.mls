:NewDefs



// * I don't think it's a good idea to generate `this` refinements for classes,
// * as this could easily lead to typos and delayed error reporting.
// * Instead, we should require explicit `this` annotations by users when needed.


:e
class Foo { fun test = this.x }
//│ ╔══[ERROR] Type `#Foo` does not contain member `x`
//│ ║  l.11: 	class Foo { fun test = this.x }
//│ ╙──      	                           ^^
//│ class Foo {
//│   constructor()
//│   fun test: error
//│ }


:e
class Foo(n: Int) { fun test = this.x }
//│ ╔══[ERROR] Type `#Foo & {n: Int}` does not contain member `x`
//│ ║  l.22: 	class Foo(n: Int) { fun test = this.x }
//│ ╙──      	                                   ^^
//│ class Foo(n: Int) {
//│   fun test: error
//│ }


:e
class Foo<A>(n: A) { fun test = this.x }
//│ ╔══[ERROR] Type `#Foo & {Foo#A = A, n: A}` does not contain member `x`
//│ ║  l.32: 	class Foo<A>(n: A) { fun test = this.x }
//│ ╙──      	                                    ^^
//│ class Foo[A](n: A) {
//│   fun test: error
//│ }



// TODO support: (treat `this` annot not like a term ascription)
class Foo {
  this: { x: 'a }
  // fun test = this.x
}
//│ ╔══[ERROR] Type `#Foo` does not contain member `x`
//│ ║  l.44: 	  this: { x: 'a }
//│ ╙──      	          ^
//│ class Foo {
//│   constructor()
//│ }


// TODO
// * All on one line:
class Test { this: { x: Int};; fun test = this.x }
//│ ╔══[ERROR] Type `#Test` does not contain member `x`
//│ ║  l.57: 	class Test { this: { x: Int};; fun test = this.x }
//│ ╙──      	                                              ^^
//│ ╔══[ERROR] Type `#Test` does not contain member `x`
//│ ║  l.57: 	class Test { this: { x: Int};; fun test = this.x }
//│ ╙──      	                     ^
//│ class Test {
//│   constructor()
//│   fun test: error
//│ }


