:NewDefs


// * From https://arxiv.org/abs/2302.12783

// 1 -spec filtermap ( fun (( T ) -> Boolean ()) , [ T ]) -> [ T ]
// 2 ; ( fun (( T ) -> { true , U } | false ) , [ T ]) -> [ U ]
// 3 ; ( fun (( T ) -> { true , U } | Boolean ()) , [ T ]) -> [ T | U ].
// 4 filtermap ( _F , []) -> [];
// 5 filtermap (F , [ X | XS ]) ->
// 6 case F ( X ) of
// 7 false -> filtermap (F , XS );
// 8 true -> [ X | filtermap (F , XS )];
// 9 { true , Y } -> [ Y | filtermap (F , XS )]
// 10 end.


module Nil
class Cons[out A](head: A, tail: Cons[A] | Nil)
//│ module Nil
//│ class Cons[A](head: A, tail: Cons[A] | Nil)


// FIXME UCS
fun filtermap(f, xs) = if xs is
  Nil then Nil
  Cons(y, ys) and f(ys) is
    false then filtermap(f, ys)
    true then Cons(y, filtermap(f, ys))
    [true, z] then Cons(y, filtermap(f, ys))
//│ ╔══[ERROR] type identifier not found: Tuple#2
//│ ╙──
//│ fun filtermap: ((Cons[nothing] | Nil) -> nothing, Cons[anything] | Nil,) -> (Cons[nothing] | Nil | error)
//│ Code generation encountered an error:
//│   unknown match case: Tuple#2


module Tru
module Fals
//│ module Tru
//│ module Fals

class Pair[A, B](lhs: A, rhs: B)
//│ class Pair[A, B](lhs: A, rhs: B)

fun filtermap(f, xs) = if xs is
  Nil then Nil
  Cons(y, ys) then if f(y) is
    Tru then filtermap(f, ys)
    Fals then Cons(y, filtermap(f, ys))
    Pair(Tru, z) then Cons(z, filtermap(f, ys))
//│ fun filtermap: forall 'head 'A. ('head -> (Fals | Pair[Tru, 'A] | Tru), Cons['head & 'A] | Nil,) -> (Cons['A] | Nil)

fun mkString(xs) =
  if xs is
    Nil then ""
    Cons(x, xs') and xs' is
      Nil then toString(x)
      else concat(toString(x))(concat(", ")(mkString(xs')))
//│ fun mkString: (Cons[anything] | Nil) -> Str

let list = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, Cons(6, Cons(7, Nil)))))))
mkString of list
//│ let list: Cons[1 | 2 | 3 | 4 | 5 | 6 | 7]
//│ Str
//│ list
//│      = Cons {}
//│ res
//│     = '1, 2, 3, 4, 5, 6, 7'

mkString of filtermap(x => if x % 2 == 0 then Tru else Fals, list)
mkString of filtermap(x => if x % 2 == 0 then Fals else Tru, list)
mkString of filtermap(x => (if
  x % 2 == 0 then Fals
  x % 3 == 0 then Pair(Tru, x / 3)
  else Tru), list)
//│ Str
//│ res
//│     = '1, 3, 5, 7'
//│ res
//│     = '2, 4, 6'
//│ res
//│     = '2, 1, 4, 6'
