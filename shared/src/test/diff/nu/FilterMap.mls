:NewDefs


// * From https://arxiv.org/abs/2302.12783

// 1 -spec filtermap ( fun (( T ) -> boolean ()) , [ T ]) -> [ T ]
// 2 ; ( fun (( T ) -> { true , U } | false ) , [ T ]) -> [ U ]
// 3 ; ( fun (( T ) -> { true , U } | boolean ()) , [ T ]) -> [ T | U ].
// 4 filtermap ( _F , []) -> [];
// 5 filtermap (F , [ X | XS ]) ->
// 6 case F ( X ) of
// 7 false -> filtermap (F , XS );
// 8 true -> [ X | filtermap (F , XS )];
// 9 { true , Y } -> [ Y | filtermap (F , XS )]
// 10 end.


module Nil
class Cons[out A](head: A, tail: Cons[A] | Nil)
//│ module Nil()
//│ class Cons[A](head: A, tail: Cons[A] | Nil)


// FIXME UCS
fun filtermap(f, xs) = if xs is
  Nil then Nil
  Cons(y, ys) and f(ys) is
    false then filtermap(f, ys)
    true then Cons(y, filtermap(f, ys))
    [true, z] then Cons(y, filtermap(f, ys))
//│ ╔══[ERROR] identifier not found: ys
//│ ║  l.27: 	  Cons(y, ys) and f(ys) is
//│ ╙──      	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.27: 	  Cons(y, ys) and f(ys) is
//│ ║        	                  ^^^^^^^^
//│ ║  l.28: 	    false then filtermap(f, ys)
//│ ║        	^^^^^^^^^
//│ ╟── reference of type `False` is not an instance of type `Num`
//│ ║  l.28: 	    false then filtermap(f, ys)
//│ ╙──      	    ^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.27: 	  Cons(y, ys) and f(ys) is
//│ ║        	                  ^^^^^^^^
//│ ║  l.28: 	    false then filtermap(f, ys)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.29: 	    true then Cons(y, filtermap(f, ys))
//│ ║        	^^^^^^^^
//│ ╟── reference of type `True` is not an instance of type `Num`
//│ ║  l.29: 	    true then Cons(y, filtermap(f, ys))
//│ ╙──      	    ^^^^
//│ ╔══[ERROR] type identifier not found: Tuple#2
//│ ╙──
//│ fun filtermap: ((Cons[nothing] | error | Nil) -> #Num & (Cons[nothing] | Nil) -> nothing, Cons[anything] | Nil,) -> (Cons[nothing] | Nil | error)
//│ Code generation encountered an error:
//│   unknown match case: Tuple#2


module True
module False
//│ module True()
//│ module False()

class Pair[A, B](lhs: A, rhs: B)
//│ class Pair[A, B](lhs: A, rhs: B)

fun filtermap(f, xs) = if xs is
  Nil then Nil
  Cons(y, ys) then if f(y) is
    True then filtermap(f, ys)
    False then Cons(y, filtermap(f, ys))
    Pair(True, z) then Cons(z, filtermap(f, ys))
//│ fun filtermap: forall 'head 'A. ('head -> (False | Pair[anything, 'A] | True), Cons['head & 'A] | Nil,) -> (Cons['A] | Nil)


