:NewDefs


class A(n: Int)
//│ class A(n: Int)

A
//│ (n: Int,) -> A
//│ res
//│     = [Function (anonymous)] { class: [class A] }

let a = A(42)
//│ let a: A
//│ a
//│   = A {}

a.n
//│ Int
//│ res
//│     = 42


fun f(x: A) = x.n
//│ fun f: (x: A,) -> Int

fun f(x: A) = if x is A then x.n
//│ fun f: (x: A,) -> Int

fun f(x: A | 'b) = if x is A then x.n else 0
//│ fun f: (x: Object,) -> Int


fun f(x) = x.n
//│ fun f: forall 'n. {n: 'n} -> 'n

f(a)
//│ Int
//│ res
//│     = 42

fun f(x) = if x is A then x.n
//│ fun f: A -> Int

f(a)
//│ Int
//│ res
//│     = 42

fun f(x) = if x is A then x.n else 0
//│ fun f: Object -> Int

f(a)
//│ Int
//│ res
//│     = 42



class C {
  fun id(x) = x
  fun const(x) = id
}
//│ class C {
//│   fun const: anything -> 'a -> 'a
//│   fun id: 'a -> 'a
//│ }


// TODO
class Base0(n) {
  fun me = this
  fun my = this.n
  fun mine = my
  fun oops = this.my
}
//│ ╔══[ERROR] Class parameters currently need type annotations
//│ ║  l.70: 	class Base0(n) {
//│ ╙──      	            ^
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.74: 	  fun oops = this.my
//│ ╙──      	                 ^^^
//│ class Base0(n: error) {
//│   fun me: Base0 & {n: error}
//│   fun mine: error
//│   fun my: error
//│   fun oops: error
//│ }

// :d
// Base0

let b1 = Base0(42)
//│ let b1: Base0
//│ b1
//│    = Base0 {}

let n1 = b1.n
//│ let n1: error
//│ n1
//│    = 42

// TODO
n1 + 1
//│ Int
//│ res
//│     = 43


let b2 = Base0("hi")
let n2 = b2.n
//│ let b2: Base0
//│ let n2: error
//│ b2
//│    = Base0 {}
//│ n2
//│    = 'hi'



class Base1(base: Int) {
  fun getBase1 = base
  fun getBase2 = this.base
  fun foo(x) = this.base + x
}
//│ class Base1(base: Int) {
//│   fun foo: Int -> Int
//│   fun getBase1: Int
//│   fun getBase2: Int
//│ }

class Base1(base: Int) {
  fun getBase1 = base
  fun me = this
  fun foo(x) = base + x
}
//│ class Base1(base: Int) {
//│   fun foo: Int -> Int
//│   fun getBase1: Int
//│   fun me: Base1 & {base: Int}
//│ }

Base1
//│ (base: Int,) -> Base1
//│ res
//│     = [Function (anonymous)] { class: [class Base1] }

let b = Base1(1)
//│ let b: Base1
//│ b
//│   = Base1 {}

b.base
//│ Int
//│ res
//│     = 1

b.getBase1
//│ Int
//│ res
//│     = 1

// :d
b.me
//│ Base1 & {base: Int}
//│ res
//│     = Base1 {}

:e
b.getBaseTypo
//│ ╔══[ERROR] Type `Base1` does not contain member `getBaseTypo`
//│ ║  l.169: 	b.getBaseTypo
//│ ╙──       	 ^^^^^^^^^^^^
//│ error
//│ res
//│     = undefined


b : Base1
//│ Base1
//│ res
//│     = Base1 {}


class Rec(n: Int) {
  fun go = Rec(n + 1)
}
//│ class Rec(n: Int) {
//│   fun go: Rec
//│ }

let r = Rec(0)
r.n
//│ let r: Rec
//│ Int
//│ r
//│   = Rec {}
//│ res
//│     = 0

r.go.n
//│ Int
//│ res
//│     = 1




// TODO treat `a: Int` as a signature
class Annots(base: 0 | 1) {
  a: Int
  fun a = base
}
//│ class Annots(base: 0 | 1) {
//│   fun a: 0 | 1
//│ }




