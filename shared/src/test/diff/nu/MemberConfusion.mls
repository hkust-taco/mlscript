:NewDefs


mixin T { fun a = "hi" }
//│ mixin T() {
//│   fun a: "hi"
//│ }

class C(a: Int) extends T
//│ class C(a: Int) {
//│   fun a: "hi"
//│ }

class B { virtual val a = "hi" }
//│ class B {
//│   constructor()
//│   val a: "hi"
//│ }

:e
class C(a: Int) extends B
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.21: 	class C(a: Int) extends B
//│ ║        	           ^^^
//│ ╟── type `Int` does not match type `"hi"`
//│ ╟── Note: constraint arises from string literal:
//│ ║  l.14: 	class B { virtual val a = "hi" }
//│ ╙──      	                          ^^^^
//│ class C(a: Int) extends B


mixin M { let b = "hi" }
//│ mixin M() {
//│   let b: "hi"
//│ }

class B { virtual val a = 1 : Int }
//│ class B {
//│   constructor()
//│   val a: Int
//│ }

class C(val a: Int, val b: Int) extends B, M
//│ class C(a: Int, b: Int) extends B {
//│   let b: "hi"
//│ }

let c = C(2, 3)
[c.a, c.b]
//│ let c: C
//│ [Int, "hi"]
//│ c
//│   = C {}
//│ res
//│     = [ 2, 3 ]

class C(a: Int) { let a = 1 }
//│ class C(a: Int) {
//│   let a: 1
//│ }

class C(a: Int) { fun a = 1 }
//│ class C(a: Int) {
//│   fun a: 1
//│ }

class C(a: Int) { fun a = a }
//│ class C(a: Int) {
//│   fun a: nothing
//│ }

class C(a: Int, b: Int) extends B, M { let b = "hi" }
//│ class C(a: Int, b: Int) extends B {
//│   let b: "hi"
//│ }


