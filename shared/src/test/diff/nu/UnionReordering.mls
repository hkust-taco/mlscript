:NewDefs
:NoJS


type a = 0 | "0" | 2 | "2" | 10
//│ type a = "0" | "2" | 0 | 10 | 2

type a = "0" | 0 | 2 | "2" | 10
//│ type a = "0" | "2" | 0 | 10 | 2


class C[A]()
class D[A]()
//│ class C[A]()
//│ class D[A]()

let b = if true then C() else D()
//│ let b: forall 'A 'A0. C['A] | D['A0]

let b = if true then D() else C()
//│ let b: forall 'A 'A0. C['A] | D['A0]

// :ds
let f(x) = if true then x else C()
//│ let f: forall 'a. 'a -> (forall 'A. C['A] | 'a)


type ExtLang[T] = T -> T
type BaseLang[T] = T -> T
//│ type ExtLang[T] = T -> T
//│ type BaseLang[T] = T -> T

type RegionLang = BaseLang[RegionLang] | ExtLang[RegionLang]
//│ type RegionLang = BaseLang[RegionLang] | ExtLang[RegionLang]

// * Notice that the type components are reordered to be the same:
type RegionLang1 = ExtLang[RegionLang] | BaseLang[RegionLang]
type RegionLang2 = ExtLang[C] | ExtLang[D]
//│ type RegionLang1 = BaseLang[RegionLang] | ExtLang[RegionLang]
//│ type RegionLang2 = ExtLang[in C[?] | D[?] out nothing]

// * There is currently no deep reordering, though:
type RegionLang1 = ExtLang[C] -> Int & ExtLang[D] -> Str
type RegionLang2 = ExtLang[D] -> Int & ExtLang[C] -> Str
//│ type RegionLang1 = ExtLang[C[?]] -> Int & ExtLang[D[?]] -> Str
//│ type RegionLang2 = ExtLang[D[?]] -> Int & ExtLang[C[?]] -> Str


