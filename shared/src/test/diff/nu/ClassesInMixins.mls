:NewDefs



mixin Test {
  class Foo(val n: Int)
  val f = Foo(123)
}
//│ mixin Test() {
//│   class Foo(n: Int)
//│   val f: Foo
//│ }

module M extends Test
//│ module M {
//│   class Foo(n: Int)
//│   val f: Foo
//│ }

M.f
//│ Foo
//│ res
//│     = Foo {}

M.f.n
//│ Int
//│ res
//│     = 123

:e
M.Foo
//│ ╔══[ERROR] Access to class member not yet supported
//│ ║  l.31: 	M.Foo
//│ ╙──      	 ^^^^
//│ error
//│ res
//│     = [Function (anonymous)] {
//│         class: [class Foo],
//│         unapply: [Function: unapply]
//│       }

:e // TODO support
fun foo(x) = if x is M.Foo then 1
//│ ╔══[ERROR] illegal pattern
//│ ║  l.43: 	fun foo(x) = if x is M.Foo then 1
//│ ╙──      	                     ^^^^^
//│ fun foo: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

:e
mixin Test2 { let f = Foo(1) }
//│ ╔══[ERROR] identifier not found: Foo
//│ ║  l.52: 	mixin Test2 { let f = Foo(1) }
//│ ╙──      	                      ^^^
//│ mixin Test2() {
//│   let f: error
//│ }
//│ Code generation encountered an error:
//│   unresolved symbol Foo

:e
mixin Test3 { fun f(x) = if x is Foo then 1 }
//│ ╔══[ERROR] Cannot find constructor `Foo` in scope
//│ ║  l.63: 	mixin Test3 { fun f(x) = if x is Foo then 1 }
//│ ╙──      	                                 ^^^
//│ mixin Test3() {
//│   fun f: anything -> error
//│ }
//│ Code generation encountered an error:
//│   if expression was not desugared



mixin Test {
  class Lit(n: Int)
  class Add<A>(lhs: A, rhs: A) {
    fun cached = size(this)
  }
  fun size(x) = if x is
    Add(l, r) then this.size(l) + this.size(r)
}
//│ mixin Test() {
//│   this: {size: 'A -> Int}
//│   class Add[A](lhs: A, rhs: A) {
//│     fun cached: Int
//│   }
//│   class Lit(n: Int)
//│   fun size: Add['A] -> Int
//│ }


