:NewDefs
:NoJS // TODO



mixin Test {
  class Foo(n: Int)
  let f = Foo(123)
}
//│ mixin Test() {
//│   class Foo(n: Int)
//│   let f: Foo
//│ }

module M extends Test
//│ module M() {
//│   class Foo(n: Int)
//│   let f: Foo
//│ }

M.f
//│ Foo

M.f.n
//│ Int

:e
M.Foo
//│ ╔══[ERROR] access to class member not yet supported
//│ ║  l.28: 	M.Foo
//│ ╙──      	 ^^^^
//│ error

:e // TODO support
fun foo(x) = if x is M.Foo then 1
//│ ╔══[ERROR] illegal pattern
//│ ║  l.35: 	fun foo(x) = if x is M.Foo then 1
//│ ╙──      	                     ^^^^^
//│ fun foo: anything -> error

:e
mixin Test2 { let f = Foo(1) }
//│ ╔══[ERROR] identifier not found: Foo
//│ ║  l.42: 	mixin Test2 { let f = Foo(1) }
//│ ╙──      	                      ^^^
//│ mixin Test2() {
//│   let f: error
//│ }

:e
mixin Test3 { fun f(x) = if x is Foo then 1 }
//│ ╔══[ERROR] Cannot find constructor `Foo` in scope
//│ ║  l.51: 	mixin Test3 { fun f(x) = if x is Foo then 1 }
//│ ╙──      	                                 ^^^
//│ mixin Test3() {
//│   fun f: anything -> error
//│ }



:e // TODO support
mixin Test {
  class Lit(n: Int)
  class Add<A>(lhs: A, rhs: A) {
    let cached = size(this)
  }
  fun size(x) = if x is
    Add(l, r) then this.size(l) + this.size(r)
}
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.64: 	  class Add<A>(lhs: A, rhs: A) {
//│ ║        	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.65: 	    let cached = size(this)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.66: 	  }
//│ ╙──      	^^^
//│ ╔══[ERROR] Illegal pattern `Add`
//│ ║  l.68: 	    Add(l, r) then this.size(l) + this.size(r)
//│ ╙──      	    ^^^
//│ mixin Test() {
//│   class Add[A](lhs: A, rhs: A) {
//│     let cached: error
//│   }
//│   class Lit(n: Int)
//│   fun size: anything -> error
//│ }


