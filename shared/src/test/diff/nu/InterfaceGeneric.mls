:NewDefs
:NoJS

trait Into[T] {
    fun Into: T
}
//│ trait Into[T] {
//│   fun Into: T
//│ }

trait Nat extends Into[Int]
//│ trait Nat extends Into {
//│   fun Into: 'T
//│ }
//│ where
//│   'T := Int

trait Product[A, B] extends Into[A] {
    let pair: (A, B)
}
//│ trait Product[A, B] extends Into {
//│   fun Into: 'T
//│   let pair: (A, B,)
//│ }
//│ where
//│   'T := A

class TwoInts(pair: (Int, Int)) extends Product[Int, Int] {
    fun Into = pair._1 + pair._2
}
//│ class TwoInts(pair: (Int, Int,)) extends Into, Product {
//│   fun Into: Int
//│ }

let i2 = TwoInts((1,2))
//│ let i2: TwoInts

i2: Product[Int, Int]
//│ Product[Int, Int]

i2: Into[Int]
//│ Into[Int]

i2.pair
//│ (Int, Int,)

i2.Into
//│ Int

let p1: Product[Int, Int]
//│ let p1: Product[Int, Int]

:e
p1: Product[Bool, Int]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.54: 	p1: Product[Bool, Int]
//│ ║        	^^
//│ ╙── expression of type `Int & ?A` is not an instance of type `Bool`
//│ Product[Bool, Int]

p1: Into[Int]
//│ Into[Int]

:e
p1: Into[Bool]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.65: 	p1: Into[Bool]
//│ ║        	^^
//│ ╙── expression of type `Int` is not an instance of type `Bool`
//│ Into[Bool]
