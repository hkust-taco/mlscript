:NewDefs

fun (|>) pipe(x, f) = f(x)
fun (~~>) toBe(x, y) = if x === y then () else error
fun (<?) min(x, y) = if x < y then x else y
fun (>?) max(x, y) = if x > y then x else y
fun abs(x) = if x < 0 then -x else x
//│ fun (|>) pipe: forall 'a 'b. ('a, 'a -> 'b) -> 'b
//│ fun (~~>) toBe: forall 'c. (Eql['c], 'c) -> ()
//│ fun (<?) min: forall 'd. (Num & 'd, Num & 'd) -> 'd
//│ fun (>?) max: forall 'e. (Num & 'e, Num & 'e) -> 'e
//│ fun abs: Int -> Int


abstract class Option[out T]: (Some[T] | None)
class Some[out T](val value: T) extends Option[T]
module None extends Option[nothing]
//│ abstract class Option[T]: None | Some[T]
//│ class Some[T](value: T) extends Option
//│ module None extends Option

fun (??) getOrElse(o, v) = if o is
  Some(v') then v'
  None then v
//│ fun (??) getOrElse: forall 'a. (None | Some['a], 'a) -> 'a

fun (++) strcat(s1, s2) = concat(s1)(s2)
//│ fun (++) strcat: (Str, Str) -> Str

let anyToString = toString
//│ let anyToString: anything -> Str
//│ anyToString
//│             = [Function: toString]

abstract class List[out T]: (Cons[T] | Nil)
class Cons[out T](val head: T, val tail: List[T]) extends List[T]
module Nil extends List[nothing]
//│ abstract class List[T]: Cons[T] | Nil
//│ class Cons[T](head: T, tail: List[T]) extends List
//│ module Nil extends List

fun (::) cons(head, tail) = Cons(head, tail)
//│ fun (::) cons: forall 'T. ('T, List['T]) -> Cons['T]

abstract class Tree[out A]: (Empty | Node[A])
class Node[out A](value: A, left: Tree[A], right: Tree[A], rank: Int) extends Tree[A]
module Empty extends Tree[nothing]
//│ abstract class Tree[A]: Empty | Node[A]
//│ class Node[A](value: A, left: Tree[A], right: Tree[A], rank: Int) extends Tree
//│ module Empty extends Tree

fun show(t: Tree[anything]): Str = if t is
  Node(v, l, r, _) then
    "(" ++ show(l) ++ " " ++ toString(v) ++ " " ++ show(r) ++ ")"
  Empty then "•"
//│ fun show: (t: Tree[anything]) -> Str

fun singleton(x) = Node(x, Empty, Empty, 1)
fun rank(t) = if t is
  Empty then 0
  Node(_, _, _, r) then r
//│ fun singleton: forall 'A. 'A -> Node['A]
//│ fun rank: (Empty | Node[anything]) -> Int

// This can be improved. This can be better.
fun merge(t1: Tree[Num], t2: Tree[Num]): Tree[Num] =
  if
    t1 is Node(v1, l1, r1, _) and t2 is Node(v2, _, _, _) and
      v1 > v2 then merge(t2, t1)
      _ and merge(r1, t2) is merged and
        rank(l1) is rank_left and rank(r1) is rank_right and
          rank_left >= rank_right then Node(v1, l1, merged, rank_right + 1)
          else Node(v1, merged, l1, rank_left + 1)
    t1 is Empty and t2 is Node then t2
    t1 is Node and t2 is Empty then t1
    t1 is Empty and t2 is Empty then Empty
//│ fun merge: (t1: Tree[Num], t2: Tree[Num]) -> Tree[Num]

fun insert(t, v) = merge(t, singleton(v))
//│ fun insert: (Tree[Num], Num) -> Tree[Num]

fun getMin(t) =
  if t is
    Empty then None
    Node(x, _, _, _) then Some(x)
//│ fun getMin: forall 'T. (Empty | Node['T]) -> (None | Some['T])

fun deleteMin(t) =
  if t is
    Empty then Empty
    Node(_, l, r, _) then merge(l, r)
//│ fun deleteMin: (Empty | Node[Num]) -> (Empty | Tree[Num])

fun fromList(t, xs) =
  if xs is
    Cons(x, xs') then fromList(insert(t, x), xs')
    Nil then t
//│ fun fromList: (Tree[Num], Cons[Num] | Nil) -> Tree[Num]

let tree1 = fromList(Empty, 3 :: 4 :: 1 :: 2 :: Nil)
tree1 |> show
//│ let tree1: Empty | Tree[Num]
//│ Str
//│ tree1
//│       = Node {}
//│ res
//│     = '((• 2 (• 3 (• 4 •))) 1 •)'

// Remove the smallest element. It should be 1.
getMin(tree1) ?? "nothing"
let tree1' = deleteMin(tree1)
tree1' |> show
//│ let tree1': Empty | Tree[Num]
//│ Str
//│ res
//│     = 1
//│ tree1'
//│        = Node {}
//│ res
//│     = '(• 2 (• 3 (• 4 •)))'

// Remove one more element. It should be 2.
getMin(tree1') ?? "nothing"
let tree1'' = deleteMin(tree1')
tree1'' |> show
//│ let tree1'': Empty | Tree[Num]
//│ Str
//│ res
//│     = 2
//│ tree1''
//│         = Node {}
//│ res
//│     = '(• 3 (• 4 •))'

// Remove one more element. It should be 3.
getMin(tree1'') ?? "nothing"
let tree1''' = deleteMin(tree1'')
tree1''' |> show
//│ let tree1''': Empty | Tree[Num]
//│ Str
//│ res
//│     = 3
//│ tree1'''
//│          = Node {}
//│ res
//│     = '(• 4 •)'

// Remove the last element. It should be 4.
getMin(tree1''') ?? "nothing"
let tree1'''' = deleteMin(tree1''')
tree1'''' |> show
//│ let tree1'''': Empty | Tree[Num]
//│ Str
//│ res
//│     = 4
//│ tree1''''
//│           = Empty { class: [class Empty extends Tree] }
//│ res
//│     = '•'

// ===========================================================================

fun drain(t) =
  if getMin(t) is
    None then Nil
    Some(x) then x :: drain(deleteMin(t))
//│ fun drain: (Empty | Node[Num]) -> (Cons[Num] | Nil)

fun sorted(xs) = fromList(Empty, xs) |> drain
//│ fun sorted: (Cons[Num] | Nil) -> (Cons[Num] | Nil)

fun showList(xs) =
  if xs is
    Cons(x, Nil) then toString(x)
    Cons(x, xs') then toString(x) ++ ", " ++ showList(xs')
    Nil then ""
//│ fun showList: (Cons[anything] | Nil) -> Str

sorted(3 :: 4 :: 1 :: 2 :: Nil) |> showList
sorted(42 :: 58 :: 19 :: 37 :: 44 :: 99 :: 68 :: 60 :: 77 :: 61 :: Nil) |> showList
//│ Str
//│ res
//│     = '1, 2, 3, 4'
//│ res
//│     = '19, 37, 42, 44, 58, 60, 61, 68, 77, 99'
