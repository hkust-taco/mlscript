:NewDefs


type NStr = Str & {
  length: Int,
  at: Int -> NStr,
  charAt: Int -> NStr,
  charCodeAt: Int -> Int,
  slice: (Int, Int) -> NStr,
  startsWith: (Str, Int) -> Bool,
  endsWith: Str -> Bool,
  split: Str -> Array[NStr],
  trim: () -> NStr,
  trimStart: () -> NStr,
  trimEnd: () -> NStr,
  padStart: (Int, Str) -> NStr,
  padEnd: (Int, Str) -> NStr,
  repeat: Int -> NStr,
  indexOf: Str -> Int,
  lastIndexOf: Str -> Int,
  includes: Str -> Bool,
  localeCompare: Str -> Int
}
declare fun String: (anything -> NStr) & { fromCodePoint: Int -> NStr }
fun (++) strcat(a, b) = String of concat(a)(b)
fun (<*) strlt(a: NStr, b: NStr) = a.localeCompare(b) < 0
fun (*>) strgt(a: NStr, b: NStr) = a.localeCompare(b) > 0
//│ type NStr = Str & {
//│   at: Int -> NStr,
//│   charAt: Int -> NStr,
//│   charCodeAt: Int -> Int,
//│   endsWith: Str -> Bool,
//│   includes: Str -> Bool,
//│   indexOf: Str -> Int,
//│   lastIndexOf: Str -> Int,
//│   length: Int,
//│   localeCompare: Str -> Int,
//│   padEnd: (Int, Str) -> NStr,
//│   padStart: (Int, Str) -> NStr,
//│   repeat: Int -> NStr,
//│   slice: (Int, Int) -> NStr,
//│   split: Str -> Array[NStr],
//│   startsWith: (Str, Int) -> Bool,
//│   trim: () -> NStr,
//│   trimEnd: () -> NStr,
//│   trimStart: () -> NStr
//│ }
//│ fun (++) strcat: (Str, Str) -> NStr
//│ fun (<*) strlt: (a: NStr, b: NStr) -> Bool
//│ fun (*>) strgt: (a: NStr, b: NStr) -> Bool
//│ fun String: anything -> NStr & {fromCodePoint: Int -> NStr}

declare fun Math: { log10: Num -> Num, floor: Num -> Num, ceil: Num -> Num }
//│ fun Math: {ceil: Num -> Num, floor: Num -> Num, log10: Num -> Num}

fun (!==) notEqual(x, y) = not(x === y)
declare fun parseInt: (Str, Int) -> Int
//│ fun (!==) notEqual: forall 'a. (Eql['a], 'a) -> Bool
//│ fun parseInt: (Str, Int) -> Int

// `List` and its utilities:
abstract class List[out T]: Cons[T] | Nil
class Cons[out T](head: T, tail: List[T]) extends List[T]
module Nil extends List
fun (::) cons(head: 'T, tail: List['T]): List['T] = Cons(head, tail)
fun reverse(l: List['A]): List['A] =
  let rec r(l', l) = if l is Cons(x, xs) then r(x :: l', xs) else l'
  r(Nil, l)
fun join(sep: Str, xs: List['B]) = if xs is
  Cons(x, Nil) then toString(x)
  Cons(x, xs) then toString(x) ++ sep ++ join(sep, xs)
  Nil then ""
fun showList(xs: List['C]) = "[" ++ join(", ", xs) ++ "]"
fun map(f: 'D -> 'E, xs: List['D]): List['E] = if xs is
  Cons(x, xs) then f(x) :: map(f, xs)
  Nil then Nil
fun equalList(xs: List['A], ys: List['A], equal: ('A, 'A) -> Bool): Bool = if xs is
  Cons(x, xs') and ys is Cons(y, ys') then equal(x, y) and equalList(xs', ys', equal)
  Nil and ys is Nil then true
  else false
//│ abstract class List[T]: Cons[T] | Nil
//│ class Cons[T](head: T, tail: List[T]) extends List
//│ module Nil extends List
//│ fun (::) cons: forall 'T. (head: 'T, tail: List['T]) -> List['T]
//│ fun reverse: forall 'T0. (l: List['T0]) -> List['T0]
//│ fun join: (sep: Str, xs: List[anything]) -> (Str | NStr)
//│ fun showList: (xs: List[anything]) -> NStr
//│ fun map: forall 'D 'T1. (f: 'D -> 'T1, xs: List['D]) -> List['T1]
//│ fun equalList: forall 'A. (xs: List['A], ys: List['A], equal: ('A, 'A) -> Bool) -> Bool

// `Option` and its utilities:
abstract class Option[out A]: Some[A] | None
class Some[out A](value: A) extends Option[A]
module None extends Option
//│ abstract class Option[A]: None | Some[A]
//│ class Some[A](value: A) extends Option
//│ module None extends Option

fun (->) makePair(a, b) = [a, b]
//│ fun (->) makePair: forall 'a 'b. ('a, 'b) -> ['a, 'b]

abstract class ListMap[K, out V]: (ConsMap[K, V] | NilMap)
class ConsMap[K, out V](head: [K, V], tail: ListMap[K, V]) extends ListMap[K, V]
module NilMap extends ListMap
  
fun containsKey(map: ListMap['K, 'V], key: 'K): Bool = if map is
  ConsMap([k, _], _) and k === key then true
  ConsMap(_, tail) then containsKey(tail, key)
  NilMap then false
  
fun (:+) insert(map, entry) = if map is
  ConsMap(entry', map) and
    entry'.0 === entry.0 then ConsMap(entry, map)
    else ConsMap(entry', insert(map, entry))
  NilMap then ConsMap(entry, NilMap)
  
fun showMap(map) =
  let showEntry([k, v]) = toString(k) ++ " -> " ++ toString(v)
  let rec aux(map) = if map is
    ConsMap(last, NilMap) then showEntry(last)
    ConsMap(head, tail) then showEntry(head) ++ ", " ++ aux(tail)
    NilMap then ""
  if map is NilMap then String("{}") else "{ " ++ aux(map) ++ " }"
//│ abstract class ListMap[K, V]: ConsMap[K, V] | NilMap
//│ class ConsMap[K, V](head: [K, V], tail: ListMap[K, V]) extends ListMap
//│ module NilMap extends ListMap
//│ fun containsKey: forall 'K 'a. (map: ListMap['K, anything], key: 'a) -> Bool
//│ fun (:+) insert: forall 'K0 'b 'V. (ConsMap['K0, 'V] | NilMap, ['K0 & 'b, 'V]) -> ConsMap['K0, 'V]
//│ fun showMap: forall 'K1. (ConsMap['K1, anything] | NilMap) -> NStr
//│ where
//│   'K0 <: Eql['b]
//│   'K <: Eql['a]

showMap of NilMap
showMap of NilMap :+ ["b", 2]
showMap of NilMap :+ [1, "a"] :+ [2, "b"]
showMap of NilMap :+ [1, "a"] :+ [2, "b"] :+ [1, "c"]
//│ NStr
//│ res
//│     = '{}'
//│ res
//│     = '{ b -> 2 }'
//│ res
//│     = '{ 1 -> a, 2 -> b }'
//│ res
//│     = '{ 1 -> c, 2 -> b }'

abstract class JsonValue: JsonNumber | JsonString | JsonArray | JsonObject | JsonBoolean | JsonNull
class JsonNumber(value: Num) extends JsonValue
class JsonString(value: Str) extends JsonValue
class JsonArray(value: List[JsonValue]) extends JsonValue
class JsonObject(value: ListMap[Str, JsonValue]) extends JsonValue
class JsonBoolean(value: Bool) extends JsonValue
module JsonNull extends JsonValue
//│ abstract class JsonValue: JsonArray | JsonBoolean | JsonNull | JsonNumber | JsonObject | JsonString
//│ class JsonNumber(value: Num) extends JsonValue
//│ class JsonString(value: Str) extends JsonValue
//│ class JsonArray(value: List[JsonValue]) extends JsonValue
//│ class JsonObject(value: ListMap[Str, JsonValue]) extends JsonValue
//│ class JsonBoolean(value: Bool) extends JsonValue
//│ module JsonNull extends JsonValue

class ParserState(val text: NStr, val at: Int) {
  fun drained: Bool = at === text.length
  fun peek: Option[NStr] = if drained then None else Some(text.charAt(at))
  fun peekCode: Option[Int] = if drained then None else Some(text.charCodeAt(at))
  fun next: ParserState = if drained then this else ParserState(text, at + 1)
  fun nextDigit: Option[[Num, ParserState]] = if peekCode is
    Some(ch) and 48 <= ch and ch <= 57 then Some([ch - 48, next])
    else None
  fun match(prefix: Str): Option[ParserState] =
    let prefix' = String(prefix)
    if
      prefix'.length > text.length - at then None
      text.startsWith(prefix', at) then Some(ParserState(text, at + prefix'.length))
      else None
  fun rest: NStr = text.slice(at, text.length)
}
fun showParserState(state) = "ParserState(_, " ++ toString(state.at) ++ ")"
fun success: forall 't: ('t, ParserState) -> ParseResult['t]
fun success = (value, state) => Success(value, state)
fun failure: forall 't: Str -> ParseResult[nothing]
fun failure = error => Failure(error)
  
abstract class ParseResult[out T]: (Success[T] | Failure) {
  virtual fun flatMap(f: (T, ParserState) -> ParseResult['U]): ParseResult['U]
  virtual fun map(f: T -> 'U): ParseResult['U]
}
class Success[out T](value: T, state: ParserState) extends ParseResult[T] {
  fun flatMap(f) = f(value, state)
  fun map(f) = success(f(value), state)
}
class Failure(error: Str) extends ParseResult[nothing] {
  fun flatMap(_) = failure(error)
  fun map(_) = failure(error)
}
fun showParseResult(result) = if result is
  Success(value, state) then "Success after " ++ toString(state.at) ++ ": " ++ toString(value)
  Failure(error) then "Failure: " ++ toString(error)
//│ class ParserState(text: NStr, at: Int) {
//│   fun drained: Bool
//│   fun match: (prefix: Str) -> Option[ParserState]
//│   fun next: ParserState
//│   fun nextDigit: Option[[Num, ParserState]]
//│   fun peek: Option[NStr]
//│   fun peekCode: Option[Int]
//│   fun rest: NStr
//│ }
//│ fun showParserState: {at: anything} -> NStr
//│ fun success: forall 'T. ('T, ParserState) -> Success['T]
//│ fun failure: Str -> Failure
//│ abstract class ParseResult[T]: Failure | Success[T] {
//│   fun flatMap: forall 'U. (f: (T, ParserState) -> ParseResult['U]) -> ParseResult['U]
//│   fun map: forall 'U0. (f: T -> 'U0) -> ParseResult['U0]
//│ }
//│ class Success[T](value: T, state: ParserState) extends ParseResult {
//│   fun flatMap: forall 'a. ((T, ParserState) -> 'a) -> 'a
//│   fun map: forall 't. (T -> 't) -> ParseResult['t]
//│ }
//│ class Failure(error: Str) extends ParseResult {
//│   fun flatMap: anything -> ParseResult[nothing]
//│   fun map: anything -> ParseResult[nothing]
//│ }
//│ fun showParseResult: (Failure | Success[anything]) -> NStr
//│ fun success: forall 't0. ('t0, ParserState) -> ParseResult['t0]
//│ fun failure: Str -> ParseResult[nothing]

fun isWhiteSpace(ch: NStr): Bool =
  (ch === " ") || (ch === "\n") || (ch === "\r") || (ch === "\t")
fun skipWhiteSpace(state: ParserState): ParserState = if state.peek is
  Some(ch) and isWhiteSpace(ch) then skipWhiteSpace(state.next)
  else state
//│ fun isWhiteSpace: (ch: NStr) -> Bool
//│ fun skipWhiteSpace: (state: ParserState) -> ParserState

(skipWhiteSpace of ParserState(String(" \n\r\t"), 0)).at
//│ Int
//│ res
//│     = 4

fun isDigit(ch) = sge(ch, "0") && sle(ch, "9")
//│ fun isDigit: Str -> Bool

fun parseNumber(state: ParserState): ParseResult[Num] =
  let toFraction(n) = n / (10 ** Math.ceil of Math.log10 of n)
  let parseNegative(state): ParseResult[Bool] = if state.peek is
    Some("-") then Success(true, state.next)
    else Success(false, state)
  
  // Parse one or more decimal digits
  // --------------------------------
  let parseDigits(state): ParseResult[Num] =
    // Parse remaining digits
    let rec aux(acc, state) = if state.nextDigit is
      Some([digit, state']) then aux((acc *. 10) +. digit, state')
      None then [acc, state]
    // Parse the first digit
    if state.nextDigit is
      Some([digit, state']) and aux(digit, state') is
        [num, state''] then Success(num, state'')
      None then Failure("expected one or more decimal digits")
  
  // Parse the integral part of the number
  // -------------------------------------
  let parseIntegral(state): ParseResult[Num] = if state.nextDigit is
    Some([0, state']) then Success(0, state')
    else parseDigits(state)
  
  // Parse the fractional part of the number
  // ---------------------------------------
  let parseFraction(state): ParseResult[Num] = if state.peek is
    Some(".") then parseDigits(state.next).map of toFraction
    else Success(0, state)
  let parseExponent(state): ParseResult[Num] =
    let parseSign(state): ParseResult[Bool] = if state.peek is
      Some("-") then Success(true, state.next)
      Some("+") then Success(false, state.next)
      else Success(false, state)
    if state.peek is Some(e) and (e === "e") || (e === "E")
    then parseSign(state.next).flatMap of (sign, state) =>
      parseDigits(state).map of exponent =>
      if sign then 10 ** (0 -. exponent) else 10 ** exponent
    else Success(1, state)
  
  parseNegative(state).flatMap of (negative, state) =>
  parseIntegral(state).flatMap of (integral, state) =>
  parseFraction(state).flatMap of (fraction, state) =>
  parseExponent(state).flatMap of (exponent, state) =>
  let value = (integral +. fraction) *. exponent
  Success of (if negative then (0 -. value) else value), state
//│ fun parseNumber: (state: ParserState) -> ParseResult[Num]

showParseResult of parseNumber of ParserState of String("0"), 0
showParseResult of parseNumber of ParserState of String("0234"), 0
showParseResult of parseNumber of ParserState of String("123"), 0
showParseResult of parseNumber of ParserState of String("12.34"), 0
showParseResult of parseNumber of ParserState of String("1e10"), 0
showParseResult of parseNumber of ParserState of String("1E5"), 0
showParseResult of parseNumber of ParserState of String("1E-1"), 0
showParseResult of parseNumber of ParserState of String("1E+1"), 0
//│ NStr
//│ res
//│     = 'Success after 1: 0'
//│ res
//│     = 'Success after 1: 0'
//│ res
//│     = 'Success after 3: 123'
//│ res
//│     = 'Success after 5: 12.34'
//│ res
//│     = 'Success after 4: 10000000000'
//│ res
//│     = 'Success after 3: 100000'
//│ res
//│     = 'Success after 4: 0.1'
//│ res
//│     = 'Success after 4: 10'

fun parseString(state: ParserState): ParseResult[Str] =
  
  let rec parseCodePoint(n, acc, state) = if
    n === 0 then Success(acc, state)
    state.peekCode is Some(code) and
      48 <= code and code <= 57 then parseCodePoint(n - 1, acc * 16 + code - 48, state.next)
      65 <= code and code <= 70 then parseCodePoint(n - 1, acc * 16 + code - 55, state.next)
      97 <= code and code <= 102 then parseCodePoint(n - 1, acc * 16 + code - 87, state.next)
      else Failure("expect " ++ toString(n) ++ " hex digit(s) instead of '" ++ String.fromCodePoint(code) ++ "'")
    else Failure("expect " ++ toString(n) ++ " hex digit(s) instead of end of input")
  
  let rec parseContent(acc, state) = if state.peek is
    Some("\"") then Success(acc, state.next)
    Some("\\") and
      let state' = state.next
      state'.peek is
        Some("\"") then parseContent(acc ++ "\"", state'.next)
        Some("\\") then parseContent(acc ++ "\\", state'.next)
        Some("/") then parseContent(acc ++ "/", state'.next)
        Some("b") then parseContent(acc ++ "\b", state'.next)
        Some("f") then parseContent(acc ++ "\f", state'.next)
        Some("n") then parseContent(acc ++ "\n", state'.next)
        Some("r") then parseContent(acc ++ "\r", state'.next)
        Some("t") then parseContent(acc ++ "\t", state'.next)
        Some("u") then
          parseCodePoint(4, 0, state'.next).flatMap of (codePoint, state) =>
          if codePoint < 0xD800 || 0xDFFF < codePoint
          then parseContent(acc ++ String.fromCodePoint(codePoint), state)
          else Failure("invalid code point")
        else Failure("invalid escape sequence")
    Some(ch) then parseContent(acc ++ ch, state.next)
    None then Failure("expected '\"' instead of end of input")
  
  if state.peek is
    Some("\"") then parseContent("", state.next)
    Some(ch) then Failure("expected '\"' instead of '" ++ ch ++ "'")
    else Failure("expected '\"' instead of end of input")
//│ fun parseString: (state: ParserState) -> ParseResult[Str]

showParseResult of parseString of ParserState of String("\"\""), 0
showParseResult of parseString of ParserState of String("\"abc\""), 0
showParseResult of parseString of ParserState of String("\"\\\"\""), 0
showParseResult of parseString of ParserState of String("\"\\\\\""), 0
showParseResult of parseString of ParserState of String("\"\\/\""), 0
showParseResult of parseString of ParserState of String("\"\\b\""), 0
showParseResult of parseString of ParserState of String("\""), 0
showParseResult of parseString of ParserState of String("\"\\u\""), 0
showParseResult of parseString of ParserState of String("\"\\u0\""), 0
showParseResult of parseString of ParserState of String("\"\\u004c\""), 0
//│ NStr
//│ res
//│     = 'Success after 2: '
//│ res
//│     = 'Success after 5: abc'
//│ res
//│     = 'Success after 4: "'
//│ res
//│     = 'Success after 4: \\'
//│ res
//│     = 'Success after 4: /'
//│ res
//│     = 'Success after 4: \b'
//│ res
//│     = `Failure: expected '"' instead of end of input`
//│ res
//│     = `Failure: expect 4 hex digit(s) instead of '"'`
//│ res
//│     = `Failure: expect 3 hex digit(s) instead of '"'`
//│ res
//│     = 'Success after 8: L'

fun parseTrue(state: ParserState): ParseResult[Bool] =
  if state.match("true") is
    Some(state) then Success(true, state)
    None then Failure("expected 'true'")
  
fun parseFalse(state: ParserState): ParseResult[Bool] =
  if state.match("false") is
    Some(state) then Success(false, state)
    None then Failure("expected 'false'")
  
fun parseNull(state: ParserState): ParseResult[()] =
  if state.match("null") is
    Some(state) then Success((), state)
    None then Failure("expected 'null'")
//│ fun parseTrue: (state: ParserState) -> ParseResult[Bool]
//│ fun parseFalse: (state: ParserState) -> ParseResult[Bool]
//│ fun parseNull: (state: ParserState) -> ParseResult[()]

fun parseObjectEntry(state: ParserState): ParseResult[[Str, JsonValue]] =
  let state' = skipWhiteSpace(state)
  parseString(state').flatMap of (key, state) =>
  let state' = skipWhiteSpace(state)
  if state'.peek is
    Some(":") then
      parseValue(state'.next).flatMap of (value, state') =>
      Success([key, value], state')
    Some(ch) then Failure("expected ':' instead of '" ++ ch ++ "'")
    None then Failure("expected ':' instead of end of input")
  else Failure("expected ':' instead of end of input")
  
fun parseObject(state: ParserState): ParseResult[ListMap[Str, JsonValue]] =
  let rec parseObjectTail(acc: ListMap[Str, JsonValue], state: ParserState) =
    let state' = skipWhiteSpace(state)
    if state'.peek is
      Some(",") then
        parseObjectEntry(state'.next).flatMap of (entry, state') =>
        if containsKey(acc, entry.0) then
          Failure("duplicate key '" ++ toString(entry.0) ++ "'")
        else
          parseObjectTail(ConsMap(entry, acc), state')
      Some("}") then Success(acc, state'.next)
      Some(ch) then Failure("expected ',' or ']' instead of " ++ ch)
      None then Failure("expected ',' or ']' instead of end of input")
  let state' = skipWhiteSpace(state)
  if state'.peek is
    Some("}") then Success(NilMap, state'.next)
    None then Failure("expected ',' or ']' instead of end of input")
    else
      parseObjectEntry(state').flatMap of (head, state) =>
      parseObjectTail(ConsMap(head, NilMap), state)
  
fun parseArray(state: ParserState): ParseResult[List[JsonValue]] =
  let rec parseArrayTail(acc, state) =
    let state' = skipWhiteSpace(state)
    if state'.peek is
      Some(",") then
        parseValue(state'.next).flatMap of (value, state') =>
        parseArrayTail(value :: acc, state')
      Some("]") then Success(reverse(acc), state'.next)
      Some(ch) then Failure("expected ',' or ']' instead of " ++ ch)
      None then Failure("expected ',' or ']' instead of end of input")
  let state' = skipWhiteSpace(state)
  if state'.peek is
    Some("]") then Success(Nil, state'.next)
    None then Failure("expected ',' or ']' instead of end of input")
    else
      parseValue(state').flatMap of (head, state) =>
      parseArrayTail(head :: Nil, state)
  
fun parseValue(state: ParserState): ParseResult[JsonValue] =
  let state' = skipWhiteSpace(state)
  if state'.peek is
    Some(ch) and
      ch === "\"" then parseString(state').map of JsonString
      (ch === "-") || isDigit(ch) then parseNumber(state').map of JsonNumber
      ch === "[" then parseArray(state'.next).map of JsonArray
      ch === "{" then parseObject(state'.next).map of JsonObject
      ch === "t" then parseTrue(state').map of JsonBoolean
      ch === "f" then parseFalse(state').map of JsonBoolean
      ch === "n" then parseNull(state').map of _ => JsonNull
      else Failure("cannot recognize " ++ ch ++ " as the beginning of a JSON value")
    None then Failure("expected a JSON value instead of end of input")
//│ fun parseObjectEntry: (state: ParserState) -> ParseResult[[Str, JsonValue]]
//│ fun parseObject: (state: ParserState) -> ParseResult[ListMap[Str, JsonValue]]
//│ fun parseArray: (state: ParserState) -> ParseResult[List[JsonValue]]
//│ fun parseValue: (state: ParserState) -> ParseResult[JsonValue]

fun parse(source: Str): ParseResult[JsonValue] =
  (parseValue of ParserState of String(source), 0).flatMap of (value, finalState) =>
    let shouldBeEnd = skipWhiteSpace of finalState
    if shouldBeEnd.drained then
      Success(value, shouldBeEnd)
    else
      Failure("expected end of input instead of: " ++ shouldBeEnd.rest)
//│ fun parse: (source: Str) -> ParseResult[JsonValue]

fun stringify(value: JsonValue): Str =
  let stringifyObject(map) =
    let showEntry([k, v]) = "\"" ++ toString(k) ++ "\": " ++ stringify(v)
    let rec aux(map) = if map is
      ConsMap(last, NilMap) then showEntry(last)
      ConsMap(head, tail) then showEntry(head) ++ ", " ++ aux(tail)
      NilMap then ""
    if map is NilMap then String("{}") else "{ " ++ aux(map) ++ " }"
  
  if value is
    JsonNumber(n) then toString(n)
    JsonString(s) then "\"" ++ s ++ "\""
    JsonArray(xs) then "[" ++ join(", ", map(stringify, xs)) ++ "]"
    JsonObject(m) then stringifyObject(m)
    JsonBoolean(b) then if b then "true" else "false"
    JsonNull then "null"
//│ fun stringify: (value: JsonValue) -> Str

fun showResult(result) = if result is
  Success(value, state) then "Success after " ++ toString(state.at) ++ ": " ++ stringify(value)
  Failure(error) then "Failure: " ++ toString(error)
//│ fun showResult: (Failure | Success[JsonValue]) -> NStr

// Simple tests.
showResult of parse of "null"
showResult of parse of "true"
showResult of parse of "false"
showResult of parse of "123"
showResult of parse of "\"abc\""
showResult of parse of "[1, 2, 3]"
showResult of parse of "{\"a\": 1, \"b\": 2}"
showResult of parse of "nul"
showResult of parse of "[1, 3, 5"
showResult of parse of "[1, 3, 5]"
//│ NStr
//│ res
//│     = 'Success after 4: null'
//│ res
//│     = 'Success after 4: true'
//│ res
//│     = 'Success after 5: false'
//│ res
//│     = 'Success after 3: 123'
//│ res
//│     = 'Success after 5: "abc"'
//│ res
//│     = 'Success after 9: [1, 2, 3]'
//│ res
//│     = 'Success after 16: { "b": 2, "a": 1 }'
//│ res
//│     = "Failure: expected 'null'"
//│ res
//│     = "Failure: expected ',' or ']' instead of end of input"
//│ res
//│     = 'Success after 9: [1, 3, 5]'

// Complicated tests.
showResult of parse of "{ \"origin\": { \"x\": 0, \"y\": 0 } }"
showResult of parse of "[   { \"origin\": { \"x\": 0, \"y\": 0 } , \"size\": { \"width\": 100, \"height\": 100 } }   ]"
showResult of parse of "{\"id\":\"658f34f88882211aa8679240\",\"children\":[{\"name\":\"Jo Rosales\",\"age\":8},{\"name\":\"Shawn Burke\",\"age\":7},{\"name\":\"Gomez Guthrie\",\"age\":10},{\"name\":\"Tandy Christensen\",\"age\":9},{\"name\":\"Jody Langley\",\"age\":3}],\"currentJob\":{\"title\":\"Developer\",\"salary\":\"mask;\"},\"jobs\":[{\"title\":\"medic\",\"salary\":\"R$ 6.400,90\"},{\"title\":\"teacher\",\"salary\":\"R$ 7.960,31\"}],\"maxRunDistance\":14.7,\"cpf\":\"713.763.356-03\",\"cnpj\":\"33.385.435/0001-50\",\"pretendSalary\":\"R$ 9.247,29\",\"age\":63,\"gender\":\"male\",\"firstName\":\"Parker\",\"lastName\":\"Case\",\"phone\":\"+55 (83) 95023-7077\",\"address\":\"14 Orient Avenue - Harmon, Northern Mariana Islands, Myanmar.\",\"hairColor\":\"yellow\"}"
//│ NStr
//│ res
//│     = 'Success after 32: { "origin": { "y": 0, "x": 0 } }'
//│ res
//│     = 'Success after 82: [{ "size": { "height": 100, "width": 100 }, "origin": { "y": 0, "x": 0 } }]'
//│ res
//│     = 'Success after 647: { "hairColor": "yellow", "address": "14 Orient Avenue - Harmon, Northern Mariana Islands, Myanmar.", "phone": "+55 (83) 95023-7077", "lastName": "Case", "firstName": "Parker", "gender": "male", "age": 63, "pretendSalary": "R$ 9.247,29", "cnpj": "33.385.435/0001-50", "cpf": "713.763.356-03", "maxRunDistance": 14.7, "jobs": [{ "salary": "R$ 6.400,90", "title": "medic" }, { "salary": "R$ 7.960,31", "title": "teacher" }], "currentJob": { "salary": "mask;", "title": "Developer" }, "children": [{ "age": 8, "name": "Jo Rosales" }, { "age": 7, "name": "Shawn Burke" }, { "age": 10, "name": "Gomez Guthrie" }, { "age": 9, "name": "Tandy Christensen" }, { "age": 3, "name": "Jody Langley" }], "id": "658f34f88882211aa8679240" }'

// Nice.
