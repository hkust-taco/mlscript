:NewDefs

fun (|>) pipe(x, f) = f(x)
fun (~~>) toBe(x, y) = if x === y then () else error
fun (<?) min(x, y) = if x < y then x else y
fun (>?) max(x, y) = if x > y then x else y
fun abs(x) = if x < 0 then -x else x
//│ fun (|>) pipe: forall 'a 'b. ('a, 'a -> 'b) -> 'b
//│ fun (~~>) toBe: forall 'c. (Eql['c], 'c) -> ()
//│ fun (<?) min: forall 'd. (Num & 'd, Num & 'd) -> 'd
//│ fun (>?) max: forall 'e. (Num & 'e, Num & 'e) -> 'e
//│ fun abs: Int -> Int


abstract class Option[T]: (Some[T] | None)
class Some[T](val value: T) extends Option[T]
module None extends Option[nothing]
//│ abstract class Option[T]: None | Some[T]
//│ class Some[T](value: T) extends Option
//│ module None extends Option

fun (??) getOrElse(o, v) = if o is
  Some(v') then v'
  None then v
//│ fun (??) getOrElse: forall 'a. (None | Some['a], 'a) -> 'a

fun (++) strcat(s1, s2) = concat(s1)(s2)
//│ fun (++) strcat: (Str, Str) -> Str

let anyToString = toString
//│ let anyToString: anything -> Str
//│ anyToString
//│             = [Function: toString]

abstract class List[out T]: (Cons[T] | Nil)
class Cons[out T](val head: T, val tail: List[T]) extends List[T]
module Nil extends List[nothing]
//│ abstract class List[T]: Cons[T] | Nil
//│ class Cons[T](head: T, tail: List[T]) extends List
//│ module Nil extends List

fun (::) cons(head, tail) = Cons(head, tail)
//│ fun (::) cons: forall 'T. ('T, List['T]) -> Cons['T]

1 :: 2 :: 3 :: 4 :: Nil
//│ Cons[1 | 2 | 3 | 4]
//│ res
//│     = Cons {}

abstract class Tree[out A]: (Empty | Node[A])
class Node[out A](value: A, left: Tree[A], right: Tree[A]) extends Tree[A]
module Empty extends Tree
//│ abstract class Tree[A]: Empty | Node[A]
//│ class Node[A](value: A, left: Tree[A], right: Tree[A]) extends Tree
//│ module Empty extends Tree

fun single(v) = Node(v, Empty, Empty)
//│ fun single: forall 'A. 'A -> Node['A]

fun show(t: Tree['A]): Str = if t is
  Node(v, l, r) then
    "(" ++ show(l) ++ " " ++ toString(v) ++ " " ++ show(r) ++ ")"
  Empty then "•"
//│ fun show: (t: Tree[anything]) -> Str

show(Empty)
show(Node(0, Empty, Empty))
show(Node(1, Node(0, Empty, Empty), Empty))
show(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)))
//│ Str
//│ res
//│     = '•'
//│ res
//│     = '(• 0 •)'
//│ res
//│     = '((• 0 •) 1 •)'
//│ res
//│     = '((• 0 •) 1 (• 2 •))'

fun insert(t, v) = if t is
  Node(v', l, r) and
    v < v' then Node(v', insert(l, v), r)
    v > v' then Node(v', l, insert(r, v))
    _ then t
  Empty then Node(v, Empty, Empty)
//│ fun insert: forall 'A. (Empty | Node[Num & 'A], Num & 'A) -> (Node[nothing] | Node['A])

fun insert'(t, v) = if t is
  Node(v', l, r) and v
    < v' then Node(v', insert(l, v), r)
    > v' then Node(v', l, insert(r, v))
    else t
  Empty then Node(v, Empty, Empty)
//│ fun insert': forall 'A. (Empty | Node[Num & 'A], Num & 'A) -> (Node[nothing] | Node['A])

insert(Empty, 0) |> show
insert(Node(0, Empty, Empty), 0) |> show
insert(Node(1, Empty, Empty), 0) |> show
insert(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
insert(Node(1, Node(0, Empty, Empty), Empty), 2) |> show
//│ Str
//│ res
//│     = '(• 0 •)'
//│ res
//│     = '(• 0 •)'
//│ res
//│     = '((• 0 •) 1 •)'
//│ res
//│     = '((• 0 •) 1 •)'
//│ res
//│     = '((• 0 •) 1 (• 2 •))'


fun fromList(l) =
  let rec fromList'(t, xs) =
    if xs is
      Cons(x, xs') then fromList'(insert(t, x), xs')
      Nil then t
  fromList'(Empty, l)
//│ fun fromList: forall 'A. (Cons[Num & 'A] | Nil) -> (Empty | Node['A])

fromList(1 :: 2 :: 3 :: 4 :: Nil) |> show
fromList(2 :: 1 :: 4 :: 3 :: Nil) |> show
fromList(4 :: 3 :: 2 :: 1 :: Nil) |> show
let example1 = fromList(1 :: 3 :: 2 :: 4 :: Nil)
example1 |> show
//│ let example1: Empty | Node[1 | 2 | 3 | 4]
//│ Str
//│ res
//│     = '(• 1 (• 2 (• 3 (• 4 •))))'
//│ res
//│     = '((• 1 •) 2 ((• 3 •) 4 •))'
//│ res
//│     = '((((• 1 •) 2 •) 3 •) 4 •)'
//│ example1
//│          = Node {}
//│ res
//│     = '(• 1 ((• 2 •) 3 (• 4 •)))'

fun contains(t, v) = if t is
  Node(v', l, r) and
    v < v' then contains(l, v)
    v > v' then contains(r, v)
    _ then true
  Empty then false
//│ fun contains: (Empty | Node[Num], Num) -> Bool

// Writing tests like this is very interesting.
contains(Empty, 0) ~~> false
contains(Node(0, Empty, Empty), 0) ~~> true
contains(Node(1, Empty, Empty), 0) ~~> false
//│ ()
//│ res
//│     = undefined
//│ res
//│     = undefined
//│ res
//│     = undefined

fun minValue(t) = if t is
  Empty then None
  Node(v, Empty, _) then Some(v)
  Node(_, l, _) then minValue(l)
//│ fun minValue: forall 'T. (Empty | Node['T]) -> (None | Some['T])

minValue(Empty) ?? "not found"
minValue(Node(0, Empty, Empty)) ?? "not found"
minValue(example1) ?? "not found"
//│ "not found" | 1 | 2 | 3 | 4
//│ res
//│     = 'not found'
//│ res
//│     = 0
//│ res
//│     = 1

fun maxValue(t) = if t is
  Empty then None
  Node(v, _, Empty) then Some(v)
  Node(_, _, r) then maxValue(r)
//│ fun maxValue: forall 'T. (Empty | Node['T]) -> (None | Some['T])

maxValue(Empty) ?? "not found"
maxValue(Node(0, Empty, Empty)) ?? "not found"
maxValue(example1) ?? "not found"
//│ "not found" | 1 | 2 | 3 | 4
//│ res
//│     = 'not found'
//│ res
//│     = 0
//│ res
//│     = 4

fun lowerBound(t, v) = if t is
  Node(v', l, r) and
    v < v' then lowerBound(l, v)
    v > v' then Some(lowerBound(r, v) ?? v')
    _ then Some(v')
  Empty then None
//│ fun lowerBound: forall 'T. (Empty | Node[Num & 'T], Num) -> (None | Some['T])

lowerBound(Empty, 0) ?? "not found"
lowerBound(Node(0, Empty, Empty), 0) ?? "not found"
lowerBound(Node(1, Empty, Empty), 0) ?? "not found"
lowerBound(Node(-1, Empty, Empty), 0) ?? "not found"
//│ "not found" | -1
//│ res
//│     = 'not found'
//│ res
//│     = 0
//│ res
//│     = 'not found'
//│ res
//│     = -1

lowerBound(example1, 0) ?? "not found"
lowerBound(example1, 1) ?? "not found"
lowerBound(example1, 2) ?? "not found"
lowerBound(example1, 3) ?? "not found"
lowerBound(example1, 4) ?? "not found"
lowerBound(example1, 5) ?? "not found"
//│ "not found" | 1 | 2 | 3 | 4
//│ res
//│     = 'not found'
//│ res
//│     = 1
//│ res
//│     = 2
//│ res
//│     = 3
//│ res
//│     = 4
//│ res
//│     = 4

let example2 = fromList(1 :: 5 :: 42 :: 10 :: 23 :: 59 :: 81 :: Nil)
lowerBound(example2, 0) ?? "not found"
lowerBound(example2, 25) ?? "not found"
lowerBound(example2, 99) ?? "not found"
lowerBound(example2, 7) ?? "not found"
lowerBound(example2, 32) ?? "not found"
lowerBound(example2, 41) ?? "not found"
//│ let example2: Empty | Node[1 | 10 | 23 | 42 | 5 | 59 | 81]
//│ "not found" | 1 | 10 | 23 | 42 | 5 | 59 | 81
//│ example2
//│          = Node {}
//│ res
//│     = 'not found'
//│ res
//│     = 23
//│ res
//│     = 81
//│ res
//│     = 5
//│ res
//│     = 23
//│ res
//│     = 23

fun upperBound(t, v) = if t is
  Node(v', l, r) and
    v < v' then Some(upperBound(l, v) ?? v')
    v > v' then upperBound(r, v)
    _ then Some(v')
  Empty then None
//│ fun upperBound: forall 'T. (Empty | Node[Num & 'T], Num) -> (None | Some['T])

upperBound(example2, 0) ?? "not found"
upperBound(example2, 25) ?? "not found"
upperBound(example2, 99) ?? "not found"
upperBound(example2, 7) ?? "not found"
upperBound(example2, 32) ?? "not found"
upperBound(example2, 41) ?? "not found"
//│ "not found" | 1 | 10 | 23 | 42 | 5 | 59 | 81
//│ res
//│     = 1
//│ res
//│     = 42
//│ res
//│     = 'not found'
//│ res
//│     = 10
//│ res
//│     = 42
//│ res
//│     = 42

fun remove(t, v) =
  if t is
    Node(v', l, r) and
      v < v' then Node(v', remove(l, v), r)
      v > v' then Node(v', l, remove(r, v))
      minValue(r) is
        None then l
        Some(v'') then Node(v'', l, remove(r, v''))
    Empty then Empty
//│ fun remove: forall 'A. (Empty | Node[Num & 'A], Num) -> (Empty | Node['A] | Tree['A])

remove(Empty, 0) |> show
remove(Node(0, Empty, Empty), 0) |> show
remove(Node(1, Empty, Empty), 0) |> show
remove(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
remove(Node(1, Empty, Node(2, Empty, Empty)), 2) |> show
remove(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)), 1) |> show
//│ Str
//│ res
//│     = '•'
//│ res
//│     = '•'
//│ res
//│     = '(• 1 •)'
//│ res
//│     = '(• 1 •)'
//│ res
//│     = '(• 1 •)'
//│ res
//│     = '((• 0 •) 2 •)'

example1 |> show
remove(example1, 0) |> show
remove(example1, 1) |> show
remove(example1, 2) |> show
remove(example1, 3) |> show
remove(example1, 4) |> show
//│ Str
//│ res
//│     = '(• 1 ((• 2 •) 3 (• 4 •)))'
//│ res
//│     = '(• 1 ((• 2 •) 3 (• 4 •)))'
//│ res
//│     = '(• 2 (• 3 (• 4 •)))'
//│ res
//│     = '(• 1 (• 3 (• 4 •)))'
//│ res
//│     = '(• 1 ((• 2 •) 4 •))'
//│ res
//│     = '(• 1 ((• 2 •) 3 •))'

class Pair[A, B](val first: A, val second: B) {
  fun mapFirst(f) = Pair(f(first), second)
  fun mapSecond(f) = Pair(first, f(second))
}
//│ class Pair[A, B](first: A, second: B) {
//│   fun mapFirst: forall 'A 'B. (A -> 'A) -> Pair['A, 'B]
//│   fun mapSecond: forall 'B0 'A0. (B -> 'B0) -> Pair['A0, 'B0]
//│ }
//│ where
//│   'A0 :> A
//│   'B :> B

fun extractMin(t) =
  if t is
    Node(v, Empty, r) then Pair(Some(v), r)
    Node(v, l, r) and
      extractMin(l) is Pair(m, l') then
        Pair(m, Node(v, l', r))
    Empty then Pair(None, Empty)
//│ fun extractMin: forall 'A 'T 'A0 'A1 'B. (Empty | Node['A & 'T & 'A0]) -> Pair[in 'A1 out 'A1 | None, in Tree['A0] & 'B out Empty | 'B | Node['A0] | Tree['A]]
//│   where
//│     'A1 :> None | Some['T]

extractMin(example1).first ?? "not found"
extractMin(example1).second |> show
//│ Str
//│ res
//│     = 1
//│ res
//│     = '((• 2 •) 3 (• 4 •))'

fun merge(l, r) =
  if extractMin(r) is
    Pair(None, _) then l
    Pair(Some(m), r') then Node(m, l, r')
//│ fun merge: forall 'A 'a. (Tree['A] & 'a, Empty | Node['A]) -> (Node['A] | 'a)

merge(Empty, Empty) |> show
merge(Empty, Node(0, Empty, Empty)) |> show
merge(Node(0, Empty, Empty), Empty) |> show
merge(Node(0, Empty, Empty), Node(1, Empty, Empty)) |> show
merge(Node(0, Empty, Empty), Node(2, Node(1, Empty, Empty), Empty)) |> show
//│ Str
//│ res
//│     = '•'
//│ res
//│     = '(• 0 •)'
//│ res
//│     = '(• 0 •)'
//│ res
//│     = '((• 0 •) 1 •)'
//│ res
//│     = '((• 0 •) 1 (• 2 •))'

fun removeGte(t, v) =
  if t is
    Node(v', l, r) and
      v < v' then removeGte(l, v)
      v > v' then Node(v', l, removeGte(r, v))
      _ then l // lucky case
    Empty then Empty
//│ fun removeGte: forall 'A. (Empty | Node[Num & 'A], Num) -> (Empty | Node['A] | Tree['A])

removeGte(Empty, 0) |> show
removeGte(example1, 0) |> show
removeGte(example1, 1) |> show
removeGte(example1, 2) |> show
removeGte(example1, 3) |> show
removeGte(example1, 4) |> show
removeGte(example1, 5) |> show
//│ Str
//│ res
//│     = '•'
//│ res
//│     = '•'
//│ res
//│     = '•'
//│ res
//│     = '(• 1 •)'
//│ res
//│     = '(• 1 (• 2 •))'
//│ res
//│     = '(• 1 ((• 2 •) 3 •))'
//│ res
//│     = '(• 1 ((• 2 •) 3 (• 4 •)))'

example2 |> show
removeGte(example2, 10) |> show
removeGte(example2, 22) |> show
removeGte(example2, 23) |> show
removeGte(example2, 24) |> show
removeGte(example2, 70) |> show
removeGte(example2, 99) |> show
//│ Str
//│ res
//│     = '(• 1 (• 5 ((• 10 (• 23 •)) 42 (• 59 (• 81 •)))))'
//│ res
//│     = '(• 1 (• 5 •))'
//│ res
//│     = '(• 1 (• 5 (• 10 •)))'
//│ res
//│     = '(• 1 (• 5 (• 10 •)))'
//│ res
//│     = '(• 1 (• 5 (• 10 (• 23 •))))'
//│ res
//│     = '(• 1 (• 5 ((• 10 (• 23 •)) 42 (• 59 •))))'
//│ res
//│     = '(• 1 (• 5 ((• 10 (• 23 •)) 42 (• 59 (• 81 •)))))'

fun removeLt(t, v) =
  if t is
    Node(v', l, r) and
      v' < v then removeLt(r, v)
      else Node(v', removeLt(l, v), r)
    Empty then Empty
//│ fun removeLt: forall 'A. (Empty | Node[Num & 'A], Num) -> (Empty | Node['A])

example2 |> show
removeLt(example2, 10) |> show
removeLt(example2, 22) |> show
removeLt(example2, 23) |> show
removeLt(example2, 24) |> show
removeLt(example2, 70) |> show
removeLt(example2, 99) |> show
//│ Str
//│ res
//│     = '(• 1 (• 5 ((• 10 (• 23 •)) 42 (• 59 (• 81 •)))))'
//│ res
//│     = '((• 10 (• 23 •)) 42 (• 59 (• 81 •)))'
//│ res
//│     = '((• 23 •) 42 (• 59 (• 81 •)))'
//│ res
//│     = '((• 23 •) 42 (• 59 (• 81 •)))'
//│ res
//│     = '(• 42 (• 59 (• 81 •)))'
//│ res
//│     = '(• 81 •)'
//│ res
//│     = '•'

// Remove elements from `begin` until `end`.
fun removeRange(t, begin, end) =
  if t is
    Node(v, l, r) and
      begin > v then Node(v, l, removeRange(r, begin, end))
      end <= v then Node(v, removeRange(l, begin, end), r)
      _ then merge(removeGte(l, begin), removeLt(r, end))
    Empty then Empty
//│ fun removeRange: forall 'A. (Empty | Node[Num & 'A], Num, Num) -> (Empty | Node['A] | Tree['A])

example2 |> show
removeRange(example2, 1, 82) |> show
removeRange(example2, 1, 50) |> show
removeRange(example2, 50, 81) |> show
removeRange(example2, 20, 60) |> show
removeRange(example2, 20, 24) |> show
removeRange(example2, 59, 60) |> show
//│ Str
//│ res
//│     = '(• 1 (• 5 ((• 10 (• 23 •)) 42 (• 59 (• 81 •)))))'
//│ res
//│     = '•'
//│ res
//│     = '(• 59 (• 81 •))'
//│ res
//│     = '(• 1 (• 5 ((• 10 (• 23 •)) 42 (• 81 •))))'
//│ res
//│     = '(• 1 (• 5 ((• 10 •) 81 •)))'
//│ res
//│     = '(• 1 (• 5 ((• 10 •) 42 (• 59 (• 81 •)))))'
//│ res
//│     = '(• 1 (• 5 ((• 10 (• 23 •)) 42 (• 81 •))))'

fun size(t) =
  if t is
    Node(_, l, r) then 1 + size(l) + size(r)
    Empty then 0
//│ fun size: (Empty | Node[anything]) -> Int

size(Empty) ~~> 0
size(Node(0, Empty, Empty)) ~~> 1
size(example1) ~~> 4
size(example2) ~~> 7
//│ ()
//│ res
//│     = undefined
//│ res
//│     = undefined
//│ res
//│     = undefined
//│ res
//│     = undefined

fun inverse(t) =
  if t is
    Node(v, l, r) then Node(v, inverse(r), inverse(l))
    Empty then Empty
//│ fun inverse: (Empty | Node[anything]) -> (Empty | Node[nothing])

inverse(Empty) |> show
inverse(Node(0, Empty, Empty)) |> show
inverse(example1) |> show
inverse(example2) |> show
//│ Str
//│ res
//│     = '•'
//│ res
//│     = '(• 0 •)'
//│ res
//│     = '(((• 4 •) 3 (• 2 •)) 1 •)'
//│ res
//│     = '(((((• 81 •) 59 •) 42 ((• 23 •) 10 •)) 5 •) 1 •)'

fun height(t) =
  if t is
    Node(_, l, r) then 1 + max(height(l), height(r))
    Empty then 0
//│ fun height: (Empty | Node[anything]) -> Int

height(Empty) ~~> 0
height(Node(0, Empty, Empty)) ~~> 1
height(example1) ~~> 3
height(example2) ~~> 5
//│ ()
//│ res
//│     = undefined
//│ res
//│     = undefined
//│ res
//│     = undefined
//│ res
//│     = undefined

fun isBalanced(t) =
  if t is
    Empty then true
    Node(_, l, r) and height(l) is hl and height(r) is hr then
      // The precedence of `<=` seems to be broken.
      (abs(hl - hr) <= 1) && isBalanced(l) && isBalanced(r)
//│ fun isBalanced: (Empty | Node[anything]) -> Bool

isBalanced(Empty) ~~> true
isBalanced(Node(0, Empty, Empty)) ~~> true
isBalanced(example1) ~~> false
isBalanced(example2) ~~> false
//│ ()
//│ res
//│     = undefined
//│ res
//│     = undefined
//│ res
//│     = undefined
//│ res
//│     = undefined

isBalanced(Node(1, single(-1), single(3))) ~~> true
isBalanced(Node(1, single(-1), Node(3, single(2), Empty))) ~~> true
isBalanced(Node(1, single(-1), Node(3, Empty, single(4)))) ~~> true
//│ ()
//│ res
//│     = undefined
//│ res
//│     = undefined
//│ res
//│     = undefined
