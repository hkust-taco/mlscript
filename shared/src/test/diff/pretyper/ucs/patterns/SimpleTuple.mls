:NewDefs

// We test the support for simple tuple patterns in this file.
// Splice tuple patterns will be implement in the future.

fun sum(x, y) = x + y
sum(1, 2)
//│ fun sum: (Int, Int) -> Int
//│ Int
//│ res
//│     = 3

fun sum'([x, y]) = x + y
sum'([1, 2])
//│ fun sum': ([Int, Int]) -> Int
//│ Int
//│ res
//│     = 3

fun sum''(pair) =
  if pair is [x, y] then x + y
sum'([1, 2])
//│ fun sum'': {0: Int, 1: Int} -> Int
//│ Int
//│ res
//│     = 3

// We need native support for tuple patterns in MLscript syntax.
// Otherwise the following cases work.

fun test(thing) =
  if thing is [] then 0
test("")
test(12)
//│ fun test: anything -> 0
//│ 0
//│ res
//│     = 0
//│ res
//│     = 0

:w
// Since pattern destruction is desugared to let bindings, matching with other
// classes after the tuple pattern will not work.
class Point(x: Int, y: Int)
fun discarded_cases(thing) =
  if thing is
    [x, y] then x + y
    Point(x, y) then x + y
//│ ╔══[WARNING] this case is unreachable
//│ ║  l.47: 	  if thing is
//│ ║        	     ^^^^^^^^
//│ ║  l.48: 	    [x, y] then x + y
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.49: 	    Point(x, y) then x + y
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── because it is subsumed by the branch
//│ ║  l.48: 	    [x, y] then x + y
//│ ╙──      	                ^^^^^
//│ class Point(x: Int, y: Int)
//│ fun discarded_cases: {0: Int, 1: Int} -> Int

:e
discarded_cases(Point(0, 0))
//│ ╔══[ERROR] Type `Point` does not contain member `1`
//│ ║  l.48: 	    [x, y] then x + y
//│ ╙──      	        ^
//│ Int | error
//│ res
//│     = NaN

// A workaround is to move the tuple pattern to the last case.
fun working_cases(thing) =
  if thing is
    Point(x, y) then x + y
    [x, y] then x + y
//│ fun working_cases: (Object & {0: Int, 1: Int} & ~#Point | Point) -> Int

working_cases(Point(0, 0))
//│ Int
//│ res
//│     = 0

// However, the `Object` type forbids tuples to be used.
:e
working_cases([0, 0])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.86: 	working_cases([0, 0])
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `[0, 0]` is not an instance of type `Object`
//│ ║  l.86: 	working_cases([0, 0])
//│ ║        	              ^^^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.74: 	  if thing is
//│ ║        	     ^^^^^^^^
//│ ║  l.75: 	    Point(x, y) then x + y
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	    [x, y] then x + y
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.74: 	  if thing is
//│ ╙──      	     ^^^^^
//│ Int | error
//│ res
//│     = 0

:w
fun not_working(x) =
  if x is
    [a, b, c] then
      a + b + c
    else
      0
//│ ╔══[WARNING] this case is unreachable
//│ ║  l.122: 	      0
//│ ║         	      ^
//│ ╟── because it is subsumed by the branch
//│ ║  l.120: 	      a + b + c
//│ ╙──       	      ^^^^^^^^^
//│ fun not_working: {0: Int, 1: Int, 2: Int} -> Int

not_working([1, 2, 3])
//│ Int
//│ res
//│     = 6

:e
not_working([1, 2])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.157: 	not_working([1, 2])
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `{0: 1, 1: 2}` does not have field '2'
//│ ║  l.157: 	not_working([1, 2])
//│ ║         	            ^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.118: 	  if x is
//│ ║         	     ^^^^
//│ ║  l.119: 	    [a, b, c] then
//│ ║         	^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.118: 	  if x is
//│ ╙──       	     ^
//│ Int | error
//│ res
//│     = NaN
