:NewDefs

class Some[T](value: T)
module None
type Option[T] = Some[T] | None
class Pair[A, B](x: A, y: B)
//│ class Some[T](value: T)
//│ module None
//│ type Option[T] = None | Some[T]
//│ class Pair[A, B](x: A, y: B)

fun useless_negate_1(x) =
  if
    x is Some(y) and x is Some(z) then y + z
//│ fun useless_negate_1: Some[Int] -> Int

useless_negate_1(Some(1))
//│ Int
//│ res
//│     = 2
