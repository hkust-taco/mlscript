:NewDefs

class Point(x: Int, y: Int)
abstract class Shape: (Circle | Rectangle | LineSegment)
class Circle(center: Point, radius: Int) extends Shape
class Rectangle(position: Point, width: Int, height: Int) extends Shape
class LineSegment(start: Point, end: Point) extends Shape
//│ class Point(x: Int, y: Int)
//│ abstract class Shape: Circle | LineSegment | Rectangle
//│ class Circle(center: Point, radius: Int) extends Shape
//│ class Rectangle(position: Point, width: Int, height: Int) extends Shape
//│ class LineSegment(start: Point, end: Point) extends Shape

fun hidden(p) = if p is Circle then true else false
//│ fun hidden: Object -> Bool

fun this_is_sealed(x: Shape) =
  if x is
    Circle(_, _) then "Circle"
    Rectangle(_, _, _) then "Rectangle"
    LineSegment(_, _) then "LineSegment"
//│ fun this_is_sealed: (x: Shape) -> ("Circle" | "LineSegment" | "Rectangle")

// The error message here makes some sense right now.
:e
fun missing_a_case(x: Shape) =
  if x is
    Circle(_, _) then "Circle"
    Rectangle(_, _, _) then "Rectangle"
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.27: 	  if x is
//│ ║        	     ^^^^
//│ ║  l.28: 	    Circle(_, _) then "Circle"
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.29: 	    Rectangle(_, _, _) then "Rectangle"
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Circle | LineSegment | Rectangle` does not match type `Circle | Rectangle`
//│ ║  l.26: 	fun missing_a_case(x: Shape) =
//│ ║        	                      ^^^^^
//│ ╟── but it flows into reference with expected type `Circle | Rectangle`
//│ ║  l.27: 	  if x is
//│ ╙──      	     ^
//│ fun missing_a_case: (x: Shape) -> ("Circle" | "Rectangle")

fun missing_a_case(x: Shape) =
  if x is
    Circle(_, _) then "Circle"
    Rectangle(_, _, _) then "Rectangle"
    else x
//│ fun missing_a_case: (x: Shape) -> ("Circle" | "Rectangle" | LineSegment)

fun countLineSegments(x) =
  if x is
    Shape and hidden(x) then "1"
    Rectangle(_, _, _) then "2"
    LineSegment(_, _) then "3"
    Circle(_, _) then "4"
//│ fun countLineSegments: (Circle | LineSegment | Rectangle) -> ("1" | "2" | "3" | "4")
